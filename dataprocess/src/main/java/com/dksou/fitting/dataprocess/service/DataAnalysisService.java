/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dksou.fitting.dataprocess.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-10-31")
public class DataAnalysisService {

  public interface Iface {

    /**
     * 该方法可用于对数据条件筛选分析或分组统计分析
     * @param spStr：分隔符号
     * fdSum：字段数量
     * @param whereStr：筛选条件，如："\"f1='T100'\""，若无请写1=1
     * @param groupStr：分组条件，如："f1"，若无请写1
     * @param srcDirName：文件所在目录
     * @param dstDirName：数据所在目录
     * @param hostIp：要连接hiveserver主机的ip地址，
     * @param hostPort：hiveserver的端口，默认10000
     * @param hostName：要连接主机的用户名，
     * @param hostPassword：要连接主机的密码（要具备执行Hadoop的权限的用户）
     * 
     * @param spStr
     * @param fdSum
     * @param whereStr
     * @param groupStr
     * @param srcDirName
     * @param dstDirName
     * @param hostIp
     * @param hostPort
     * @param hostName
     * @param hostPassword
     */
    public void analyse(String spStr, int fdSum, String whereStr, String groupStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword) throws org.apache.thrift.TException;

    /**
     * 该方法可分析某两种物品同时出现的频率
     * @param spStr：分隔符号
     * @param fdSum：字段数量
     * @param pNum：要分析的物品所在字段
     * @param oNum：订单号等所在字段
     * @param whereStr：筛选条件，如："\"f1='T100'\""，若无请写1=1
     * @param srcDirName：文件所在目录
     * @param dstDirName：数据所在目录
     * @param hostIp：要连接hiveserver主机的ip地址，
     * @param hostPort：hiveserver的端口，默认10000
     * @param hostName：要连接主机的用户名，
     * 
     * @param spStr
     * @param fdSum
     * @param pNum
     * @param oNum
     * @param whereStr
     * @param srcDirName
     * @param dstDirName
     * @param hostIp
     * @param hostPort
     * @param hostName
     * @param hostPassword
     */
    public void apriori2(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword) throws org.apache.thrift.TException;

    /**
     * 该方法可分析某三种物品同时出现的频率
     * @param spStr：分隔符号
     * @param fdSum：字段数量
     * @param pNum：要分析的物品所在字段
     * @param oNum：订单号等所在字段
     * @param whereStr：筛选条件，如："\"f1='T100'\""，若无请写1=1
     * @param srcDirName：文件所在目录
     * @param dstDirName：数据所在目录
     * @param hostIp：要连接hiveserver主机的ip地址，
     * @param hostPort：hiveserver的端口，默认10000
     * @param hostName：要连接主机的用户名，
     * 
     * @param spStr
     * @param fdSum
     * @param pNum
     * @param oNum
     * @param whereStr
     * @param srcDirName
     * @param dstDirName
     * @param hostIp
     * @param hostPort
     * @param hostName
     * @param hostPassword
     */
    public void apriori3(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void analyse(String spStr, int fdSum, String whereStr, String groupStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void apriori2(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void apriori3(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void analyse(String spStr, int fdSum, String whereStr, String groupStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword) throws org.apache.thrift.TException
    {
      send_analyse(spStr, fdSum, whereStr, groupStr, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword);
      recv_analyse();
    }

    public void send_analyse(String spStr, int fdSum, String whereStr, String groupStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword) throws org.apache.thrift.TException
    {
      analyse_args args = new analyse_args();
      args.setSpStr(spStr);
      args.setFdSum(fdSum);
      args.setWhereStr(whereStr);
      args.setGroupStr(groupStr);
      args.setSrcDirName(srcDirName);
      args.setDstDirName(dstDirName);
      args.setHostIp(hostIp);
      args.setHostPort(hostPort);
      args.setHostName(hostName);
      args.setHostPassword(hostPassword);
      sendBase("analyse", args);
    }

    public void recv_analyse() throws org.apache.thrift.TException
    {
      analyse_result result = new analyse_result();
      receiveBase(result, "analyse");
      return;
    }

    public void apriori2(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword) throws org.apache.thrift.TException
    {
      send_apriori2(spStr, fdSum, pNum, oNum, whereStr, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword);
      recv_apriori2();
    }

    public void send_apriori2(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword) throws org.apache.thrift.TException
    {
      apriori2_args args = new apriori2_args();
      args.setSpStr(spStr);
      args.setFdSum(fdSum);
      args.setPNum(pNum);
      args.setONum(oNum);
      args.setWhereStr(whereStr);
      args.setSrcDirName(srcDirName);
      args.setDstDirName(dstDirName);
      args.setHostIp(hostIp);
      args.setHostPort(hostPort);
      args.setHostName(hostName);
      args.setHostPassword(hostPassword);
      sendBase("apriori2", args);
    }

    public void recv_apriori2() throws org.apache.thrift.TException
    {
      apriori2_result result = new apriori2_result();
      receiveBase(result, "apriori2");
      return;
    }

    public void apriori3(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword) throws org.apache.thrift.TException
    {
      send_apriori3(spStr, fdSum, pNum, oNum, whereStr, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword);
      recv_apriori3();
    }

    public void send_apriori3(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword) throws org.apache.thrift.TException
    {
      apriori3_args args = new apriori3_args();
      args.setSpStr(spStr);
      args.setFdSum(fdSum);
      args.setPNum(pNum);
      args.setONum(oNum);
      args.setWhereStr(whereStr);
      args.setSrcDirName(srcDirName);
      args.setDstDirName(dstDirName);
      args.setHostIp(hostIp);
      args.setHostPort(hostPort);
      args.setHostName(hostName);
      args.setHostPassword(hostPassword);
      sendBase("apriori3", args);
    }

    public void recv_apriori3() throws org.apache.thrift.TException
    {
      apriori3_result result = new apriori3_result();
      receiveBase(result, "apriori3");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void analyse(String spStr, int fdSum, String whereStr, String groupStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      analyse_call method_call = new analyse_call(spStr, fdSum, whereStr, groupStr, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class analyse_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String spStr;
      private int fdSum;
      private String whereStr;
      private String groupStr;
      private String srcDirName;
      private String dstDirName;
      private String hostIp;
      private String hostPort;
      private String hostName;
      private String hostPassword;
      public analyse_call(String spStr, int fdSum, String whereStr, String groupStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spStr = spStr;
        this.fdSum = fdSum;
        this.whereStr = whereStr;
        this.groupStr = groupStr;
        this.srcDirName = srcDirName;
        this.dstDirName = dstDirName;
        this.hostIp = hostIp;
        this.hostPort = hostPort;
        this.hostName = hostName;
        this.hostPassword = hostPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("analyse", org.apache.thrift.protocol.TMessageType.CALL, 0));
        analyse_args args = new analyse_args();
        args.setSpStr(spStr);
        args.setFdSum(fdSum);
        args.setWhereStr(whereStr);
        args.setGroupStr(groupStr);
        args.setSrcDirName(srcDirName);
        args.setDstDirName(dstDirName);
        args.setHostIp(hostIp);
        args.setHostPort(hostPort);
        args.setHostName(hostName);
        args.setHostPassword(hostPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void apriori2(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      apriori2_call method_call = new apriori2_call(spStr, fdSum, pNum, oNum, whereStr, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class apriori2_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String spStr;
      private int fdSum;
      private String pNum;
      private String oNum;
      private String whereStr;
      private String srcDirName;
      private String dstDirName;
      private String hostIp;
      private String hostPort;
      private String hostName;
      private String hostPassword;
      public apriori2_call(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spStr = spStr;
        this.fdSum = fdSum;
        this.pNum = pNum;
        this.oNum = oNum;
        this.whereStr = whereStr;
        this.srcDirName = srcDirName;
        this.dstDirName = dstDirName;
        this.hostIp = hostIp;
        this.hostPort = hostPort;
        this.hostName = hostName;
        this.hostPassword = hostPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("apriori2", org.apache.thrift.protocol.TMessageType.CALL, 0));
        apriori2_args args = new apriori2_args();
        args.setSpStr(spStr);
        args.setFdSum(fdSum);
        args.setPNum(pNum);
        args.setONum(oNum);
        args.setWhereStr(whereStr);
        args.setSrcDirName(srcDirName);
        args.setDstDirName(dstDirName);
        args.setHostIp(hostIp);
        args.setHostPort(hostPort);
        args.setHostName(hostName);
        args.setHostPassword(hostPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void apriori3(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      apriori3_call method_call = new apriori3_call(spStr, fdSum, pNum, oNum, whereStr, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class apriori3_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String spStr;
      private int fdSum;
      private String pNum;
      private String oNum;
      private String whereStr;
      private String srcDirName;
      private String dstDirName;
      private String hostIp;
      private String hostPort;
      private String hostName;
      private String hostPassword;
      public apriori3_call(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spStr = spStr;
        this.fdSum = fdSum;
        this.pNum = pNum;
        this.oNum = oNum;
        this.whereStr = whereStr;
        this.srcDirName = srcDirName;
        this.dstDirName = dstDirName;
        this.hostIp = hostIp;
        this.hostPort = hostPort;
        this.hostName = hostName;
        this.hostPassword = hostPassword;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("apriori3", org.apache.thrift.protocol.TMessageType.CALL, 0));
        apriori3_args args = new apriori3_args();
        args.setSpStr(spStr);
        args.setFdSum(fdSum);
        args.setPNum(pNum);
        args.setONum(oNum);
        args.setWhereStr(whereStr);
        args.setSrcDirName(srcDirName);
        args.setDstDirName(dstDirName);
        args.setHostIp(hostIp);
        args.setHostPort(hostPort);
        args.setHostName(hostName);
        args.setHostPassword(hostPassword);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("analyse", new analyse());
      processMap.put("apriori2", new apriori2());
      processMap.put("apriori3", new apriori3());
      return processMap;
    }

    public static class analyse<I extends Iface> extends org.apache.thrift.ProcessFunction<I, analyse_args> {
      public analyse() {
        super("analyse");
      }

      public analyse_args getEmptyArgsInstance() {
        return new analyse_args();
      }

      protected boolean isOneway() {
        return false;
      }

      
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public analyse_result getResult(I iface, analyse_args args) throws org.apache.thrift.TException {
        analyse_result result = new analyse_result();
        iface.analyse(args.spStr, args.fdSum, args.whereStr, args.groupStr, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword);
        return result;
      }
    }

    public static class apriori2<I extends Iface> extends org.apache.thrift.ProcessFunction<I, apriori2_args> {
      public apriori2() {
        super("apriori2");
      }

      public apriori2_args getEmptyArgsInstance() {
        return new apriori2_args();
      }

      protected boolean isOneway() {
        return false;
      }

      
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public apriori2_result getResult(I iface, apriori2_args args) throws org.apache.thrift.TException {
        apriori2_result result = new apriori2_result();
        iface.apriori2(args.spStr, args.fdSum, args.pNum, args.oNum, args.whereStr, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword);
        return result;
      }
    }

    public static class apriori3<I extends Iface> extends org.apache.thrift.ProcessFunction<I, apriori3_args> {
      public apriori3() {
        super("apriori3");
      }

      public apriori3_args getEmptyArgsInstance() {
        return new apriori3_args();
      }

      protected boolean isOneway() {
        return false;
      }

      
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public apriori3_result getResult(I iface, apriori3_args args) throws org.apache.thrift.TException {
        apriori3_result result = new apriori3_result();
        iface.apriori3(args.spStr, args.fdSum, args.pNum, args.oNum, args.whereStr, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("analyse", new analyse());
      processMap.put("apriori2", new apriori2());
      processMap.put("apriori3", new apriori3());
      return processMap;
    }

    public static class analyse<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, analyse_args, Void> {
      public analyse() {
        super("analyse");
      }

      public analyse_args getEmptyArgsInstance() {
        return new analyse_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            analyse_result result = new analyse_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            analyse_result result = new analyse_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, analyse_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.analyse(args.spStr, args.fdSum, args.whereStr, args.groupStr, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword,resultHandler);
      }
    }

    public static class apriori2<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, apriori2_args, Void> {
      public apriori2() {
        super("apriori2");
      }

      public apriori2_args getEmptyArgsInstance() {
        return new apriori2_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            apriori2_result result = new apriori2_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            apriori2_result result = new apriori2_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, apriori2_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.apriori2(args.spStr, args.fdSum, args.pNum, args.oNum, args.whereStr, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword,resultHandler);
      }
    }

    public static class apriori3<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, apriori3_args, Void> {
      public apriori3() {
        super("apriori3");
      }

      public apriori3_args getEmptyArgsInstance() {
        return new apriori3_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            apriori3_result result = new apriori3_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            apriori3_result result = new apriori3_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, apriori3_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.apriori3(args.spStr, args.fdSum, args.pNum, args.oNum, args.whereStr, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword,resultHandler);
      }
    }

  }

  public static class analyse_args implements org.apache.thrift.TBase<analyse_args, analyse_args._Fields>, java.io.Serializable, Cloneable, Comparable<analyse_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("analyse_args");

    private static final org.apache.thrift.protocol.TField SP_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("spStr", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FD_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fdSum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField WHERE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("whereStr", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField GROUP_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("groupStr", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SRC_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("srcDirName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField DST_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dstDirName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField HOST_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPort", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField HOST_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPassword", org.apache.thrift.protocol.TType.STRING, (short)10);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new analyse_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new analyse_argsTupleSchemeFactory();

    public String spStr; // required
    public int fdSum; // required
    public String whereStr; // required
    public String groupStr; // required
    public String srcDirName; // required
    public String dstDirName; // required
    public String hostIp; // required
    public String hostPort; // required
    public String hostName; // required
    public String hostPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SP_STR((short)1, "spStr"),
      FD_SUM((short)2, "fdSum"),
      WHERE_STR((short)3, "whereStr"),
      GROUP_STR((short)4, "groupStr"),
      SRC_DIR_NAME((short)5, "srcDirName"),
      DST_DIR_NAME((short)6, "dstDirName"),
      HOST_IP((short)7, "hostIp"),
      HOST_PORT((short)8, "hostPort"),
      HOST_NAME((short)9, "hostName"),
      HOST_PASSWORD((short)10, "hostPassword");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SP_STR
            return SP_STR;
          case 2: // FD_SUM
            return FD_SUM;
          case 3: // WHERE_STR
            return WHERE_STR;
          case 4: // GROUP_STR
            return GROUP_STR;
          case 5: // SRC_DIR_NAME
            return SRC_DIR_NAME;
          case 6: // DST_DIR_NAME
            return DST_DIR_NAME;
          case 7: // HOST_IP
            return HOST_IP;
          case 8: // HOST_PORT
            return HOST_PORT;
          case 9: // HOST_NAME
            return HOST_NAME;
          case 10: // HOST_PASSWORD
            return HOST_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FDSUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SP_STR, new org.apache.thrift.meta_data.FieldMetaData("spStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FD_SUM, new org.apache.thrift.meta_data.FieldMetaData("fdSum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.WHERE_STR, new org.apache.thrift.meta_data.FieldMetaData("whereStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUP_STR, new org.apache.thrift.meta_data.FieldMetaData("groupStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SRC_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("srcDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("dstDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PORT, new org.apache.thrift.meta_data.FieldMetaData("hostPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("hostPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(analyse_args.class, metaDataMap);
    }

    public analyse_args() {
    }

    public analyse_args(
      String spStr,
      int fdSum,
      String whereStr,
      String groupStr,
      String srcDirName,
      String dstDirName,
      String hostIp,
      String hostPort,
      String hostName,
      String hostPassword)
    {
      this();
      this.spStr = spStr;
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      this.whereStr = whereStr;
      this.groupStr = groupStr;
      this.srcDirName = srcDirName;
      this.dstDirName = dstDirName;
      this.hostIp = hostIp;
      this.hostPort = hostPort;
      this.hostName = hostName;
      this.hostPassword = hostPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public analyse_args(analyse_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSpStr()) {
        this.spStr = other.spStr;
      }
      this.fdSum = other.fdSum;
      if (other.isSetWhereStr()) {
        this.whereStr = other.whereStr;
      }
      if (other.isSetGroupStr()) {
        this.groupStr = other.groupStr;
      }
      if (other.isSetSrcDirName()) {
        this.srcDirName = other.srcDirName;
      }
      if (other.isSetDstDirName()) {
        this.dstDirName = other.dstDirName;
      }
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetHostPort()) {
        this.hostPort = other.hostPort;
      }
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
      if (other.isSetHostPassword()) {
        this.hostPassword = other.hostPassword;
      }
    }

    public analyse_args deepCopy() {
      return new analyse_args(this);
    }

    
    public void clear() {
      this.spStr = null;
      setFdSumIsSet(false);
      this.fdSum = 0;
      this.whereStr = null;
      this.groupStr = null;
      this.srcDirName = null;
      this.dstDirName = null;
      this.hostIp = null;
      this.hostPort = null;
      this.hostName = null;
      this.hostPassword = null;
    }

    public String getSpStr() {
      return this.spStr;
    }

    public analyse_args setSpStr(String spStr) {
      this.spStr = spStr;
      return this;
    }

    public void unsetSpStr() {
      this.spStr = null;
    }

    /** Returns true if field spStr is set (has been assigned a value) and false otherwise */
    public boolean isSetSpStr() {
      return this.spStr != null;
    }

    public void setSpStrIsSet(boolean value) {
      if (!value) {
        this.spStr = null;
      }
    }

    public int getFdSum() {
      return this.fdSum;
    }

    public analyse_args setFdSum(int fdSum) {
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      return this;
    }

    public void unsetFdSum() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    /** Returns true if field fdSum is set (has been assigned a value) and false otherwise */
    public boolean isSetFdSum() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    public void setFdSumIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FDSUM_ISSET_ID, value);
    }

    public String getWhereStr() {
      return this.whereStr;
    }

    public analyse_args setWhereStr(String whereStr) {
      this.whereStr = whereStr;
      return this;
    }

    public void unsetWhereStr() {
      this.whereStr = null;
    }

    /** Returns true if field whereStr is set (has been assigned a value) and false otherwise */
    public boolean isSetWhereStr() {
      return this.whereStr != null;
    }

    public void setWhereStrIsSet(boolean value) {
      if (!value) {
        this.whereStr = null;
      }
    }

    public String getGroupStr() {
      return this.groupStr;
    }

    public analyse_args setGroupStr(String groupStr) {
      this.groupStr = groupStr;
      return this;
    }

    public void unsetGroupStr() {
      this.groupStr = null;
    }

    /** Returns true if field groupStr is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupStr() {
      return this.groupStr != null;
    }

    public void setGroupStrIsSet(boolean value) {
      if (!value) {
        this.groupStr = null;
      }
    }

    public String getSrcDirName() {
      return this.srcDirName;
    }

    public analyse_args setSrcDirName(String srcDirName) {
      this.srcDirName = srcDirName;
      return this;
    }

    public void unsetSrcDirName() {
      this.srcDirName = null;
    }

    /** Returns true if field srcDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcDirName() {
      return this.srcDirName != null;
    }

    public void setSrcDirNameIsSet(boolean value) {
      if (!value) {
        this.srcDirName = null;
      }
    }

    public String getDstDirName() {
      return this.dstDirName;
    }

    public analyse_args setDstDirName(String dstDirName) {
      this.dstDirName = dstDirName;
      return this;
    }

    public void unsetDstDirName() {
      this.dstDirName = null;
    }

    /** Returns true if field dstDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetDstDirName() {
      return this.dstDirName != null;
    }

    public void setDstDirNameIsSet(boolean value) {
      if (!value) {
        this.dstDirName = null;
      }
    }

    public String getHostIp() {
      return this.hostIp;
    }

    public analyse_args setHostIp(String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public String getHostPort() {
      return this.hostPort;
    }

    public analyse_args setHostPort(String hostPort) {
      this.hostPort = hostPort;
      return this;
    }

    public void unsetHostPort() {
      this.hostPort = null;
    }

    /** Returns true if field hostPort is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPort() {
      return this.hostPort != null;
    }

    public void setHostPortIsSet(boolean value) {
      if (!value) {
        this.hostPort = null;
      }
    }

    public String getHostName() {
      return this.hostName;
    }

    public analyse_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public String getHostPassword() {
      return this.hostPassword;
    }

    public analyse_args setHostPassword(String hostPassword) {
      this.hostPassword = hostPassword;
      return this;
    }

    public void unsetHostPassword() {
      this.hostPassword = null;
    }

    /** Returns true if field hostPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPassword() {
      return this.hostPassword != null;
    }

    public void setHostPasswordIsSet(boolean value) {
      if (!value) {
        this.hostPassword = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SP_STR:
        if (value == null) {
          unsetSpStr();
        } else {
          setSpStr((String)value);
        }
        break;

      case FD_SUM:
        if (value == null) {
          unsetFdSum();
        } else {
          setFdSum((Integer)value);
        }
        break;

      case WHERE_STR:
        if (value == null) {
          unsetWhereStr();
        } else {
          setWhereStr((String)value);
        }
        break;

      case GROUP_STR:
        if (value == null) {
          unsetGroupStr();
        } else {
          setGroupStr((String)value);
        }
        break;

      case SRC_DIR_NAME:
        if (value == null) {
          unsetSrcDirName();
        } else {
          setSrcDirName((String)value);
        }
        break;

      case DST_DIR_NAME:
        if (value == null) {
          unsetDstDirName();
        } else {
          setDstDirName((String)value);
        }
        break;

      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((String)value);
        }
        break;

      case HOST_PORT:
        if (value == null) {
          unsetHostPort();
        } else {
          setHostPort((String)value);
        }
        break;

      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      case HOST_PASSWORD:
        if (value == null) {
          unsetHostPassword();
        } else {
          setHostPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SP_STR:
        return getSpStr();

      case FD_SUM:
        return getFdSum();

      case WHERE_STR:
        return getWhereStr();

      case GROUP_STR:
        return getGroupStr();

      case SRC_DIR_NAME:
        return getSrcDirName();

      case DST_DIR_NAME:
        return getDstDirName();

      case HOST_IP:
        return getHostIp();

      case HOST_PORT:
        return getHostPort();

      case HOST_NAME:
        return getHostName();

      case HOST_PASSWORD:
        return getHostPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SP_STR:
        return isSetSpStr();
      case FD_SUM:
        return isSetFdSum();
      case WHERE_STR:
        return isSetWhereStr();
      case GROUP_STR:
        return isSetGroupStr();
      case SRC_DIR_NAME:
        return isSetSrcDirName();
      case DST_DIR_NAME:
        return isSetDstDirName();
      case HOST_IP:
        return isSetHostIp();
      case HOST_PORT:
        return isSetHostPort();
      case HOST_NAME:
        return isSetHostName();
      case HOST_PASSWORD:
        return isSetHostPassword();
      }
      throw new IllegalStateException();
    }

    
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof analyse_args)
        return this.equals((analyse_args)that);
      return false;
    }

    public boolean equals(analyse_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_spStr = true && this.isSetSpStr();
      boolean that_present_spStr = true && that.isSetSpStr();
      if (this_present_spStr || that_present_spStr) {
        if (!(this_present_spStr && that_present_spStr))
          return false;
        if (!this.spStr.equals(that.spStr))
          return false;
      }

      boolean this_present_fdSum = true;
      boolean that_present_fdSum = true;
      if (this_present_fdSum || that_present_fdSum) {
        if (!(this_present_fdSum && that_present_fdSum))
          return false;
        if (this.fdSum != that.fdSum)
          return false;
      }

      boolean this_present_whereStr = true && this.isSetWhereStr();
      boolean that_present_whereStr = true && that.isSetWhereStr();
      if (this_present_whereStr || that_present_whereStr) {
        if (!(this_present_whereStr && that_present_whereStr))
          return false;
        if (!this.whereStr.equals(that.whereStr))
          return false;
      }

      boolean this_present_groupStr = true && this.isSetGroupStr();
      boolean that_present_groupStr = true && that.isSetGroupStr();
      if (this_present_groupStr || that_present_groupStr) {
        if (!(this_present_groupStr && that_present_groupStr))
          return false;
        if (!this.groupStr.equals(that.groupStr))
          return false;
      }

      boolean this_present_srcDirName = true && this.isSetSrcDirName();
      boolean that_present_srcDirName = true && that.isSetSrcDirName();
      if (this_present_srcDirName || that_present_srcDirName) {
        if (!(this_present_srcDirName && that_present_srcDirName))
          return false;
        if (!this.srcDirName.equals(that.srcDirName))
          return false;
      }

      boolean this_present_dstDirName = true && this.isSetDstDirName();
      boolean that_present_dstDirName = true && that.isSetDstDirName();
      if (this_present_dstDirName || that_present_dstDirName) {
        if (!(this_present_dstDirName && that_present_dstDirName))
          return false;
        if (!this.dstDirName.equals(that.dstDirName))
          return false;
      }

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_hostPort = true && this.isSetHostPort();
      boolean that_present_hostPort = true && that.isSetHostPort();
      if (this_present_hostPort || that_present_hostPort) {
        if (!(this_present_hostPort && that_present_hostPort))
          return false;
        if (!this.hostPort.equals(that.hostPort))
          return false;
      }

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      boolean this_present_hostPassword = true && this.isSetHostPassword();
      boolean that_present_hostPassword = true && that.isSetHostPassword();
      if (this_present_hostPassword || that_present_hostPassword) {
        if (!(this_present_hostPassword && that_present_hostPassword))
          return false;
        if (!this.hostPassword.equals(that.hostPassword))
          return false;
      }

      return true;
    }

    
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSpStr()) ? 131071 : 524287);
      if (isSetSpStr())
        hashCode = hashCode * 8191 + spStr.hashCode();

      hashCode = hashCode * 8191 + fdSum;

      hashCode = hashCode * 8191 + ((isSetWhereStr()) ? 131071 : 524287);
      if (isSetWhereStr())
        hashCode = hashCode * 8191 + whereStr.hashCode();

      hashCode = hashCode * 8191 + ((isSetGroupStr()) ? 131071 : 524287);
      if (isSetGroupStr())
        hashCode = hashCode * 8191 + groupStr.hashCode();

      hashCode = hashCode * 8191 + ((isSetSrcDirName()) ? 131071 : 524287);
      if (isSetSrcDirName())
        hashCode = hashCode * 8191 + srcDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDstDirName()) ? 131071 : 524287);
      if (isSetDstDirName())
        hashCode = hashCode * 8191 + dstDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPort()) ? 131071 : 524287);
      if (isSetHostPort())
        hashCode = hashCode * 8191 + hostPort.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
      if (isSetHostName())
        hashCode = hashCode * 8191 + hostName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPassword()) ? 131071 : 524287);
      if (isSetHostPassword())
        hashCode = hashCode * 8191 + hostPassword.hashCode();

      return hashCode;
    }

    
    public int compareTo(analyse_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpStr()).compareTo(other.isSetSpStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spStr, other.spStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdSum()).compareTo(other.isSetFdSum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdSum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdSum, other.fdSum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWhereStr()).compareTo(other.isSetWhereStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhereStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whereStr, other.whereStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupStr()).compareTo(other.isSetGroupStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupStr, other.groupStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrcDirName()).compareTo(other.isSetSrcDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcDirName, other.srcDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDstDirName()).compareTo(other.isSetDstDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstDirName, other.dstDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPort()).compareTo(other.isSetHostPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPort, other.hostPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPassword()).compareTo(other.isSetHostPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPassword, other.hostPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    
    public String toString() {
      StringBuilder sb = new StringBuilder("analyse_args(");
      boolean first = true;

      sb.append("spStr:");
      if (this.spStr == null) {
        sb.append("null");
      } else {
        sb.append(this.spStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdSum:");
      sb.append(this.fdSum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("whereStr:");
      if (this.whereStr == null) {
        sb.append("null");
      } else {
        sb.append(this.whereStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupStr:");
      if (this.groupStr == null) {
        sb.append("null");
      } else {
        sb.append(this.groupStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcDirName:");
      if (this.srcDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.srcDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstDirName:");
      if (this.dstDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.dstDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPort:");
      if (this.hostPort == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPassword:");
      if (this.hostPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class analyse_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public analyse_argsStandardScheme getScheme() {
        return new analyse_argsStandardScheme();
      }
    }

    private static class analyse_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<analyse_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, analyse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SP_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.spStr = iprot.readString();
                struct.setSpStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FD_SUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fdSum = iprot.readI32();
                struct.setFdSumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WHERE_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.whereStr = iprot.readString();
                struct.setWhereStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GROUP_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupStr = iprot.readString();
                struct.setGroupStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SRC_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcDirName = iprot.readString();
                struct.setSrcDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DST_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dstDirName = iprot.readString();
                struct.setDstDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // HOST_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPort = iprot.readString();
                struct.setHostPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // HOST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // HOST_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPassword = iprot.readString();
                struct.setHostPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, analyse_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spStr != null) {
          oprot.writeFieldBegin(SP_STR_FIELD_DESC);
          oprot.writeString(struct.spStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FD_SUM_FIELD_DESC);
        oprot.writeI32(struct.fdSum);
        oprot.writeFieldEnd();
        if (struct.whereStr != null) {
          oprot.writeFieldBegin(WHERE_STR_FIELD_DESC);
          oprot.writeString(struct.whereStr);
          oprot.writeFieldEnd();
        }
        if (struct.groupStr != null) {
          oprot.writeFieldBegin(GROUP_STR_FIELD_DESC);
          oprot.writeString(struct.groupStr);
          oprot.writeFieldEnd();
        }
        if (struct.srcDirName != null) {
          oprot.writeFieldBegin(SRC_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.srcDirName);
          oprot.writeFieldEnd();
        }
        if (struct.dstDirName != null) {
          oprot.writeFieldBegin(DST_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.dstDirName);
          oprot.writeFieldEnd();
        }
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.hostPort != null) {
          oprot.writeFieldBegin(HOST_PORT_FIELD_DESC);
          oprot.writeString(struct.hostPort);
          oprot.writeFieldEnd();
        }
        if (struct.hostName != null) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
        if (struct.hostPassword != null) {
          oprot.writeFieldBegin(HOST_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.hostPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class analyse_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public analyse_argsTupleScheme getScheme() {
        return new analyse_argsTupleScheme();
      }
    }

    private static class analyse_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<analyse_args> {

      
      public void write(org.apache.thrift.protocol.TProtocol prot, analyse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSpStr()) {
          optionals.set(0);
        }
        if (struct.isSetFdSum()) {
          optionals.set(1);
        }
        if (struct.isSetWhereStr()) {
          optionals.set(2);
        }
        if (struct.isSetGroupStr()) {
          optionals.set(3);
        }
        if (struct.isSetSrcDirName()) {
          optionals.set(4);
        }
        if (struct.isSetDstDirName()) {
          optionals.set(5);
        }
        if (struct.isSetHostIp()) {
          optionals.set(6);
        }
        if (struct.isSetHostPort()) {
          optionals.set(7);
        }
        if (struct.isSetHostName()) {
          optionals.set(8);
        }
        if (struct.isSetHostPassword()) {
          optionals.set(9);
        }
        oprot.writeBitSet(optionals, 10);
        if (struct.isSetSpStr()) {
          oprot.writeString(struct.spStr);
        }
        if (struct.isSetFdSum()) {
          oprot.writeI32(struct.fdSum);
        }
        if (struct.isSetWhereStr()) {
          oprot.writeString(struct.whereStr);
        }
        if (struct.isSetGroupStr()) {
          oprot.writeString(struct.groupStr);
        }
        if (struct.isSetSrcDirName()) {
          oprot.writeString(struct.srcDirName);
        }
        if (struct.isSetDstDirName()) {
          oprot.writeString(struct.dstDirName);
        }
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetHostPort()) {
          oprot.writeString(struct.hostPort);
        }
        if (struct.isSetHostName()) {
          oprot.writeString(struct.hostName);
        }
        if (struct.isSetHostPassword()) {
          oprot.writeString(struct.hostPassword);
        }
      }

      
      public void read(org.apache.thrift.protocol.TProtocol prot, analyse_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(10);
        if (incoming.get(0)) {
          struct.spStr = iprot.readString();
          struct.setSpStrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdSum = iprot.readI32();
          struct.setFdSumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.whereStr = iprot.readString();
          struct.setWhereStrIsSet(true);
        }
        if (incoming.get(3)) {
          struct.groupStr = iprot.readString();
          struct.setGroupStrIsSet(true);
        }
        if (incoming.get(4)) {
          struct.srcDirName = iprot.readString();
          struct.setSrcDirNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.dstDirName = iprot.readString();
          struct.setDstDirNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(7)) {
          struct.hostPort = iprot.readString();
          struct.setHostPortIsSet(true);
        }
        if (incoming.get(8)) {
          struct.hostName = iprot.readString();
          struct.setHostNameIsSet(true);
        }
        if (incoming.get(9)) {
          struct.hostPassword = iprot.readString();
          struct.setHostPasswordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class analyse_result implements org.apache.thrift.TBase<analyse_result, analyse_result._Fields>, java.io.Serializable, Cloneable, Comparable<analyse_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("analyse_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new analyse_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new analyse_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(analyse_result.class, metaDataMap);
    }

    public analyse_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public analyse_result(analyse_result other) {
    }

    public analyse_result deepCopy() {
      return new analyse_result(this);
    }

    
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof analyse_result)
        return this.equals((analyse_result)that);
      return false;
    }

    public boolean equals(analyse_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    
    public int compareTo(analyse_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    
    public String toString() {
      StringBuilder sb = new StringBuilder("analyse_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class analyse_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public analyse_resultStandardScheme getScheme() {
        return new analyse_resultStandardScheme();
      }
    }

    private static class analyse_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<analyse_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, analyse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, analyse_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class analyse_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public analyse_resultTupleScheme getScheme() {
        return new analyse_resultTupleScheme();
      }
    }

    private static class analyse_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<analyse_result> {

      
      public void write(org.apache.thrift.protocol.TProtocol prot, analyse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      
      public void read(org.apache.thrift.protocol.TProtocol prot, analyse_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class apriori2_args implements org.apache.thrift.TBase<apriori2_args, apriori2_args._Fields>, java.io.Serializable, Cloneable, Comparable<apriori2_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("apriori2_args");

    private static final org.apache.thrift.protocol.TField SP_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("spStr", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FD_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fdSum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField P_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pNum", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField O_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("oNum", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField WHERE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("whereStr", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField SRC_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("srcDirName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField DST_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dstDirName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField HOST_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPort", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField HOST_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPassword", org.apache.thrift.protocol.TType.STRING, (short)11);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new apriori2_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new apriori2_argsTupleSchemeFactory();

    public String spStr; // required
    public int fdSum; // required
    public String pNum; // required
    public String oNum; // required
    public String whereStr; // required
    public String srcDirName; // required
    public String dstDirName; // required
    public String hostIp; // required
    public String hostPort; // required
    public String hostName; // required
    public String hostPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SP_STR((short)1, "spStr"),
      FD_SUM((short)2, "fdSum"),
      P_NUM((short)3, "pNum"),
      O_NUM((short)4, "oNum"),
      WHERE_STR((short)5, "whereStr"),
      SRC_DIR_NAME((short)6, "srcDirName"),
      DST_DIR_NAME((short)7, "dstDirName"),
      HOST_IP((short)8, "hostIp"),
      HOST_PORT((short)9, "hostPort"),
      HOST_NAME((short)10, "hostName"),
      HOST_PASSWORD((short)11, "hostPassword");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SP_STR
            return SP_STR;
          case 2: // FD_SUM
            return FD_SUM;
          case 3: // P_NUM
            return P_NUM;
          case 4: // O_NUM
            return O_NUM;
          case 5: // WHERE_STR
            return WHERE_STR;
          case 6: // SRC_DIR_NAME
            return SRC_DIR_NAME;
          case 7: // DST_DIR_NAME
            return DST_DIR_NAME;
          case 8: // HOST_IP
            return HOST_IP;
          case 9: // HOST_PORT
            return HOST_PORT;
          case 10: // HOST_NAME
            return HOST_NAME;
          case 11: // HOST_PASSWORD
            return HOST_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FDSUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SP_STR, new org.apache.thrift.meta_data.FieldMetaData("spStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FD_SUM, new org.apache.thrift.meta_data.FieldMetaData("fdSum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.P_NUM, new org.apache.thrift.meta_data.FieldMetaData("pNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.O_NUM, new org.apache.thrift.meta_data.FieldMetaData("oNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WHERE_STR, new org.apache.thrift.meta_data.FieldMetaData("whereStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SRC_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("srcDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("dstDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PORT, new org.apache.thrift.meta_data.FieldMetaData("hostPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("hostPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(apriori2_args.class, metaDataMap);
    }

    public apriori2_args() {
    }

    public apriori2_args(
      String spStr,
      int fdSum,
      String pNum,
      String oNum,
      String whereStr,
      String srcDirName,
      String dstDirName,
      String hostIp,
      String hostPort,
      String hostName,
      String hostPassword)
    {
      this();
      this.spStr = spStr;
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      this.pNum = pNum;
      this.oNum = oNum;
      this.whereStr = whereStr;
      this.srcDirName = srcDirName;
      this.dstDirName = dstDirName;
      this.hostIp = hostIp;
      this.hostPort = hostPort;
      this.hostName = hostName;
      this.hostPassword = hostPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public apriori2_args(apriori2_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSpStr()) {
        this.spStr = other.spStr;
      }
      this.fdSum = other.fdSum;
      if (other.isSetPNum()) {
        this.pNum = other.pNum;
      }
      if (other.isSetONum()) {
        this.oNum = other.oNum;
      }
      if (other.isSetWhereStr()) {
        this.whereStr = other.whereStr;
      }
      if (other.isSetSrcDirName()) {
        this.srcDirName = other.srcDirName;
      }
      if (other.isSetDstDirName()) {
        this.dstDirName = other.dstDirName;
      }
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetHostPort()) {
        this.hostPort = other.hostPort;
      }
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
      if (other.isSetHostPassword()) {
        this.hostPassword = other.hostPassword;
      }
    }

    public apriori2_args deepCopy() {
      return new apriori2_args(this);
    }

    
    public void clear() {
      this.spStr = null;
      setFdSumIsSet(false);
      this.fdSum = 0;
      this.pNum = null;
      this.oNum = null;
      this.whereStr = null;
      this.srcDirName = null;
      this.dstDirName = null;
      this.hostIp = null;
      this.hostPort = null;
      this.hostName = null;
      this.hostPassword = null;
    }

    public String getSpStr() {
      return this.spStr;
    }

    public apriori2_args setSpStr(String spStr) {
      this.spStr = spStr;
      return this;
    }

    public void unsetSpStr() {
      this.spStr = null;
    }

    /** Returns true if field spStr is set (has been assigned a value) and false otherwise */
    public boolean isSetSpStr() {
      return this.spStr != null;
    }

    public void setSpStrIsSet(boolean value) {
      if (!value) {
        this.spStr = null;
      }
    }

    public int getFdSum() {
      return this.fdSum;
    }

    public apriori2_args setFdSum(int fdSum) {
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      return this;
    }

    public void unsetFdSum() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    /** Returns true if field fdSum is set (has been assigned a value) and false otherwise */
    public boolean isSetFdSum() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    public void setFdSumIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FDSUM_ISSET_ID, value);
    }

    public String getPNum() {
      return this.pNum;
    }

    public apriori2_args setPNum(String pNum) {
      this.pNum = pNum;
      return this;
    }

    public void unsetPNum() {
      this.pNum = null;
    }

    /** Returns true if field pNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPNum() {
      return this.pNum != null;
    }

    public void setPNumIsSet(boolean value) {
      if (!value) {
        this.pNum = null;
      }
    }

    public String getONum() {
      return this.oNum;
    }

    public apriori2_args setONum(String oNum) {
      this.oNum = oNum;
      return this;
    }

    public void unsetONum() {
      this.oNum = null;
    }

    /** Returns true if field oNum is set (has been assigned a value) and false otherwise */
    public boolean isSetONum() {
      return this.oNum != null;
    }

    public void setONumIsSet(boolean value) {
      if (!value) {
        this.oNum = null;
      }
    }

    public String getWhereStr() {
      return this.whereStr;
    }

    public apriori2_args setWhereStr(String whereStr) {
      this.whereStr = whereStr;
      return this;
    }

    public void unsetWhereStr() {
      this.whereStr = null;
    }

    /** Returns true if field whereStr is set (has been assigned a value) and false otherwise */
    public boolean isSetWhereStr() {
      return this.whereStr != null;
    }

    public void setWhereStrIsSet(boolean value) {
      if (!value) {
        this.whereStr = null;
      }
    }

    public String getSrcDirName() {
      return this.srcDirName;
    }

    public apriori2_args setSrcDirName(String srcDirName) {
      this.srcDirName = srcDirName;
      return this;
    }

    public void unsetSrcDirName() {
      this.srcDirName = null;
    }

    /** Returns true if field srcDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcDirName() {
      return this.srcDirName != null;
    }

    public void setSrcDirNameIsSet(boolean value) {
      if (!value) {
        this.srcDirName = null;
      }
    }

    public String getDstDirName() {
      return this.dstDirName;
    }

    public apriori2_args setDstDirName(String dstDirName) {
      this.dstDirName = dstDirName;
      return this;
    }

    public void unsetDstDirName() {
      this.dstDirName = null;
    }

    /** Returns true if field dstDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetDstDirName() {
      return this.dstDirName != null;
    }

    public void setDstDirNameIsSet(boolean value) {
      if (!value) {
        this.dstDirName = null;
      }
    }

    public String getHostIp() {
      return this.hostIp;
    }

    public apriori2_args setHostIp(String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public String getHostPort() {
      return this.hostPort;
    }

    public apriori2_args setHostPort(String hostPort) {
      this.hostPort = hostPort;
      return this;
    }

    public void unsetHostPort() {
      this.hostPort = null;
    }

    /** Returns true if field hostPort is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPort() {
      return this.hostPort != null;
    }

    public void setHostPortIsSet(boolean value) {
      if (!value) {
        this.hostPort = null;
      }
    }

    public String getHostName() {
      return this.hostName;
    }

    public apriori2_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public String getHostPassword() {
      return this.hostPassword;
    }

    public apriori2_args setHostPassword(String hostPassword) {
      this.hostPassword = hostPassword;
      return this;
    }

    public void unsetHostPassword() {
      this.hostPassword = null;
    }

    /** Returns true if field hostPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPassword() {
      return this.hostPassword != null;
    }

    public void setHostPasswordIsSet(boolean value) {
      if (!value) {
        this.hostPassword = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SP_STR:
        if (value == null) {
          unsetSpStr();
        } else {
          setSpStr((String)value);
        }
        break;

      case FD_SUM:
        if (value == null) {
          unsetFdSum();
        } else {
          setFdSum((Integer)value);
        }
        break;

      case P_NUM:
        if (value == null) {
          unsetPNum();
        } else {
          setPNum((String)value);
        }
        break;

      case O_NUM:
        if (value == null) {
          unsetONum();
        } else {
          setONum((String)value);
        }
        break;

      case WHERE_STR:
        if (value == null) {
          unsetWhereStr();
        } else {
          setWhereStr((String)value);
        }
        break;

      case SRC_DIR_NAME:
        if (value == null) {
          unsetSrcDirName();
        } else {
          setSrcDirName((String)value);
        }
        break;

      case DST_DIR_NAME:
        if (value == null) {
          unsetDstDirName();
        } else {
          setDstDirName((String)value);
        }
        break;

      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((String)value);
        }
        break;

      case HOST_PORT:
        if (value == null) {
          unsetHostPort();
        } else {
          setHostPort((String)value);
        }
        break;

      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      case HOST_PASSWORD:
        if (value == null) {
          unsetHostPassword();
        } else {
          setHostPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SP_STR:
        return getSpStr();

      case FD_SUM:
        return getFdSum();

      case P_NUM:
        return getPNum();

      case O_NUM:
        return getONum();

      case WHERE_STR:
        return getWhereStr();

      case SRC_DIR_NAME:
        return getSrcDirName();

      case DST_DIR_NAME:
        return getDstDirName();

      case HOST_IP:
        return getHostIp();

      case HOST_PORT:
        return getHostPort();

      case HOST_NAME:
        return getHostName();

      case HOST_PASSWORD:
        return getHostPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SP_STR:
        return isSetSpStr();
      case FD_SUM:
        return isSetFdSum();
      case P_NUM:
        return isSetPNum();
      case O_NUM:
        return isSetONum();
      case WHERE_STR:
        return isSetWhereStr();
      case SRC_DIR_NAME:
        return isSetSrcDirName();
      case DST_DIR_NAME:
        return isSetDstDirName();
      case HOST_IP:
        return isSetHostIp();
      case HOST_PORT:
        return isSetHostPort();
      case HOST_NAME:
        return isSetHostName();
      case HOST_PASSWORD:
        return isSetHostPassword();
      }
      throw new IllegalStateException();
    }

    
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof apriori2_args)
        return this.equals((apriori2_args)that);
      return false;
    }

    public boolean equals(apriori2_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_spStr = true && this.isSetSpStr();
      boolean that_present_spStr = true && that.isSetSpStr();
      if (this_present_spStr || that_present_spStr) {
        if (!(this_present_spStr && that_present_spStr))
          return false;
        if (!this.spStr.equals(that.spStr))
          return false;
      }

      boolean this_present_fdSum = true;
      boolean that_present_fdSum = true;
      if (this_present_fdSum || that_present_fdSum) {
        if (!(this_present_fdSum && that_present_fdSum))
          return false;
        if (this.fdSum != that.fdSum)
          return false;
      }

      boolean this_present_pNum = true && this.isSetPNum();
      boolean that_present_pNum = true && that.isSetPNum();
      if (this_present_pNum || that_present_pNum) {
        if (!(this_present_pNum && that_present_pNum))
          return false;
        if (!this.pNum.equals(that.pNum))
          return false;
      }

      boolean this_present_oNum = true && this.isSetONum();
      boolean that_present_oNum = true && that.isSetONum();
      if (this_present_oNum || that_present_oNum) {
        if (!(this_present_oNum && that_present_oNum))
          return false;
        if (!this.oNum.equals(that.oNum))
          return false;
      }

      boolean this_present_whereStr = true && this.isSetWhereStr();
      boolean that_present_whereStr = true && that.isSetWhereStr();
      if (this_present_whereStr || that_present_whereStr) {
        if (!(this_present_whereStr && that_present_whereStr))
          return false;
        if (!this.whereStr.equals(that.whereStr))
          return false;
      }

      boolean this_present_srcDirName = true && this.isSetSrcDirName();
      boolean that_present_srcDirName = true && that.isSetSrcDirName();
      if (this_present_srcDirName || that_present_srcDirName) {
        if (!(this_present_srcDirName && that_present_srcDirName))
          return false;
        if (!this.srcDirName.equals(that.srcDirName))
          return false;
      }

      boolean this_present_dstDirName = true && this.isSetDstDirName();
      boolean that_present_dstDirName = true && that.isSetDstDirName();
      if (this_present_dstDirName || that_present_dstDirName) {
        if (!(this_present_dstDirName && that_present_dstDirName))
          return false;
        if (!this.dstDirName.equals(that.dstDirName))
          return false;
      }

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_hostPort = true && this.isSetHostPort();
      boolean that_present_hostPort = true && that.isSetHostPort();
      if (this_present_hostPort || that_present_hostPort) {
        if (!(this_present_hostPort && that_present_hostPort))
          return false;
        if (!this.hostPort.equals(that.hostPort))
          return false;
      }

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      boolean this_present_hostPassword = true && this.isSetHostPassword();
      boolean that_present_hostPassword = true && that.isSetHostPassword();
      if (this_present_hostPassword || that_present_hostPassword) {
        if (!(this_present_hostPassword && that_present_hostPassword))
          return false;
        if (!this.hostPassword.equals(that.hostPassword))
          return false;
      }

      return true;
    }

    
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSpStr()) ? 131071 : 524287);
      if (isSetSpStr())
        hashCode = hashCode * 8191 + spStr.hashCode();

      hashCode = hashCode * 8191 + fdSum;

      hashCode = hashCode * 8191 + ((isSetPNum()) ? 131071 : 524287);
      if (isSetPNum())
        hashCode = hashCode * 8191 + pNum.hashCode();

      hashCode = hashCode * 8191 + ((isSetONum()) ? 131071 : 524287);
      if (isSetONum())
        hashCode = hashCode * 8191 + oNum.hashCode();

      hashCode = hashCode * 8191 + ((isSetWhereStr()) ? 131071 : 524287);
      if (isSetWhereStr())
        hashCode = hashCode * 8191 + whereStr.hashCode();

      hashCode = hashCode * 8191 + ((isSetSrcDirName()) ? 131071 : 524287);
      if (isSetSrcDirName())
        hashCode = hashCode * 8191 + srcDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDstDirName()) ? 131071 : 524287);
      if (isSetDstDirName())
        hashCode = hashCode * 8191 + dstDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPort()) ? 131071 : 524287);
      if (isSetHostPort())
        hashCode = hashCode * 8191 + hostPort.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
      if (isSetHostName())
        hashCode = hashCode * 8191 + hostName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPassword()) ? 131071 : 524287);
      if (isSetHostPassword())
        hashCode = hashCode * 8191 + hostPassword.hashCode();

      return hashCode;
    }

    
    public int compareTo(apriori2_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpStr()).compareTo(other.isSetSpStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spStr, other.spStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdSum()).compareTo(other.isSetFdSum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdSum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdSum, other.fdSum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPNum()).compareTo(other.isSetPNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pNum, other.pNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetONum()).compareTo(other.isSetONum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetONum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oNum, other.oNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWhereStr()).compareTo(other.isSetWhereStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhereStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whereStr, other.whereStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrcDirName()).compareTo(other.isSetSrcDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcDirName, other.srcDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDstDirName()).compareTo(other.isSetDstDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstDirName, other.dstDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPort()).compareTo(other.isSetHostPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPort, other.hostPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPassword()).compareTo(other.isSetHostPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPassword, other.hostPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    
    public String toString() {
      StringBuilder sb = new StringBuilder("apriori2_args(");
      boolean first = true;

      sb.append("spStr:");
      if (this.spStr == null) {
        sb.append("null");
      } else {
        sb.append(this.spStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdSum:");
      sb.append(this.fdSum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pNum:");
      if (this.pNum == null) {
        sb.append("null");
      } else {
        sb.append(this.pNum);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oNum:");
      if (this.oNum == null) {
        sb.append("null");
      } else {
        sb.append(this.oNum);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("whereStr:");
      if (this.whereStr == null) {
        sb.append("null");
      } else {
        sb.append(this.whereStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcDirName:");
      if (this.srcDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.srcDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstDirName:");
      if (this.dstDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.dstDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPort:");
      if (this.hostPort == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPassword:");
      if (this.hostPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class apriori2_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public apriori2_argsStandardScheme getScheme() {
        return new apriori2_argsStandardScheme();
      }
    }

    private static class apriori2_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<apriori2_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, apriori2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SP_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.spStr = iprot.readString();
                struct.setSpStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FD_SUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fdSum = iprot.readI32();
                struct.setFdSumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // P_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pNum = iprot.readString();
                struct.setPNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // O_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.oNum = iprot.readString();
                struct.setONumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // WHERE_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.whereStr = iprot.readString();
                struct.setWhereStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SRC_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcDirName = iprot.readString();
                struct.setSrcDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // DST_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dstDirName = iprot.readString();
                struct.setDstDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // HOST_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPort = iprot.readString();
                struct.setHostPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // HOST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // HOST_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPassword = iprot.readString();
                struct.setHostPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, apriori2_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spStr != null) {
          oprot.writeFieldBegin(SP_STR_FIELD_DESC);
          oprot.writeString(struct.spStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FD_SUM_FIELD_DESC);
        oprot.writeI32(struct.fdSum);
        oprot.writeFieldEnd();
        if (struct.pNum != null) {
          oprot.writeFieldBegin(P_NUM_FIELD_DESC);
          oprot.writeString(struct.pNum);
          oprot.writeFieldEnd();
        }
        if (struct.oNum != null) {
          oprot.writeFieldBegin(O_NUM_FIELD_DESC);
          oprot.writeString(struct.oNum);
          oprot.writeFieldEnd();
        }
        if (struct.whereStr != null) {
          oprot.writeFieldBegin(WHERE_STR_FIELD_DESC);
          oprot.writeString(struct.whereStr);
          oprot.writeFieldEnd();
        }
        if (struct.srcDirName != null) {
          oprot.writeFieldBegin(SRC_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.srcDirName);
          oprot.writeFieldEnd();
        }
        if (struct.dstDirName != null) {
          oprot.writeFieldBegin(DST_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.dstDirName);
          oprot.writeFieldEnd();
        }
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.hostPort != null) {
          oprot.writeFieldBegin(HOST_PORT_FIELD_DESC);
          oprot.writeString(struct.hostPort);
          oprot.writeFieldEnd();
        }
        if (struct.hostName != null) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
        if (struct.hostPassword != null) {
          oprot.writeFieldBegin(HOST_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.hostPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class apriori2_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public apriori2_argsTupleScheme getScheme() {
        return new apriori2_argsTupleScheme();
      }
    }

    private static class apriori2_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<apriori2_args> {

      
      public void write(org.apache.thrift.protocol.TProtocol prot, apriori2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSpStr()) {
          optionals.set(0);
        }
        if (struct.isSetFdSum()) {
          optionals.set(1);
        }
        if (struct.isSetPNum()) {
          optionals.set(2);
        }
        if (struct.isSetONum()) {
          optionals.set(3);
        }
        if (struct.isSetWhereStr()) {
          optionals.set(4);
        }
        if (struct.isSetSrcDirName()) {
          optionals.set(5);
        }
        if (struct.isSetDstDirName()) {
          optionals.set(6);
        }
        if (struct.isSetHostIp()) {
          optionals.set(7);
        }
        if (struct.isSetHostPort()) {
          optionals.set(8);
        }
        if (struct.isSetHostName()) {
          optionals.set(9);
        }
        if (struct.isSetHostPassword()) {
          optionals.set(10);
        }
        oprot.writeBitSet(optionals, 11);
        if (struct.isSetSpStr()) {
          oprot.writeString(struct.spStr);
        }
        if (struct.isSetFdSum()) {
          oprot.writeI32(struct.fdSum);
        }
        if (struct.isSetPNum()) {
          oprot.writeString(struct.pNum);
        }
        if (struct.isSetONum()) {
          oprot.writeString(struct.oNum);
        }
        if (struct.isSetWhereStr()) {
          oprot.writeString(struct.whereStr);
        }
        if (struct.isSetSrcDirName()) {
          oprot.writeString(struct.srcDirName);
        }
        if (struct.isSetDstDirName()) {
          oprot.writeString(struct.dstDirName);
        }
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetHostPort()) {
          oprot.writeString(struct.hostPort);
        }
        if (struct.isSetHostName()) {
          oprot.writeString(struct.hostName);
        }
        if (struct.isSetHostPassword()) {
          oprot.writeString(struct.hostPassword);
        }
      }

      
      public void read(org.apache.thrift.protocol.TProtocol prot, apriori2_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(11);
        if (incoming.get(0)) {
          struct.spStr = iprot.readString();
          struct.setSpStrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdSum = iprot.readI32();
          struct.setFdSumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pNum = iprot.readString();
          struct.setPNumIsSet(true);
        }
        if (incoming.get(3)) {
          struct.oNum = iprot.readString();
          struct.setONumIsSet(true);
        }
        if (incoming.get(4)) {
          struct.whereStr = iprot.readString();
          struct.setWhereStrIsSet(true);
        }
        if (incoming.get(5)) {
          struct.srcDirName = iprot.readString();
          struct.setSrcDirNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.dstDirName = iprot.readString();
          struct.setDstDirNameIsSet(true);
        }
        if (incoming.get(7)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(8)) {
          struct.hostPort = iprot.readString();
          struct.setHostPortIsSet(true);
        }
        if (incoming.get(9)) {
          struct.hostName = iprot.readString();
          struct.setHostNameIsSet(true);
        }
        if (incoming.get(10)) {
          struct.hostPassword = iprot.readString();
          struct.setHostPasswordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class apriori2_result implements org.apache.thrift.TBase<apriori2_result, apriori2_result._Fields>, java.io.Serializable, Cloneable, Comparable<apriori2_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("apriori2_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new apriori2_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new apriori2_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(apriori2_result.class, metaDataMap);
    }

    public apriori2_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public apriori2_result(apriori2_result other) {
    }

    public apriori2_result deepCopy() {
      return new apriori2_result(this);
    }

    
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof apriori2_result)
        return this.equals((apriori2_result)that);
      return false;
    }

    public boolean equals(apriori2_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    
    public int compareTo(apriori2_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    
    public String toString() {
      StringBuilder sb = new StringBuilder("apriori2_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class apriori2_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public apriori2_resultStandardScheme getScheme() {
        return new apriori2_resultStandardScheme();
      }
    }

    private static class apriori2_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<apriori2_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, apriori2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, apriori2_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class apriori2_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public apriori2_resultTupleScheme getScheme() {
        return new apriori2_resultTupleScheme();
      }
    }

    private static class apriori2_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<apriori2_result> {

      
      public void write(org.apache.thrift.protocol.TProtocol prot, apriori2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      
      public void read(org.apache.thrift.protocol.TProtocol prot, apriori2_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class apriori3_args implements org.apache.thrift.TBase<apriori3_args, apriori3_args._Fields>, java.io.Serializable, Cloneable, Comparable<apriori3_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("apriori3_args");

    private static final org.apache.thrift.protocol.TField SP_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("spStr", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FD_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fdSum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField P_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pNum", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField O_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("oNum", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField WHERE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("whereStr", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField SRC_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("srcDirName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField DST_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dstDirName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField HOST_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPort", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField HOST_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPassword", org.apache.thrift.protocol.TType.STRING, (short)11);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new apriori3_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new apriori3_argsTupleSchemeFactory();

    public String spStr; // required
    public int fdSum; // required
    public String pNum; // required
    public String oNum; // required
    public String whereStr; // required
    public String srcDirName; // required
    public String dstDirName; // required
    public String hostIp; // required
    public String hostPort; // required
    public String hostName; // required
    public String hostPassword; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SP_STR((short)1, "spStr"),
      FD_SUM((short)2, "fdSum"),
      P_NUM((short)3, "pNum"),
      O_NUM((short)4, "oNum"),
      WHERE_STR((short)5, "whereStr"),
      SRC_DIR_NAME((short)6, "srcDirName"),
      DST_DIR_NAME((short)7, "dstDirName"),
      HOST_IP((short)8, "hostIp"),
      HOST_PORT((short)9, "hostPort"),
      HOST_NAME((short)10, "hostName"),
      HOST_PASSWORD((short)11, "hostPassword");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SP_STR
            return SP_STR;
          case 2: // FD_SUM
            return FD_SUM;
          case 3: // P_NUM
            return P_NUM;
          case 4: // O_NUM
            return O_NUM;
          case 5: // WHERE_STR
            return WHERE_STR;
          case 6: // SRC_DIR_NAME
            return SRC_DIR_NAME;
          case 7: // DST_DIR_NAME
            return DST_DIR_NAME;
          case 8: // HOST_IP
            return HOST_IP;
          case 9: // HOST_PORT
            return HOST_PORT;
          case 10: // HOST_NAME
            return HOST_NAME;
          case 11: // HOST_PASSWORD
            return HOST_PASSWORD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FDSUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SP_STR, new org.apache.thrift.meta_data.FieldMetaData("spStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FD_SUM, new org.apache.thrift.meta_data.FieldMetaData("fdSum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.P_NUM, new org.apache.thrift.meta_data.FieldMetaData("pNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.O_NUM, new org.apache.thrift.meta_data.FieldMetaData("oNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WHERE_STR, new org.apache.thrift.meta_data.FieldMetaData("whereStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SRC_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("srcDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("dstDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PORT, new org.apache.thrift.meta_data.FieldMetaData("hostPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("hostPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(apriori3_args.class, metaDataMap);
    }

    public apriori3_args() {
    }

    public apriori3_args(
      String spStr,
      int fdSum,
      String pNum,
      String oNum,
      String whereStr,
      String srcDirName,
      String dstDirName,
      String hostIp,
      String hostPort,
      String hostName,
      String hostPassword)
    {
      this();
      this.spStr = spStr;
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      this.pNum = pNum;
      this.oNum = oNum;
      this.whereStr = whereStr;
      this.srcDirName = srcDirName;
      this.dstDirName = dstDirName;
      this.hostIp = hostIp;
      this.hostPort = hostPort;
      this.hostName = hostName;
      this.hostPassword = hostPassword;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public apriori3_args(apriori3_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSpStr()) {
        this.spStr = other.spStr;
      }
      this.fdSum = other.fdSum;
      if (other.isSetPNum()) {
        this.pNum = other.pNum;
      }
      if (other.isSetONum()) {
        this.oNum = other.oNum;
      }
      if (other.isSetWhereStr()) {
        this.whereStr = other.whereStr;
      }
      if (other.isSetSrcDirName()) {
        this.srcDirName = other.srcDirName;
      }
      if (other.isSetDstDirName()) {
        this.dstDirName = other.dstDirName;
      }
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetHostPort()) {
        this.hostPort = other.hostPort;
      }
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
      if (other.isSetHostPassword()) {
        this.hostPassword = other.hostPassword;
      }
    }

    public apriori3_args deepCopy() {
      return new apriori3_args(this);
    }

    
    public void clear() {
      this.spStr = null;
      setFdSumIsSet(false);
      this.fdSum = 0;
      this.pNum = null;
      this.oNum = null;
      this.whereStr = null;
      this.srcDirName = null;
      this.dstDirName = null;
      this.hostIp = null;
      this.hostPort = null;
      this.hostName = null;
      this.hostPassword = null;
    }

    public String getSpStr() {
      return this.spStr;
    }

    public apriori3_args setSpStr(String spStr) {
      this.spStr = spStr;
      return this;
    }

    public void unsetSpStr() {
      this.spStr = null;
    }

    /** Returns true if field spStr is set (has been assigned a value) and false otherwise */
    public boolean isSetSpStr() {
      return this.spStr != null;
    }

    public void setSpStrIsSet(boolean value) {
      if (!value) {
        this.spStr = null;
      }
    }

    public int getFdSum() {
      return this.fdSum;
    }

    public apriori3_args setFdSum(int fdSum) {
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      return this;
    }

    public void unsetFdSum() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    /** Returns true if field fdSum is set (has been assigned a value) and false otherwise */
    public boolean isSetFdSum() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    public void setFdSumIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FDSUM_ISSET_ID, value);
    }

    public String getPNum() {
      return this.pNum;
    }

    public apriori3_args setPNum(String pNum) {
      this.pNum = pNum;
      return this;
    }

    public void unsetPNum() {
      this.pNum = null;
    }

    /** Returns true if field pNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPNum() {
      return this.pNum != null;
    }

    public void setPNumIsSet(boolean value) {
      if (!value) {
        this.pNum = null;
      }
    }

    public String getONum() {
      return this.oNum;
    }

    public apriori3_args setONum(String oNum) {
      this.oNum = oNum;
      return this;
    }

    public void unsetONum() {
      this.oNum = null;
    }

    /** Returns true if field oNum is set (has been assigned a value) and false otherwise */
    public boolean isSetONum() {
      return this.oNum != null;
    }

    public void setONumIsSet(boolean value) {
      if (!value) {
        this.oNum = null;
      }
    }

    public String getWhereStr() {
      return this.whereStr;
    }

    public apriori3_args setWhereStr(String whereStr) {
      this.whereStr = whereStr;
      return this;
    }

    public void unsetWhereStr() {
      this.whereStr = null;
    }

    /** Returns true if field whereStr is set (has been assigned a value) and false otherwise */
    public boolean isSetWhereStr() {
      return this.whereStr != null;
    }

    public void setWhereStrIsSet(boolean value) {
      if (!value) {
        this.whereStr = null;
      }
    }

    public String getSrcDirName() {
      return this.srcDirName;
    }

    public apriori3_args setSrcDirName(String srcDirName) {
      this.srcDirName = srcDirName;
      return this;
    }

    public void unsetSrcDirName() {
      this.srcDirName = null;
    }

    /** Returns true if field srcDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcDirName() {
      return this.srcDirName != null;
    }

    public void setSrcDirNameIsSet(boolean value) {
      if (!value) {
        this.srcDirName = null;
      }
    }

    public String getDstDirName() {
      return this.dstDirName;
    }

    public apriori3_args setDstDirName(String dstDirName) {
      this.dstDirName = dstDirName;
      return this;
    }

    public void unsetDstDirName() {
      this.dstDirName = null;
    }

    /** Returns true if field dstDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetDstDirName() {
      return this.dstDirName != null;
    }

    public void setDstDirNameIsSet(boolean value) {
      if (!value) {
        this.dstDirName = null;
      }
    }

    public String getHostIp() {
      return this.hostIp;
    }

    public apriori3_args setHostIp(String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public String getHostPort() {
      return this.hostPort;
    }

    public apriori3_args setHostPort(String hostPort) {
      this.hostPort = hostPort;
      return this;
    }

    public void unsetHostPort() {
      this.hostPort = null;
    }

    /** Returns true if field hostPort is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPort() {
      return this.hostPort != null;
    }

    public void setHostPortIsSet(boolean value) {
      if (!value) {
        this.hostPort = null;
      }
    }

    public String getHostName() {
      return this.hostName;
    }

    public apriori3_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public String getHostPassword() {
      return this.hostPassword;
    }

    public apriori3_args setHostPassword(String hostPassword) {
      this.hostPassword = hostPassword;
      return this;
    }

    public void unsetHostPassword() {
      this.hostPassword = null;
    }

    /** Returns true if field hostPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPassword() {
      return this.hostPassword != null;
    }

    public void setHostPasswordIsSet(boolean value) {
      if (!value) {
        this.hostPassword = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SP_STR:
        if (value == null) {
          unsetSpStr();
        } else {
          setSpStr((String)value);
        }
        break;

      case FD_SUM:
        if (value == null) {
          unsetFdSum();
        } else {
          setFdSum((Integer)value);
        }
        break;

      case P_NUM:
        if (value == null) {
          unsetPNum();
        } else {
          setPNum((String)value);
        }
        break;

      case O_NUM:
        if (value == null) {
          unsetONum();
        } else {
          setONum((String)value);
        }
        break;

      case WHERE_STR:
        if (value == null) {
          unsetWhereStr();
        } else {
          setWhereStr((String)value);
        }
        break;

      case SRC_DIR_NAME:
        if (value == null) {
          unsetSrcDirName();
        } else {
          setSrcDirName((String)value);
        }
        break;

      case DST_DIR_NAME:
        if (value == null) {
          unsetDstDirName();
        } else {
          setDstDirName((String)value);
        }
        break;

      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((String)value);
        }
        break;

      case HOST_PORT:
        if (value == null) {
          unsetHostPort();
        } else {
          setHostPort((String)value);
        }
        break;

      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      case HOST_PASSWORD:
        if (value == null) {
          unsetHostPassword();
        } else {
          setHostPassword((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SP_STR:
        return getSpStr();

      case FD_SUM:
        return getFdSum();

      case P_NUM:
        return getPNum();

      case O_NUM:
        return getONum();

      case WHERE_STR:
        return getWhereStr();

      case SRC_DIR_NAME:
        return getSrcDirName();

      case DST_DIR_NAME:
        return getDstDirName();

      case HOST_IP:
        return getHostIp();

      case HOST_PORT:
        return getHostPort();

      case HOST_NAME:
        return getHostName();

      case HOST_PASSWORD:
        return getHostPassword();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SP_STR:
        return isSetSpStr();
      case FD_SUM:
        return isSetFdSum();
      case P_NUM:
        return isSetPNum();
      case O_NUM:
        return isSetONum();
      case WHERE_STR:
        return isSetWhereStr();
      case SRC_DIR_NAME:
        return isSetSrcDirName();
      case DST_DIR_NAME:
        return isSetDstDirName();
      case HOST_IP:
        return isSetHostIp();
      case HOST_PORT:
        return isSetHostPort();
      case HOST_NAME:
        return isSetHostName();
      case HOST_PASSWORD:
        return isSetHostPassword();
      }
      throw new IllegalStateException();
    }

    
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof apriori3_args)
        return this.equals((apriori3_args)that);
      return false;
    }

    public boolean equals(apriori3_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_spStr = true && this.isSetSpStr();
      boolean that_present_spStr = true && that.isSetSpStr();
      if (this_present_spStr || that_present_spStr) {
        if (!(this_present_spStr && that_present_spStr))
          return false;
        if (!this.spStr.equals(that.spStr))
          return false;
      }

      boolean this_present_fdSum = true;
      boolean that_present_fdSum = true;
      if (this_present_fdSum || that_present_fdSum) {
        if (!(this_present_fdSum && that_present_fdSum))
          return false;
        if (this.fdSum != that.fdSum)
          return false;
      }

      boolean this_present_pNum = true && this.isSetPNum();
      boolean that_present_pNum = true && that.isSetPNum();
      if (this_present_pNum || that_present_pNum) {
        if (!(this_present_pNum && that_present_pNum))
          return false;
        if (!this.pNum.equals(that.pNum))
          return false;
      }

      boolean this_present_oNum = true && this.isSetONum();
      boolean that_present_oNum = true && that.isSetONum();
      if (this_present_oNum || that_present_oNum) {
        if (!(this_present_oNum && that_present_oNum))
          return false;
        if (!this.oNum.equals(that.oNum))
          return false;
      }

      boolean this_present_whereStr = true && this.isSetWhereStr();
      boolean that_present_whereStr = true && that.isSetWhereStr();
      if (this_present_whereStr || that_present_whereStr) {
        if (!(this_present_whereStr && that_present_whereStr))
          return false;
        if (!this.whereStr.equals(that.whereStr))
          return false;
      }

      boolean this_present_srcDirName = true && this.isSetSrcDirName();
      boolean that_present_srcDirName = true && that.isSetSrcDirName();
      if (this_present_srcDirName || that_present_srcDirName) {
        if (!(this_present_srcDirName && that_present_srcDirName))
          return false;
        if (!this.srcDirName.equals(that.srcDirName))
          return false;
      }

      boolean this_present_dstDirName = true && this.isSetDstDirName();
      boolean that_present_dstDirName = true && that.isSetDstDirName();
      if (this_present_dstDirName || that_present_dstDirName) {
        if (!(this_present_dstDirName && that_present_dstDirName))
          return false;
        if (!this.dstDirName.equals(that.dstDirName))
          return false;
      }

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_hostPort = true && this.isSetHostPort();
      boolean that_present_hostPort = true && that.isSetHostPort();
      if (this_present_hostPort || that_present_hostPort) {
        if (!(this_present_hostPort && that_present_hostPort))
          return false;
        if (!this.hostPort.equals(that.hostPort))
          return false;
      }

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      boolean this_present_hostPassword = true && this.isSetHostPassword();
      boolean that_present_hostPassword = true && that.isSetHostPassword();
      if (this_present_hostPassword || that_present_hostPassword) {
        if (!(this_present_hostPassword && that_present_hostPassword))
          return false;
        if (!this.hostPassword.equals(that.hostPassword))
          return false;
      }

      return true;
    }

    
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSpStr()) ? 131071 : 524287);
      if (isSetSpStr())
        hashCode = hashCode * 8191 + spStr.hashCode();

      hashCode = hashCode * 8191 + fdSum;

      hashCode = hashCode * 8191 + ((isSetPNum()) ? 131071 : 524287);
      if (isSetPNum())
        hashCode = hashCode * 8191 + pNum.hashCode();

      hashCode = hashCode * 8191 + ((isSetONum()) ? 131071 : 524287);
      if (isSetONum())
        hashCode = hashCode * 8191 + oNum.hashCode();

      hashCode = hashCode * 8191 + ((isSetWhereStr()) ? 131071 : 524287);
      if (isSetWhereStr())
        hashCode = hashCode * 8191 + whereStr.hashCode();

      hashCode = hashCode * 8191 + ((isSetSrcDirName()) ? 131071 : 524287);
      if (isSetSrcDirName())
        hashCode = hashCode * 8191 + srcDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDstDirName()) ? 131071 : 524287);
      if (isSetDstDirName())
        hashCode = hashCode * 8191 + dstDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPort()) ? 131071 : 524287);
      if (isSetHostPort())
        hashCode = hashCode * 8191 + hostPort.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
      if (isSetHostName())
        hashCode = hashCode * 8191 + hostName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPassword()) ? 131071 : 524287);
      if (isSetHostPassword())
        hashCode = hashCode * 8191 + hostPassword.hashCode();

      return hashCode;
    }

    
    public int compareTo(apriori3_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpStr()).compareTo(other.isSetSpStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spStr, other.spStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdSum()).compareTo(other.isSetFdSum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdSum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdSum, other.fdSum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPNum()).compareTo(other.isSetPNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pNum, other.pNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetONum()).compareTo(other.isSetONum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetONum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oNum, other.oNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWhereStr()).compareTo(other.isSetWhereStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhereStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whereStr, other.whereStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrcDirName()).compareTo(other.isSetSrcDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcDirName, other.srcDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDstDirName()).compareTo(other.isSetDstDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstDirName, other.dstDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPort()).compareTo(other.isSetHostPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPort, other.hostPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPassword()).compareTo(other.isSetHostPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPassword, other.hostPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    
    public String toString() {
      StringBuilder sb = new StringBuilder("apriori3_args(");
      boolean first = true;

      sb.append("spStr:");
      if (this.spStr == null) {
        sb.append("null");
      } else {
        sb.append(this.spStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdSum:");
      sb.append(this.fdSum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pNum:");
      if (this.pNum == null) {
        sb.append("null");
      } else {
        sb.append(this.pNum);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oNum:");
      if (this.oNum == null) {
        sb.append("null");
      } else {
        sb.append(this.oNum);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("whereStr:");
      if (this.whereStr == null) {
        sb.append("null");
      } else {
        sb.append(this.whereStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcDirName:");
      if (this.srcDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.srcDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstDirName:");
      if (this.dstDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.dstDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPort:");
      if (this.hostPort == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPassword:");
      if (this.hostPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPassword);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class apriori3_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public apriori3_argsStandardScheme getScheme() {
        return new apriori3_argsStandardScheme();
      }
    }

    private static class apriori3_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<apriori3_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, apriori3_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SP_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.spStr = iprot.readString();
                struct.setSpStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FD_SUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fdSum = iprot.readI32();
                struct.setFdSumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // P_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pNum = iprot.readString();
                struct.setPNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // O_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.oNum = iprot.readString();
                struct.setONumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // WHERE_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.whereStr = iprot.readString();
                struct.setWhereStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SRC_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcDirName = iprot.readString();
                struct.setSrcDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // DST_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dstDirName = iprot.readString();
                struct.setDstDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // HOST_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPort = iprot.readString();
                struct.setHostPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // HOST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // HOST_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPassword = iprot.readString();
                struct.setHostPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, apriori3_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spStr != null) {
          oprot.writeFieldBegin(SP_STR_FIELD_DESC);
          oprot.writeString(struct.spStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FD_SUM_FIELD_DESC);
        oprot.writeI32(struct.fdSum);
        oprot.writeFieldEnd();
        if (struct.pNum != null) {
          oprot.writeFieldBegin(P_NUM_FIELD_DESC);
          oprot.writeString(struct.pNum);
          oprot.writeFieldEnd();
        }
        if (struct.oNum != null) {
          oprot.writeFieldBegin(O_NUM_FIELD_DESC);
          oprot.writeString(struct.oNum);
          oprot.writeFieldEnd();
        }
        if (struct.whereStr != null) {
          oprot.writeFieldBegin(WHERE_STR_FIELD_DESC);
          oprot.writeString(struct.whereStr);
          oprot.writeFieldEnd();
        }
        if (struct.srcDirName != null) {
          oprot.writeFieldBegin(SRC_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.srcDirName);
          oprot.writeFieldEnd();
        }
        if (struct.dstDirName != null) {
          oprot.writeFieldBegin(DST_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.dstDirName);
          oprot.writeFieldEnd();
        }
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.hostPort != null) {
          oprot.writeFieldBegin(HOST_PORT_FIELD_DESC);
          oprot.writeString(struct.hostPort);
          oprot.writeFieldEnd();
        }
        if (struct.hostName != null) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
        if (struct.hostPassword != null) {
          oprot.writeFieldBegin(HOST_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.hostPassword);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class apriori3_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public apriori3_argsTupleScheme getScheme() {
        return new apriori3_argsTupleScheme();
      }
    }

    private static class apriori3_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<apriori3_args> {

      
      public void write(org.apache.thrift.protocol.TProtocol prot, apriori3_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSpStr()) {
          optionals.set(0);
        }
        if (struct.isSetFdSum()) {
          optionals.set(1);
        }
        if (struct.isSetPNum()) {
          optionals.set(2);
        }
        if (struct.isSetONum()) {
          optionals.set(3);
        }
        if (struct.isSetWhereStr()) {
          optionals.set(4);
        }
        if (struct.isSetSrcDirName()) {
          optionals.set(5);
        }
        if (struct.isSetDstDirName()) {
          optionals.set(6);
        }
        if (struct.isSetHostIp()) {
          optionals.set(7);
        }
        if (struct.isSetHostPort()) {
          optionals.set(8);
        }
        if (struct.isSetHostName()) {
          optionals.set(9);
        }
        if (struct.isSetHostPassword()) {
          optionals.set(10);
        }
        oprot.writeBitSet(optionals, 11);
        if (struct.isSetSpStr()) {
          oprot.writeString(struct.spStr);
        }
        if (struct.isSetFdSum()) {
          oprot.writeI32(struct.fdSum);
        }
        if (struct.isSetPNum()) {
          oprot.writeString(struct.pNum);
        }
        if (struct.isSetONum()) {
          oprot.writeString(struct.oNum);
        }
        if (struct.isSetWhereStr()) {
          oprot.writeString(struct.whereStr);
        }
        if (struct.isSetSrcDirName()) {
          oprot.writeString(struct.srcDirName);
        }
        if (struct.isSetDstDirName()) {
          oprot.writeString(struct.dstDirName);
        }
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetHostPort()) {
          oprot.writeString(struct.hostPort);
        }
        if (struct.isSetHostName()) {
          oprot.writeString(struct.hostName);
        }
        if (struct.isSetHostPassword()) {
          oprot.writeString(struct.hostPassword);
        }
      }

      
      public void read(org.apache.thrift.protocol.TProtocol prot, apriori3_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(11);
        if (incoming.get(0)) {
          struct.spStr = iprot.readString();
          struct.setSpStrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdSum = iprot.readI32();
          struct.setFdSumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pNum = iprot.readString();
          struct.setPNumIsSet(true);
        }
        if (incoming.get(3)) {
          struct.oNum = iprot.readString();
          struct.setONumIsSet(true);
        }
        if (incoming.get(4)) {
          struct.whereStr = iprot.readString();
          struct.setWhereStrIsSet(true);
        }
        if (incoming.get(5)) {
          struct.srcDirName = iprot.readString();
          struct.setSrcDirNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.dstDirName = iprot.readString();
          struct.setDstDirNameIsSet(true);
        }
        if (incoming.get(7)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(8)) {
          struct.hostPort = iprot.readString();
          struct.setHostPortIsSet(true);
        }
        if (incoming.get(9)) {
          struct.hostName = iprot.readString();
          struct.setHostNameIsSet(true);
        }
        if (incoming.get(10)) {
          struct.hostPassword = iprot.readString();
          struct.setHostPasswordIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class apriori3_result implements org.apache.thrift.TBase<apriori3_result, apriori3_result._Fields>, java.io.Serializable, Cloneable, Comparable<apriori3_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("apriori3_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new apriori3_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new apriori3_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(apriori3_result.class, metaDataMap);
    }

    public apriori3_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public apriori3_result(apriori3_result other) {
    }

    public apriori3_result deepCopy() {
      return new apriori3_result(this);
    }

    
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof apriori3_result)
        return this.equals((apriori3_result)that);
      return false;
    }

    public boolean equals(apriori3_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    
    public int compareTo(apriori3_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    
    public String toString() {
      StringBuilder sb = new StringBuilder("apriori3_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class apriori3_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public apriori3_resultStandardScheme getScheme() {
        return new apriori3_resultStandardScheme();
      }
    }

    private static class apriori3_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<apriori3_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, apriori3_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, apriori3_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class apriori3_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public apriori3_resultTupleScheme getScheme() {
        return new apriori3_resultTupleScheme();
      }
    }

    private static class apriori3_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<apriori3_result> {

      
      public void write(org.apache.thrift.protocol.TProtocol prot, apriori3_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      
      public void read(org.apache.thrift.protocol.TProtocol prot, apriori3_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
