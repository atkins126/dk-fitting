/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dksou.fitting.dataprocess.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-02")
public class DataCleanKerberosService {

  public interface Iface {

    /**
     * 该方法可用于对数据条件筛选分析或分组统计分析
     * @param spStr：分隔符号
     * @param fdSum：字段数量
     * @param whereStr：筛选条件，如："\"f1='T100'\""，若无请写1=1
     * @param groupStr：分组条件，如："f1"，若无请写1
     * @param srcDirName：文件所在目录
     * @param dstDirName：数据所在目录
     * @param hostIp：要连接hiveserver主机的ip地址，
     * @param hostPort：hiveserver的端口，默认10000
     * @param hostName：要连接主机的用户名，
     * @param hostPassword：要连接主机的密码（要具备执行Hadoop的权限的用户）
     * @param user：Service Principal登陆用户名;
     * @param krb5Path：krb5.conf存放路径
     * @param keytabPath：hive.keytab存放路径
     * @param principalPath：hive服务所对应的principal 例: principal=hive/cdh166@EXAMPLE.COM
     * 
     * @param spStr
     * @param fdSum
     * @param whereStr
     * @param groupStr
     * @param srcDirName
     * @param dstDirName
     * @param hostIp
     * @param hostPort
     * @param hostName
     * @param hostPassword
     * @param user
     * @param krb5Path
     * @param keytabPath
     * @param principalPath
     */
    public void analyseKerberos(String spStr, int fdSum, String whereStr, String groupStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException;

    /**
     * 该方法可分析某两种物品同时出现的频率。
     * @param spStr：分隔符号
     * @param fdSum：字段数量
     * @param pNum：要分析的物品所在字段
     * @param oNum：订单号等所在字段
     * @param whereStr：筛选条件，如："\"f1='T100'\""，若无请写1=1
     * @param srcDirName：文件所在目录
     * @param dstDirName：数据所在目录
     * @param hostIp：要连接hiveserver主机的ip地址，
     * @param hostPort：hiveserver的端口，默认10000
     * @param hostName：要连接主机的用户名，
     * @param hostPassword：要连接主机的密码（要具备执行Hadoop的权限的用户）
     * @param user：Service Principal登陆用户名;
     * @param krb5Path：krb5.conf存放路径
     * @param keytabPath：hive.keytab存放路径
     * @param principalPath：hive服务所对应的principal 例: principal=hive/cdh166@EXAMPLE.COM
     * 
     * @param spStr
     * @param fdSum
     * @param pNum
     * @param oNum
     * @param whereStr
     * @param srcDirName
     * @param dstDirName
     * @param hostIp
     * @param hostPort
     * @param hostName
     * @param hostPassword
     * @param user
     * @param krb5Path
     * @param keytabPath
     * @param principalPath
     */
    public void apriori2Kerberos(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException;

    /**
     * 该方法可分析某三种物品同时出现的频率
     * @param spStr：分隔符号
     * @param fdSum：字段数量
     * @param pNum：要分析的物品所在字段
     * @param oNum：订单号等所在字段
     * @param whereStr：筛选条件，如："\"f1='T100'\""，若无请写1=1
     * @param srcDirName：文件所在目录
     * @param dstDirName：数据所在目录
     * @param hostIp：要连接hiveserver主机的ip地址，
     * @param hostPort：hiveserver的端口，默认10000
     * @param hostName：要连接主机的用户名，
     * @param hostPassword：要连接主机的密码（要具备执行Hadoop的权限的用户）
     * @param user：Service Principal登陆用户名;
     * @param krb5Path：krb5.conf存放路径
     * @param keytabPath：hive.keytab存放路径
     * @param principalPath：hive服务所对应的principal
     * 
     * @param spStr
     * @param fdSum
     * @param pNum
     * @param oNum
     * @param whereStr
     * @param srcDirName
     * @param dstDirName
     * @param hostIp
     * @param hostPort
     * @param hostName
     * @param hostPassword
     * @param user
     * @param krb5Path
     * @param keytabPath
     * @param principalPath
     */
    public void apriori3Kerberos(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException;

    /**
     * 调用此方法可以筛选出符合条件的记录条数
     * @param spStr分隔符号;
     * @param fdSum：字段数量;
     * @param whereStr：比较条件  f1 >= 2 and (f2=3 or f3=4)，f1为第一个字段;
     * @param srcDirName：源目录名;
     * @param dstDirName输出目录名，输出目录如果存在将会覆盖;
     * @param hostIp：要连接hiveserver主机的ip地址;
     * @param hostPort：hiveserver的端口，默认10000;
     * @param hostName：要连接主机的用户名;
     * @param hostPassword：要连接主机的密码（要具备执行Hadoop的权限的用户）;
     * @param user：Service Principal登陆用户名;
     * @param krb5Path：krb5.conf存放路径
     * @param keytabPath：hive.keytab存放路径
     * @param principalPath：hive服务所对应的principal 例: principal=hive/cdh166@EXAMPLE.COM
     * 
     * 
     * @param spStr
     * @param fdSum
     * @param whereStr
     * @param srcDirName
     * @param dstDirName
     * @param hostIp
     * @param hostPort
     * @param hostName
     * @param hostPassword
     * @param user
     * @param krb5Path
     * @param keytabPath
     * @param principalPath
     */
    public void selectRecKerberos(String spStr, int fdSum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException;

    /**
     * 调用此方法可以按关键字过滤出想要的字段
     * @param spStr分隔符号;
     * @param fdSum：字段数量;
     * @param fdNum：字段序号（检查哪个字段是否符合正则，0为全部检查），可为一个或多个，多个之间用逗号分隔（1,2,3...）;
     * @param regExStr：字段中包含该字符的记录将被剔除（a,b,c），与字段序号相对应，多个字段时每个字段都符合该条件的记录将被剔除;
     * @param srcDirName：源目录名;
     * @param dstDirName输出目录名，输出目录如果存在将会覆盖;
     * @param hostIp：要连接hiveserver主机的ip地址;
     * @param hostPort：hiveserver的端口，默认10000;
     * @param hostName：要连接主机的用户名;
     * @param hostPassword：要连接主机的密码（要具备执行Hadoop的权限的用户）;
     * @param user：Service Principal登陆用户名;
     * @param krb5Path：krb5.conf存放路径
     * @param keytabPath：hive.keytab存放路径
     * @param principalPath：hive服务所对应的principal
     * 
     * @param spStr
     * @param fdSum
     * @param fdNum
     * @param regExStr
     * @param srcDirName
     * @param dstDirName
     * @param hostIp
     * @param hostPort
     * @param hostName
     * @param hostPassword
     * @param user
     * @param krb5Path
     * @param keytabPath
     * @param principalPath
     */
    public void formatFieldKerberos(String spStr, int fdSum, String fdNum, String regExStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException;

    /**
     * 调用此方法可以将不合法的记录去除掉
     * @param spStr分隔符号，
     * @param fdSum：字段数量（不符合该数量的记录将被清除），
     * @param srcDirName：源目录名，
     * @param dstDirName输出目录名，输出目录如果存在将会覆盖
     * @param hostIp：要连接hiveserver主机的ip地址.
     * @param hostPort：hiveserver的端口，默认10000
     * @param hostName：要连接主机的用户名，
     * @param hostPassword：要连接主机的密码（要具备执行Hadoop的权限的用户）。
     * @param freerchHome：freeHome的目录
     * @param javaBinHome：Java的bin的全路径
     * @param user：Service Principal登陆用户名;
     * @param krb5Path：krb5.conf存放路径
     * @param keytabPath：hive.keytab存放路径
     * @param principalPath：hive服务所对应的principal
     * 
     * @param spStr
     * @param fdSum
     * @param srcDirName
     * @param dstDirName
     * @param hostIp
     * @param hostPort
     * @param hostName
     * @param hostPassword
     * @param user
     * @param krb5Path
     * @param keytabPath
     * @param principalPath
     */
    public void formatRecKerberos(String spStr, int fdSum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException;

    /**
     * 调用此方法可以从所有字段中筛选出想要的几个字段数据
     * @param spStr：分隔符号;
     * @param fdSum：字段数量;
     * @param fdNum：字段数组（整数数组，内容是要保留的字段序号，没有编号的字段将去除），输入格式：逗号分隔的数字（1,2,3...）;
     * @param srcDirName：源目录名;
     * @param dstDirName：输出目录名，输出目录如果存在将会覆盖;
     * @param hostIp：要连接hiveserver主机的ip地址;
     * @param hostPort：hiveserver的端口，默认10000;
     * @param hostName：要连接主机的用户名;
     * @param hostPassword：要连接主机的密码（要具备执行Hadoop的权限的用户）;
     * @param user：Service Principal登陆用户名;
     * @param krb5Path：krb5.conf存放路径
     * @param keytabPath：hive.keytab存放路径
     * @param principalPath：hive服务所对应的principal 例: principal=hive/cdh166@EXAMPLE.COM
     * 
     * @param spStr
     * @param fdSum
     * @param fdNum
     * @param srcDirName
     * @param dstDirName
     * @param hostIp
     * @param hostPort
     * @param hostName
     * @param hostPassword
     * @param user
     * @param krb5Path
     * @param keytabPath
     * @param principalPath
     */
    public void selectFieldKerberos(String spStr, int fdSum, String fdNum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void analyseKerberos(String spStr, int fdSum, String whereStr, String groupStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void apriori2Kerberos(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void apriori3Kerberos(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void selectRecKerberos(String spStr, int fdSum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void formatFieldKerberos(String spStr, int fdSum, String fdNum, String regExStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void formatRecKerberos(String spStr, int fdSum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void selectFieldKerberos(String spStr, int fdSum, String fdNum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void analyseKerberos(String spStr, int fdSum, String whereStr, String groupStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException
    {
      send_analyseKerberos(spStr, fdSum, whereStr, groupStr, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath);
      recv_analyseKerberos();
    }

    public void send_analyseKerberos(String spStr, int fdSum, String whereStr, String groupStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException
    {
      analyseKerberos_args args = new analyseKerberos_args();
      args.setSpStr(spStr);
      args.setFdSum(fdSum);
      args.setWhereStr(whereStr);
      args.setGroupStr(groupStr);
      args.setSrcDirName(srcDirName);
      args.setDstDirName(dstDirName);
      args.setHostIp(hostIp);
      args.setHostPort(hostPort);
      args.setHostName(hostName);
      args.setHostPassword(hostPassword);
      args.setUser(user);
      args.setKrb5Path(krb5Path);
      args.setKeytabPath(keytabPath);
      args.setPrincipalPath(principalPath);
      sendBase("analyseKerberos", args);
    }

    public void recv_analyseKerberos() throws org.apache.thrift.TException
    {
      analyseKerberos_result result = new analyseKerberos_result();
      receiveBase(result, "analyseKerberos");
      return;
    }

    public void apriori2Kerberos(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException
    {
      send_apriori2Kerberos(spStr, fdSum, pNum, oNum, whereStr, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath);
      recv_apriori2Kerberos();
    }

    public void send_apriori2Kerberos(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException
    {
      apriori2Kerberos_args args = new apriori2Kerberos_args();
      args.setSpStr(spStr);
      args.setFdSum(fdSum);
      args.setPNum(pNum);
      args.setONum(oNum);
      args.setWhereStr(whereStr);
      args.setSrcDirName(srcDirName);
      args.setDstDirName(dstDirName);
      args.setHostIp(hostIp);
      args.setHostPort(hostPort);
      args.setHostName(hostName);
      args.setHostPassword(hostPassword);
      args.setUser(user);
      args.setKrb5Path(krb5Path);
      args.setKeytabPath(keytabPath);
      args.setPrincipalPath(principalPath);
      sendBase("apriori2Kerberos", args);
    }

    public void recv_apriori2Kerberos() throws org.apache.thrift.TException
    {
      apriori2Kerberos_result result = new apriori2Kerberos_result();
      receiveBase(result, "apriori2Kerberos");
      return;
    }

    public void apriori3Kerberos(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException
    {
      send_apriori3Kerberos(spStr, fdSum, pNum, oNum, whereStr, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath);
      recv_apriori3Kerberos();
    }

    public void send_apriori3Kerberos(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException
    {
      apriori3Kerberos_args args = new apriori3Kerberos_args();
      args.setSpStr(spStr);
      args.setFdSum(fdSum);
      args.setPNum(pNum);
      args.setONum(oNum);
      args.setWhereStr(whereStr);
      args.setSrcDirName(srcDirName);
      args.setDstDirName(dstDirName);
      args.setHostIp(hostIp);
      args.setHostPort(hostPort);
      args.setHostName(hostName);
      args.setHostPassword(hostPassword);
      args.setUser(user);
      args.setKrb5Path(krb5Path);
      args.setKeytabPath(keytabPath);
      args.setPrincipalPath(principalPath);
      sendBase("apriori3Kerberos", args);
    }

    public void recv_apriori3Kerberos() throws org.apache.thrift.TException
    {
      apriori3Kerberos_result result = new apriori3Kerberos_result();
      receiveBase(result, "apriori3Kerberos");
      return;
    }

    public void selectRecKerberos(String spStr, int fdSum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException
    {
      send_selectRecKerberos(spStr, fdSum, whereStr, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath);
      recv_selectRecKerberos();
    }

    public void send_selectRecKerberos(String spStr, int fdSum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException
    {
      selectRecKerberos_args args = new selectRecKerberos_args();
      args.setSpStr(spStr);
      args.setFdSum(fdSum);
      args.setWhereStr(whereStr);
      args.setSrcDirName(srcDirName);
      args.setDstDirName(dstDirName);
      args.setHostIp(hostIp);
      args.setHostPort(hostPort);
      args.setHostName(hostName);
      args.setHostPassword(hostPassword);
      args.setUser(user);
      args.setKrb5Path(krb5Path);
      args.setKeytabPath(keytabPath);
      args.setPrincipalPath(principalPath);
      sendBase("selectRecKerberos", args);
    }

    public void recv_selectRecKerberos() throws org.apache.thrift.TException
    {
      selectRecKerberos_result result = new selectRecKerberos_result();
      receiveBase(result, "selectRecKerberos");
      return;
    }

    public void formatFieldKerberos(String spStr, int fdSum, String fdNum, String regExStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException
    {
      send_formatFieldKerberos(spStr, fdSum, fdNum, regExStr, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath);
      recv_formatFieldKerberos();
    }

    public void send_formatFieldKerberos(String spStr, int fdSum, String fdNum, String regExStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException
    {
      formatFieldKerberos_args args = new formatFieldKerberos_args();
      args.setSpStr(spStr);
      args.setFdSum(fdSum);
      args.setFdNum(fdNum);
      args.setRegExStr(regExStr);
      args.setSrcDirName(srcDirName);
      args.setDstDirName(dstDirName);
      args.setHostIp(hostIp);
      args.setHostPort(hostPort);
      args.setHostName(hostName);
      args.setHostPassword(hostPassword);
      args.setUser(user);
      args.setKrb5Path(krb5Path);
      args.setKeytabPath(keytabPath);
      args.setPrincipalPath(principalPath);
      sendBase("formatFieldKerberos", args);
    }

    public void recv_formatFieldKerberos() throws org.apache.thrift.TException
    {
      formatFieldKerberos_result result = new formatFieldKerberos_result();
      receiveBase(result, "formatFieldKerberos");
      return;
    }

    public void formatRecKerberos(String spStr, int fdSum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException
    {
      send_formatRecKerberos(spStr, fdSum, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath);
      recv_formatRecKerberos();
    }

    public void send_formatRecKerberos(String spStr, int fdSum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException
    {
      formatRecKerberos_args args = new formatRecKerberos_args();
      args.setSpStr(spStr);
      args.setFdSum(fdSum);
      args.setSrcDirName(srcDirName);
      args.setDstDirName(dstDirName);
      args.setHostIp(hostIp);
      args.setHostPort(hostPort);
      args.setHostName(hostName);
      args.setHostPassword(hostPassword);
      args.setUser(user);
      args.setKrb5Path(krb5Path);
      args.setKeytabPath(keytabPath);
      args.setPrincipalPath(principalPath);
      sendBase("formatRecKerberos", args);
    }

    public void recv_formatRecKerberos() throws org.apache.thrift.TException
    {
      formatRecKerberos_result result = new formatRecKerberos_result();
      receiveBase(result, "formatRecKerberos");
      return;
    }

    public void selectFieldKerberos(String spStr, int fdSum, String fdNum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException
    {
      send_selectFieldKerberos(spStr, fdSum, fdNum, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath);
      recv_selectFieldKerberos();
    }

    public void send_selectFieldKerberos(String spStr, int fdSum, String fdNum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException
    {
      selectFieldKerberos_args args = new selectFieldKerberos_args();
      args.setSpStr(spStr);
      args.setFdSum(fdSum);
      args.setFdNum(fdNum);
      args.setSrcDirName(srcDirName);
      args.setDstDirName(dstDirName);
      args.setHostIp(hostIp);
      args.setHostPort(hostPort);
      args.setHostName(hostName);
      args.setHostPassword(hostPassword);
      args.setUser(user);
      args.setKrb5Path(krb5Path);
      args.setKeytabPath(keytabPath);
      args.setPrincipalPath(principalPath);
      sendBase("selectFieldKerberos", args);
    }

    public void recv_selectFieldKerberos() throws org.apache.thrift.TException
    {
      selectFieldKerberos_result result = new selectFieldKerberos_result();
      receiveBase(result, "selectFieldKerberos");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void analyseKerberos(String spStr, int fdSum, String whereStr, String groupStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      analyseKerberos_call method_call = new analyseKerberos_call(spStr, fdSum, whereStr, groupStr, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class analyseKerberos_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String spStr;
      private int fdSum;
      private String whereStr;
      private String groupStr;
      private String srcDirName;
      private String dstDirName;
      private String hostIp;
      private String hostPort;
      private String hostName;
      private String hostPassword;
      private String user;
      private String krb5Path;
      private String keytabPath;
      private String principalPath;
      public analyseKerberos_call(String spStr, int fdSum, String whereStr, String groupStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spStr = spStr;
        this.fdSum = fdSum;
        this.whereStr = whereStr;
        this.groupStr = groupStr;
        this.srcDirName = srcDirName;
        this.dstDirName = dstDirName;
        this.hostIp = hostIp;
        this.hostPort = hostPort;
        this.hostName = hostName;
        this.hostPassword = hostPassword;
        this.user = user;
        this.krb5Path = krb5Path;
        this.keytabPath = keytabPath;
        this.principalPath = principalPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("analyseKerberos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        analyseKerberos_args args = new analyseKerberos_args();
        args.setSpStr(spStr);
        args.setFdSum(fdSum);
        args.setWhereStr(whereStr);
        args.setGroupStr(groupStr);
        args.setSrcDirName(srcDirName);
        args.setDstDirName(dstDirName);
        args.setHostIp(hostIp);
        args.setHostPort(hostPort);
        args.setHostName(hostName);
        args.setHostPassword(hostPassword);
        args.setUser(user);
        args.setKrb5Path(krb5Path);
        args.setKeytabPath(keytabPath);
        args.setPrincipalPath(principalPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void apriori2Kerberos(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      apriori2Kerberos_call method_call = new apriori2Kerberos_call(spStr, fdSum, pNum, oNum, whereStr, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class apriori2Kerberos_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String spStr;
      private int fdSum;
      private String pNum;
      private String oNum;
      private String whereStr;
      private String srcDirName;
      private String dstDirName;
      private String hostIp;
      private String hostPort;
      private String hostName;
      private String hostPassword;
      private String user;
      private String krb5Path;
      private String keytabPath;
      private String principalPath;
      public apriori2Kerberos_call(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spStr = spStr;
        this.fdSum = fdSum;
        this.pNum = pNum;
        this.oNum = oNum;
        this.whereStr = whereStr;
        this.srcDirName = srcDirName;
        this.dstDirName = dstDirName;
        this.hostIp = hostIp;
        this.hostPort = hostPort;
        this.hostName = hostName;
        this.hostPassword = hostPassword;
        this.user = user;
        this.krb5Path = krb5Path;
        this.keytabPath = keytabPath;
        this.principalPath = principalPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("apriori2Kerberos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        apriori2Kerberos_args args = new apriori2Kerberos_args();
        args.setSpStr(spStr);
        args.setFdSum(fdSum);
        args.setPNum(pNum);
        args.setONum(oNum);
        args.setWhereStr(whereStr);
        args.setSrcDirName(srcDirName);
        args.setDstDirName(dstDirName);
        args.setHostIp(hostIp);
        args.setHostPort(hostPort);
        args.setHostName(hostName);
        args.setHostPassword(hostPassword);
        args.setUser(user);
        args.setKrb5Path(krb5Path);
        args.setKeytabPath(keytabPath);
        args.setPrincipalPath(principalPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void apriori3Kerberos(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      apriori3Kerberos_call method_call = new apriori3Kerberos_call(spStr, fdSum, pNum, oNum, whereStr, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class apriori3Kerberos_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String spStr;
      private int fdSum;
      private String pNum;
      private String oNum;
      private String whereStr;
      private String srcDirName;
      private String dstDirName;
      private String hostIp;
      private String hostPort;
      private String hostName;
      private String hostPassword;
      private String user;
      private String krb5Path;
      private String keytabPath;
      private String principalPath;
      public apriori3Kerberos_call(String spStr, int fdSum, String pNum, String oNum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spStr = spStr;
        this.fdSum = fdSum;
        this.pNum = pNum;
        this.oNum = oNum;
        this.whereStr = whereStr;
        this.srcDirName = srcDirName;
        this.dstDirName = dstDirName;
        this.hostIp = hostIp;
        this.hostPort = hostPort;
        this.hostName = hostName;
        this.hostPassword = hostPassword;
        this.user = user;
        this.krb5Path = krb5Path;
        this.keytabPath = keytabPath;
        this.principalPath = principalPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("apriori3Kerberos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        apriori3Kerberos_args args = new apriori3Kerberos_args();
        args.setSpStr(spStr);
        args.setFdSum(fdSum);
        args.setPNum(pNum);
        args.setONum(oNum);
        args.setWhereStr(whereStr);
        args.setSrcDirName(srcDirName);
        args.setDstDirName(dstDirName);
        args.setHostIp(hostIp);
        args.setHostPort(hostPort);
        args.setHostName(hostName);
        args.setHostPassword(hostPassword);
        args.setUser(user);
        args.setKrb5Path(krb5Path);
        args.setKeytabPath(keytabPath);
        args.setPrincipalPath(principalPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void selectRecKerberos(String spStr, int fdSum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectRecKerberos_call method_call = new selectRecKerberos_call(spStr, fdSum, whereStr, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectRecKerberos_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String spStr;
      private int fdSum;
      private String whereStr;
      private String srcDirName;
      private String dstDirName;
      private String hostIp;
      private String hostPort;
      private String hostName;
      private String hostPassword;
      private String user;
      private String krb5Path;
      private String keytabPath;
      private String principalPath;
      public selectRecKerberos_call(String spStr, int fdSum, String whereStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spStr = spStr;
        this.fdSum = fdSum;
        this.whereStr = whereStr;
        this.srcDirName = srcDirName;
        this.dstDirName = dstDirName;
        this.hostIp = hostIp;
        this.hostPort = hostPort;
        this.hostName = hostName;
        this.hostPassword = hostPassword;
        this.user = user;
        this.krb5Path = krb5Path;
        this.keytabPath = keytabPath;
        this.principalPath = principalPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectRecKerberos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectRecKerberos_args args = new selectRecKerberos_args();
        args.setSpStr(spStr);
        args.setFdSum(fdSum);
        args.setWhereStr(whereStr);
        args.setSrcDirName(srcDirName);
        args.setDstDirName(dstDirName);
        args.setHostIp(hostIp);
        args.setHostPort(hostPort);
        args.setHostName(hostName);
        args.setHostPassword(hostPassword);
        args.setUser(user);
        args.setKrb5Path(krb5Path);
        args.setKeytabPath(keytabPath);
        args.setPrincipalPath(principalPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void formatFieldKerberos(String spStr, int fdSum, String fdNum, String regExStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      formatFieldKerberos_call method_call = new formatFieldKerberos_call(spStr, fdSum, fdNum, regExStr, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class formatFieldKerberos_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String spStr;
      private int fdSum;
      private String fdNum;
      private String regExStr;
      private String srcDirName;
      private String dstDirName;
      private String hostIp;
      private String hostPort;
      private String hostName;
      private String hostPassword;
      private String user;
      private String krb5Path;
      private String keytabPath;
      private String principalPath;
      public formatFieldKerberos_call(String spStr, int fdSum, String fdNum, String regExStr, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spStr = spStr;
        this.fdSum = fdSum;
        this.fdNum = fdNum;
        this.regExStr = regExStr;
        this.srcDirName = srcDirName;
        this.dstDirName = dstDirName;
        this.hostIp = hostIp;
        this.hostPort = hostPort;
        this.hostName = hostName;
        this.hostPassword = hostPassword;
        this.user = user;
        this.krb5Path = krb5Path;
        this.keytabPath = keytabPath;
        this.principalPath = principalPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("formatFieldKerberos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        formatFieldKerberos_args args = new formatFieldKerberos_args();
        args.setSpStr(spStr);
        args.setFdSum(fdSum);
        args.setFdNum(fdNum);
        args.setRegExStr(regExStr);
        args.setSrcDirName(srcDirName);
        args.setDstDirName(dstDirName);
        args.setHostIp(hostIp);
        args.setHostPort(hostPort);
        args.setHostName(hostName);
        args.setHostPassword(hostPassword);
        args.setUser(user);
        args.setKrb5Path(krb5Path);
        args.setKeytabPath(keytabPath);
        args.setPrincipalPath(principalPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void formatRecKerberos(String spStr, int fdSum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      formatRecKerberos_call method_call = new formatRecKerberos_call(spStr, fdSum, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class formatRecKerberos_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String spStr;
      private int fdSum;
      private String srcDirName;
      private String dstDirName;
      private String hostIp;
      private String hostPort;
      private String hostName;
      private String hostPassword;
      private String user;
      private String krb5Path;
      private String keytabPath;
      private String principalPath;
      public formatRecKerberos_call(String spStr, int fdSum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spStr = spStr;
        this.fdSum = fdSum;
        this.srcDirName = srcDirName;
        this.dstDirName = dstDirName;
        this.hostIp = hostIp;
        this.hostPort = hostPort;
        this.hostName = hostName;
        this.hostPassword = hostPassword;
        this.user = user;
        this.krb5Path = krb5Path;
        this.keytabPath = keytabPath;
        this.principalPath = principalPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("formatRecKerberos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        formatRecKerberos_args args = new formatRecKerberos_args();
        args.setSpStr(spStr);
        args.setFdSum(fdSum);
        args.setSrcDirName(srcDirName);
        args.setDstDirName(dstDirName);
        args.setHostIp(hostIp);
        args.setHostPort(hostPort);
        args.setHostName(hostName);
        args.setHostPassword(hostPassword);
        args.setUser(user);
        args.setKrb5Path(krb5Path);
        args.setKeytabPath(keytabPath);
        args.setPrincipalPath(principalPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void selectFieldKerberos(String spStr, int fdSum, String fdNum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      selectFieldKerberos_call method_call = new selectFieldKerberos_call(spStr, fdSum, fdNum, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class selectFieldKerberos_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String spStr;
      private int fdSum;
      private String fdNum;
      private String srcDirName;
      private String dstDirName;
      private String hostIp;
      private String hostPort;
      private String hostName;
      private String hostPassword;
      private String user;
      private String krb5Path;
      private String keytabPath;
      private String principalPath;
      public selectFieldKerberos_call(String spStr, int fdSum, String fdNum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spStr = spStr;
        this.fdSum = fdSum;
        this.fdNum = fdNum;
        this.srcDirName = srcDirName;
        this.dstDirName = dstDirName;
        this.hostIp = hostIp;
        this.hostPort = hostPort;
        this.hostName = hostName;
        this.hostPassword = hostPassword;
        this.user = user;
        this.krb5Path = krb5Path;
        this.keytabPath = keytabPath;
        this.principalPath = principalPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("selectFieldKerberos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        selectFieldKerberos_args args = new selectFieldKerberos_args();
        args.setSpStr(spStr);
        args.setFdSum(fdSum);
        args.setFdNum(fdNum);
        args.setSrcDirName(srcDirName);
        args.setDstDirName(dstDirName);
        args.setHostIp(hostIp);
        args.setHostPort(hostPort);
        args.setHostName(hostName);
        args.setHostPassword(hostPassword);
        args.setUser(user);
        args.setKrb5Path(krb5Path);
        args.setKeytabPath(keytabPath);
        args.setPrincipalPath(principalPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("analyseKerberos", new analyseKerberos());
      processMap.put("apriori2Kerberos", new apriori2Kerberos());
      processMap.put("apriori3Kerberos", new apriori3Kerberos());
      processMap.put("selectRecKerberos", new selectRecKerberos());
      processMap.put("formatFieldKerberos", new formatFieldKerberos());
      processMap.put("formatRecKerberos", new formatRecKerberos());
      processMap.put("selectFieldKerberos", new selectFieldKerberos());
      return processMap;
    }

    public static class analyseKerberos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, analyseKerberos_args> {
      public analyseKerberos() {
        super("analyseKerberos");
      }

      public analyseKerberos_args getEmptyArgsInstance() {
        return new analyseKerberos_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public analyseKerberos_result getResult(I iface, analyseKerberos_args args) throws org.apache.thrift.TException {
        analyseKerberos_result result = new analyseKerberos_result();
        iface.analyseKerberos(args.spStr, args.fdSum, args.whereStr, args.groupStr, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath);
        return result;
      }
    }

    public static class apriori2Kerberos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, apriori2Kerberos_args> {
      public apriori2Kerberos() {
        super("apriori2Kerberos");
      }

      public apriori2Kerberos_args getEmptyArgsInstance() {
        return new apriori2Kerberos_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public apriori2Kerberos_result getResult(I iface, apriori2Kerberos_args args) throws org.apache.thrift.TException {
        apriori2Kerberos_result result = new apriori2Kerberos_result();
        iface.apriori2Kerberos(args.spStr, args.fdSum, args.pNum, args.oNum, args.whereStr, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath);
        return result;
      }
    }

    public static class apriori3Kerberos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, apriori3Kerberos_args> {
      public apriori3Kerberos() {
        super("apriori3Kerberos");
      }

      public apriori3Kerberos_args getEmptyArgsInstance() {
        return new apriori3Kerberos_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public apriori3Kerberos_result getResult(I iface, apriori3Kerberos_args args) throws org.apache.thrift.TException {
        apriori3Kerberos_result result = new apriori3Kerberos_result();
        iface.apriori3Kerberos(args.spStr, args.fdSum, args.pNum, args.oNum, args.whereStr, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath);
        return result;
      }
    }

    public static class selectRecKerberos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectRecKerberos_args> {
      public selectRecKerberos() {
        super("selectRecKerberos");
      }

      public selectRecKerberos_args getEmptyArgsInstance() {
        return new selectRecKerberos_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public selectRecKerberos_result getResult(I iface, selectRecKerberos_args args) throws org.apache.thrift.TException {
        selectRecKerberos_result result = new selectRecKerberos_result();
        iface.selectRecKerberos(args.spStr, args.fdSum, args.whereStr, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath);
        return result;
      }
    }

    public static class formatFieldKerberos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, formatFieldKerberos_args> {
      public formatFieldKerberos() {
        super("formatFieldKerberos");
      }

      public formatFieldKerberos_args getEmptyArgsInstance() {
        return new formatFieldKerberos_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public formatFieldKerberos_result getResult(I iface, formatFieldKerberos_args args) throws org.apache.thrift.TException {
        formatFieldKerberos_result result = new formatFieldKerberos_result();
        iface.formatFieldKerberos(args.spStr, args.fdSum, args.fdNum, args.regExStr, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath);
        return result;
      }
    }

    public static class formatRecKerberos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, formatRecKerberos_args> {
      public formatRecKerberos() {
        super("formatRecKerberos");
      }

      public formatRecKerberos_args getEmptyArgsInstance() {
        return new formatRecKerberos_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public formatRecKerberos_result getResult(I iface, formatRecKerberos_args args) throws org.apache.thrift.TException {
        formatRecKerberos_result result = new formatRecKerberos_result();
        iface.formatRecKerberos(args.spStr, args.fdSum, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath);
        return result;
      }
    }

    public static class selectFieldKerberos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, selectFieldKerberos_args> {
      public selectFieldKerberos() {
        super("selectFieldKerberos");
      }

      public selectFieldKerberos_args getEmptyArgsInstance() {
        return new selectFieldKerberos_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public selectFieldKerberos_result getResult(I iface, selectFieldKerberos_args args) throws org.apache.thrift.TException {
        selectFieldKerberos_result result = new selectFieldKerberos_result();
        iface.selectFieldKerberos(args.spStr, args.fdSum, args.fdNum, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("analyseKerberos", new analyseKerberos());
      processMap.put("apriori2Kerberos", new apriori2Kerberos());
      processMap.put("apriori3Kerberos", new apriori3Kerberos());
      processMap.put("selectRecKerberos", new selectRecKerberos());
      processMap.put("formatFieldKerberos", new formatFieldKerberos());
      processMap.put("formatRecKerberos", new formatRecKerberos());
      processMap.put("selectFieldKerberos", new selectFieldKerberos());
      return processMap;
    }

    public static class analyseKerberos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, analyseKerberos_args, Void> {
      public analyseKerberos() {
        super("analyseKerberos");
      }

      public analyseKerberos_args getEmptyArgsInstance() {
        return new analyseKerberos_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            analyseKerberos_result result = new analyseKerberos_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            analyseKerberos_result result = new analyseKerberos_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, analyseKerberos_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.analyseKerberos(args.spStr, args.fdSum, args.whereStr, args.groupStr, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath,resultHandler);
      }
    }

    public static class apriori2Kerberos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, apriori2Kerberos_args, Void> {
      public apriori2Kerberos() {
        super("apriori2Kerberos");
      }

      public apriori2Kerberos_args getEmptyArgsInstance() {
        return new apriori2Kerberos_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            apriori2Kerberos_result result = new apriori2Kerberos_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            apriori2Kerberos_result result = new apriori2Kerberos_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, apriori2Kerberos_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.apriori2Kerberos(args.spStr, args.fdSum, args.pNum, args.oNum, args.whereStr, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath,resultHandler);
      }
    }

    public static class apriori3Kerberos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, apriori3Kerberos_args, Void> {
      public apriori3Kerberos() {
        super("apriori3Kerberos");
      }

      public apriori3Kerberos_args getEmptyArgsInstance() {
        return new apriori3Kerberos_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            apriori3Kerberos_result result = new apriori3Kerberos_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            apriori3Kerberos_result result = new apriori3Kerberos_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, apriori3Kerberos_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.apriori3Kerberos(args.spStr, args.fdSum, args.pNum, args.oNum, args.whereStr, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath,resultHandler);
      }
    }

    public static class selectRecKerberos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectRecKerberos_args, Void> {
      public selectRecKerberos() {
        super("selectRecKerberos");
      }

      public selectRecKerberos_args getEmptyArgsInstance() {
        return new selectRecKerberos_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            selectRecKerberos_result result = new selectRecKerberos_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            selectRecKerberos_result result = new selectRecKerberos_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectRecKerberos_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.selectRecKerberos(args.spStr, args.fdSum, args.whereStr, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath,resultHandler);
      }
    }

    public static class formatFieldKerberos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, formatFieldKerberos_args, Void> {
      public formatFieldKerberos() {
        super("formatFieldKerberos");
      }

      public formatFieldKerberos_args getEmptyArgsInstance() {
        return new formatFieldKerberos_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            formatFieldKerberos_result result = new formatFieldKerberos_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            formatFieldKerberos_result result = new formatFieldKerberos_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, formatFieldKerberos_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.formatFieldKerberos(args.spStr, args.fdSum, args.fdNum, args.regExStr, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath,resultHandler);
      }
    }

    public static class formatRecKerberos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, formatRecKerberos_args, Void> {
      public formatRecKerberos() {
        super("formatRecKerberos");
      }

      public formatRecKerberos_args getEmptyArgsInstance() {
        return new formatRecKerberos_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            formatRecKerberos_result result = new formatRecKerberos_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            formatRecKerberos_result result = new formatRecKerberos_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, formatRecKerberos_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.formatRecKerberos(args.spStr, args.fdSum, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath,resultHandler);
      }
    }

    public static class selectFieldKerberos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, selectFieldKerberos_args, Void> {
      public selectFieldKerberos() {
        super("selectFieldKerberos");
      }

      public selectFieldKerberos_args getEmptyArgsInstance() {
        return new selectFieldKerberos_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            selectFieldKerberos_result result = new selectFieldKerberos_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            selectFieldKerberos_result result = new selectFieldKerberos_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, selectFieldKerberos_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.selectFieldKerberos(args.spStr, args.fdSum, args.fdNum, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath,resultHandler);
      }
    }

  }

  public static class analyseKerberos_args implements org.apache.thrift.TBase<analyseKerberos_args, analyseKerberos_args._Fields>, java.io.Serializable, Cloneable, Comparable<analyseKerberos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("analyseKerberos_args");

    private static final org.apache.thrift.protocol.TField SP_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("spStr", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FD_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fdSum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField WHERE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("whereStr", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField GROUP_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("groupStr", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SRC_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("srcDirName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField DST_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dstDirName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField HOST_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPort", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField HOST_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPassword", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField KRB5_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("krb5Path", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField KEYTAB_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("keytabPath", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField PRINCIPAL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("principalPath", org.apache.thrift.protocol.TType.STRING, (short)14);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new analyseKerberos_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new analyseKerberos_argsTupleSchemeFactory();

    public String spStr; // required
    public int fdSum; // required
    public String whereStr; // required
    public String groupStr; // required
    public String srcDirName; // required
    public String dstDirName; // required
    public String hostIp; // required
    public String hostPort; // required
    public String hostName; // required
    public String hostPassword; // required
    public String user; // required
    public String krb5Path; // required
    public String keytabPath; // required
    public String principalPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SP_STR((short)1, "spStr"),
      FD_SUM((short)2, "fdSum"),
      WHERE_STR((short)3, "whereStr"),
      GROUP_STR((short)4, "groupStr"),
      SRC_DIR_NAME((short)5, "srcDirName"),
      DST_DIR_NAME((short)6, "dstDirName"),
      HOST_IP((short)7, "hostIp"),
      HOST_PORT((short)8, "hostPort"),
      HOST_NAME((short)9, "hostName"),
      HOST_PASSWORD((short)10, "hostPassword"),
      USER((short)11, "user"),
      KRB5_PATH((short)12, "krb5Path"),
      KEYTAB_PATH((short)13, "keytabPath"),
      PRINCIPAL_PATH((short)14, "principalPath");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SP_STR
            return SP_STR;
          case 2: // FD_SUM
            return FD_SUM;
          case 3: // WHERE_STR
            return WHERE_STR;
          case 4: // GROUP_STR
            return GROUP_STR;
          case 5: // SRC_DIR_NAME
            return SRC_DIR_NAME;
          case 6: // DST_DIR_NAME
            return DST_DIR_NAME;
          case 7: // HOST_IP
            return HOST_IP;
          case 8: // HOST_PORT
            return HOST_PORT;
          case 9: // HOST_NAME
            return HOST_NAME;
          case 10: // HOST_PASSWORD
            return HOST_PASSWORD;
          case 11: // USER
            return USER;
          case 12: // KRB5_PATH
            return KRB5_PATH;
          case 13: // KEYTAB_PATH
            return KEYTAB_PATH;
          case 14: // PRINCIPAL_PATH
            return PRINCIPAL_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FDSUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SP_STR, new org.apache.thrift.meta_data.FieldMetaData("spStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FD_SUM, new org.apache.thrift.meta_data.FieldMetaData("fdSum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.WHERE_STR, new org.apache.thrift.meta_data.FieldMetaData("whereStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUP_STR, new org.apache.thrift.meta_data.FieldMetaData("groupStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SRC_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("srcDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("dstDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PORT, new org.apache.thrift.meta_data.FieldMetaData("hostPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("hostPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KRB5_PATH, new org.apache.thrift.meta_data.FieldMetaData("krb5Path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEYTAB_PATH, new org.apache.thrift.meta_data.FieldMetaData("keytabPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRINCIPAL_PATH, new org.apache.thrift.meta_data.FieldMetaData("principalPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(analyseKerberos_args.class, metaDataMap);
    }

    public analyseKerberos_args() {
    }

    public analyseKerberos_args(
      String spStr,
      int fdSum,
      String whereStr,
      String groupStr,
      String srcDirName,
      String dstDirName,
      String hostIp,
      String hostPort,
      String hostName,
      String hostPassword,
      String user,
      String krb5Path,
      String keytabPath,
      String principalPath)
    {
      this();
      this.spStr = spStr;
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      this.whereStr = whereStr;
      this.groupStr = groupStr;
      this.srcDirName = srcDirName;
      this.dstDirName = dstDirName;
      this.hostIp = hostIp;
      this.hostPort = hostPort;
      this.hostName = hostName;
      this.hostPassword = hostPassword;
      this.user = user;
      this.krb5Path = krb5Path;
      this.keytabPath = keytabPath;
      this.principalPath = principalPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public analyseKerberos_args(analyseKerberos_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSpStr()) {
        this.spStr = other.spStr;
      }
      this.fdSum = other.fdSum;
      if (other.isSetWhereStr()) {
        this.whereStr = other.whereStr;
      }
      if (other.isSetGroupStr()) {
        this.groupStr = other.groupStr;
      }
      if (other.isSetSrcDirName()) {
        this.srcDirName = other.srcDirName;
      }
      if (other.isSetDstDirName()) {
        this.dstDirName = other.dstDirName;
      }
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetHostPort()) {
        this.hostPort = other.hostPort;
      }
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
      if (other.isSetHostPassword()) {
        this.hostPassword = other.hostPassword;
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetKrb5Path()) {
        this.krb5Path = other.krb5Path;
      }
      if (other.isSetKeytabPath()) {
        this.keytabPath = other.keytabPath;
      }
      if (other.isSetPrincipalPath()) {
        this.principalPath = other.principalPath;
      }
    }

    public analyseKerberos_args deepCopy() {
      return new analyseKerberos_args(this);
    }


    public void clear() {
      this.spStr = null;
      setFdSumIsSet(false);
      this.fdSum = 0;
      this.whereStr = null;
      this.groupStr = null;
      this.srcDirName = null;
      this.dstDirName = null;
      this.hostIp = null;
      this.hostPort = null;
      this.hostName = null;
      this.hostPassword = null;
      this.user = null;
      this.krb5Path = null;
      this.keytabPath = null;
      this.principalPath = null;
    }

    public String getSpStr() {
      return this.spStr;
    }

    public analyseKerberos_args setSpStr(String spStr) {
      this.spStr = spStr;
      return this;
    }

    public void unsetSpStr() {
      this.spStr = null;
    }

    /** Returns true if field spStr is set (has been assigned a value) and false otherwise */
    public boolean isSetSpStr() {
      return this.spStr != null;
    }

    public void setSpStrIsSet(boolean value) {
      if (!value) {
        this.spStr = null;
      }
    }

    public int getFdSum() {
      return this.fdSum;
    }

    public analyseKerberos_args setFdSum(int fdSum) {
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      return this;
    }

    public void unsetFdSum() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    /** Returns true if field fdSum is set (has been assigned a value) and false otherwise */
    public boolean isSetFdSum() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    public void setFdSumIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FDSUM_ISSET_ID, value);
    }

    public String getWhereStr() {
      return this.whereStr;
    }

    public analyseKerberos_args setWhereStr(String whereStr) {
      this.whereStr = whereStr;
      return this;
    }

    public void unsetWhereStr() {
      this.whereStr = null;
    }

    /** Returns true if field whereStr is set (has been assigned a value) and false otherwise */
    public boolean isSetWhereStr() {
      return this.whereStr != null;
    }

    public void setWhereStrIsSet(boolean value) {
      if (!value) {
        this.whereStr = null;
      }
    }

    public String getGroupStr() {
      return this.groupStr;
    }

    public analyseKerberos_args setGroupStr(String groupStr) {
      this.groupStr = groupStr;
      return this;
    }

    public void unsetGroupStr() {
      this.groupStr = null;
    }

    /** Returns true if field groupStr is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupStr() {
      return this.groupStr != null;
    }

    public void setGroupStrIsSet(boolean value) {
      if (!value) {
        this.groupStr = null;
      }
    }

    public String getSrcDirName() {
      return this.srcDirName;
    }

    public analyseKerberos_args setSrcDirName(String srcDirName) {
      this.srcDirName = srcDirName;
      return this;
    }

    public void unsetSrcDirName() {
      this.srcDirName = null;
    }

    /** Returns true if field srcDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcDirName() {
      return this.srcDirName != null;
    }

    public void setSrcDirNameIsSet(boolean value) {
      if (!value) {
        this.srcDirName = null;
      }
    }

    public String getDstDirName() {
      return this.dstDirName;
    }

    public analyseKerberos_args setDstDirName(String dstDirName) {
      this.dstDirName = dstDirName;
      return this;
    }

    public void unsetDstDirName() {
      this.dstDirName = null;
    }

    /** Returns true if field dstDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetDstDirName() {
      return this.dstDirName != null;
    }

    public void setDstDirNameIsSet(boolean value) {
      if (!value) {
        this.dstDirName = null;
      }
    }

    public String getHostIp() {
      return this.hostIp;
    }

    public analyseKerberos_args setHostIp(String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public String getHostPort() {
      return this.hostPort;
    }

    public analyseKerberos_args setHostPort(String hostPort) {
      this.hostPort = hostPort;
      return this;
    }

    public void unsetHostPort() {
      this.hostPort = null;
    }

    /** Returns true if field hostPort is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPort() {
      return this.hostPort != null;
    }

    public void setHostPortIsSet(boolean value) {
      if (!value) {
        this.hostPort = null;
      }
    }

    public String getHostName() {
      return this.hostName;
    }

    public analyseKerberos_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public String getHostPassword() {
      return this.hostPassword;
    }

    public analyseKerberos_args setHostPassword(String hostPassword) {
      this.hostPassword = hostPassword;
      return this;
    }

    public void unsetHostPassword() {
      this.hostPassword = null;
    }

    /** Returns true if field hostPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPassword() {
      return this.hostPassword != null;
    }

    public void setHostPasswordIsSet(boolean value) {
      if (!value) {
        this.hostPassword = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public analyseKerberos_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getKrb5Path() {
      return this.krb5Path;
    }

    public analyseKerberos_args setKrb5Path(String krb5Path) {
      this.krb5Path = krb5Path;
      return this;
    }

    public void unsetKrb5Path() {
      this.krb5Path = null;
    }

    /** Returns true if field krb5Path is set (has been assigned a value) and false otherwise */
    public boolean isSetKrb5Path() {
      return this.krb5Path != null;
    }

    public void setKrb5PathIsSet(boolean value) {
      if (!value) {
        this.krb5Path = null;
      }
    }

    public String getKeytabPath() {
      return this.keytabPath;
    }

    public analyseKerberos_args setKeytabPath(String keytabPath) {
      this.keytabPath = keytabPath;
      return this;
    }

    public void unsetKeytabPath() {
      this.keytabPath = null;
    }

    /** Returns true if field keytabPath is set (has been assigned a value) and false otherwise */
    public boolean isSetKeytabPath() {
      return this.keytabPath != null;
    }

    public void setKeytabPathIsSet(boolean value) {
      if (!value) {
        this.keytabPath = null;
      }
    }

    public String getPrincipalPath() {
      return this.principalPath;
    }

    public analyseKerberos_args setPrincipalPath(String principalPath) {
      this.principalPath = principalPath;
      return this;
    }

    public void unsetPrincipalPath() {
      this.principalPath = null;
    }

    /** Returns true if field principalPath is set (has been assigned a value) and false otherwise */
    public boolean isSetPrincipalPath() {
      return this.principalPath != null;
    }

    public void setPrincipalPathIsSet(boolean value) {
      if (!value) {
        this.principalPath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SP_STR:
        if (value == null) {
          unsetSpStr();
        } else {
          setSpStr((String)value);
        }
        break;

      case FD_SUM:
        if (value == null) {
          unsetFdSum();
        } else {
          setFdSum((Integer)value);
        }
        break;

      case WHERE_STR:
        if (value == null) {
          unsetWhereStr();
        } else {
          setWhereStr((String)value);
        }
        break;

      case GROUP_STR:
        if (value == null) {
          unsetGroupStr();
        } else {
          setGroupStr((String)value);
        }
        break;

      case SRC_DIR_NAME:
        if (value == null) {
          unsetSrcDirName();
        } else {
          setSrcDirName((String)value);
        }
        break;

      case DST_DIR_NAME:
        if (value == null) {
          unsetDstDirName();
        } else {
          setDstDirName((String)value);
        }
        break;

      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((String)value);
        }
        break;

      case HOST_PORT:
        if (value == null) {
          unsetHostPort();
        } else {
          setHostPort((String)value);
        }
        break;

      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      case HOST_PASSWORD:
        if (value == null) {
          unsetHostPassword();
        } else {
          setHostPassword((String)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case KRB5_PATH:
        if (value == null) {
          unsetKrb5Path();
        } else {
          setKrb5Path((String)value);
        }
        break;

      case KEYTAB_PATH:
        if (value == null) {
          unsetKeytabPath();
        } else {
          setKeytabPath((String)value);
        }
        break;

      case PRINCIPAL_PATH:
        if (value == null) {
          unsetPrincipalPath();
        } else {
          setPrincipalPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SP_STR:
        return getSpStr();

      case FD_SUM:
        return getFdSum();

      case WHERE_STR:
        return getWhereStr();

      case GROUP_STR:
        return getGroupStr();

      case SRC_DIR_NAME:
        return getSrcDirName();

      case DST_DIR_NAME:
        return getDstDirName();

      case HOST_IP:
        return getHostIp();

      case HOST_PORT:
        return getHostPort();

      case HOST_NAME:
        return getHostName();

      case HOST_PASSWORD:
        return getHostPassword();

      case USER:
        return getUser();

      case KRB5_PATH:
        return getKrb5Path();

      case KEYTAB_PATH:
        return getKeytabPath();

      case PRINCIPAL_PATH:
        return getPrincipalPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SP_STR:
        return isSetSpStr();
      case FD_SUM:
        return isSetFdSum();
      case WHERE_STR:
        return isSetWhereStr();
      case GROUP_STR:
        return isSetGroupStr();
      case SRC_DIR_NAME:
        return isSetSrcDirName();
      case DST_DIR_NAME:
        return isSetDstDirName();
      case HOST_IP:
        return isSetHostIp();
      case HOST_PORT:
        return isSetHostPort();
      case HOST_NAME:
        return isSetHostName();
      case HOST_PASSWORD:
        return isSetHostPassword();
      case USER:
        return isSetUser();
      case KRB5_PATH:
        return isSetKrb5Path();
      case KEYTAB_PATH:
        return isSetKeytabPath();
      case PRINCIPAL_PATH:
        return isSetPrincipalPath();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof analyseKerberos_args)
        return this.equals((analyseKerberos_args)that);
      return false;
    }

    public boolean equals(analyseKerberos_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_spStr = true && this.isSetSpStr();
      boolean that_present_spStr = true && that.isSetSpStr();
      if (this_present_spStr || that_present_spStr) {
        if (!(this_present_spStr && that_present_spStr))
          return false;
        if (!this.spStr.equals(that.spStr))
          return false;
      }

      boolean this_present_fdSum = true;
      boolean that_present_fdSum = true;
      if (this_present_fdSum || that_present_fdSum) {
        if (!(this_present_fdSum && that_present_fdSum))
          return false;
        if (this.fdSum != that.fdSum)
          return false;
      }

      boolean this_present_whereStr = true && this.isSetWhereStr();
      boolean that_present_whereStr = true && that.isSetWhereStr();
      if (this_present_whereStr || that_present_whereStr) {
        if (!(this_present_whereStr && that_present_whereStr))
          return false;
        if (!this.whereStr.equals(that.whereStr))
          return false;
      }

      boolean this_present_groupStr = true && this.isSetGroupStr();
      boolean that_present_groupStr = true && that.isSetGroupStr();
      if (this_present_groupStr || that_present_groupStr) {
        if (!(this_present_groupStr && that_present_groupStr))
          return false;
        if (!this.groupStr.equals(that.groupStr))
          return false;
      }

      boolean this_present_srcDirName = true && this.isSetSrcDirName();
      boolean that_present_srcDirName = true && that.isSetSrcDirName();
      if (this_present_srcDirName || that_present_srcDirName) {
        if (!(this_present_srcDirName && that_present_srcDirName))
          return false;
        if (!this.srcDirName.equals(that.srcDirName))
          return false;
      }

      boolean this_present_dstDirName = true && this.isSetDstDirName();
      boolean that_present_dstDirName = true && that.isSetDstDirName();
      if (this_present_dstDirName || that_present_dstDirName) {
        if (!(this_present_dstDirName && that_present_dstDirName))
          return false;
        if (!this.dstDirName.equals(that.dstDirName))
          return false;
      }

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_hostPort = true && this.isSetHostPort();
      boolean that_present_hostPort = true && that.isSetHostPort();
      if (this_present_hostPort || that_present_hostPort) {
        if (!(this_present_hostPort && that_present_hostPort))
          return false;
        if (!this.hostPort.equals(that.hostPort))
          return false;
      }

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      boolean this_present_hostPassword = true && this.isSetHostPassword();
      boolean that_present_hostPassword = true && that.isSetHostPassword();
      if (this_present_hostPassword || that_present_hostPassword) {
        if (!(this_present_hostPassword && that_present_hostPassword))
          return false;
        if (!this.hostPassword.equals(that.hostPassword))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_krb5Path = true && this.isSetKrb5Path();
      boolean that_present_krb5Path = true && that.isSetKrb5Path();
      if (this_present_krb5Path || that_present_krb5Path) {
        if (!(this_present_krb5Path && that_present_krb5Path))
          return false;
        if (!this.krb5Path.equals(that.krb5Path))
          return false;
      }

      boolean this_present_keytabPath = true && this.isSetKeytabPath();
      boolean that_present_keytabPath = true && that.isSetKeytabPath();
      if (this_present_keytabPath || that_present_keytabPath) {
        if (!(this_present_keytabPath && that_present_keytabPath))
          return false;
        if (!this.keytabPath.equals(that.keytabPath))
          return false;
      }

      boolean this_present_principalPath = true && this.isSetPrincipalPath();
      boolean that_present_principalPath = true && that.isSetPrincipalPath();
      if (this_present_principalPath || that_present_principalPath) {
        if (!(this_present_principalPath && that_present_principalPath))
          return false;
        if (!this.principalPath.equals(that.principalPath))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSpStr()) ? 131071 : 524287);
      if (isSetSpStr())
        hashCode = hashCode * 8191 + spStr.hashCode();

      hashCode = hashCode * 8191 + fdSum;

      hashCode = hashCode * 8191 + ((isSetWhereStr()) ? 131071 : 524287);
      if (isSetWhereStr())
        hashCode = hashCode * 8191 + whereStr.hashCode();

      hashCode = hashCode * 8191 + ((isSetGroupStr()) ? 131071 : 524287);
      if (isSetGroupStr())
        hashCode = hashCode * 8191 + groupStr.hashCode();

      hashCode = hashCode * 8191 + ((isSetSrcDirName()) ? 131071 : 524287);
      if (isSetSrcDirName())
        hashCode = hashCode * 8191 + srcDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDstDirName()) ? 131071 : 524287);
      if (isSetDstDirName())
        hashCode = hashCode * 8191 + dstDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPort()) ? 131071 : 524287);
      if (isSetHostPort())
        hashCode = hashCode * 8191 + hostPort.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
      if (isSetHostName())
        hashCode = hashCode * 8191 + hostName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPassword()) ? 131071 : 524287);
      if (isSetHostPassword())
        hashCode = hashCode * 8191 + hostPassword.hashCode();

      hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
      if (isSetUser())
        hashCode = hashCode * 8191 + user.hashCode();

      hashCode = hashCode * 8191 + ((isSetKrb5Path()) ? 131071 : 524287);
      if (isSetKrb5Path())
        hashCode = hashCode * 8191 + krb5Path.hashCode();

      hashCode = hashCode * 8191 + ((isSetKeytabPath()) ? 131071 : 524287);
      if (isSetKeytabPath())
        hashCode = hashCode * 8191 + keytabPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetPrincipalPath()) ? 131071 : 524287);
      if (isSetPrincipalPath())
        hashCode = hashCode * 8191 + principalPath.hashCode();

      return hashCode;
    }


    public int compareTo(analyseKerberos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpStr()).compareTo(other.isSetSpStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spStr, other.spStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdSum()).compareTo(other.isSetFdSum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdSum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdSum, other.fdSum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWhereStr()).compareTo(other.isSetWhereStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhereStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whereStr, other.whereStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupStr()).compareTo(other.isSetGroupStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupStr, other.groupStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrcDirName()).compareTo(other.isSetSrcDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcDirName, other.srcDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDstDirName()).compareTo(other.isSetDstDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstDirName, other.dstDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPort()).compareTo(other.isSetHostPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPort, other.hostPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPassword()).compareTo(other.isSetHostPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPassword, other.hostPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKrb5Path()).compareTo(other.isSetKrb5Path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKrb5Path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.krb5Path, other.krb5Path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeytabPath()).compareTo(other.isSetKeytabPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeytabPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keytabPath, other.keytabPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrincipalPath()).compareTo(other.isSetPrincipalPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrincipalPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalPath, other.principalPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public String toString() {
      StringBuilder sb = new StringBuilder("analyseKerberos_args(");
      boolean first = true;

      sb.append("spStr:");
      if (this.spStr == null) {
        sb.append("null");
      } else {
        sb.append(this.spStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdSum:");
      sb.append(this.fdSum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("whereStr:");
      if (this.whereStr == null) {
        sb.append("null");
      } else {
        sb.append(this.whereStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupStr:");
      if (this.groupStr == null) {
        sb.append("null");
      } else {
        sb.append(this.groupStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcDirName:");
      if (this.srcDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.srcDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstDirName:");
      if (this.dstDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.dstDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPort:");
      if (this.hostPort == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPassword:");
      if (this.hostPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPassword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("krb5Path:");
      if (this.krb5Path == null) {
        sb.append("null");
      } else {
        sb.append(this.krb5Path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keytabPath:");
      if (this.keytabPath == null) {
        sb.append("null");
      } else {
        sb.append(this.keytabPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("principalPath:");
      if (this.principalPath == null) {
        sb.append("null");
      } else {
        sb.append(this.principalPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class analyseKerberos_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public analyseKerberos_argsStandardScheme getScheme() {
        return new analyseKerberos_argsStandardScheme();
      }
    }

    private static class analyseKerberos_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<analyseKerberos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, analyseKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SP_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.spStr = iprot.readString();
                struct.setSpStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FD_SUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fdSum = iprot.readI32();
                struct.setFdSumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WHERE_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.whereStr = iprot.readString();
                struct.setWhereStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // GROUP_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupStr = iprot.readString();
                struct.setGroupStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SRC_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcDirName = iprot.readString();
                struct.setSrcDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DST_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dstDirName = iprot.readString();
                struct.setDstDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // HOST_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPort = iprot.readString();
                struct.setHostPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // HOST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // HOST_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPassword = iprot.readString();
                struct.setHostPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // KRB5_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.krb5Path = iprot.readString();
                struct.setKrb5PathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // KEYTAB_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keytabPath = iprot.readString();
                struct.setKeytabPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // PRINCIPAL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.principalPath = iprot.readString();
                struct.setPrincipalPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, analyseKerberos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spStr != null) {
          oprot.writeFieldBegin(SP_STR_FIELD_DESC);
          oprot.writeString(struct.spStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FD_SUM_FIELD_DESC);
        oprot.writeI32(struct.fdSum);
        oprot.writeFieldEnd();
        if (struct.whereStr != null) {
          oprot.writeFieldBegin(WHERE_STR_FIELD_DESC);
          oprot.writeString(struct.whereStr);
          oprot.writeFieldEnd();
        }
        if (struct.groupStr != null) {
          oprot.writeFieldBegin(GROUP_STR_FIELD_DESC);
          oprot.writeString(struct.groupStr);
          oprot.writeFieldEnd();
        }
        if (struct.srcDirName != null) {
          oprot.writeFieldBegin(SRC_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.srcDirName);
          oprot.writeFieldEnd();
        }
        if (struct.dstDirName != null) {
          oprot.writeFieldBegin(DST_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.dstDirName);
          oprot.writeFieldEnd();
        }
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.hostPort != null) {
          oprot.writeFieldBegin(HOST_PORT_FIELD_DESC);
          oprot.writeString(struct.hostPort);
          oprot.writeFieldEnd();
        }
        if (struct.hostName != null) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
        if (struct.hostPassword != null) {
          oprot.writeFieldBegin(HOST_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.hostPassword);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.krb5Path != null) {
          oprot.writeFieldBegin(KRB5_PATH_FIELD_DESC);
          oprot.writeString(struct.krb5Path);
          oprot.writeFieldEnd();
        }
        if (struct.keytabPath != null) {
          oprot.writeFieldBegin(KEYTAB_PATH_FIELD_DESC);
          oprot.writeString(struct.keytabPath);
          oprot.writeFieldEnd();
        }
        if (struct.principalPath != null) {
          oprot.writeFieldBegin(PRINCIPAL_PATH_FIELD_DESC);
          oprot.writeString(struct.principalPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class analyseKerberos_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public analyseKerberos_argsTupleScheme getScheme() {
        return new analyseKerberos_argsTupleScheme();
      }
    }

    private static class analyseKerberos_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<analyseKerberos_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, analyseKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSpStr()) {
          optionals.set(0);
        }
        if (struct.isSetFdSum()) {
          optionals.set(1);
        }
        if (struct.isSetWhereStr()) {
          optionals.set(2);
        }
        if (struct.isSetGroupStr()) {
          optionals.set(3);
        }
        if (struct.isSetSrcDirName()) {
          optionals.set(4);
        }
        if (struct.isSetDstDirName()) {
          optionals.set(5);
        }
        if (struct.isSetHostIp()) {
          optionals.set(6);
        }
        if (struct.isSetHostPort()) {
          optionals.set(7);
        }
        if (struct.isSetHostName()) {
          optionals.set(8);
        }
        if (struct.isSetHostPassword()) {
          optionals.set(9);
        }
        if (struct.isSetUser()) {
          optionals.set(10);
        }
        if (struct.isSetKrb5Path()) {
          optionals.set(11);
        }
        if (struct.isSetKeytabPath()) {
          optionals.set(12);
        }
        if (struct.isSetPrincipalPath()) {
          optionals.set(13);
        }
        oprot.writeBitSet(optionals, 14);
        if (struct.isSetSpStr()) {
          oprot.writeString(struct.spStr);
        }
        if (struct.isSetFdSum()) {
          oprot.writeI32(struct.fdSum);
        }
        if (struct.isSetWhereStr()) {
          oprot.writeString(struct.whereStr);
        }
        if (struct.isSetGroupStr()) {
          oprot.writeString(struct.groupStr);
        }
        if (struct.isSetSrcDirName()) {
          oprot.writeString(struct.srcDirName);
        }
        if (struct.isSetDstDirName()) {
          oprot.writeString(struct.dstDirName);
        }
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetHostPort()) {
          oprot.writeString(struct.hostPort);
        }
        if (struct.isSetHostName()) {
          oprot.writeString(struct.hostName);
        }
        if (struct.isSetHostPassword()) {
          oprot.writeString(struct.hostPassword);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetKrb5Path()) {
          oprot.writeString(struct.krb5Path);
        }
        if (struct.isSetKeytabPath()) {
          oprot.writeString(struct.keytabPath);
        }
        if (struct.isSetPrincipalPath()) {
          oprot.writeString(struct.principalPath);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, analyseKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(14);
        if (incoming.get(0)) {
          struct.spStr = iprot.readString();
          struct.setSpStrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdSum = iprot.readI32();
          struct.setFdSumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.whereStr = iprot.readString();
          struct.setWhereStrIsSet(true);
        }
        if (incoming.get(3)) {
          struct.groupStr = iprot.readString();
          struct.setGroupStrIsSet(true);
        }
        if (incoming.get(4)) {
          struct.srcDirName = iprot.readString();
          struct.setSrcDirNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.dstDirName = iprot.readString();
          struct.setDstDirNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(7)) {
          struct.hostPort = iprot.readString();
          struct.setHostPortIsSet(true);
        }
        if (incoming.get(8)) {
          struct.hostName = iprot.readString();
          struct.setHostNameIsSet(true);
        }
        if (incoming.get(9)) {
          struct.hostPassword = iprot.readString();
          struct.setHostPasswordIsSet(true);
        }
        if (incoming.get(10)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(11)) {
          struct.krb5Path = iprot.readString();
          struct.setKrb5PathIsSet(true);
        }
        if (incoming.get(12)) {
          struct.keytabPath = iprot.readString();
          struct.setKeytabPathIsSet(true);
        }
        if (incoming.get(13)) {
          struct.principalPath = iprot.readString();
          struct.setPrincipalPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class analyseKerberos_result implements org.apache.thrift.TBase<analyseKerberos_result, analyseKerberos_result._Fields>, java.io.Serializable, Cloneable, Comparable<analyseKerberos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("analyseKerberos_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new analyseKerberos_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new analyseKerberos_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(analyseKerberos_result.class, metaDataMap);
    }

    public analyseKerberos_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public analyseKerberos_result(analyseKerberos_result other) {
    }

    public analyseKerberos_result deepCopy() {
      return new analyseKerberos_result(this);
    }


    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof analyseKerberos_result)
        return this.equals((analyseKerberos_result)that);
      return false;
    }

    public boolean equals(analyseKerberos_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }


    public int compareTo(analyseKerberos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public String toString() {
      StringBuilder sb = new StringBuilder("analyseKerberos_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class analyseKerberos_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public analyseKerberos_resultStandardScheme getScheme() {
        return new analyseKerberos_resultStandardScheme();
      }
    }

    private static class analyseKerberos_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<analyseKerberos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, analyseKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, analyseKerberos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class analyseKerberos_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public analyseKerberos_resultTupleScheme getScheme() {
        return new analyseKerberos_resultTupleScheme();
      }
    }

    private static class analyseKerberos_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<analyseKerberos_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, analyseKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, analyseKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class apriori2Kerberos_args implements org.apache.thrift.TBase<apriori2Kerberos_args, apriori2Kerberos_args._Fields>, java.io.Serializable, Cloneable, Comparable<apriori2Kerberos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("apriori2Kerberos_args");

    private static final org.apache.thrift.protocol.TField SP_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("spStr", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FD_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fdSum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField P_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pNum", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField O_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("oNum", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField WHERE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("whereStr", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField SRC_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("srcDirName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField DST_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dstDirName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField HOST_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPort", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField HOST_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPassword", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField KRB5_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("krb5Path", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField KEYTAB_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("keytabPath", org.apache.thrift.protocol.TType.STRING, (short)14);
    private static final org.apache.thrift.protocol.TField PRINCIPAL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("principalPath", org.apache.thrift.protocol.TType.STRING, (short)15);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new apriori2Kerberos_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new apriori2Kerberos_argsTupleSchemeFactory();

    public String spStr; // required
    public int fdSum; // required
    public String pNum; // required
    public String oNum; // required
    public String whereStr; // required
    public String srcDirName; // required
    public String dstDirName; // required
    public String hostIp; // required
    public String hostPort; // required
    public String hostName; // required
    public String hostPassword; // required
    public String user; // required
    public String krb5Path; // required
    public String keytabPath; // required
    public String principalPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SP_STR((short)1, "spStr"),
      FD_SUM((short)2, "fdSum"),
      P_NUM((short)3, "pNum"),
      O_NUM((short)4, "oNum"),
      WHERE_STR((short)5, "whereStr"),
      SRC_DIR_NAME((short)6, "srcDirName"),
      DST_DIR_NAME((short)7, "dstDirName"),
      HOST_IP((short)8, "hostIp"),
      HOST_PORT((short)9, "hostPort"),
      HOST_NAME((short)10, "hostName"),
      HOST_PASSWORD((short)11, "hostPassword"),
      USER((short)12, "user"),
      KRB5_PATH((short)13, "krb5Path"),
      KEYTAB_PATH((short)14, "keytabPath"),
      PRINCIPAL_PATH((short)15, "principalPath");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SP_STR
            return SP_STR;
          case 2: // FD_SUM
            return FD_SUM;
          case 3: // P_NUM
            return P_NUM;
          case 4: // O_NUM
            return O_NUM;
          case 5: // WHERE_STR
            return WHERE_STR;
          case 6: // SRC_DIR_NAME
            return SRC_DIR_NAME;
          case 7: // DST_DIR_NAME
            return DST_DIR_NAME;
          case 8: // HOST_IP
            return HOST_IP;
          case 9: // HOST_PORT
            return HOST_PORT;
          case 10: // HOST_NAME
            return HOST_NAME;
          case 11: // HOST_PASSWORD
            return HOST_PASSWORD;
          case 12: // USER
            return USER;
          case 13: // KRB5_PATH
            return KRB5_PATH;
          case 14: // KEYTAB_PATH
            return KEYTAB_PATH;
          case 15: // PRINCIPAL_PATH
            return PRINCIPAL_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FDSUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SP_STR, new org.apache.thrift.meta_data.FieldMetaData("spStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FD_SUM, new org.apache.thrift.meta_data.FieldMetaData("fdSum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.P_NUM, new org.apache.thrift.meta_data.FieldMetaData("pNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.O_NUM, new org.apache.thrift.meta_data.FieldMetaData("oNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WHERE_STR, new org.apache.thrift.meta_data.FieldMetaData("whereStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SRC_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("srcDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("dstDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PORT, new org.apache.thrift.meta_data.FieldMetaData("hostPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("hostPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KRB5_PATH, new org.apache.thrift.meta_data.FieldMetaData("krb5Path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEYTAB_PATH, new org.apache.thrift.meta_data.FieldMetaData("keytabPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRINCIPAL_PATH, new org.apache.thrift.meta_data.FieldMetaData("principalPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(apriori2Kerberos_args.class, metaDataMap);
    }

    public apriori2Kerberos_args() {
    }

    public apriori2Kerberos_args(
      String spStr,
      int fdSum,
      String pNum,
      String oNum,
      String whereStr,
      String srcDirName,
      String dstDirName,
      String hostIp,
      String hostPort,
      String hostName,
      String hostPassword,
      String user,
      String krb5Path,
      String keytabPath,
      String principalPath)
    {
      this();
      this.spStr = spStr;
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      this.pNum = pNum;
      this.oNum = oNum;
      this.whereStr = whereStr;
      this.srcDirName = srcDirName;
      this.dstDirName = dstDirName;
      this.hostIp = hostIp;
      this.hostPort = hostPort;
      this.hostName = hostName;
      this.hostPassword = hostPassword;
      this.user = user;
      this.krb5Path = krb5Path;
      this.keytabPath = keytabPath;
      this.principalPath = principalPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public apriori2Kerberos_args(apriori2Kerberos_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSpStr()) {
        this.spStr = other.spStr;
      }
      this.fdSum = other.fdSum;
      if (other.isSetPNum()) {
        this.pNum = other.pNum;
      }
      if (other.isSetONum()) {
        this.oNum = other.oNum;
      }
      if (other.isSetWhereStr()) {
        this.whereStr = other.whereStr;
      }
      if (other.isSetSrcDirName()) {
        this.srcDirName = other.srcDirName;
      }
      if (other.isSetDstDirName()) {
        this.dstDirName = other.dstDirName;
      }
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetHostPort()) {
        this.hostPort = other.hostPort;
      }
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
      if (other.isSetHostPassword()) {
        this.hostPassword = other.hostPassword;
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetKrb5Path()) {
        this.krb5Path = other.krb5Path;
      }
      if (other.isSetKeytabPath()) {
        this.keytabPath = other.keytabPath;
      }
      if (other.isSetPrincipalPath()) {
        this.principalPath = other.principalPath;
      }
    }

    public apriori2Kerberos_args deepCopy() {
      return new apriori2Kerberos_args(this);
    }


    public void clear() {
      this.spStr = null;
      setFdSumIsSet(false);
      this.fdSum = 0;
      this.pNum = null;
      this.oNum = null;
      this.whereStr = null;
      this.srcDirName = null;
      this.dstDirName = null;
      this.hostIp = null;
      this.hostPort = null;
      this.hostName = null;
      this.hostPassword = null;
      this.user = null;
      this.krb5Path = null;
      this.keytabPath = null;
      this.principalPath = null;
    }

    public String getSpStr() {
      return this.spStr;
    }

    public apriori2Kerberos_args setSpStr(String spStr) {
      this.spStr = spStr;
      return this;
    }

    public void unsetSpStr() {
      this.spStr = null;
    }

    /** Returns true if field spStr is set (has been assigned a value) and false otherwise */
    public boolean isSetSpStr() {
      return this.spStr != null;
    }

    public void setSpStrIsSet(boolean value) {
      if (!value) {
        this.spStr = null;
      }
    }

    public int getFdSum() {
      return this.fdSum;
    }

    public apriori2Kerberos_args setFdSum(int fdSum) {
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      return this;
    }

    public void unsetFdSum() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    /** Returns true if field fdSum is set (has been assigned a value) and false otherwise */
    public boolean isSetFdSum() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    public void setFdSumIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FDSUM_ISSET_ID, value);
    }

    public String getPNum() {
      return this.pNum;
    }

    public apriori2Kerberos_args setPNum(String pNum) {
      this.pNum = pNum;
      return this;
    }

    public void unsetPNum() {
      this.pNum = null;
    }

    /** Returns true if field pNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPNum() {
      return this.pNum != null;
    }

    public void setPNumIsSet(boolean value) {
      if (!value) {
        this.pNum = null;
      }
    }

    public String getONum() {
      return this.oNum;
    }

    public apriori2Kerberos_args setONum(String oNum) {
      this.oNum = oNum;
      return this;
    }

    public void unsetONum() {
      this.oNum = null;
    }

    /** Returns true if field oNum is set (has been assigned a value) and false otherwise */
    public boolean isSetONum() {
      return this.oNum != null;
    }

    public void setONumIsSet(boolean value) {
      if (!value) {
        this.oNum = null;
      }
    }

    public String getWhereStr() {
      return this.whereStr;
    }

    public apriori2Kerberos_args setWhereStr(String whereStr) {
      this.whereStr = whereStr;
      return this;
    }

    public void unsetWhereStr() {
      this.whereStr = null;
    }

    /** Returns true if field whereStr is set (has been assigned a value) and false otherwise */
    public boolean isSetWhereStr() {
      return this.whereStr != null;
    }

    public void setWhereStrIsSet(boolean value) {
      if (!value) {
        this.whereStr = null;
      }
    }

    public String getSrcDirName() {
      return this.srcDirName;
    }

    public apriori2Kerberos_args setSrcDirName(String srcDirName) {
      this.srcDirName = srcDirName;
      return this;
    }

    public void unsetSrcDirName() {
      this.srcDirName = null;
    }

    /** Returns true if field srcDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcDirName() {
      return this.srcDirName != null;
    }

    public void setSrcDirNameIsSet(boolean value) {
      if (!value) {
        this.srcDirName = null;
      }
    }

    public String getDstDirName() {
      return this.dstDirName;
    }

    public apriori2Kerberos_args setDstDirName(String dstDirName) {
      this.dstDirName = dstDirName;
      return this;
    }

    public void unsetDstDirName() {
      this.dstDirName = null;
    }

    /** Returns true if field dstDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetDstDirName() {
      return this.dstDirName != null;
    }

    public void setDstDirNameIsSet(boolean value) {
      if (!value) {
        this.dstDirName = null;
      }
    }

    public String getHostIp() {
      return this.hostIp;
    }

    public apriori2Kerberos_args setHostIp(String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public String getHostPort() {
      return this.hostPort;
    }

    public apriori2Kerberos_args setHostPort(String hostPort) {
      this.hostPort = hostPort;
      return this;
    }

    public void unsetHostPort() {
      this.hostPort = null;
    }

    /** Returns true if field hostPort is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPort() {
      return this.hostPort != null;
    }

    public void setHostPortIsSet(boolean value) {
      if (!value) {
        this.hostPort = null;
      }
    }

    public String getHostName() {
      return this.hostName;
    }

    public apriori2Kerberos_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public String getHostPassword() {
      return this.hostPassword;
    }

    public apriori2Kerberos_args setHostPassword(String hostPassword) {
      this.hostPassword = hostPassword;
      return this;
    }

    public void unsetHostPassword() {
      this.hostPassword = null;
    }

    /** Returns true if field hostPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPassword() {
      return this.hostPassword != null;
    }

    public void setHostPasswordIsSet(boolean value) {
      if (!value) {
        this.hostPassword = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public apriori2Kerberos_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getKrb5Path() {
      return this.krb5Path;
    }

    public apriori2Kerberos_args setKrb5Path(String krb5Path) {
      this.krb5Path = krb5Path;
      return this;
    }

    public void unsetKrb5Path() {
      this.krb5Path = null;
    }

    /** Returns true if field krb5Path is set (has been assigned a value) and false otherwise */
    public boolean isSetKrb5Path() {
      return this.krb5Path != null;
    }

    public void setKrb5PathIsSet(boolean value) {
      if (!value) {
        this.krb5Path = null;
      }
    }

    public String getKeytabPath() {
      return this.keytabPath;
    }

    public apriori2Kerberos_args setKeytabPath(String keytabPath) {
      this.keytabPath = keytabPath;
      return this;
    }

    public void unsetKeytabPath() {
      this.keytabPath = null;
    }

    /** Returns true if field keytabPath is set (has been assigned a value) and false otherwise */
    public boolean isSetKeytabPath() {
      return this.keytabPath != null;
    }

    public void setKeytabPathIsSet(boolean value) {
      if (!value) {
        this.keytabPath = null;
      }
    }

    public String getPrincipalPath() {
      return this.principalPath;
    }

    public apriori2Kerberos_args setPrincipalPath(String principalPath) {
      this.principalPath = principalPath;
      return this;
    }

    public void unsetPrincipalPath() {
      this.principalPath = null;
    }

    /** Returns true if field principalPath is set (has been assigned a value) and false otherwise */
    public boolean isSetPrincipalPath() {
      return this.principalPath != null;
    }

    public void setPrincipalPathIsSet(boolean value) {
      if (!value) {
        this.principalPath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SP_STR:
        if (value == null) {
          unsetSpStr();
        } else {
          setSpStr((String)value);
        }
        break;

      case FD_SUM:
        if (value == null) {
          unsetFdSum();
        } else {
          setFdSum((Integer)value);
        }
        break;

      case P_NUM:
        if (value == null) {
          unsetPNum();
        } else {
          setPNum((String)value);
        }
        break;

      case O_NUM:
        if (value == null) {
          unsetONum();
        } else {
          setONum((String)value);
        }
        break;

      case WHERE_STR:
        if (value == null) {
          unsetWhereStr();
        } else {
          setWhereStr((String)value);
        }
        break;

      case SRC_DIR_NAME:
        if (value == null) {
          unsetSrcDirName();
        } else {
          setSrcDirName((String)value);
        }
        break;

      case DST_DIR_NAME:
        if (value == null) {
          unsetDstDirName();
        } else {
          setDstDirName((String)value);
        }
        break;

      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((String)value);
        }
        break;

      case HOST_PORT:
        if (value == null) {
          unsetHostPort();
        } else {
          setHostPort((String)value);
        }
        break;

      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      case HOST_PASSWORD:
        if (value == null) {
          unsetHostPassword();
        } else {
          setHostPassword((String)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case KRB5_PATH:
        if (value == null) {
          unsetKrb5Path();
        } else {
          setKrb5Path((String)value);
        }
        break;

      case KEYTAB_PATH:
        if (value == null) {
          unsetKeytabPath();
        } else {
          setKeytabPath((String)value);
        }
        break;

      case PRINCIPAL_PATH:
        if (value == null) {
          unsetPrincipalPath();
        } else {
          setPrincipalPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SP_STR:
        return getSpStr();

      case FD_SUM:
        return getFdSum();

      case P_NUM:
        return getPNum();

      case O_NUM:
        return getONum();

      case WHERE_STR:
        return getWhereStr();

      case SRC_DIR_NAME:
        return getSrcDirName();

      case DST_DIR_NAME:
        return getDstDirName();

      case HOST_IP:
        return getHostIp();

      case HOST_PORT:
        return getHostPort();

      case HOST_NAME:
        return getHostName();

      case HOST_PASSWORD:
        return getHostPassword();

      case USER:
        return getUser();

      case KRB5_PATH:
        return getKrb5Path();

      case KEYTAB_PATH:
        return getKeytabPath();

      case PRINCIPAL_PATH:
        return getPrincipalPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SP_STR:
        return isSetSpStr();
      case FD_SUM:
        return isSetFdSum();
      case P_NUM:
        return isSetPNum();
      case O_NUM:
        return isSetONum();
      case WHERE_STR:
        return isSetWhereStr();
      case SRC_DIR_NAME:
        return isSetSrcDirName();
      case DST_DIR_NAME:
        return isSetDstDirName();
      case HOST_IP:
        return isSetHostIp();
      case HOST_PORT:
        return isSetHostPort();
      case HOST_NAME:
        return isSetHostName();
      case HOST_PASSWORD:
        return isSetHostPassword();
      case USER:
        return isSetUser();
      case KRB5_PATH:
        return isSetKrb5Path();
      case KEYTAB_PATH:
        return isSetKeytabPath();
      case PRINCIPAL_PATH:
        return isSetPrincipalPath();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof apriori2Kerberos_args)
        return this.equals((apriori2Kerberos_args)that);
      return false;
    }

    public boolean equals(apriori2Kerberos_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_spStr = true && this.isSetSpStr();
      boolean that_present_spStr = true && that.isSetSpStr();
      if (this_present_spStr || that_present_spStr) {
        if (!(this_present_spStr && that_present_spStr))
          return false;
        if (!this.spStr.equals(that.spStr))
          return false;
      }

      boolean this_present_fdSum = true;
      boolean that_present_fdSum = true;
      if (this_present_fdSum || that_present_fdSum) {
        if (!(this_present_fdSum && that_present_fdSum))
          return false;
        if (this.fdSum != that.fdSum)
          return false;
      }

      boolean this_present_pNum = true && this.isSetPNum();
      boolean that_present_pNum = true && that.isSetPNum();
      if (this_present_pNum || that_present_pNum) {
        if (!(this_present_pNum && that_present_pNum))
          return false;
        if (!this.pNum.equals(that.pNum))
          return false;
      }

      boolean this_present_oNum = true && this.isSetONum();
      boolean that_present_oNum = true && that.isSetONum();
      if (this_present_oNum || that_present_oNum) {
        if (!(this_present_oNum && that_present_oNum))
          return false;
        if (!this.oNum.equals(that.oNum))
          return false;
      }

      boolean this_present_whereStr = true && this.isSetWhereStr();
      boolean that_present_whereStr = true && that.isSetWhereStr();
      if (this_present_whereStr || that_present_whereStr) {
        if (!(this_present_whereStr && that_present_whereStr))
          return false;
        if (!this.whereStr.equals(that.whereStr))
          return false;
      }

      boolean this_present_srcDirName = true && this.isSetSrcDirName();
      boolean that_present_srcDirName = true && that.isSetSrcDirName();
      if (this_present_srcDirName || that_present_srcDirName) {
        if (!(this_present_srcDirName && that_present_srcDirName))
          return false;
        if (!this.srcDirName.equals(that.srcDirName))
          return false;
      }

      boolean this_present_dstDirName = true && this.isSetDstDirName();
      boolean that_present_dstDirName = true && that.isSetDstDirName();
      if (this_present_dstDirName || that_present_dstDirName) {
        if (!(this_present_dstDirName && that_present_dstDirName))
          return false;
        if (!this.dstDirName.equals(that.dstDirName))
          return false;
      }

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_hostPort = true && this.isSetHostPort();
      boolean that_present_hostPort = true && that.isSetHostPort();
      if (this_present_hostPort || that_present_hostPort) {
        if (!(this_present_hostPort && that_present_hostPort))
          return false;
        if (!this.hostPort.equals(that.hostPort))
          return false;
      }

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      boolean this_present_hostPassword = true && this.isSetHostPassword();
      boolean that_present_hostPassword = true && that.isSetHostPassword();
      if (this_present_hostPassword || that_present_hostPassword) {
        if (!(this_present_hostPassword && that_present_hostPassword))
          return false;
        if (!this.hostPassword.equals(that.hostPassword))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_krb5Path = true && this.isSetKrb5Path();
      boolean that_present_krb5Path = true && that.isSetKrb5Path();
      if (this_present_krb5Path || that_present_krb5Path) {
        if (!(this_present_krb5Path && that_present_krb5Path))
          return false;
        if (!this.krb5Path.equals(that.krb5Path))
          return false;
      }

      boolean this_present_keytabPath = true && this.isSetKeytabPath();
      boolean that_present_keytabPath = true && that.isSetKeytabPath();
      if (this_present_keytabPath || that_present_keytabPath) {
        if (!(this_present_keytabPath && that_present_keytabPath))
          return false;
        if (!this.keytabPath.equals(that.keytabPath))
          return false;
      }

      boolean this_present_principalPath = true && this.isSetPrincipalPath();
      boolean that_present_principalPath = true && that.isSetPrincipalPath();
      if (this_present_principalPath || that_present_principalPath) {
        if (!(this_present_principalPath && that_present_principalPath))
          return false;
        if (!this.principalPath.equals(that.principalPath))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSpStr()) ? 131071 : 524287);
      if (isSetSpStr())
        hashCode = hashCode * 8191 + spStr.hashCode();

      hashCode = hashCode * 8191 + fdSum;

      hashCode = hashCode * 8191 + ((isSetPNum()) ? 131071 : 524287);
      if (isSetPNum())
        hashCode = hashCode * 8191 + pNum.hashCode();

      hashCode = hashCode * 8191 + ((isSetONum()) ? 131071 : 524287);
      if (isSetONum())
        hashCode = hashCode * 8191 + oNum.hashCode();

      hashCode = hashCode * 8191 + ((isSetWhereStr()) ? 131071 : 524287);
      if (isSetWhereStr())
        hashCode = hashCode * 8191 + whereStr.hashCode();

      hashCode = hashCode * 8191 + ((isSetSrcDirName()) ? 131071 : 524287);
      if (isSetSrcDirName())
        hashCode = hashCode * 8191 + srcDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDstDirName()) ? 131071 : 524287);
      if (isSetDstDirName())
        hashCode = hashCode * 8191 + dstDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPort()) ? 131071 : 524287);
      if (isSetHostPort())
        hashCode = hashCode * 8191 + hostPort.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
      if (isSetHostName())
        hashCode = hashCode * 8191 + hostName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPassword()) ? 131071 : 524287);
      if (isSetHostPassword())
        hashCode = hashCode * 8191 + hostPassword.hashCode();

      hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
      if (isSetUser())
        hashCode = hashCode * 8191 + user.hashCode();

      hashCode = hashCode * 8191 + ((isSetKrb5Path()) ? 131071 : 524287);
      if (isSetKrb5Path())
        hashCode = hashCode * 8191 + krb5Path.hashCode();

      hashCode = hashCode * 8191 + ((isSetKeytabPath()) ? 131071 : 524287);
      if (isSetKeytabPath())
        hashCode = hashCode * 8191 + keytabPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetPrincipalPath()) ? 131071 : 524287);
      if (isSetPrincipalPath())
        hashCode = hashCode * 8191 + principalPath.hashCode();

      return hashCode;
    }


    public int compareTo(apriori2Kerberos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpStr()).compareTo(other.isSetSpStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spStr, other.spStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdSum()).compareTo(other.isSetFdSum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdSum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdSum, other.fdSum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPNum()).compareTo(other.isSetPNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pNum, other.pNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetONum()).compareTo(other.isSetONum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetONum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oNum, other.oNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWhereStr()).compareTo(other.isSetWhereStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhereStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whereStr, other.whereStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrcDirName()).compareTo(other.isSetSrcDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcDirName, other.srcDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDstDirName()).compareTo(other.isSetDstDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstDirName, other.dstDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPort()).compareTo(other.isSetHostPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPort, other.hostPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPassword()).compareTo(other.isSetHostPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPassword, other.hostPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKrb5Path()).compareTo(other.isSetKrb5Path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKrb5Path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.krb5Path, other.krb5Path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeytabPath()).compareTo(other.isSetKeytabPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeytabPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keytabPath, other.keytabPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrincipalPath()).compareTo(other.isSetPrincipalPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrincipalPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalPath, other.principalPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public String toString() {
      StringBuilder sb = new StringBuilder("apriori2Kerberos_args(");
      boolean first = true;

      sb.append("spStr:");
      if (this.spStr == null) {
        sb.append("null");
      } else {
        sb.append(this.spStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdSum:");
      sb.append(this.fdSum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pNum:");
      if (this.pNum == null) {
        sb.append("null");
      } else {
        sb.append(this.pNum);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oNum:");
      if (this.oNum == null) {
        sb.append("null");
      } else {
        sb.append(this.oNum);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("whereStr:");
      if (this.whereStr == null) {
        sb.append("null");
      } else {
        sb.append(this.whereStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcDirName:");
      if (this.srcDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.srcDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstDirName:");
      if (this.dstDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.dstDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPort:");
      if (this.hostPort == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPassword:");
      if (this.hostPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPassword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("krb5Path:");
      if (this.krb5Path == null) {
        sb.append("null");
      } else {
        sb.append(this.krb5Path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keytabPath:");
      if (this.keytabPath == null) {
        sb.append("null");
      } else {
        sb.append(this.keytabPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("principalPath:");
      if (this.principalPath == null) {
        sb.append("null");
      } else {
        sb.append(this.principalPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class apriori2Kerberos_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public apriori2Kerberos_argsStandardScheme getScheme() {
        return new apriori2Kerberos_argsStandardScheme();
      }
    }

    private static class apriori2Kerberos_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<apriori2Kerberos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, apriori2Kerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SP_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.spStr = iprot.readString();
                struct.setSpStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FD_SUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fdSum = iprot.readI32();
                struct.setFdSumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // P_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pNum = iprot.readString();
                struct.setPNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // O_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.oNum = iprot.readString();
                struct.setONumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // WHERE_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.whereStr = iprot.readString();
                struct.setWhereStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SRC_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcDirName = iprot.readString();
                struct.setSrcDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // DST_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dstDirName = iprot.readString();
                struct.setDstDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // HOST_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPort = iprot.readString();
                struct.setHostPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // HOST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // HOST_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPassword = iprot.readString();
                struct.setHostPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // KRB5_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.krb5Path = iprot.readString();
                struct.setKrb5PathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // KEYTAB_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keytabPath = iprot.readString();
                struct.setKeytabPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 15: // PRINCIPAL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.principalPath = iprot.readString();
                struct.setPrincipalPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, apriori2Kerberos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spStr != null) {
          oprot.writeFieldBegin(SP_STR_FIELD_DESC);
          oprot.writeString(struct.spStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FD_SUM_FIELD_DESC);
        oprot.writeI32(struct.fdSum);
        oprot.writeFieldEnd();
        if (struct.pNum != null) {
          oprot.writeFieldBegin(P_NUM_FIELD_DESC);
          oprot.writeString(struct.pNum);
          oprot.writeFieldEnd();
        }
        if (struct.oNum != null) {
          oprot.writeFieldBegin(O_NUM_FIELD_DESC);
          oprot.writeString(struct.oNum);
          oprot.writeFieldEnd();
        }
        if (struct.whereStr != null) {
          oprot.writeFieldBegin(WHERE_STR_FIELD_DESC);
          oprot.writeString(struct.whereStr);
          oprot.writeFieldEnd();
        }
        if (struct.srcDirName != null) {
          oprot.writeFieldBegin(SRC_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.srcDirName);
          oprot.writeFieldEnd();
        }
        if (struct.dstDirName != null) {
          oprot.writeFieldBegin(DST_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.dstDirName);
          oprot.writeFieldEnd();
        }
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.hostPort != null) {
          oprot.writeFieldBegin(HOST_PORT_FIELD_DESC);
          oprot.writeString(struct.hostPort);
          oprot.writeFieldEnd();
        }
        if (struct.hostName != null) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
        if (struct.hostPassword != null) {
          oprot.writeFieldBegin(HOST_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.hostPassword);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.krb5Path != null) {
          oprot.writeFieldBegin(KRB5_PATH_FIELD_DESC);
          oprot.writeString(struct.krb5Path);
          oprot.writeFieldEnd();
        }
        if (struct.keytabPath != null) {
          oprot.writeFieldBegin(KEYTAB_PATH_FIELD_DESC);
          oprot.writeString(struct.keytabPath);
          oprot.writeFieldEnd();
        }
        if (struct.principalPath != null) {
          oprot.writeFieldBegin(PRINCIPAL_PATH_FIELD_DESC);
          oprot.writeString(struct.principalPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class apriori2Kerberos_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public apriori2Kerberos_argsTupleScheme getScheme() {
        return new apriori2Kerberos_argsTupleScheme();
      }
    }

    private static class apriori2Kerberos_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<apriori2Kerberos_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, apriori2Kerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSpStr()) {
          optionals.set(0);
        }
        if (struct.isSetFdSum()) {
          optionals.set(1);
        }
        if (struct.isSetPNum()) {
          optionals.set(2);
        }
        if (struct.isSetONum()) {
          optionals.set(3);
        }
        if (struct.isSetWhereStr()) {
          optionals.set(4);
        }
        if (struct.isSetSrcDirName()) {
          optionals.set(5);
        }
        if (struct.isSetDstDirName()) {
          optionals.set(6);
        }
        if (struct.isSetHostIp()) {
          optionals.set(7);
        }
        if (struct.isSetHostPort()) {
          optionals.set(8);
        }
        if (struct.isSetHostName()) {
          optionals.set(9);
        }
        if (struct.isSetHostPassword()) {
          optionals.set(10);
        }
        if (struct.isSetUser()) {
          optionals.set(11);
        }
        if (struct.isSetKrb5Path()) {
          optionals.set(12);
        }
        if (struct.isSetKeytabPath()) {
          optionals.set(13);
        }
        if (struct.isSetPrincipalPath()) {
          optionals.set(14);
        }
        oprot.writeBitSet(optionals, 15);
        if (struct.isSetSpStr()) {
          oprot.writeString(struct.spStr);
        }
        if (struct.isSetFdSum()) {
          oprot.writeI32(struct.fdSum);
        }
        if (struct.isSetPNum()) {
          oprot.writeString(struct.pNum);
        }
        if (struct.isSetONum()) {
          oprot.writeString(struct.oNum);
        }
        if (struct.isSetWhereStr()) {
          oprot.writeString(struct.whereStr);
        }
        if (struct.isSetSrcDirName()) {
          oprot.writeString(struct.srcDirName);
        }
        if (struct.isSetDstDirName()) {
          oprot.writeString(struct.dstDirName);
        }
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetHostPort()) {
          oprot.writeString(struct.hostPort);
        }
        if (struct.isSetHostName()) {
          oprot.writeString(struct.hostName);
        }
        if (struct.isSetHostPassword()) {
          oprot.writeString(struct.hostPassword);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetKrb5Path()) {
          oprot.writeString(struct.krb5Path);
        }
        if (struct.isSetKeytabPath()) {
          oprot.writeString(struct.keytabPath);
        }
        if (struct.isSetPrincipalPath()) {
          oprot.writeString(struct.principalPath);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, apriori2Kerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(15);
        if (incoming.get(0)) {
          struct.spStr = iprot.readString();
          struct.setSpStrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdSum = iprot.readI32();
          struct.setFdSumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pNum = iprot.readString();
          struct.setPNumIsSet(true);
        }
        if (incoming.get(3)) {
          struct.oNum = iprot.readString();
          struct.setONumIsSet(true);
        }
        if (incoming.get(4)) {
          struct.whereStr = iprot.readString();
          struct.setWhereStrIsSet(true);
        }
        if (incoming.get(5)) {
          struct.srcDirName = iprot.readString();
          struct.setSrcDirNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.dstDirName = iprot.readString();
          struct.setDstDirNameIsSet(true);
        }
        if (incoming.get(7)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(8)) {
          struct.hostPort = iprot.readString();
          struct.setHostPortIsSet(true);
        }
        if (incoming.get(9)) {
          struct.hostName = iprot.readString();
          struct.setHostNameIsSet(true);
        }
        if (incoming.get(10)) {
          struct.hostPassword = iprot.readString();
          struct.setHostPasswordIsSet(true);
        }
        if (incoming.get(11)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(12)) {
          struct.krb5Path = iprot.readString();
          struct.setKrb5PathIsSet(true);
        }
        if (incoming.get(13)) {
          struct.keytabPath = iprot.readString();
          struct.setKeytabPathIsSet(true);
        }
        if (incoming.get(14)) {
          struct.principalPath = iprot.readString();
          struct.setPrincipalPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class apriori2Kerberos_result implements org.apache.thrift.TBase<apriori2Kerberos_result, apriori2Kerberos_result._Fields>, java.io.Serializable, Cloneable, Comparable<apriori2Kerberos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("apriori2Kerberos_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new apriori2Kerberos_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new apriori2Kerberos_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(apriori2Kerberos_result.class, metaDataMap);
    }

    public apriori2Kerberos_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public apriori2Kerberos_result(apriori2Kerberos_result other) {
    }

    public apriori2Kerberos_result deepCopy() {
      return new apriori2Kerberos_result(this);
    }


    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof apriori2Kerberos_result)
        return this.equals((apriori2Kerberos_result)that);
      return false;
    }

    public boolean equals(apriori2Kerberos_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }


    public int compareTo(apriori2Kerberos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public String toString() {
      StringBuilder sb = new StringBuilder("apriori2Kerberos_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class apriori2Kerberos_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public apriori2Kerberos_resultStandardScheme getScheme() {
        return new apriori2Kerberos_resultStandardScheme();
      }
    }

    private static class apriori2Kerberos_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<apriori2Kerberos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, apriori2Kerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, apriori2Kerberos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class apriori2Kerberos_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public apriori2Kerberos_resultTupleScheme getScheme() {
        return new apriori2Kerberos_resultTupleScheme();
      }
    }

    private static class apriori2Kerberos_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<apriori2Kerberos_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, apriori2Kerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, apriori2Kerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class apriori3Kerberos_args implements org.apache.thrift.TBase<apriori3Kerberos_args, apriori3Kerberos_args._Fields>, java.io.Serializable, Cloneable, Comparable<apriori3Kerberos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("apriori3Kerberos_args");

    private static final org.apache.thrift.protocol.TField SP_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("spStr", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FD_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fdSum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField P_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("pNum", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField O_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("oNum", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField WHERE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("whereStr", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField SRC_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("srcDirName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField DST_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dstDirName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField HOST_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPort", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField HOST_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPassword", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField KRB5_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("krb5Path", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField KEYTAB_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("keytabPath", org.apache.thrift.protocol.TType.STRING, (short)14);
    private static final org.apache.thrift.protocol.TField PRINCIPAL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("principalPath", org.apache.thrift.protocol.TType.STRING, (short)15);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new apriori3Kerberos_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new apriori3Kerberos_argsTupleSchemeFactory();

    public String spStr; // required
    public int fdSum; // required
    public String pNum; // required
    public String oNum; // required
    public String whereStr; // required
    public String srcDirName; // required
    public String dstDirName; // required
    public String hostIp; // required
    public String hostPort; // required
    public String hostName; // required
    public String hostPassword; // required
    public String user; // required
    public String krb5Path; // required
    public String keytabPath; // required
    public String principalPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SP_STR((short)1, "spStr"),
      FD_SUM((short)2, "fdSum"),
      P_NUM((short)3, "pNum"),
      O_NUM((short)4, "oNum"),
      WHERE_STR((short)5, "whereStr"),
      SRC_DIR_NAME((short)6, "srcDirName"),
      DST_DIR_NAME((short)7, "dstDirName"),
      HOST_IP((short)8, "hostIp"),
      HOST_PORT((short)9, "hostPort"),
      HOST_NAME((short)10, "hostName"),
      HOST_PASSWORD((short)11, "hostPassword"),
      USER((short)12, "user"),
      KRB5_PATH((short)13, "krb5Path"),
      KEYTAB_PATH((short)14, "keytabPath"),
      PRINCIPAL_PATH((short)15, "principalPath");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SP_STR
            return SP_STR;
          case 2: // FD_SUM
            return FD_SUM;
          case 3: // P_NUM
            return P_NUM;
          case 4: // O_NUM
            return O_NUM;
          case 5: // WHERE_STR
            return WHERE_STR;
          case 6: // SRC_DIR_NAME
            return SRC_DIR_NAME;
          case 7: // DST_DIR_NAME
            return DST_DIR_NAME;
          case 8: // HOST_IP
            return HOST_IP;
          case 9: // HOST_PORT
            return HOST_PORT;
          case 10: // HOST_NAME
            return HOST_NAME;
          case 11: // HOST_PASSWORD
            return HOST_PASSWORD;
          case 12: // USER
            return USER;
          case 13: // KRB5_PATH
            return KRB5_PATH;
          case 14: // KEYTAB_PATH
            return KEYTAB_PATH;
          case 15: // PRINCIPAL_PATH
            return PRINCIPAL_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FDSUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SP_STR, new org.apache.thrift.meta_data.FieldMetaData("spStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FD_SUM, new org.apache.thrift.meta_data.FieldMetaData("fdSum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.P_NUM, new org.apache.thrift.meta_data.FieldMetaData("pNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.O_NUM, new org.apache.thrift.meta_data.FieldMetaData("oNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WHERE_STR, new org.apache.thrift.meta_data.FieldMetaData("whereStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SRC_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("srcDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("dstDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PORT, new org.apache.thrift.meta_data.FieldMetaData("hostPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("hostPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KRB5_PATH, new org.apache.thrift.meta_data.FieldMetaData("krb5Path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEYTAB_PATH, new org.apache.thrift.meta_data.FieldMetaData("keytabPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRINCIPAL_PATH, new org.apache.thrift.meta_data.FieldMetaData("principalPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(apriori3Kerberos_args.class, metaDataMap);
    }

    public apriori3Kerberos_args() {
    }

    public apriori3Kerberos_args(
      String spStr,
      int fdSum,
      String pNum,
      String oNum,
      String whereStr,
      String srcDirName,
      String dstDirName,
      String hostIp,
      String hostPort,
      String hostName,
      String hostPassword,
      String user,
      String krb5Path,
      String keytabPath,
      String principalPath)
    {
      this();
      this.spStr = spStr;
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      this.pNum = pNum;
      this.oNum = oNum;
      this.whereStr = whereStr;
      this.srcDirName = srcDirName;
      this.dstDirName = dstDirName;
      this.hostIp = hostIp;
      this.hostPort = hostPort;
      this.hostName = hostName;
      this.hostPassword = hostPassword;
      this.user = user;
      this.krb5Path = krb5Path;
      this.keytabPath = keytabPath;
      this.principalPath = principalPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public apriori3Kerberos_args(apriori3Kerberos_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSpStr()) {
        this.spStr = other.spStr;
      }
      this.fdSum = other.fdSum;
      if (other.isSetPNum()) {
        this.pNum = other.pNum;
      }
      if (other.isSetONum()) {
        this.oNum = other.oNum;
      }
      if (other.isSetWhereStr()) {
        this.whereStr = other.whereStr;
      }
      if (other.isSetSrcDirName()) {
        this.srcDirName = other.srcDirName;
      }
      if (other.isSetDstDirName()) {
        this.dstDirName = other.dstDirName;
      }
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetHostPort()) {
        this.hostPort = other.hostPort;
      }
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
      if (other.isSetHostPassword()) {
        this.hostPassword = other.hostPassword;
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetKrb5Path()) {
        this.krb5Path = other.krb5Path;
      }
      if (other.isSetKeytabPath()) {
        this.keytabPath = other.keytabPath;
      }
      if (other.isSetPrincipalPath()) {
        this.principalPath = other.principalPath;
      }
    }

    public apriori3Kerberos_args deepCopy() {
      return new apriori3Kerberos_args(this);
    }


    public void clear() {
      this.spStr = null;
      setFdSumIsSet(false);
      this.fdSum = 0;
      this.pNum = null;
      this.oNum = null;
      this.whereStr = null;
      this.srcDirName = null;
      this.dstDirName = null;
      this.hostIp = null;
      this.hostPort = null;
      this.hostName = null;
      this.hostPassword = null;
      this.user = null;
      this.krb5Path = null;
      this.keytabPath = null;
      this.principalPath = null;
    }

    public String getSpStr() {
      return this.spStr;
    }

    public apriori3Kerberos_args setSpStr(String spStr) {
      this.spStr = spStr;
      return this;
    }

    public void unsetSpStr() {
      this.spStr = null;
    }

    /** Returns true if field spStr is set (has been assigned a value) and false otherwise */
    public boolean isSetSpStr() {
      return this.spStr != null;
    }

    public void setSpStrIsSet(boolean value) {
      if (!value) {
        this.spStr = null;
      }
    }

    public int getFdSum() {
      return this.fdSum;
    }

    public apriori3Kerberos_args setFdSum(int fdSum) {
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      return this;
    }

    public void unsetFdSum() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    /** Returns true if field fdSum is set (has been assigned a value) and false otherwise */
    public boolean isSetFdSum() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    public void setFdSumIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FDSUM_ISSET_ID, value);
    }

    public String getPNum() {
      return this.pNum;
    }

    public apriori3Kerberos_args setPNum(String pNum) {
      this.pNum = pNum;
      return this;
    }

    public void unsetPNum() {
      this.pNum = null;
    }

    /** Returns true if field pNum is set (has been assigned a value) and false otherwise */
    public boolean isSetPNum() {
      return this.pNum != null;
    }

    public void setPNumIsSet(boolean value) {
      if (!value) {
        this.pNum = null;
      }
    }

    public String getONum() {
      return this.oNum;
    }

    public apriori3Kerberos_args setONum(String oNum) {
      this.oNum = oNum;
      return this;
    }

    public void unsetONum() {
      this.oNum = null;
    }

    /** Returns true if field oNum is set (has been assigned a value) and false otherwise */
    public boolean isSetONum() {
      return this.oNum != null;
    }

    public void setONumIsSet(boolean value) {
      if (!value) {
        this.oNum = null;
      }
    }

    public String getWhereStr() {
      return this.whereStr;
    }

    public apriori3Kerberos_args setWhereStr(String whereStr) {
      this.whereStr = whereStr;
      return this;
    }

    public void unsetWhereStr() {
      this.whereStr = null;
    }

    /** Returns true if field whereStr is set (has been assigned a value) and false otherwise */
    public boolean isSetWhereStr() {
      return this.whereStr != null;
    }

    public void setWhereStrIsSet(boolean value) {
      if (!value) {
        this.whereStr = null;
      }
    }

    public String getSrcDirName() {
      return this.srcDirName;
    }

    public apriori3Kerberos_args setSrcDirName(String srcDirName) {
      this.srcDirName = srcDirName;
      return this;
    }

    public void unsetSrcDirName() {
      this.srcDirName = null;
    }

    /** Returns true if field srcDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcDirName() {
      return this.srcDirName != null;
    }

    public void setSrcDirNameIsSet(boolean value) {
      if (!value) {
        this.srcDirName = null;
      }
    }

    public String getDstDirName() {
      return this.dstDirName;
    }

    public apriori3Kerberos_args setDstDirName(String dstDirName) {
      this.dstDirName = dstDirName;
      return this;
    }

    public void unsetDstDirName() {
      this.dstDirName = null;
    }

    /** Returns true if field dstDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetDstDirName() {
      return this.dstDirName != null;
    }

    public void setDstDirNameIsSet(boolean value) {
      if (!value) {
        this.dstDirName = null;
      }
    }

    public String getHostIp() {
      return this.hostIp;
    }

    public apriori3Kerberos_args setHostIp(String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public String getHostPort() {
      return this.hostPort;
    }

    public apriori3Kerberos_args setHostPort(String hostPort) {
      this.hostPort = hostPort;
      return this;
    }

    public void unsetHostPort() {
      this.hostPort = null;
    }

    /** Returns true if field hostPort is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPort() {
      return this.hostPort != null;
    }

    public void setHostPortIsSet(boolean value) {
      if (!value) {
        this.hostPort = null;
      }
    }

    public String getHostName() {
      return this.hostName;
    }

    public apriori3Kerberos_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public String getHostPassword() {
      return this.hostPassword;
    }

    public apriori3Kerberos_args setHostPassword(String hostPassword) {
      this.hostPassword = hostPassword;
      return this;
    }

    public void unsetHostPassword() {
      this.hostPassword = null;
    }

    /** Returns true if field hostPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPassword() {
      return this.hostPassword != null;
    }

    public void setHostPasswordIsSet(boolean value) {
      if (!value) {
        this.hostPassword = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public apriori3Kerberos_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getKrb5Path() {
      return this.krb5Path;
    }

    public apriori3Kerberos_args setKrb5Path(String krb5Path) {
      this.krb5Path = krb5Path;
      return this;
    }

    public void unsetKrb5Path() {
      this.krb5Path = null;
    }

    /** Returns true if field krb5Path is set (has been assigned a value) and false otherwise */
    public boolean isSetKrb5Path() {
      return this.krb5Path != null;
    }

    public void setKrb5PathIsSet(boolean value) {
      if (!value) {
        this.krb5Path = null;
      }
    }

    public String getKeytabPath() {
      return this.keytabPath;
    }

    public apriori3Kerberos_args setKeytabPath(String keytabPath) {
      this.keytabPath = keytabPath;
      return this;
    }

    public void unsetKeytabPath() {
      this.keytabPath = null;
    }

    /** Returns true if field keytabPath is set (has been assigned a value) and false otherwise */
    public boolean isSetKeytabPath() {
      return this.keytabPath != null;
    }

    public void setKeytabPathIsSet(boolean value) {
      if (!value) {
        this.keytabPath = null;
      }
    }

    public String getPrincipalPath() {
      return this.principalPath;
    }

    public apriori3Kerberos_args setPrincipalPath(String principalPath) {
      this.principalPath = principalPath;
      return this;
    }

    public void unsetPrincipalPath() {
      this.principalPath = null;
    }

    /** Returns true if field principalPath is set (has been assigned a value) and false otherwise */
    public boolean isSetPrincipalPath() {
      return this.principalPath != null;
    }

    public void setPrincipalPathIsSet(boolean value) {
      if (!value) {
        this.principalPath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SP_STR:
        if (value == null) {
          unsetSpStr();
        } else {
          setSpStr((String)value);
        }
        break;

      case FD_SUM:
        if (value == null) {
          unsetFdSum();
        } else {
          setFdSum((Integer)value);
        }
        break;

      case P_NUM:
        if (value == null) {
          unsetPNum();
        } else {
          setPNum((String)value);
        }
        break;

      case O_NUM:
        if (value == null) {
          unsetONum();
        } else {
          setONum((String)value);
        }
        break;

      case WHERE_STR:
        if (value == null) {
          unsetWhereStr();
        } else {
          setWhereStr((String)value);
        }
        break;

      case SRC_DIR_NAME:
        if (value == null) {
          unsetSrcDirName();
        } else {
          setSrcDirName((String)value);
        }
        break;

      case DST_DIR_NAME:
        if (value == null) {
          unsetDstDirName();
        } else {
          setDstDirName((String)value);
        }
        break;

      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((String)value);
        }
        break;

      case HOST_PORT:
        if (value == null) {
          unsetHostPort();
        } else {
          setHostPort((String)value);
        }
        break;

      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      case HOST_PASSWORD:
        if (value == null) {
          unsetHostPassword();
        } else {
          setHostPassword((String)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case KRB5_PATH:
        if (value == null) {
          unsetKrb5Path();
        } else {
          setKrb5Path((String)value);
        }
        break;

      case KEYTAB_PATH:
        if (value == null) {
          unsetKeytabPath();
        } else {
          setKeytabPath((String)value);
        }
        break;

      case PRINCIPAL_PATH:
        if (value == null) {
          unsetPrincipalPath();
        } else {
          setPrincipalPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SP_STR:
        return getSpStr();

      case FD_SUM:
        return getFdSum();

      case P_NUM:
        return getPNum();

      case O_NUM:
        return getONum();

      case WHERE_STR:
        return getWhereStr();

      case SRC_DIR_NAME:
        return getSrcDirName();

      case DST_DIR_NAME:
        return getDstDirName();

      case HOST_IP:
        return getHostIp();

      case HOST_PORT:
        return getHostPort();

      case HOST_NAME:
        return getHostName();

      case HOST_PASSWORD:
        return getHostPassword();

      case USER:
        return getUser();

      case KRB5_PATH:
        return getKrb5Path();

      case KEYTAB_PATH:
        return getKeytabPath();

      case PRINCIPAL_PATH:
        return getPrincipalPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SP_STR:
        return isSetSpStr();
      case FD_SUM:
        return isSetFdSum();
      case P_NUM:
        return isSetPNum();
      case O_NUM:
        return isSetONum();
      case WHERE_STR:
        return isSetWhereStr();
      case SRC_DIR_NAME:
        return isSetSrcDirName();
      case DST_DIR_NAME:
        return isSetDstDirName();
      case HOST_IP:
        return isSetHostIp();
      case HOST_PORT:
        return isSetHostPort();
      case HOST_NAME:
        return isSetHostName();
      case HOST_PASSWORD:
        return isSetHostPassword();
      case USER:
        return isSetUser();
      case KRB5_PATH:
        return isSetKrb5Path();
      case KEYTAB_PATH:
        return isSetKeytabPath();
      case PRINCIPAL_PATH:
        return isSetPrincipalPath();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof apriori3Kerberos_args)
        return this.equals((apriori3Kerberos_args)that);
      return false;
    }

    public boolean equals(apriori3Kerberos_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_spStr = true && this.isSetSpStr();
      boolean that_present_spStr = true && that.isSetSpStr();
      if (this_present_spStr || that_present_spStr) {
        if (!(this_present_spStr && that_present_spStr))
          return false;
        if (!this.spStr.equals(that.spStr))
          return false;
      }

      boolean this_present_fdSum = true;
      boolean that_present_fdSum = true;
      if (this_present_fdSum || that_present_fdSum) {
        if (!(this_present_fdSum && that_present_fdSum))
          return false;
        if (this.fdSum != that.fdSum)
          return false;
      }

      boolean this_present_pNum = true && this.isSetPNum();
      boolean that_present_pNum = true && that.isSetPNum();
      if (this_present_pNum || that_present_pNum) {
        if (!(this_present_pNum && that_present_pNum))
          return false;
        if (!this.pNum.equals(that.pNum))
          return false;
      }

      boolean this_present_oNum = true && this.isSetONum();
      boolean that_present_oNum = true && that.isSetONum();
      if (this_present_oNum || that_present_oNum) {
        if (!(this_present_oNum && that_present_oNum))
          return false;
        if (!this.oNum.equals(that.oNum))
          return false;
      }

      boolean this_present_whereStr = true && this.isSetWhereStr();
      boolean that_present_whereStr = true && that.isSetWhereStr();
      if (this_present_whereStr || that_present_whereStr) {
        if (!(this_present_whereStr && that_present_whereStr))
          return false;
        if (!this.whereStr.equals(that.whereStr))
          return false;
      }

      boolean this_present_srcDirName = true && this.isSetSrcDirName();
      boolean that_present_srcDirName = true && that.isSetSrcDirName();
      if (this_present_srcDirName || that_present_srcDirName) {
        if (!(this_present_srcDirName && that_present_srcDirName))
          return false;
        if (!this.srcDirName.equals(that.srcDirName))
          return false;
      }

      boolean this_present_dstDirName = true && this.isSetDstDirName();
      boolean that_present_dstDirName = true && that.isSetDstDirName();
      if (this_present_dstDirName || that_present_dstDirName) {
        if (!(this_present_dstDirName && that_present_dstDirName))
          return false;
        if (!this.dstDirName.equals(that.dstDirName))
          return false;
      }

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_hostPort = true && this.isSetHostPort();
      boolean that_present_hostPort = true && that.isSetHostPort();
      if (this_present_hostPort || that_present_hostPort) {
        if (!(this_present_hostPort && that_present_hostPort))
          return false;
        if (!this.hostPort.equals(that.hostPort))
          return false;
      }

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      boolean this_present_hostPassword = true && this.isSetHostPassword();
      boolean that_present_hostPassword = true && that.isSetHostPassword();
      if (this_present_hostPassword || that_present_hostPassword) {
        if (!(this_present_hostPassword && that_present_hostPassword))
          return false;
        if (!this.hostPassword.equals(that.hostPassword))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_krb5Path = true && this.isSetKrb5Path();
      boolean that_present_krb5Path = true && that.isSetKrb5Path();
      if (this_present_krb5Path || that_present_krb5Path) {
        if (!(this_present_krb5Path && that_present_krb5Path))
          return false;
        if (!this.krb5Path.equals(that.krb5Path))
          return false;
      }

      boolean this_present_keytabPath = true && this.isSetKeytabPath();
      boolean that_present_keytabPath = true && that.isSetKeytabPath();
      if (this_present_keytabPath || that_present_keytabPath) {
        if (!(this_present_keytabPath && that_present_keytabPath))
          return false;
        if (!this.keytabPath.equals(that.keytabPath))
          return false;
      }

      boolean this_present_principalPath = true && this.isSetPrincipalPath();
      boolean that_present_principalPath = true && that.isSetPrincipalPath();
      if (this_present_principalPath || that_present_principalPath) {
        if (!(this_present_principalPath && that_present_principalPath))
          return false;
        if (!this.principalPath.equals(that.principalPath))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSpStr()) ? 131071 : 524287);
      if (isSetSpStr())
        hashCode = hashCode * 8191 + spStr.hashCode();

      hashCode = hashCode * 8191 + fdSum;

      hashCode = hashCode * 8191 + ((isSetPNum()) ? 131071 : 524287);
      if (isSetPNum())
        hashCode = hashCode * 8191 + pNum.hashCode();

      hashCode = hashCode * 8191 + ((isSetONum()) ? 131071 : 524287);
      if (isSetONum())
        hashCode = hashCode * 8191 + oNum.hashCode();

      hashCode = hashCode * 8191 + ((isSetWhereStr()) ? 131071 : 524287);
      if (isSetWhereStr())
        hashCode = hashCode * 8191 + whereStr.hashCode();

      hashCode = hashCode * 8191 + ((isSetSrcDirName()) ? 131071 : 524287);
      if (isSetSrcDirName())
        hashCode = hashCode * 8191 + srcDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDstDirName()) ? 131071 : 524287);
      if (isSetDstDirName())
        hashCode = hashCode * 8191 + dstDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPort()) ? 131071 : 524287);
      if (isSetHostPort())
        hashCode = hashCode * 8191 + hostPort.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
      if (isSetHostName())
        hashCode = hashCode * 8191 + hostName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPassword()) ? 131071 : 524287);
      if (isSetHostPassword())
        hashCode = hashCode * 8191 + hostPassword.hashCode();

      hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
      if (isSetUser())
        hashCode = hashCode * 8191 + user.hashCode();

      hashCode = hashCode * 8191 + ((isSetKrb5Path()) ? 131071 : 524287);
      if (isSetKrb5Path())
        hashCode = hashCode * 8191 + krb5Path.hashCode();

      hashCode = hashCode * 8191 + ((isSetKeytabPath()) ? 131071 : 524287);
      if (isSetKeytabPath())
        hashCode = hashCode * 8191 + keytabPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetPrincipalPath()) ? 131071 : 524287);
      if (isSetPrincipalPath())
        hashCode = hashCode * 8191 + principalPath.hashCode();

      return hashCode;
    }


    public int compareTo(apriori3Kerberos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpStr()).compareTo(other.isSetSpStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spStr, other.spStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdSum()).compareTo(other.isSetFdSum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdSum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdSum, other.fdSum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPNum()).compareTo(other.isSetPNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pNum, other.pNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetONum()).compareTo(other.isSetONum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetONum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oNum, other.oNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWhereStr()).compareTo(other.isSetWhereStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhereStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whereStr, other.whereStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrcDirName()).compareTo(other.isSetSrcDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcDirName, other.srcDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDstDirName()).compareTo(other.isSetDstDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstDirName, other.dstDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPort()).compareTo(other.isSetHostPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPort, other.hostPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPassword()).compareTo(other.isSetHostPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPassword, other.hostPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKrb5Path()).compareTo(other.isSetKrb5Path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKrb5Path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.krb5Path, other.krb5Path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeytabPath()).compareTo(other.isSetKeytabPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeytabPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keytabPath, other.keytabPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrincipalPath()).compareTo(other.isSetPrincipalPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrincipalPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalPath, other.principalPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public String toString() {
      StringBuilder sb = new StringBuilder("apriori3Kerberos_args(");
      boolean first = true;

      sb.append("spStr:");
      if (this.spStr == null) {
        sb.append("null");
      } else {
        sb.append(this.spStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdSum:");
      sb.append(this.fdSum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("pNum:");
      if (this.pNum == null) {
        sb.append("null");
      } else {
        sb.append(this.pNum);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oNum:");
      if (this.oNum == null) {
        sb.append("null");
      } else {
        sb.append(this.oNum);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("whereStr:");
      if (this.whereStr == null) {
        sb.append("null");
      } else {
        sb.append(this.whereStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcDirName:");
      if (this.srcDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.srcDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstDirName:");
      if (this.dstDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.dstDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPort:");
      if (this.hostPort == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPassword:");
      if (this.hostPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPassword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("krb5Path:");
      if (this.krb5Path == null) {
        sb.append("null");
      } else {
        sb.append(this.krb5Path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keytabPath:");
      if (this.keytabPath == null) {
        sb.append("null");
      } else {
        sb.append(this.keytabPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("principalPath:");
      if (this.principalPath == null) {
        sb.append("null");
      } else {
        sb.append(this.principalPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class apriori3Kerberos_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public apriori3Kerberos_argsStandardScheme getScheme() {
        return new apriori3Kerberos_argsStandardScheme();
      }
    }

    private static class apriori3Kerberos_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<apriori3Kerberos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, apriori3Kerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SP_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.spStr = iprot.readString();
                struct.setSpStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FD_SUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fdSum = iprot.readI32();
                struct.setFdSumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // P_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pNum = iprot.readString();
                struct.setPNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // O_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.oNum = iprot.readString();
                struct.setONumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // WHERE_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.whereStr = iprot.readString();
                struct.setWhereStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SRC_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcDirName = iprot.readString();
                struct.setSrcDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // DST_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dstDirName = iprot.readString();
                struct.setDstDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // HOST_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPort = iprot.readString();
                struct.setHostPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // HOST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // HOST_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPassword = iprot.readString();
                struct.setHostPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // KRB5_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.krb5Path = iprot.readString();
                struct.setKrb5PathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // KEYTAB_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keytabPath = iprot.readString();
                struct.setKeytabPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 15: // PRINCIPAL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.principalPath = iprot.readString();
                struct.setPrincipalPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, apriori3Kerberos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spStr != null) {
          oprot.writeFieldBegin(SP_STR_FIELD_DESC);
          oprot.writeString(struct.spStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FD_SUM_FIELD_DESC);
        oprot.writeI32(struct.fdSum);
        oprot.writeFieldEnd();
        if (struct.pNum != null) {
          oprot.writeFieldBegin(P_NUM_FIELD_DESC);
          oprot.writeString(struct.pNum);
          oprot.writeFieldEnd();
        }
        if (struct.oNum != null) {
          oprot.writeFieldBegin(O_NUM_FIELD_DESC);
          oprot.writeString(struct.oNum);
          oprot.writeFieldEnd();
        }
        if (struct.whereStr != null) {
          oprot.writeFieldBegin(WHERE_STR_FIELD_DESC);
          oprot.writeString(struct.whereStr);
          oprot.writeFieldEnd();
        }
        if (struct.srcDirName != null) {
          oprot.writeFieldBegin(SRC_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.srcDirName);
          oprot.writeFieldEnd();
        }
        if (struct.dstDirName != null) {
          oprot.writeFieldBegin(DST_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.dstDirName);
          oprot.writeFieldEnd();
        }
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.hostPort != null) {
          oprot.writeFieldBegin(HOST_PORT_FIELD_DESC);
          oprot.writeString(struct.hostPort);
          oprot.writeFieldEnd();
        }
        if (struct.hostName != null) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
        if (struct.hostPassword != null) {
          oprot.writeFieldBegin(HOST_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.hostPassword);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.krb5Path != null) {
          oprot.writeFieldBegin(KRB5_PATH_FIELD_DESC);
          oprot.writeString(struct.krb5Path);
          oprot.writeFieldEnd();
        }
        if (struct.keytabPath != null) {
          oprot.writeFieldBegin(KEYTAB_PATH_FIELD_DESC);
          oprot.writeString(struct.keytabPath);
          oprot.writeFieldEnd();
        }
        if (struct.principalPath != null) {
          oprot.writeFieldBegin(PRINCIPAL_PATH_FIELD_DESC);
          oprot.writeString(struct.principalPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class apriori3Kerberos_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public apriori3Kerberos_argsTupleScheme getScheme() {
        return new apriori3Kerberos_argsTupleScheme();
      }
    }

    private static class apriori3Kerberos_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<apriori3Kerberos_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, apriori3Kerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSpStr()) {
          optionals.set(0);
        }
        if (struct.isSetFdSum()) {
          optionals.set(1);
        }
        if (struct.isSetPNum()) {
          optionals.set(2);
        }
        if (struct.isSetONum()) {
          optionals.set(3);
        }
        if (struct.isSetWhereStr()) {
          optionals.set(4);
        }
        if (struct.isSetSrcDirName()) {
          optionals.set(5);
        }
        if (struct.isSetDstDirName()) {
          optionals.set(6);
        }
        if (struct.isSetHostIp()) {
          optionals.set(7);
        }
        if (struct.isSetHostPort()) {
          optionals.set(8);
        }
        if (struct.isSetHostName()) {
          optionals.set(9);
        }
        if (struct.isSetHostPassword()) {
          optionals.set(10);
        }
        if (struct.isSetUser()) {
          optionals.set(11);
        }
        if (struct.isSetKrb5Path()) {
          optionals.set(12);
        }
        if (struct.isSetKeytabPath()) {
          optionals.set(13);
        }
        if (struct.isSetPrincipalPath()) {
          optionals.set(14);
        }
        oprot.writeBitSet(optionals, 15);
        if (struct.isSetSpStr()) {
          oprot.writeString(struct.spStr);
        }
        if (struct.isSetFdSum()) {
          oprot.writeI32(struct.fdSum);
        }
        if (struct.isSetPNum()) {
          oprot.writeString(struct.pNum);
        }
        if (struct.isSetONum()) {
          oprot.writeString(struct.oNum);
        }
        if (struct.isSetWhereStr()) {
          oprot.writeString(struct.whereStr);
        }
        if (struct.isSetSrcDirName()) {
          oprot.writeString(struct.srcDirName);
        }
        if (struct.isSetDstDirName()) {
          oprot.writeString(struct.dstDirName);
        }
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetHostPort()) {
          oprot.writeString(struct.hostPort);
        }
        if (struct.isSetHostName()) {
          oprot.writeString(struct.hostName);
        }
        if (struct.isSetHostPassword()) {
          oprot.writeString(struct.hostPassword);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetKrb5Path()) {
          oprot.writeString(struct.krb5Path);
        }
        if (struct.isSetKeytabPath()) {
          oprot.writeString(struct.keytabPath);
        }
        if (struct.isSetPrincipalPath()) {
          oprot.writeString(struct.principalPath);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, apriori3Kerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(15);
        if (incoming.get(0)) {
          struct.spStr = iprot.readString();
          struct.setSpStrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdSum = iprot.readI32();
          struct.setFdSumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.pNum = iprot.readString();
          struct.setPNumIsSet(true);
        }
        if (incoming.get(3)) {
          struct.oNum = iprot.readString();
          struct.setONumIsSet(true);
        }
        if (incoming.get(4)) {
          struct.whereStr = iprot.readString();
          struct.setWhereStrIsSet(true);
        }
        if (incoming.get(5)) {
          struct.srcDirName = iprot.readString();
          struct.setSrcDirNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.dstDirName = iprot.readString();
          struct.setDstDirNameIsSet(true);
        }
        if (incoming.get(7)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(8)) {
          struct.hostPort = iprot.readString();
          struct.setHostPortIsSet(true);
        }
        if (incoming.get(9)) {
          struct.hostName = iprot.readString();
          struct.setHostNameIsSet(true);
        }
        if (incoming.get(10)) {
          struct.hostPassword = iprot.readString();
          struct.setHostPasswordIsSet(true);
        }
        if (incoming.get(11)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(12)) {
          struct.krb5Path = iprot.readString();
          struct.setKrb5PathIsSet(true);
        }
        if (incoming.get(13)) {
          struct.keytabPath = iprot.readString();
          struct.setKeytabPathIsSet(true);
        }
        if (incoming.get(14)) {
          struct.principalPath = iprot.readString();
          struct.setPrincipalPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class apriori3Kerberos_result implements org.apache.thrift.TBase<apriori3Kerberos_result, apriori3Kerberos_result._Fields>, java.io.Serializable, Cloneable, Comparable<apriori3Kerberos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("apriori3Kerberos_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new apriori3Kerberos_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new apriori3Kerberos_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(apriori3Kerberos_result.class, metaDataMap);
    }

    public apriori3Kerberos_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public apriori3Kerberos_result(apriori3Kerberos_result other) {
    }

    public apriori3Kerberos_result deepCopy() {
      return new apriori3Kerberos_result(this);
    }


    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof apriori3Kerberos_result)
        return this.equals((apriori3Kerberos_result)that);
      return false;
    }

    public boolean equals(apriori3Kerberos_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }


    public int compareTo(apriori3Kerberos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public String toString() {
      StringBuilder sb = new StringBuilder("apriori3Kerberos_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class apriori3Kerberos_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public apriori3Kerberos_resultStandardScheme getScheme() {
        return new apriori3Kerberos_resultStandardScheme();
      }
    }

    private static class apriori3Kerberos_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<apriori3Kerberos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, apriori3Kerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, apriori3Kerberos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class apriori3Kerberos_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public apriori3Kerberos_resultTupleScheme getScheme() {
        return new apriori3Kerberos_resultTupleScheme();
      }
    }

    private static class apriori3Kerberos_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<apriori3Kerberos_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, apriori3Kerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, apriori3Kerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class selectRecKerberos_args implements org.apache.thrift.TBase<selectRecKerberos_args, selectRecKerberos_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectRecKerberos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectRecKerberos_args");

    private static final org.apache.thrift.protocol.TField SP_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("spStr", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FD_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fdSum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField WHERE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("whereStr", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SRC_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("srcDirName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DST_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dstDirName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField HOST_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPort", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField HOST_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPassword", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField KRB5_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("krb5Path", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField KEYTAB_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("keytabPath", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField PRINCIPAL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("principalPath", org.apache.thrift.protocol.TType.STRING, (short)13);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new selectRecKerberos_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new selectRecKerberos_argsTupleSchemeFactory();

    public String spStr; // required
    public int fdSum; // required
    public String whereStr; // required
    public String srcDirName; // required
    public String dstDirName; // required
    public String hostIp; // required
    public String hostPort; // required
    public String hostName; // required
    public String hostPassword; // required
    public String user; // required
    public String krb5Path; // required
    public String keytabPath; // required
    public String principalPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SP_STR((short)1, "spStr"),
      FD_SUM((short)2, "fdSum"),
      WHERE_STR((short)3, "whereStr"),
      SRC_DIR_NAME((short)4, "srcDirName"),
      DST_DIR_NAME((short)5, "dstDirName"),
      HOST_IP((short)6, "hostIp"),
      HOST_PORT((short)7, "hostPort"),
      HOST_NAME((short)8, "hostName"),
      HOST_PASSWORD((short)9, "hostPassword"),
      USER((short)10, "user"),
      KRB5_PATH((short)11, "krb5Path"),
      KEYTAB_PATH((short)12, "keytabPath"),
      PRINCIPAL_PATH((short)13, "principalPath");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SP_STR
            return SP_STR;
          case 2: // FD_SUM
            return FD_SUM;
          case 3: // WHERE_STR
            return WHERE_STR;
          case 4: // SRC_DIR_NAME
            return SRC_DIR_NAME;
          case 5: // DST_DIR_NAME
            return DST_DIR_NAME;
          case 6: // HOST_IP
            return HOST_IP;
          case 7: // HOST_PORT
            return HOST_PORT;
          case 8: // HOST_NAME
            return HOST_NAME;
          case 9: // HOST_PASSWORD
            return HOST_PASSWORD;
          case 10: // USER
            return USER;
          case 11: // KRB5_PATH
            return KRB5_PATH;
          case 12: // KEYTAB_PATH
            return KEYTAB_PATH;
          case 13: // PRINCIPAL_PATH
            return PRINCIPAL_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FDSUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SP_STR, new org.apache.thrift.meta_data.FieldMetaData("spStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FD_SUM, new org.apache.thrift.meta_data.FieldMetaData("fdSum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.WHERE_STR, new org.apache.thrift.meta_data.FieldMetaData("whereStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SRC_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("srcDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("dstDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PORT, new org.apache.thrift.meta_data.FieldMetaData("hostPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("hostPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KRB5_PATH, new org.apache.thrift.meta_data.FieldMetaData("krb5Path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEYTAB_PATH, new org.apache.thrift.meta_data.FieldMetaData("keytabPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRINCIPAL_PATH, new org.apache.thrift.meta_data.FieldMetaData("principalPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectRecKerberos_args.class, metaDataMap);
    }

    public selectRecKerberos_args() {
    }

    public selectRecKerberos_args(
      String spStr,
      int fdSum,
      String whereStr,
      String srcDirName,
      String dstDirName,
      String hostIp,
      String hostPort,
      String hostName,
      String hostPassword,
      String user,
      String krb5Path,
      String keytabPath,
      String principalPath)
    {
      this();
      this.spStr = spStr;
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      this.whereStr = whereStr;
      this.srcDirName = srcDirName;
      this.dstDirName = dstDirName;
      this.hostIp = hostIp;
      this.hostPort = hostPort;
      this.hostName = hostName;
      this.hostPassword = hostPassword;
      this.user = user;
      this.krb5Path = krb5Path;
      this.keytabPath = keytabPath;
      this.principalPath = principalPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectRecKerberos_args(selectRecKerberos_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSpStr()) {
        this.spStr = other.spStr;
      }
      this.fdSum = other.fdSum;
      if (other.isSetWhereStr()) {
        this.whereStr = other.whereStr;
      }
      if (other.isSetSrcDirName()) {
        this.srcDirName = other.srcDirName;
      }
      if (other.isSetDstDirName()) {
        this.dstDirName = other.dstDirName;
      }
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetHostPort()) {
        this.hostPort = other.hostPort;
      }
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
      if (other.isSetHostPassword()) {
        this.hostPassword = other.hostPassword;
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetKrb5Path()) {
        this.krb5Path = other.krb5Path;
      }
      if (other.isSetKeytabPath()) {
        this.keytabPath = other.keytabPath;
      }
      if (other.isSetPrincipalPath()) {
        this.principalPath = other.principalPath;
      }
    }

    public selectRecKerberos_args deepCopy() {
      return new selectRecKerberos_args(this);
    }


    public void clear() {
      this.spStr = null;
      setFdSumIsSet(false);
      this.fdSum = 0;
      this.whereStr = null;
      this.srcDirName = null;
      this.dstDirName = null;
      this.hostIp = null;
      this.hostPort = null;
      this.hostName = null;
      this.hostPassword = null;
      this.user = null;
      this.krb5Path = null;
      this.keytabPath = null;
      this.principalPath = null;
    }

    public String getSpStr() {
      return this.spStr;
    }

    public selectRecKerberos_args setSpStr(String spStr) {
      this.spStr = spStr;
      return this;
    }

    public void unsetSpStr() {
      this.spStr = null;
    }

    /** Returns true if field spStr is set (has been assigned a value) and false otherwise */
    public boolean isSetSpStr() {
      return this.spStr != null;
    }

    public void setSpStrIsSet(boolean value) {
      if (!value) {
        this.spStr = null;
      }
    }

    public int getFdSum() {
      return this.fdSum;
    }

    public selectRecKerberos_args setFdSum(int fdSum) {
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      return this;
    }

    public void unsetFdSum() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    /** Returns true if field fdSum is set (has been assigned a value) and false otherwise */
    public boolean isSetFdSum() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    public void setFdSumIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FDSUM_ISSET_ID, value);
    }

    public String getWhereStr() {
      return this.whereStr;
    }

    public selectRecKerberos_args setWhereStr(String whereStr) {
      this.whereStr = whereStr;
      return this;
    }

    public void unsetWhereStr() {
      this.whereStr = null;
    }

    /** Returns true if field whereStr is set (has been assigned a value) and false otherwise */
    public boolean isSetWhereStr() {
      return this.whereStr != null;
    }

    public void setWhereStrIsSet(boolean value) {
      if (!value) {
        this.whereStr = null;
      }
    }

    public String getSrcDirName() {
      return this.srcDirName;
    }

    public selectRecKerberos_args setSrcDirName(String srcDirName) {
      this.srcDirName = srcDirName;
      return this;
    }

    public void unsetSrcDirName() {
      this.srcDirName = null;
    }

    /** Returns true if field srcDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcDirName() {
      return this.srcDirName != null;
    }

    public void setSrcDirNameIsSet(boolean value) {
      if (!value) {
        this.srcDirName = null;
      }
    }

    public String getDstDirName() {
      return this.dstDirName;
    }

    public selectRecKerberos_args setDstDirName(String dstDirName) {
      this.dstDirName = dstDirName;
      return this;
    }

    public void unsetDstDirName() {
      this.dstDirName = null;
    }

    /** Returns true if field dstDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetDstDirName() {
      return this.dstDirName != null;
    }

    public void setDstDirNameIsSet(boolean value) {
      if (!value) {
        this.dstDirName = null;
      }
    }

    public String getHostIp() {
      return this.hostIp;
    }

    public selectRecKerberos_args setHostIp(String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public String getHostPort() {
      return this.hostPort;
    }

    public selectRecKerberos_args setHostPort(String hostPort) {
      this.hostPort = hostPort;
      return this;
    }

    public void unsetHostPort() {
      this.hostPort = null;
    }

    /** Returns true if field hostPort is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPort() {
      return this.hostPort != null;
    }

    public void setHostPortIsSet(boolean value) {
      if (!value) {
        this.hostPort = null;
      }
    }

    public String getHostName() {
      return this.hostName;
    }

    public selectRecKerberos_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public String getHostPassword() {
      return this.hostPassword;
    }

    public selectRecKerberos_args setHostPassword(String hostPassword) {
      this.hostPassword = hostPassword;
      return this;
    }

    public void unsetHostPassword() {
      this.hostPassword = null;
    }

    /** Returns true if field hostPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPassword() {
      return this.hostPassword != null;
    }

    public void setHostPasswordIsSet(boolean value) {
      if (!value) {
        this.hostPassword = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public selectRecKerberos_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getKrb5Path() {
      return this.krb5Path;
    }

    public selectRecKerberos_args setKrb5Path(String krb5Path) {
      this.krb5Path = krb5Path;
      return this;
    }

    public void unsetKrb5Path() {
      this.krb5Path = null;
    }

    /** Returns true if field krb5Path is set (has been assigned a value) and false otherwise */
    public boolean isSetKrb5Path() {
      return this.krb5Path != null;
    }

    public void setKrb5PathIsSet(boolean value) {
      if (!value) {
        this.krb5Path = null;
      }
    }

    public String getKeytabPath() {
      return this.keytabPath;
    }

    public selectRecKerberos_args setKeytabPath(String keytabPath) {
      this.keytabPath = keytabPath;
      return this;
    }

    public void unsetKeytabPath() {
      this.keytabPath = null;
    }

    /** Returns true if field keytabPath is set (has been assigned a value) and false otherwise */
    public boolean isSetKeytabPath() {
      return this.keytabPath != null;
    }

    public void setKeytabPathIsSet(boolean value) {
      if (!value) {
        this.keytabPath = null;
      }
    }

    public String getPrincipalPath() {
      return this.principalPath;
    }

    public selectRecKerberos_args setPrincipalPath(String principalPath) {
      this.principalPath = principalPath;
      return this;
    }

    public void unsetPrincipalPath() {
      this.principalPath = null;
    }

    /** Returns true if field principalPath is set (has been assigned a value) and false otherwise */
    public boolean isSetPrincipalPath() {
      return this.principalPath != null;
    }

    public void setPrincipalPathIsSet(boolean value) {
      if (!value) {
        this.principalPath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SP_STR:
        if (value == null) {
          unsetSpStr();
        } else {
          setSpStr((String)value);
        }
        break;

      case FD_SUM:
        if (value == null) {
          unsetFdSum();
        } else {
          setFdSum((Integer)value);
        }
        break;

      case WHERE_STR:
        if (value == null) {
          unsetWhereStr();
        } else {
          setWhereStr((String)value);
        }
        break;

      case SRC_DIR_NAME:
        if (value == null) {
          unsetSrcDirName();
        } else {
          setSrcDirName((String)value);
        }
        break;

      case DST_DIR_NAME:
        if (value == null) {
          unsetDstDirName();
        } else {
          setDstDirName((String)value);
        }
        break;

      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((String)value);
        }
        break;

      case HOST_PORT:
        if (value == null) {
          unsetHostPort();
        } else {
          setHostPort((String)value);
        }
        break;

      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      case HOST_PASSWORD:
        if (value == null) {
          unsetHostPassword();
        } else {
          setHostPassword((String)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case KRB5_PATH:
        if (value == null) {
          unsetKrb5Path();
        } else {
          setKrb5Path((String)value);
        }
        break;

      case KEYTAB_PATH:
        if (value == null) {
          unsetKeytabPath();
        } else {
          setKeytabPath((String)value);
        }
        break;

      case PRINCIPAL_PATH:
        if (value == null) {
          unsetPrincipalPath();
        } else {
          setPrincipalPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SP_STR:
        return getSpStr();

      case FD_SUM:
        return getFdSum();

      case WHERE_STR:
        return getWhereStr();

      case SRC_DIR_NAME:
        return getSrcDirName();

      case DST_DIR_NAME:
        return getDstDirName();

      case HOST_IP:
        return getHostIp();

      case HOST_PORT:
        return getHostPort();

      case HOST_NAME:
        return getHostName();

      case HOST_PASSWORD:
        return getHostPassword();

      case USER:
        return getUser();

      case KRB5_PATH:
        return getKrb5Path();

      case KEYTAB_PATH:
        return getKeytabPath();

      case PRINCIPAL_PATH:
        return getPrincipalPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SP_STR:
        return isSetSpStr();
      case FD_SUM:
        return isSetFdSum();
      case WHERE_STR:
        return isSetWhereStr();
      case SRC_DIR_NAME:
        return isSetSrcDirName();
      case DST_DIR_NAME:
        return isSetDstDirName();
      case HOST_IP:
        return isSetHostIp();
      case HOST_PORT:
        return isSetHostPort();
      case HOST_NAME:
        return isSetHostName();
      case HOST_PASSWORD:
        return isSetHostPassword();
      case USER:
        return isSetUser();
      case KRB5_PATH:
        return isSetKrb5Path();
      case KEYTAB_PATH:
        return isSetKeytabPath();
      case PRINCIPAL_PATH:
        return isSetPrincipalPath();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectRecKerberos_args)
        return this.equals((selectRecKerberos_args)that);
      return false;
    }

    public boolean equals(selectRecKerberos_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_spStr = true && this.isSetSpStr();
      boolean that_present_spStr = true && that.isSetSpStr();
      if (this_present_spStr || that_present_spStr) {
        if (!(this_present_spStr && that_present_spStr))
          return false;
        if (!this.spStr.equals(that.spStr))
          return false;
      }

      boolean this_present_fdSum = true;
      boolean that_present_fdSum = true;
      if (this_present_fdSum || that_present_fdSum) {
        if (!(this_present_fdSum && that_present_fdSum))
          return false;
        if (this.fdSum != that.fdSum)
          return false;
      }

      boolean this_present_whereStr = true && this.isSetWhereStr();
      boolean that_present_whereStr = true && that.isSetWhereStr();
      if (this_present_whereStr || that_present_whereStr) {
        if (!(this_present_whereStr && that_present_whereStr))
          return false;
        if (!this.whereStr.equals(that.whereStr))
          return false;
      }

      boolean this_present_srcDirName = true && this.isSetSrcDirName();
      boolean that_present_srcDirName = true && that.isSetSrcDirName();
      if (this_present_srcDirName || that_present_srcDirName) {
        if (!(this_present_srcDirName && that_present_srcDirName))
          return false;
        if (!this.srcDirName.equals(that.srcDirName))
          return false;
      }

      boolean this_present_dstDirName = true && this.isSetDstDirName();
      boolean that_present_dstDirName = true && that.isSetDstDirName();
      if (this_present_dstDirName || that_present_dstDirName) {
        if (!(this_present_dstDirName && that_present_dstDirName))
          return false;
        if (!this.dstDirName.equals(that.dstDirName))
          return false;
      }

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_hostPort = true && this.isSetHostPort();
      boolean that_present_hostPort = true && that.isSetHostPort();
      if (this_present_hostPort || that_present_hostPort) {
        if (!(this_present_hostPort && that_present_hostPort))
          return false;
        if (!this.hostPort.equals(that.hostPort))
          return false;
      }

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      boolean this_present_hostPassword = true && this.isSetHostPassword();
      boolean that_present_hostPassword = true && that.isSetHostPassword();
      if (this_present_hostPassword || that_present_hostPassword) {
        if (!(this_present_hostPassword && that_present_hostPassword))
          return false;
        if (!this.hostPassword.equals(that.hostPassword))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_krb5Path = true && this.isSetKrb5Path();
      boolean that_present_krb5Path = true && that.isSetKrb5Path();
      if (this_present_krb5Path || that_present_krb5Path) {
        if (!(this_present_krb5Path && that_present_krb5Path))
          return false;
        if (!this.krb5Path.equals(that.krb5Path))
          return false;
      }

      boolean this_present_keytabPath = true && this.isSetKeytabPath();
      boolean that_present_keytabPath = true && that.isSetKeytabPath();
      if (this_present_keytabPath || that_present_keytabPath) {
        if (!(this_present_keytabPath && that_present_keytabPath))
          return false;
        if (!this.keytabPath.equals(that.keytabPath))
          return false;
      }

      boolean this_present_principalPath = true && this.isSetPrincipalPath();
      boolean that_present_principalPath = true && that.isSetPrincipalPath();
      if (this_present_principalPath || that_present_principalPath) {
        if (!(this_present_principalPath && that_present_principalPath))
          return false;
        if (!this.principalPath.equals(that.principalPath))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSpStr()) ? 131071 : 524287);
      if (isSetSpStr())
        hashCode = hashCode * 8191 + spStr.hashCode();

      hashCode = hashCode * 8191 + fdSum;

      hashCode = hashCode * 8191 + ((isSetWhereStr()) ? 131071 : 524287);
      if (isSetWhereStr())
        hashCode = hashCode * 8191 + whereStr.hashCode();

      hashCode = hashCode * 8191 + ((isSetSrcDirName()) ? 131071 : 524287);
      if (isSetSrcDirName())
        hashCode = hashCode * 8191 + srcDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDstDirName()) ? 131071 : 524287);
      if (isSetDstDirName())
        hashCode = hashCode * 8191 + dstDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPort()) ? 131071 : 524287);
      if (isSetHostPort())
        hashCode = hashCode * 8191 + hostPort.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
      if (isSetHostName())
        hashCode = hashCode * 8191 + hostName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPassword()) ? 131071 : 524287);
      if (isSetHostPassword())
        hashCode = hashCode * 8191 + hostPassword.hashCode();

      hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
      if (isSetUser())
        hashCode = hashCode * 8191 + user.hashCode();

      hashCode = hashCode * 8191 + ((isSetKrb5Path()) ? 131071 : 524287);
      if (isSetKrb5Path())
        hashCode = hashCode * 8191 + krb5Path.hashCode();

      hashCode = hashCode * 8191 + ((isSetKeytabPath()) ? 131071 : 524287);
      if (isSetKeytabPath())
        hashCode = hashCode * 8191 + keytabPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetPrincipalPath()) ? 131071 : 524287);
      if (isSetPrincipalPath())
        hashCode = hashCode * 8191 + principalPath.hashCode();

      return hashCode;
    }


    public int compareTo(selectRecKerberos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpStr()).compareTo(other.isSetSpStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spStr, other.spStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdSum()).compareTo(other.isSetFdSum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdSum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdSum, other.fdSum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWhereStr()).compareTo(other.isSetWhereStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhereStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whereStr, other.whereStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrcDirName()).compareTo(other.isSetSrcDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcDirName, other.srcDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDstDirName()).compareTo(other.isSetDstDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstDirName, other.dstDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPort()).compareTo(other.isSetHostPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPort, other.hostPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPassword()).compareTo(other.isSetHostPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPassword, other.hostPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKrb5Path()).compareTo(other.isSetKrb5Path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKrb5Path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.krb5Path, other.krb5Path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeytabPath()).compareTo(other.isSetKeytabPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeytabPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keytabPath, other.keytabPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrincipalPath()).compareTo(other.isSetPrincipalPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrincipalPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalPath, other.principalPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public String toString() {
      StringBuilder sb = new StringBuilder("selectRecKerberos_args(");
      boolean first = true;

      sb.append("spStr:");
      if (this.spStr == null) {
        sb.append("null");
      } else {
        sb.append(this.spStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdSum:");
      sb.append(this.fdSum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("whereStr:");
      if (this.whereStr == null) {
        sb.append("null");
      } else {
        sb.append(this.whereStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcDirName:");
      if (this.srcDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.srcDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstDirName:");
      if (this.dstDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.dstDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPort:");
      if (this.hostPort == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPassword:");
      if (this.hostPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPassword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("krb5Path:");
      if (this.krb5Path == null) {
        sb.append("null");
      } else {
        sb.append(this.krb5Path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keytabPath:");
      if (this.keytabPath == null) {
        sb.append("null");
      } else {
        sb.append(this.keytabPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("principalPath:");
      if (this.principalPath == null) {
        sb.append("null");
      } else {
        sb.append(this.principalPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectRecKerberos_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public selectRecKerberos_argsStandardScheme getScheme() {
        return new selectRecKerberos_argsStandardScheme();
      }
    }

    private static class selectRecKerberos_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<selectRecKerberos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectRecKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SP_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.spStr = iprot.readString();
                struct.setSpStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FD_SUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fdSum = iprot.readI32();
                struct.setFdSumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // WHERE_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.whereStr = iprot.readString();
                struct.setWhereStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SRC_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcDirName = iprot.readString();
                struct.setSrcDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DST_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dstDirName = iprot.readString();
                struct.setDstDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // HOST_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPort = iprot.readString();
                struct.setHostPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // HOST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // HOST_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPassword = iprot.readString();
                struct.setHostPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // KRB5_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.krb5Path = iprot.readString();
                struct.setKrb5PathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // KEYTAB_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keytabPath = iprot.readString();
                struct.setKeytabPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // PRINCIPAL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.principalPath = iprot.readString();
                struct.setPrincipalPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectRecKerberos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spStr != null) {
          oprot.writeFieldBegin(SP_STR_FIELD_DESC);
          oprot.writeString(struct.spStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FD_SUM_FIELD_DESC);
        oprot.writeI32(struct.fdSum);
        oprot.writeFieldEnd();
        if (struct.whereStr != null) {
          oprot.writeFieldBegin(WHERE_STR_FIELD_DESC);
          oprot.writeString(struct.whereStr);
          oprot.writeFieldEnd();
        }
        if (struct.srcDirName != null) {
          oprot.writeFieldBegin(SRC_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.srcDirName);
          oprot.writeFieldEnd();
        }
        if (struct.dstDirName != null) {
          oprot.writeFieldBegin(DST_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.dstDirName);
          oprot.writeFieldEnd();
        }
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.hostPort != null) {
          oprot.writeFieldBegin(HOST_PORT_FIELD_DESC);
          oprot.writeString(struct.hostPort);
          oprot.writeFieldEnd();
        }
        if (struct.hostName != null) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
        if (struct.hostPassword != null) {
          oprot.writeFieldBegin(HOST_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.hostPassword);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.krb5Path != null) {
          oprot.writeFieldBegin(KRB5_PATH_FIELD_DESC);
          oprot.writeString(struct.krb5Path);
          oprot.writeFieldEnd();
        }
        if (struct.keytabPath != null) {
          oprot.writeFieldBegin(KEYTAB_PATH_FIELD_DESC);
          oprot.writeString(struct.keytabPath);
          oprot.writeFieldEnd();
        }
        if (struct.principalPath != null) {
          oprot.writeFieldBegin(PRINCIPAL_PATH_FIELD_DESC);
          oprot.writeString(struct.principalPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectRecKerberos_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public selectRecKerberos_argsTupleScheme getScheme() {
        return new selectRecKerberos_argsTupleScheme();
      }
    }

    private static class selectRecKerberos_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<selectRecKerberos_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, selectRecKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSpStr()) {
          optionals.set(0);
        }
        if (struct.isSetFdSum()) {
          optionals.set(1);
        }
        if (struct.isSetWhereStr()) {
          optionals.set(2);
        }
        if (struct.isSetSrcDirName()) {
          optionals.set(3);
        }
        if (struct.isSetDstDirName()) {
          optionals.set(4);
        }
        if (struct.isSetHostIp()) {
          optionals.set(5);
        }
        if (struct.isSetHostPort()) {
          optionals.set(6);
        }
        if (struct.isSetHostName()) {
          optionals.set(7);
        }
        if (struct.isSetHostPassword()) {
          optionals.set(8);
        }
        if (struct.isSetUser()) {
          optionals.set(9);
        }
        if (struct.isSetKrb5Path()) {
          optionals.set(10);
        }
        if (struct.isSetKeytabPath()) {
          optionals.set(11);
        }
        if (struct.isSetPrincipalPath()) {
          optionals.set(12);
        }
        oprot.writeBitSet(optionals, 13);
        if (struct.isSetSpStr()) {
          oprot.writeString(struct.spStr);
        }
        if (struct.isSetFdSum()) {
          oprot.writeI32(struct.fdSum);
        }
        if (struct.isSetWhereStr()) {
          oprot.writeString(struct.whereStr);
        }
        if (struct.isSetSrcDirName()) {
          oprot.writeString(struct.srcDirName);
        }
        if (struct.isSetDstDirName()) {
          oprot.writeString(struct.dstDirName);
        }
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetHostPort()) {
          oprot.writeString(struct.hostPort);
        }
        if (struct.isSetHostName()) {
          oprot.writeString(struct.hostName);
        }
        if (struct.isSetHostPassword()) {
          oprot.writeString(struct.hostPassword);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetKrb5Path()) {
          oprot.writeString(struct.krb5Path);
        }
        if (struct.isSetKeytabPath()) {
          oprot.writeString(struct.keytabPath);
        }
        if (struct.isSetPrincipalPath()) {
          oprot.writeString(struct.principalPath);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, selectRecKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(13);
        if (incoming.get(0)) {
          struct.spStr = iprot.readString();
          struct.setSpStrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdSum = iprot.readI32();
          struct.setFdSumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.whereStr = iprot.readString();
          struct.setWhereStrIsSet(true);
        }
        if (incoming.get(3)) {
          struct.srcDirName = iprot.readString();
          struct.setSrcDirNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dstDirName = iprot.readString();
          struct.setDstDirNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(6)) {
          struct.hostPort = iprot.readString();
          struct.setHostPortIsSet(true);
        }
        if (incoming.get(7)) {
          struct.hostName = iprot.readString();
          struct.setHostNameIsSet(true);
        }
        if (incoming.get(8)) {
          struct.hostPassword = iprot.readString();
          struct.setHostPasswordIsSet(true);
        }
        if (incoming.get(9)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(10)) {
          struct.krb5Path = iprot.readString();
          struct.setKrb5PathIsSet(true);
        }
        if (incoming.get(11)) {
          struct.keytabPath = iprot.readString();
          struct.setKeytabPathIsSet(true);
        }
        if (incoming.get(12)) {
          struct.principalPath = iprot.readString();
          struct.setPrincipalPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class selectRecKerberos_result implements org.apache.thrift.TBase<selectRecKerberos_result, selectRecKerberos_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectRecKerberos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectRecKerberos_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new selectRecKerberos_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new selectRecKerberos_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectRecKerberos_result.class, metaDataMap);
    }

    public selectRecKerberos_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectRecKerberos_result(selectRecKerberos_result other) {
    }

    public selectRecKerberos_result deepCopy() {
      return new selectRecKerberos_result(this);
    }


    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectRecKerberos_result)
        return this.equals((selectRecKerberos_result)that);
      return false;
    }

    public boolean equals(selectRecKerberos_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }


    public int compareTo(selectRecKerberos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public String toString() {
      StringBuilder sb = new StringBuilder("selectRecKerberos_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectRecKerberos_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public selectRecKerberos_resultStandardScheme getScheme() {
        return new selectRecKerberos_resultStandardScheme();
      }
    }

    private static class selectRecKerberos_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<selectRecKerberos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectRecKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectRecKerberos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectRecKerberos_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public selectRecKerberos_resultTupleScheme getScheme() {
        return new selectRecKerberos_resultTupleScheme();
      }
    }

    private static class selectRecKerberos_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<selectRecKerberos_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, selectRecKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, selectRecKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class formatFieldKerberos_args implements org.apache.thrift.TBase<formatFieldKerberos_args, formatFieldKerberos_args._Fields>, java.io.Serializable, Cloneable, Comparable<formatFieldKerberos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("formatFieldKerberos_args");

    private static final org.apache.thrift.protocol.TField SP_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("spStr", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FD_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fdSum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField FD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fdNum", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField REG_EX_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("regExStr", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField SRC_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("srcDirName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField DST_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dstDirName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField HOST_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPort", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField HOST_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPassword", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField KRB5_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("krb5Path", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField KEYTAB_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("keytabPath", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField PRINCIPAL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("principalPath", org.apache.thrift.protocol.TType.STRING, (short)14);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new formatFieldKerberos_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new formatFieldKerberos_argsTupleSchemeFactory();

    public String spStr; // required
    public int fdSum; // required
    public String fdNum; // required
    public String regExStr; // required
    public String srcDirName; // required
    public String dstDirName; // required
    public String hostIp; // required
    public String hostPort; // required
    public String hostName; // required
    public String hostPassword; // required
    public String user; // required
    public String krb5Path; // required
    public String keytabPath; // required
    public String principalPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SP_STR((short)1, "spStr"),
      FD_SUM((short)2, "fdSum"),
      FD_NUM((short)3, "fdNum"),
      REG_EX_STR((short)4, "regExStr"),
      SRC_DIR_NAME((short)5, "srcDirName"),
      DST_DIR_NAME((short)6, "dstDirName"),
      HOST_IP((short)7, "hostIp"),
      HOST_PORT((short)8, "hostPort"),
      HOST_NAME((short)9, "hostName"),
      HOST_PASSWORD((short)10, "hostPassword"),
      USER((short)11, "user"),
      KRB5_PATH((short)12, "krb5Path"),
      KEYTAB_PATH((short)13, "keytabPath"),
      PRINCIPAL_PATH((short)14, "principalPath");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SP_STR
            return SP_STR;
          case 2: // FD_SUM
            return FD_SUM;
          case 3: // FD_NUM
            return FD_NUM;
          case 4: // REG_EX_STR
            return REG_EX_STR;
          case 5: // SRC_DIR_NAME
            return SRC_DIR_NAME;
          case 6: // DST_DIR_NAME
            return DST_DIR_NAME;
          case 7: // HOST_IP
            return HOST_IP;
          case 8: // HOST_PORT
            return HOST_PORT;
          case 9: // HOST_NAME
            return HOST_NAME;
          case 10: // HOST_PASSWORD
            return HOST_PASSWORD;
          case 11: // USER
            return USER;
          case 12: // KRB5_PATH
            return KRB5_PATH;
          case 13: // KEYTAB_PATH
            return KEYTAB_PATH;
          case 14: // PRINCIPAL_PATH
            return PRINCIPAL_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FDSUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SP_STR, new org.apache.thrift.meta_data.FieldMetaData("spStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FD_SUM, new org.apache.thrift.meta_data.FieldMetaData("fdSum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FD_NUM, new org.apache.thrift.meta_data.FieldMetaData("fdNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REG_EX_STR, new org.apache.thrift.meta_data.FieldMetaData("regExStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SRC_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("srcDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("dstDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PORT, new org.apache.thrift.meta_data.FieldMetaData("hostPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("hostPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KRB5_PATH, new org.apache.thrift.meta_data.FieldMetaData("krb5Path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEYTAB_PATH, new org.apache.thrift.meta_data.FieldMetaData("keytabPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRINCIPAL_PATH, new org.apache.thrift.meta_data.FieldMetaData("principalPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(formatFieldKerberos_args.class, metaDataMap);
    }

    public formatFieldKerberos_args() {
    }

    public formatFieldKerberos_args(
      String spStr,
      int fdSum,
      String fdNum,
      String regExStr,
      String srcDirName,
      String dstDirName,
      String hostIp,
      String hostPort,
      String hostName,
      String hostPassword,
      String user,
      String krb5Path,
      String keytabPath,
      String principalPath)
    {
      this();
      this.spStr = spStr;
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      this.fdNum = fdNum;
      this.regExStr = regExStr;
      this.srcDirName = srcDirName;
      this.dstDirName = dstDirName;
      this.hostIp = hostIp;
      this.hostPort = hostPort;
      this.hostName = hostName;
      this.hostPassword = hostPassword;
      this.user = user;
      this.krb5Path = krb5Path;
      this.keytabPath = keytabPath;
      this.principalPath = principalPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public formatFieldKerberos_args(formatFieldKerberos_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSpStr()) {
        this.spStr = other.spStr;
      }
      this.fdSum = other.fdSum;
      if (other.isSetFdNum()) {
        this.fdNum = other.fdNum;
      }
      if (other.isSetRegExStr()) {
        this.regExStr = other.regExStr;
      }
      if (other.isSetSrcDirName()) {
        this.srcDirName = other.srcDirName;
      }
      if (other.isSetDstDirName()) {
        this.dstDirName = other.dstDirName;
      }
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetHostPort()) {
        this.hostPort = other.hostPort;
      }
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
      if (other.isSetHostPassword()) {
        this.hostPassword = other.hostPassword;
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetKrb5Path()) {
        this.krb5Path = other.krb5Path;
      }
      if (other.isSetKeytabPath()) {
        this.keytabPath = other.keytabPath;
      }
      if (other.isSetPrincipalPath()) {
        this.principalPath = other.principalPath;
      }
    }

    public formatFieldKerberos_args deepCopy() {
      return new formatFieldKerberos_args(this);
    }


    public void clear() {
      this.spStr = null;
      setFdSumIsSet(false);
      this.fdSum = 0;
      this.fdNum = null;
      this.regExStr = null;
      this.srcDirName = null;
      this.dstDirName = null;
      this.hostIp = null;
      this.hostPort = null;
      this.hostName = null;
      this.hostPassword = null;
      this.user = null;
      this.krb5Path = null;
      this.keytabPath = null;
      this.principalPath = null;
    }

    public String getSpStr() {
      return this.spStr;
    }

    public formatFieldKerberos_args setSpStr(String spStr) {
      this.spStr = spStr;
      return this;
    }

    public void unsetSpStr() {
      this.spStr = null;
    }

    /** Returns true if field spStr is set (has been assigned a value) and false otherwise */
    public boolean isSetSpStr() {
      return this.spStr != null;
    }

    public void setSpStrIsSet(boolean value) {
      if (!value) {
        this.spStr = null;
      }
    }

    public int getFdSum() {
      return this.fdSum;
    }

    public formatFieldKerberos_args setFdSum(int fdSum) {
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      return this;
    }

    public void unsetFdSum() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    /** Returns true if field fdSum is set (has been assigned a value) and false otherwise */
    public boolean isSetFdSum() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    public void setFdSumIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FDSUM_ISSET_ID, value);
    }

    public String getFdNum() {
      return this.fdNum;
    }

    public formatFieldKerberos_args setFdNum(String fdNum) {
      this.fdNum = fdNum;
      return this;
    }

    public void unsetFdNum() {
      this.fdNum = null;
    }

    /** Returns true if field fdNum is set (has been assigned a value) and false otherwise */
    public boolean isSetFdNum() {
      return this.fdNum != null;
    }

    public void setFdNumIsSet(boolean value) {
      if (!value) {
        this.fdNum = null;
      }
    }

    public String getRegExStr() {
      return this.regExStr;
    }

    public formatFieldKerberos_args setRegExStr(String regExStr) {
      this.regExStr = regExStr;
      return this;
    }

    public void unsetRegExStr() {
      this.regExStr = null;
    }

    /** Returns true if field regExStr is set (has been assigned a value) and false otherwise */
    public boolean isSetRegExStr() {
      return this.regExStr != null;
    }

    public void setRegExStrIsSet(boolean value) {
      if (!value) {
        this.regExStr = null;
      }
    }

    public String getSrcDirName() {
      return this.srcDirName;
    }

    public formatFieldKerberos_args setSrcDirName(String srcDirName) {
      this.srcDirName = srcDirName;
      return this;
    }

    public void unsetSrcDirName() {
      this.srcDirName = null;
    }

    /** Returns true if field srcDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcDirName() {
      return this.srcDirName != null;
    }

    public void setSrcDirNameIsSet(boolean value) {
      if (!value) {
        this.srcDirName = null;
      }
    }

    public String getDstDirName() {
      return this.dstDirName;
    }

    public formatFieldKerberos_args setDstDirName(String dstDirName) {
      this.dstDirName = dstDirName;
      return this;
    }

    public void unsetDstDirName() {
      this.dstDirName = null;
    }

    /** Returns true if field dstDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetDstDirName() {
      return this.dstDirName != null;
    }

    public void setDstDirNameIsSet(boolean value) {
      if (!value) {
        this.dstDirName = null;
      }
    }

    public String getHostIp() {
      return this.hostIp;
    }

    public formatFieldKerberos_args setHostIp(String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public String getHostPort() {
      return this.hostPort;
    }

    public formatFieldKerberos_args setHostPort(String hostPort) {
      this.hostPort = hostPort;
      return this;
    }

    public void unsetHostPort() {
      this.hostPort = null;
    }

    /** Returns true if field hostPort is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPort() {
      return this.hostPort != null;
    }

    public void setHostPortIsSet(boolean value) {
      if (!value) {
        this.hostPort = null;
      }
    }

    public String getHostName() {
      return this.hostName;
    }

    public formatFieldKerberos_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public String getHostPassword() {
      return this.hostPassword;
    }

    public formatFieldKerberos_args setHostPassword(String hostPassword) {
      this.hostPassword = hostPassword;
      return this;
    }

    public void unsetHostPassword() {
      this.hostPassword = null;
    }

    /** Returns true if field hostPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPassword() {
      return this.hostPassword != null;
    }

    public void setHostPasswordIsSet(boolean value) {
      if (!value) {
        this.hostPassword = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public formatFieldKerberos_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getKrb5Path() {
      return this.krb5Path;
    }

    public formatFieldKerberos_args setKrb5Path(String krb5Path) {
      this.krb5Path = krb5Path;
      return this;
    }

    public void unsetKrb5Path() {
      this.krb5Path = null;
    }

    /** Returns true if field krb5Path is set (has been assigned a value) and false otherwise */
    public boolean isSetKrb5Path() {
      return this.krb5Path != null;
    }

    public void setKrb5PathIsSet(boolean value) {
      if (!value) {
        this.krb5Path = null;
      }
    }

    public String getKeytabPath() {
      return this.keytabPath;
    }

    public formatFieldKerberos_args setKeytabPath(String keytabPath) {
      this.keytabPath = keytabPath;
      return this;
    }

    public void unsetKeytabPath() {
      this.keytabPath = null;
    }

    /** Returns true if field keytabPath is set (has been assigned a value) and false otherwise */
    public boolean isSetKeytabPath() {
      return this.keytabPath != null;
    }

    public void setKeytabPathIsSet(boolean value) {
      if (!value) {
        this.keytabPath = null;
      }
    }

    public String getPrincipalPath() {
      return this.principalPath;
    }

    public formatFieldKerberos_args setPrincipalPath(String principalPath) {
      this.principalPath = principalPath;
      return this;
    }

    public void unsetPrincipalPath() {
      this.principalPath = null;
    }

    /** Returns true if field principalPath is set (has been assigned a value) and false otherwise */
    public boolean isSetPrincipalPath() {
      return this.principalPath != null;
    }

    public void setPrincipalPathIsSet(boolean value) {
      if (!value) {
        this.principalPath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SP_STR:
        if (value == null) {
          unsetSpStr();
        } else {
          setSpStr((String)value);
        }
        break;

      case FD_SUM:
        if (value == null) {
          unsetFdSum();
        } else {
          setFdSum((Integer)value);
        }
        break;

      case FD_NUM:
        if (value == null) {
          unsetFdNum();
        } else {
          setFdNum((String)value);
        }
        break;

      case REG_EX_STR:
        if (value == null) {
          unsetRegExStr();
        } else {
          setRegExStr((String)value);
        }
        break;

      case SRC_DIR_NAME:
        if (value == null) {
          unsetSrcDirName();
        } else {
          setSrcDirName((String)value);
        }
        break;

      case DST_DIR_NAME:
        if (value == null) {
          unsetDstDirName();
        } else {
          setDstDirName((String)value);
        }
        break;

      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((String)value);
        }
        break;

      case HOST_PORT:
        if (value == null) {
          unsetHostPort();
        } else {
          setHostPort((String)value);
        }
        break;

      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      case HOST_PASSWORD:
        if (value == null) {
          unsetHostPassword();
        } else {
          setHostPassword((String)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case KRB5_PATH:
        if (value == null) {
          unsetKrb5Path();
        } else {
          setKrb5Path((String)value);
        }
        break;

      case KEYTAB_PATH:
        if (value == null) {
          unsetKeytabPath();
        } else {
          setKeytabPath((String)value);
        }
        break;

      case PRINCIPAL_PATH:
        if (value == null) {
          unsetPrincipalPath();
        } else {
          setPrincipalPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SP_STR:
        return getSpStr();

      case FD_SUM:
        return getFdSum();

      case FD_NUM:
        return getFdNum();

      case REG_EX_STR:
        return getRegExStr();

      case SRC_DIR_NAME:
        return getSrcDirName();

      case DST_DIR_NAME:
        return getDstDirName();

      case HOST_IP:
        return getHostIp();

      case HOST_PORT:
        return getHostPort();

      case HOST_NAME:
        return getHostName();

      case HOST_PASSWORD:
        return getHostPassword();

      case USER:
        return getUser();

      case KRB5_PATH:
        return getKrb5Path();

      case KEYTAB_PATH:
        return getKeytabPath();

      case PRINCIPAL_PATH:
        return getPrincipalPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SP_STR:
        return isSetSpStr();
      case FD_SUM:
        return isSetFdSum();
      case FD_NUM:
        return isSetFdNum();
      case REG_EX_STR:
        return isSetRegExStr();
      case SRC_DIR_NAME:
        return isSetSrcDirName();
      case DST_DIR_NAME:
        return isSetDstDirName();
      case HOST_IP:
        return isSetHostIp();
      case HOST_PORT:
        return isSetHostPort();
      case HOST_NAME:
        return isSetHostName();
      case HOST_PASSWORD:
        return isSetHostPassword();
      case USER:
        return isSetUser();
      case KRB5_PATH:
        return isSetKrb5Path();
      case KEYTAB_PATH:
        return isSetKeytabPath();
      case PRINCIPAL_PATH:
        return isSetPrincipalPath();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof formatFieldKerberos_args)
        return this.equals((formatFieldKerberos_args)that);
      return false;
    }

    public boolean equals(formatFieldKerberos_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_spStr = true && this.isSetSpStr();
      boolean that_present_spStr = true && that.isSetSpStr();
      if (this_present_spStr || that_present_spStr) {
        if (!(this_present_spStr && that_present_spStr))
          return false;
        if (!this.spStr.equals(that.spStr))
          return false;
      }

      boolean this_present_fdSum = true;
      boolean that_present_fdSum = true;
      if (this_present_fdSum || that_present_fdSum) {
        if (!(this_present_fdSum && that_present_fdSum))
          return false;
        if (this.fdSum != that.fdSum)
          return false;
      }

      boolean this_present_fdNum = true && this.isSetFdNum();
      boolean that_present_fdNum = true && that.isSetFdNum();
      if (this_present_fdNum || that_present_fdNum) {
        if (!(this_present_fdNum && that_present_fdNum))
          return false;
        if (!this.fdNum.equals(that.fdNum))
          return false;
      }

      boolean this_present_regExStr = true && this.isSetRegExStr();
      boolean that_present_regExStr = true && that.isSetRegExStr();
      if (this_present_regExStr || that_present_regExStr) {
        if (!(this_present_regExStr && that_present_regExStr))
          return false;
        if (!this.regExStr.equals(that.regExStr))
          return false;
      }

      boolean this_present_srcDirName = true && this.isSetSrcDirName();
      boolean that_present_srcDirName = true && that.isSetSrcDirName();
      if (this_present_srcDirName || that_present_srcDirName) {
        if (!(this_present_srcDirName && that_present_srcDirName))
          return false;
        if (!this.srcDirName.equals(that.srcDirName))
          return false;
      }

      boolean this_present_dstDirName = true && this.isSetDstDirName();
      boolean that_present_dstDirName = true && that.isSetDstDirName();
      if (this_present_dstDirName || that_present_dstDirName) {
        if (!(this_present_dstDirName && that_present_dstDirName))
          return false;
        if (!this.dstDirName.equals(that.dstDirName))
          return false;
      }

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_hostPort = true && this.isSetHostPort();
      boolean that_present_hostPort = true && that.isSetHostPort();
      if (this_present_hostPort || that_present_hostPort) {
        if (!(this_present_hostPort && that_present_hostPort))
          return false;
        if (!this.hostPort.equals(that.hostPort))
          return false;
      }

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      boolean this_present_hostPassword = true && this.isSetHostPassword();
      boolean that_present_hostPassword = true && that.isSetHostPassword();
      if (this_present_hostPassword || that_present_hostPassword) {
        if (!(this_present_hostPassword && that_present_hostPassword))
          return false;
        if (!this.hostPassword.equals(that.hostPassword))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_krb5Path = true && this.isSetKrb5Path();
      boolean that_present_krb5Path = true && that.isSetKrb5Path();
      if (this_present_krb5Path || that_present_krb5Path) {
        if (!(this_present_krb5Path && that_present_krb5Path))
          return false;
        if (!this.krb5Path.equals(that.krb5Path))
          return false;
      }

      boolean this_present_keytabPath = true && this.isSetKeytabPath();
      boolean that_present_keytabPath = true && that.isSetKeytabPath();
      if (this_present_keytabPath || that_present_keytabPath) {
        if (!(this_present_keytabPath && that_present_keytabPath))
          return false;
        if (!this.keytabPath.equals(that.keytabPath))
          return false;
      }

      boolean this_present_principalPath = true && this.isSetPrincipalPath();
      boolean that_present_principalPath = true && that.isSetPrincipalPath();
      if (this_present_principalPath || that_present_principalPath) {
        if (!(this_present_principalPath && that_present_principalPath))
          return false;
        if (!this.principalPath.equals(that.principalPath))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSpStr()) ? 131071 : 524287);
      if (isSetSpStr())
        hashCode = hashCode * 8191 + spStr.hashCode();

      hashCode = hashCode * 8191 + fdSum;

      hashCode = hashCode * 8191 + ((isSetFdNum()) ? 131071 : 524287);
      if (isSetFdNum())
        hashCode = hashCode * 8191 + fdNum.hashCode();

      hashCode = hashCode * 8191 + ((isSetRegExStr()) ? 131071 : 524287);
      if (isSetRegExStr())
        hashCode = hashCode * 8191 + regExStr.hashCode();

      hashCode = hashCode * 8191 + ((isSetSrcDirName()) ? 131071 : 524287);
      if (isSetSrcDirName())
        hashCode = hashCode * 8191 + srcDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDstDirName()) ? 131071 : 524287);
      if (isSetDstDirName())
        hashCode = hashCode * 8191 + dstDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPort()) ? 131071 : 524287);
      if (isSetHostPort())
        hashCode = hashCode * 8191 + hostPort.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
      if (isSetHostName())
        hashCode = hashCode * 8191 + hostName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPassword()) ? 131071 : 524287);
      if (isSetHostPassword())
        hashCode = hashCode * 8191 + hostPassword.hashCode();

      hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
      if (isSetUser())
        hashCode = hashCode * 8191 + user.hashCode();

      hashCode = hashCode * 8191 + ((isSetKrb5Path()) ? 131071 : 524287);
      if (isSetKrb5Path())
        hashCode = hashCode * 8191 + krb5Path.hashCode();

      hashCode = hashCode * 8191 + ((isSetKeytabPath()) ? 131071 : 524287);
      if (isSetKeytabPath())
        hashCode = hashCode * 8191 + keytabPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetPrincipalPath()) ? 131071 : 524287);
      if (isSetPrincipalPath())
        hashCode = hashCode * 8191 + principalPath.hashCode();

      return hashCode;
    }


    public int compareTo(formatFieldKerberos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpStr()).compareTo(other.isSetSpStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spStr, other.spStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdSum()).compareTo(other.isSetFdSum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdSum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdSum, other.fdSum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdNum()).compareTo(other.isSetFdNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdNum, other.fdNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRegExStr()).compareTo(other.isSetRegExStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegExStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regExStr, other.regExStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrcDirName()).compareTo(other.isSetSrcDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcDirName, other.srcDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDstDirName()).compareTo(other.isSetDstDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstDirName, other.dstDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPort()).compareTo(other.isSetHostPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPort, other.hostPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPassword()).compareTo(other.isSetHostPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPassword, other.hostPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKrb5Path()).compareTo(other.isSetKrb5Path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKrb5Path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.krb5Path, other.krb5Path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeytabPath()).compareTo(other.isSetKeytabPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeytabPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keytabPath, other.keytabPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrincipalPath()).compareTo(other.isSetPrincipalPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrincipalPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalPath, other.principalPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public String toString() {
      StringBuilder sb = new StringBuilder("formatFieldKerberos_args(");
      boolean first = true;

      sb.append("spStr:");
      if (this.spStr == null) {
        sb.append("null");
      } else {
        sb.append(this.spStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdSum:");
      sb.append(this.fdSum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdNum:");
      if (this.fdNum == null) {
        sb.append("null");
      } else {
        sb.append(this.fdNum);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("regExStr:");
      if (this.regExStr == null) {
        sb.append("null");
      } else {
        sb.append(this.regExStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcDirName:");
      if (this.srcDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.srcDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstDirName:");
      if (this.dstDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.dstDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPort:");
      if (this.hostPort == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPassword:");
      if (this.hostPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPassword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("krb5Path:");
      if (this.krb5Path == null) {
        sb.append("null");
      } else {
        sb.append(this.krb5Path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keytabPath:");
      if (this.keytabPath == null) {
        sb.append("null");
      } else {
        sb.append(this.keytabPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("principalPath:");
      if (this.principalPath == null) {
        sb.append("null");
      } else {
        sb.append(this.principalPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class formatFieldKerberos_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public formatFieldKerberos_argsStandardScheme getScheme() {
        return new formatFieldKerberos_argsStandardScheme();
      }
    }

    private static class formatFieldKerberos_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<formatFieldKerberos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, formatFieldKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SP_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.spStr = iprot.readString();
                struct.setSpStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FD_SUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fdSum = iprot.readI32();
                struct.setFdSumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FD_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fdNum = iprot.readString();
                struct.setFdNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // REG_EX_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.regExStr = iprot.readString();
                struct.setRegExStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SRC_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcDirName = iprot.readString();
                struct.setSrcDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DST_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dstDirName = iprot.readString();
                struct.setDstDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // HOST_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPort = iprot.readString();
                struct.setHostPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // HOST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // HOST_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPassword = iprot.readString();
                struct.setHostPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // KRB5_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.krb5Path = iprot.readString();
                struct.setKrb5PathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // KEYTAB_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keytabPath = iprot.readString();
                struct.setKeytabPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // PRINCIPAL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.principalPath = iprot.readString();
                struct.setPrincipalPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, formatFieldKerberos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spStr != null) {
          oprot.writeFieldBegin(SP_STR_FIELD_DESC);
          oprot.writeString(struct.spStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FD_SUM_FIELD_DESC);
        oprot.writeI32(struct.fdSum);
        oprot.writeFieldEnd();
        if (struct.fdNum != null) {
          oprot.writeFieldBegin(FD_NUM_FIELD_DESC);
          oprot.writeString(struct.fdNum);
          oprot.writeFieldEnd();
        }
        if (struct.regExStr != null) {
          oprot.writeFieldBegin(REG_EX_STR_FIELD_DESC);
          oprot.writeString(struct.regExStr);
          oprot.writeFieldEnd();
        }
        if (struct.srcDirName != null) {
          oprot.writeFieldBegin(SRC_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.srcDirName);
          oprot.writeFieldEnd();
        }
        if (struct.dstDirName != null) {
          oprot.writeFieldBegin(DST_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.dstDirName);
          oprot.writeFieldEnd();
        }
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.hostPort != null) {
          oprot.writeFieldBegin(HOST_PORT_FIELD_DESC);
          oprot.writeString(struct.hostPort);
          oprot.writeFieldEnd();
        }
        if (struct.hostName != null) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
        if (struct.hostPassword != null) {
          oprot.writeFieldBegin(HOST_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.hostPassword);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.krb5Path != null) {
          oprot.writeFieldBegin(KRB5_PATH_FIELD_DESC);
          oprot.writeString(struct.krb5Path);
          oprot.writeFieldEnd();
        }
        if (struct.keytabPath != null) {
          oprot.writeFieldBegin(KEYTAB_PATH_FIELD_DESC);
          oprot.writeString(struct.keytabPath);
          oprot.writeFieldEnd();
        }
        if (struct.principalPath != null) {
          oprot.writeFieldBegin(PRINCIPAL_PATH_FIELD_DESC);
          oprot.writeString(struct.principalPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class formatFieldKerberos_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public formatFieldKerberos_argsTupleScheme getScheme() {
        return new formatFieldKerberos_argsTupleScheme();
      }
    }

    private static class formatFieldKerberos_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<formatFieldKerberos_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, formatFieldKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSpStr()) {
          optionals.set(0);
        }
        if (struct.isSetFdSum()) {
          optionals.set(1);
        }
        if (struct.isSetFdNum()) {
          optionals.set(2);
        }
        if (struct.isSetRegExStr()) {
          optionals.set(3);
        }
        if (struct.isSetSrcDirName()) {
          optionals.set(4);
        }
        if (struct.isSetDstDirName()) {
          optionals.set(5);
        }
        if (struct.isSetHostIp()) {
          optionals.set(6);
        }
        if (struct.isSetHostPort()) {
          optionals.set(7);
        }
        if (struct.isSetHostName()) {
          optionals.set(8);
        }
        if (struct.isSetHostPassword()) {
          optionals.set(9);
        }
        if (struct.isSetUser()) {
          optionals.set(10);
        }
        if (struct.isSetKrb5Path()) {
          optionals.set(11);
        }
        if (struct.isSetKeytabPath()) {
          optionals.set(12);
        }
        if (struct.isSetPrincipalPath()) {
          optionals.set(13);
        }
        oprot.writeBitSet(optionals, 14);
        if (struct.isSetSpStr()) {
          oprot.writeString(struct.spStr);
        }
        if (struct.isSetFdSum()) {
          oprot.writeI32(struct.fdSum);
        }
        if (struct.isSetFdNum()) {
          oprot.writeString(struct.fdNum);
        }
        if (struct.isSetRegExStr()) {
          oprot.writeString(struct.regExStr);
        }
        if (struct.isSetSrcDirName()) {
          oprot.writeString(struct.srcDirName);
        }
        if (struct.isSetDstDirName()) {
          oprot.writeString(struct.dstDirName);
        }
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetHostPort()) {
          oprot.writeString(struct.hostPort);
        }
        if (struct.isSetHostName()) {
          oprot.writeString(struct.hostName);
        }
        if (struct.isSetHostPassword()) {
          oprot.writeString(struct.hostPassword);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetKrb5Path()) {
          oprot.writeString(struct.krb5Path);
        }
        if (struct.isSetKeytabPath()) {
          oprot.writeString(struct.keytabPath);
        }
        if (struct.isSetPrincipalPath()) {
          oprot.writeString(struct.principalPath);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, formatFieldKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(14);
        if (incoming.get(0)) {
          struct.spStr = iprot.readString();
          struct.setSpStrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdSum = iprot.readI32();
          struct.setFdSumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fdNum = iprot.readString();
          struct.setFdNumIsSet(true);
        }
        if (incoming.get(3)) {
          struct.regExStr = iprot.readString();
          struct.setRegExStrIsSet(true);
        }
        if (incoming.get(4)) {
          struct.srcDirName = iprot.readString();
          struct.setSrcDirNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.dstDirName = iprot.readString();
          struct.setDstDirNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(7)) {
          struct.hostPort = iprot.readString();
          struct.setHostPortIsSet(true);
        }
        if (incoming.get(8)) {
          struct.hostName = iprot.readString();
          struct.setHostNameIsSet(true);
        }
        if (incoming.get(9)) {
          struct.hostPassword = iprot.readString();
          struct.setHostPasswordIsSet(true);
        }
        if (incoming.get(10)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(11)) {
          struct.krb5Path = iprot.readString();
          struct.setKrb5PathIsSet(true);
        }
        if (incoming.get(12)) {
          struct.keytabPath = iprot.readString();
          struct.setKeytabPathIsSet(true);
        }
        if (incoming.get(13)) {
          struct.principalPath = iprot.readString();
          struct.setPrincipalPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class formatFieldKerberos_result implements org.apache.thrift.TBase<formatFieldKerberos_result, formatFieldKerberos_result._Fields>, java.io.Serializable, Cloneable, Comparable<formatFieldKerberos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("formatFieldKerberos_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new formatFieldKerberos_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new formatFieldKerberos_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(formatFieldKerberos_result.class, metaDataMap);
    }

    public formatFieldKerberos_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public formatFieldKerberos_result(formatFieldKerberos_result other) {
    }

    public formatFieldKerberos_result deepCopy() {
      return new formatFieldKerberos_result(this);
    }


    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof formatFieldKerberos_result)
        return this.equals((formatFieldKerberos_result)that);
      return false;
    }

    public boolean equals(formatFieldKerberos_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }


    public int compareTo(formatFieldKerberos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public String toString() {
      StringBuilder sb = new StringBuilder("formatFieldKerberos_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class formatFieldKerberos_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public formatFieldKerberos_resultStandardScheme getScheme() {
        return new formatFieldKerberos_resultStandardScheme();
      }
    }

    private static class formatFieldKerberos_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<formatFieldKerberos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, formatFieldKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, formatFieldKerberos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class formatFieldKerberos_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public formatFieldKerberos_resultTupleScheme getScheme() {
        return new formatFieldKerberos_resultTupleScheme();
      }
    }

    private static class formatFieldKerberos_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<formatFieldKerberos_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, formatFieldKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, formatFieldKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class formatRecKerberos_args implements org.apache.thrift.TBase<formatRecKerberos_args, formatRecKerberos_args._Fields>, java.io.Serializable, Cloneable, Comparable<formatRecKerberos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("formatRecKerberos_args");

    private static final org.apache.thrift.protocol.TField SP_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("spStr", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FD_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fdSum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SRC_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("srcDirName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DST_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dstDirName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField HOST_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPort", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField HOST_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPassword", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField KRB5_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("krb5Path", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField KEYTAB_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("keytabPath", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField PRINCIPAL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("principalPath", org.apache.thrift.protocol.TType.STRING, (short)12);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new formatRecKerberos_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new formatRecKerberos_argsTupleSchemeFactory();

    public String spStr; // required
    public int fdSum; // required
    public String srcDirName; // required
    public String dstDirName; // required
    public String hostIp; // required
    public String hostPort; // required
    public String hostName; // required
    public String hostPassword; // required
    public String user; // required
    public String krb5Path; // required
    public String keytabPath; // required
    public String principalPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SP_STR((short)1, "spStr"),
      FD_SUM((short)2, "fdSum"),
      SRC_DIR_NAME((short)3, "srcDirName"),
      DST_DIR_NAME((short)4, "dstDirName"),
      HOST_IP((short)5, "hostIp"),
      HOST_PORT((short)6, "hostPort"),
      HOST_NAME((short)7, "hostName"),
      HOST_PASSWORD((short)8, "hostPassword"),
      USER((short)9, "user"),
      KRB5_PATH((short)10, "krb5Path"),
      KEYTAB_PATH((short)11, "keytabPath"),
      PRINCIPAL_PATH((short)12, "principalPath");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SP_STR
            return SP_STR;
          case 2: // FD_SUM
            return FD_SUM;
          case 3: // SRC_DIR_NAME
            return SRC_DIR_NAME;
          case 4: // DST_DIR_NAME
            return DST_DIR_NAME;
          case 5: // HOST_IP
            return HOST_IP;
          case 6: // HOST_PORT
            return HOST_PORT;
          case 7: // HOST_NAME
            return HOST_NAME;
          case 8: // HOST_PASSWORD
            return HOST_PASSWORD;
          case 9: // USER
            return USER;
          case 10: // KRB5_PATH
            return KRB5_PATH;
          case 11: // KEYTAB_PATH
            return KEYTAB_PATH;
          case 12: // PRINCIPAL_PATH
            return PRINCIPAL_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FDSUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SP_STR, new org.apache.thrift.meta_data.FieldMetaData("spStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FD_SUM, new org.apache.thrift.meta_data.FieldMetaData("fdSum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SRC_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("srcDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("dstDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PORT, new org.apache.thrift.meta_data.FieldMetaData("hostPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("hostPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KRB5_PATH, new org.apache.thrift.meta_data.FieldMetaData("krb5Path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEYTAB_PATH, new org.apache.thrift.meta_data.FieldMetaData("keytabPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRINCIPAL_PATH, new org.apache.thrift.meta_data.FieldMetaData("principalPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(formatRecKerberos_args.class, metaDataMap);
    }

    public formatRecKerberos_args() {
    }

    public formatRecKerberos_args(
      String spStr,
      int fdSum,
      String srcDirName,
      String dstDirName,
      String hostIp,
      String hostPort,
      String hostName,
      String hostPassword,
      String user,
      String krb5Path,
      String keytabPath,
      String principalPath)
    {
      this();
      this.spStr = spStr;
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      this.srcDirName = srcDirName;
      this.dstDirName = dstDirName;
      this.hostIp = hostIp;
      this.hostPort = hostPort;
      this.hostName = hostName;
      this.hostPassword = hostPassword;
      this.user = user;
      this.krb5Path = krb5Path;
      this.keytabPath = keytabPath;
      this.principalPath = principalPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public formatRecKerberos_args(formatRecKerberos_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSpStr()) {
        this.spStr = other.spStr;
      }
      this.fdSum = other.fdSum;
      if (other.isSetSrcDirName()) {
        this.srcDirName = other.srcDirName;
      }
      if (other.isSetDstDirName()) {
        this.dstDirName = other.dstDirName;
      }
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetHostPort()) {
        this.hostPort = other.hostPort;
      }
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
      if (other.isSetHostPassword()) {
        this.hostPassword = other.hostPassword;
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetKrb5Path()) {
        this.krb5Path = other.krb5Path;
      }
      if (other.isSetKeytabPath()) {
        this.keytabPath = other.keytabPath;
      }
      if (other.isSetPrincipalPath()) {
        this.principalPath = other.principalPath;
      }
    }

    public formatRecKerberos_args deepCopy() {
      return new formatRecKerberos_args(this);
    }


    public void clear() {
      this.spStr = null;
      setFdSumIsSet(false);
      this.fdSum = 0;
      this.srcDirName = null;
      this.dstDirName = null;
      this.hostIp = null;
      this.hostPort = null;
      this.hostName = null;
      this.hostPassword = null;
      this.user = null;
      this.krb5Path = null;
      this.keytabPath = null;
      this.principalPath = null;
    }

    public String getSpStr() {
      return this.spStr;
    }

    public formatRecKerberos_args setSpStr(String spStr) {
      this.spStr = spStr;
      return this;
    }

    public void unsetSpStr() {
      this.spStr = null;
    }

    /** Returns true if field spStr is set (has been assigned a value) and false otherwise */
    public boolean isSetSpStr() {
      return this.spStr != null;
    }

    public void setSpStrIsSet(boolean value) {
      if (!value) {
        this.spStr = null;
      }
    }

    public int getFdSum() {
      return this.fdSum;
    }

    public formatRecKerberos_args setFdSum(int fdSum) {
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      return this;
    }

    public void unsetFdSum() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    /** Returns true if field fdSum is set (has been assigned a value) and false otherwise */
    public boolean isSetFdSum() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    public void setFdSumIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FDSUM_ISSET_ID, value);
    }

    public String getSrcDirName() {
      return this.srcDirName;
    }

    public formatRecKerberos_args setSrcDirName(String srcDirName) {
      this.srcDirName = srcDirName;
      return this;
    }

    public void unsetSrcDirName() {
      this.srcDirName = null;
    }

    /** Returns true if field srcDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcDirName() {
      return this.srcDirName != null;
    }

    public void setSrcDirNameIsSet(boolean value) {
      if (!value) {
        this.srcDirName = null;
      }
    }

    public String getDstDirName() {
      return this.dstDirName;
    }

    public formatRecKerberos_args setDstDirName(String dstDirName) {
      this.dstDirName = dstDirName;
      return this;
    }

    public void unsetDstDirName() {
      this.dstDirName = null;
    }

    /** Returns true if field dstDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetDstDirName() {
      return this.dstDirName != null;
    }

    public void setDstDirNameIsSet(boolean value) {
      if (!value) {
        this.dstDirName = null;
      }
    }

    public String getHostIp() {
      return this.hostIp;
    }

    public formatRecKerberos_args setHostIp(String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public String getHostPort() {
      return this.hostPort;
    }

    public formatRecKerberos_args setHostPort(String hostPort) {
      this.hostPort = hostPort;
      return this;
    }

    public void unsetHostPort() {
      this.hostPort = null;
    }

    /** Returns true if field hostPort is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPort() {
      return this.hostPort != null;
    }

    public void setHostPortIsSet(boolean value) {
      if (!value) {
        this.hostPort = null;
      }
    }

    public String getHostName() {
      return this.hostName;
    }

    public formatRecKerberos_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public String getHostPassword() {
      return this.hostPassword;
    }

    public formatRecKerberos_args setHostPassword(String hostPassword) {
      this.hostPassword = hostPassword;
      return this;
    }

    public void unsetHostPassword() {
      this.hostPassword = null;
    }

    /** Returns true if field hostPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPassword() {
      return this.hostPassword != null;
    }

    public void setHostPasswordIsSet(boolean value) {
      if (!value) {
        this.hostPassword = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public formatRecKerberos_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getKrb5Path() {
      return this.krb5Path;
    }

    public formatRecKerberos_args setKrb5Path(String krb5Path) {
      this.krb5Path = krb5Path;
      return this;
    }

    public void unsetKrb5Path() {
      this.krb5Path = null;
    }

    /** Returns true if field krb5Path is set (has been assigned a value) and false otherwise */
    public boolean isSetKrb5Path() {
      return this.krb5Path != null;
    }

    public void setKrb5PathIsSet(boolean value) {
      if (!value) {
        this.krb5Path = null;
      }
    }

    public String getKeytabPath() {
      return this.keytabPath;
    }

    public formatRecKerberos_args setKeytabPath(String keytabPath) {
      this.keytabPath = keytabPath;
      return this;
    }

    public void unsetKeytabPath() {
      this.keytabPath = null;
    }

    /** Returns true if field keytabPath is set (has been assigned a value) and false otherwise */
    public boolean isSetKeytabPath() {
      return this.keytabPath != null;
    }

    public void setKeytabPathIsSet(boolean value) {
      if (!value) {
        this.keytabPath = null;
      }
    }

    public String getPrincipalPath() {
      return this.principalPath;
    }

    public formatRecKerberos_args setPrincipalPath(String principalPath) {
      this.principalPath = principalPath;
      return this;
    }

    public void unsetPrincipalPath() {
      this.principalPath = null;
    }

    /** Returns true if field principalPath is set (has been assigned a value) and false otherwise */
    public boolean isSetPrincipalPath() {
      return this.principalPath != null;
    }

    public void setPrincipalPathIsSet(boolean value) {
      if (!value) {
        this.principalPath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SP_STR:
        if (value == null) {
          unsetSpStr();
        } else {
          setSpStr((String)value);
        }
        break;

      case FD_SUM:
        if (value == null) {
          unsetFdSum();
        } else {
          setFdSum((Integer)value);
        }
        break;

      case SRC_DIR_NAME:
        if (value == null) {
          unsetSrcDirName();
        } else {
          setSrcDirName((String)value);
        }
        break;

      case DST_DIR_NAME:
        if (value == null) {
          unsetDstDirName();
        } else {
          setDstDirName((String)value);
        }
        break;

      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((String)value);
        }
        break;

      case HOST_PORT:
        if (value == null) {
          unsetHostPort();
        } else {
          setHostPort((String)value);
        }
        break;

      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      case HOST_PASSWORD:
        if (value == null) {
          unsetHostPassword();
        } else {
          setHostPassword((String)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case KRB5_PATH:
        if (value == null) {
          unsetKrb5Path();
        } else {
          setKrb5Path((String)value);
        }
        break;

      case KEYTAB_PATH:
        if (value == null) {
          unsetKeytabPath();
        } else {
          setKeytabPath((String)value);
        }
        break;

      case PRINCIPAL_PATH:
        if (value == null) {
          unsetPrincipalPath();
        } else {
          setPrincipalPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SP_STR:
        return getSpStr();

      case FD_SUM:
        return getFdSum();

      case SRC_DIR_NAME:
        return getSrcDirName();

      case DST_DIR_NAME:
        return getDstDirName();

      case HOST_IP:
        return getHostIp();

      case HOST_PORT:
        return getHostPort();

      case HOST_NAME:
        return getHostName();

      case HOST_PASSWORD:
        return getHostPassword();

      case USER:
        return getUser();

      case KRB5_PATH:
        return getKrb5Path();

      case KEYTAB_PATH:
        return getKeytabPath();

      case PRINCIPAL_PATH:
        return getPrincipalPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SP_STR:
        return isSetSpStr();
      case FD_SUM:
        return isSetFdSum();
      case SRC_DIR_NAME:
        return isSetSrcDirName();
      case DST_DIR_NAME:
        return isSetDstDirName();
      case HOST_IP:
        return isSetHostIp();
      case HOST_PORT:
        return isSetHostPort();
      case HOST_NAME:
        return isSetHostName();
      case HOST_PASSWORD:
        return isSetHostPassword();
      case USER:
        return isSetUser();
      case KRB5_PATH:
        return isSetKrb5Path();
      case KEYTAB_PATH:
        return isSetKeytabPath();
      case PRINCIPAL_PATH:
        return isSetPrincipalPath();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof formatRecKerberos_args)
        return this.equals((formatRecKerberos_args)that);
      return false;
    }

    public boolean equals(formatRecKerberos_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_spStr = true && this.isSetSpStr();
      boolean that_present_spStr = true && that.isSetSpStr();
      if (this_present_spStr || that_present_spStr) {
        if (!(this_present_spStr && that_present_spStr))
          return false;
        if (!this.spStr.equals(that.spStr))
          return false;
      }

      boolean this_present_fdSum = true;
      boolean that_present_fdSum = true;
      if (this_present_fdSum || that_present_fdSum) {
        if (!(this_present_fdSum && that_present_fdSum))
          return false;
        if (this.fdSum != that.fdSum)
          return false;
      }

      boolean this_present_srcDirName = true && this.isSetSrcDirName();
      boolean that_present_srcDirName = true && that.isSetSrcDirName();
      if (this_present_srcDirName || that_present_srcDirName) {
        if (!(this_present_srcDirName && that_present_srcDirName))
          return false;
        if (!this.srcDirName.equals(that.srcDirName))
          return false;
      }

      boolean this_present_dstDirName = true && this.isSetDstDirName();
      boolean that_present_dstDirName = true && that.isSetDstDirName();
      if (this_present_dstDirName || that_present_dstDirName) {
        if (!(this_present_dstDirName && that_present_dstDirName))
          return false;
        if (!this.dstDirName.equals(that.dstDirName))
          return false;
      }

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_hostPort = true && this.isSetHostPort();
      boolean that_present_hostPort = true && that.isSetHostPort();
      if (this_present_hostPort || that_present_hostPort) {
        if (!(this_present_hostPort && that_present_hostPort))
          return false;
        if (!this.hostPort.equals(that.hostPort))
          return false;
      }

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      boolean this_present_hostPassword = true && this.isSetHostPassword();
      boolean that_present_hostPassword = true && that.isSetHostPassword();
      if (this_present_hostPassword || that_present_hostPassword) {
        if (!(this_present_hostPassword && that_present_hostPassword))
          return false;
        if (!this.hostPassword.equals(that.hostPassword))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_krb5Path = true && this.isSetKrb5Path();
      boolean that_present_krb5Path = true && that.isSetKrb5Path();
      if (this_present_krb5Path || that_present_krb5Path) {
        if (!(this_present_krb5Path && that_present_krb5Path))
          return false;
        if (!this.krb5Path.equals(that.krb5Path))
          return false;
      }

      boolean this_present_keytabPath = true && this.isSetKeytabPath();
      boolean that_present_keytabPath = true && that.isSetKeytabPath();
      if (this_present_keytabPath || that_present_keytabPath) {
        if (!(this_present_keytabPath && that_present_keytabPath))
          return false;
        if (!this.keytabPath.equals(that.keytabPath))
          return false;
      }

      boolean this_present_principalPath = true && this.isSetPrincipalPath();
      boolean that_present_principalPath = true && that.isSetPrincipalPath();
      if (this_present_principalPath || that_present_principalPath) {
        if (!(this_present_principalPath && that_present_principalPath))
          return false;
        if (!this.principalPath.equals(that.principalPath))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSpStr()) ? 131071 : 524287);
      if (isSetSpStr())
        hashCode = hashCode * 8191 + spStr.hashCode();

      hashCode = hashCode * 8191 + fdSum;

      hashCode = hashCode * 8191 + ((isSetSrcDirName()) ? 131071 : 524287);
      if (isSetSrcDirName())
        hashCode = hashCode * 8191 + srcDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDstDirName()) ? 131071 : 524287);
      if (isSetDstDirName())
        hashCode = hashCode * 8191 + dstDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPort()) ? 131071 : 524287);
      if (isSetHostPort())
        hashCode = hashCode * 8191 + hostPort.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
      if (isSetHostName())
        hashCode = hashCode * 8191 + hostName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPassword()) ? 131071 : 524287);
      if (isSetHostPassword())
        hashCode = hashCode * 8191 + hostPassword.hashCode();

      hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
      if (isSetUser())
        hashCode = hashCode * 8191 + user.hashCode();

      hashCode = hashCode * 8191 + ((isSetKrb5Path()) ? 131071 : 524287);
      if (isSetKrb5Path())
        hashCode = hashCode * 8191 + krb5Path.hashCode();

      hashCode = hashCode * 8191 + ((isSetKeytabPath()) ? 131071 : 524287);
      if (isSetKeytabPath())
        hashCode = hashCode * 8191 + keytabPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetPrincipalPath()) ? 131071 : 524287);
      if (isSetPrincipalPath())
        hashCode = hashCode * 8191 + principalPath.hashCode();

      return hashCode;
    }


    public int compareTo(formatRecKerberos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpStr()).compareTo(other.isSetSpStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spStr, other.spStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdSum()).compareTo(other.isSetFdSum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdSum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdSum, other.fdSum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrcDirName()).compareTo(other.isSetSrcDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcDirName, other.srcDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDstDirName()).compareTo(other.isSetDstDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstDirName, other.dstDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPort()).compareTo(other.isSetHostPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPort, other.hostPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPassword()).compareTo(other.isSetHostPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPassword, other.hostPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKrb5Path()).compareTo(other.isSetKrb5Path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKrb5Path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.krb5Path, other.krb5Path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeytabPath()).compareTo(other.isSetKeytabPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeytabPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keytabPath, other.keytabPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrincipalPath()).compareTo(other.isSetPrincipalPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrincipalPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalPath, other.principalPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public String toString() {
      StringBuilder sb = new StringBuilder("formatRecKerberos_args(");
      boolean first = true;

      sb.append("spStr:");
      if (this.spStr == null) {
        sb.append("null");
      } else {
        sb.append(this.spStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdSum:");
      sb.append(this.fdSum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcDirName:");
      if (this.srcDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.srcDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstDirName:");
      if (this.dstDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.dstDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPort:");
      if (this.hostPort == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPassword:");
      if (this.hostPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPassword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("krb5Path:");
      if (this.krb5Path == null) {
        sb.append("null");
      } else {
        sb.append(this.krb5Path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keytabPath:");
      if (this.keytabPath == null) {
        sb.append("null");
      } else {
        sb.append(this.keytabPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("principalPath:");
      if (this.principalPath == null) {
        sb.append("null");
      } else {
        sb.append(this.principalPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class formatRecKerberos_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public formatRecKerberos_argsStandardScheme getScheme() {
        return new formatRecKerberos_argsStandardScheme();
      }
    }

    private static class formatRecKerberos_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<formatRecKerberos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, formatRecKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SP_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.spStr = iprot.readString();
                struct.setSpStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FD_SUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fdSum = iprot.readI32();
                struct.setFdSumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SRC_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcDirName = iprot.readString();
                struct.setSrcDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DST_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dstDirName = iprot.readString();
                struct.setDstDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // HOST_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPort = iprot.readString();
                struct.setHostPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // HOST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // HOST_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPassword = iprot.readString();
                struct.setHostPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // KRB5_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.krb5Path = iprot.readString();
                struct.setKrb5PathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // KEYTAB_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keytabPath = iprot.readString();
                struct.setKeytabPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // PRINCIPAL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.principalPath = iprot.readString();
                struct.setPrincipalPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, formatRecKerberos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spStr != null) {
          oprot.writeFieldBegin(SP_STR_FIELD_DESC);
          oprot.writeString(struct.spStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FD_SUM_FIELD_DESC);
        oprot.writeI32(struct.fdSum);
        oprot.writeFieldEnd();
        if (struct.srcDirName != null) {
          oprot.writeFieldBegin(SRC_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.srcDirName);
          oprot.writeFieldEnd();
        }
        if (struct.dstDirName != null) {
          oprot.writeFieldBegin(DST_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.dstDirName);
          oprot.writeFieldEnd();
        }
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.hostPort != null) {
          oprot.writeFieldBegin(HOST_PORT_FIELD_DESC);
          oprot.writeString(struct.hostPort);
          oprot.writeFieldEnd();
        }
        if (struct.hostName != null) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
        if (struct.hostPassword != null) {
          oprot.writeFieldBegin(HOST_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.hostPassword);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.krb5Path != null) {
          oprot.writeFieldBegin(KRB5_PATH_FIELD_DESC);
          oprot.writeString(struct.krb5Path);
          oprot.writeFieldEnd();
        }
        if (struct.keytabPath != null) {
          oprot.writeFieldBegin(KEYTAB_PATH_FIELD_DESC);
          oprot.writeString(struct.keytabPath);
          oprot.writeFieldEnd();
        }
        if (struct.principalPath != null) {
          oprot.writeFieldBegin(PRINCIPAL_PATH_FIELD_DESC);
          oprot.writeString(struct.principalPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class formatRecKerberos_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public formatRecKerberos_argsTupleScheme getScheme() {
        return new formatRecKerberos_argsTupleScheme();
      }
    }

    private static class formatRecKerberos_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<formatRecKerberos_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, formatRecKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSpStr()) {
          optionals.set(0);
        }
        if (struct.isSetFdSum()) {
          optionals.set(1);
        }
        if (struct.isSetSrcDirName()) {
          optionals.set(2);
        }
        if (struct.isSetDstDirName()) {
          optionals.set(3);
        }
        if (struct.isSetHostIp()) {
          optionals.set(4);
        }
        if (struct.isSetHostPort()) {
          optionals.set(5);
        }
        if (struct.isSetHostName()) {
          optionals.set(6);
        }
        if (struct.isSetHostPassword()) {
          optionals.set(7);
        }
        if (struct.isSetUser()) {
          optionals.set(8);
        }
        if (struct.isSetKrb5Path()) {
          optionals.set(9);
        }
        if (struct.isSetKeytabPath()) {
          optionals.set(10);
        }
        if (struct.isSetPrincipalPath()) {
          optionals.set(11);
        }
        oprot.writeBitSet(optionals, 12);
        if (struct.isSetSpStr()) {
          oprot.writeString(struct.spStr);
        }
        if (struct.isSetFdSum()) {
          oprot.writeI32(struct.fdSum);
        }
        if (struct.isSetSrcDirName()) {
          oprot.writeString(struct.srcDirName);
        }
        if (struct.isSetDstDirName()) {
          oprot.writeString(struct.dstDirName);
        }
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetHostPort()) {
          oprot.writeString(struct.hostPort);
        }
        if (struct.isSetHostName()) {
          oprot.writeString(struct.hostName);
        }
        if (struct.isSetHostPassword()) {
          oprot.writeString(struct.hostPassword);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetKrb5Path()) {
          oprot.writeString(struct.krb5Path);
        }
        if (struct.isSetKeytabPath()) {
          oprot.writeString(struct.keytabPath);
        }
        if (struct.isSetPrincipalPath()) {
          oprot.writeString(struct.principalPath);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, formatRecKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(12);
        if (incoming.get(0)) {
          struct.spStr = iprot.readString();
          struct.setSpStrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdSum = iprot.readI32();
          struct.setFdSumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.srcDirName = iprot.readString();
          struct.setSrcDirNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dstDirName = iprot.readString();
          struct.setDstDirNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(5)) {
          struct.hostPort = iprot.readString();
          struct.setHostPortIsSet(true);
        }
        if (incoming.get(6)) {
          struct.hostName = iprot.readString();
          struct.setHostNameIsSet(true);
        }
        if (incoming.get(7)) {
          struct.hostPassword = iprot.readString();
          struct.setHostPasswordIsSet(true);
        }
        if (incoming.get(8)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(9)) {
          struct.krb5Path = iprot.readString();
          struct.setKrb5PathIsSet(true);
        }
        if (incoming.get(10)) {
          struct.keytabPath = iprot.readString();
          struct.setKeytabPathIsSet(true);
        }
        if (incoming.get(11)) {
          struct.principalPath = iprot.readString();
          struct.setPrincipalPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class formatRecKerberos_result implements org.apache.thrift.TBase<formatRecKerberos_result, formatRecKerberos_result._Fields>, java.io.Serializable, Cloneable, Comparable<formatRecKerberos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("formatRecKerberos_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new formatRecKerberos_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new formatRecKerberos_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(formatRecKerberos_result.class, metaDataMap);
    }

    public formatRecKerberos_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public formatRecKerberos_result(formatRecKerberos_result other) {
    }

    public formatRecKerberos_result deepCopy() {
      return new formatRecKerberos_result(this);
    }


    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof formatRecKerberos_result)
        return this.equals((formatRecKerberos_result)that);
      return false;
    }

    public boolean equals(formatRecKerberos_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }


    public int compareTo(formatRecKerberos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public String toString() {
      StringBuilder sb = new StringBuilder("formatRecKerberos_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class formatRecKerberos_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public formatRecKerberos_resultStandardScheme getScheme() {
        return new formatRecKerberos_resultStandardScheme();
      }
    }

    private static class formatRecKerberos_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<formatRecKerberos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, formatRecKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, formatRecKerberos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class formatRecKerberos_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public formatRecKerberos_resultTupleScheme getScheme() {
        return new formatRecKerberos_resultTupleScheme();
      }
    }

    private static class formatRecKerberos_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<formatRecKerberos_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, formatRecKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, formatRecKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class selectFieldKerberos_args implements org.apache.thrift.TBase<selectFieldKerberos_args, selectFieldKerberos_args._Fields>, java.io.Serializable, Cloneable, Comparable<selectFieldKerberos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectFieldKerberos_args");

    private static final org.apache.thrift.protocol.TField SP_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("spStr", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FD_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fdSum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField FD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fdNum", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SRC_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("srcDirName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DST_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dstDirName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField HOST_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPort", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField HOST_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPassword", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField KRB5_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("krb5Path", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField KEYTAB_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("keytabPath", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField PRINCIPAL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("principalPath", org.apache.thrift.protocol.TType.STRING, (short)13);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new selectFieldKerberos_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new selectFieldKerberos_argsTupleSchemeFactory();

    public String spStr; // required
    public int fdSum; // required
    public String fdNum; // required
    public String srcDirName; // required
    public String dstDirName; // required
    public String hostIp; // required
    public String hostPort; // required
    public String hostName; // required
    public String hostPassword; // required
    public String user; // required
    public String krb5Path; // required
    public String keytabPath; // required
    public String principalPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SP_STR((short)1, "spStr"),
      FD_SUM((short)2, "fdSum"),
      FD_NUM((short)3, "fdNum"),
      SRC_DIR_NAME((short)4, "srcDirName"),
      DST_DIR_NAME((short)5, "dstDirName"),
      HOST_IP((short)6, "hostIp"),
      HOST_PORT((short)7, "hostPort"),
      HOST_NAME((short)8, "hostName"),
      HOST_PASSWORD((short)9, "hostPassword"),
      USER((short)10, "user"),
      KRB5_PATH((short)11, "krb5Path"),
      KEYTAB_PATH((short)12, "keytabPath"),
      PRINCIPAL_PATH((short)13, "principalPath");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SP_STR
            return SP_STR;
          case 2: // FD_SUM
            return FD_SUM;
          case 3: // FD_NUM
            return FD_NUM;
          case 4: // SRC_DIR_NAME
            return SRC_DIR_NAME;
          case 5: // DST_DIR_NAME
            return DST_DIR_NAME;
          case 6: // HOST_IP
            return HOST_IP;
          case 7: // HOST_PORT
            return HOST_PORT;
          case 8: // HOST_NAME
            return HOST_NAME;
          case 9: // HOST_PASSWORD
            return HOST_PASSWORD;
          case 10: // USER
            return USER;
          case 11: // KRB5_PATH
            return KRB5_PATH;
          case 12: // KEYTAB_PATH
            return KEYTAB_PATH;
          case 13: // PRINCIPAL_PATH
            return PRINCIPAL_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FDSUM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SP_STR, new org.apache.thrift.meta_data.FieldMetaData("spStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FD_SUM, new org.apache.thrift.meta_data.FieldMetaData("fdSum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.FD_NUM, new org.apache.thrift.meta_data.FieldMetaData("fdNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SRC_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("srcDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("dstDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PORT, new org.apache.thrift.meta_data.FieldMetaData("hostPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("hostPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KRB5_PATH, new org.apache.thrift.meta_data.FieldMetaData("krb5Path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEYTAB_PATH, new org.apache.thrift.meta_data.FieldMetaData("keytabPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRINCIPAL_PATH, new org.apache.thrift.meta_data.FieldMetaData("principalPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectFieldKerberos_args.class, metaDataMap);
    }

    public selectFieldKerberos_args() {
    }

    public selectFieldKerberos_args(
      String spStr,
      int fdSum,
      String fdNum,
      String srcDirName,
      String dstDirName,
      String hostIp,
      String hostPort,
      String hostName,
      String hostPassword,
      String user,
      String krb5Path,
      String keytabPath,
      String principalPath)
    {
      this();
      this.spStr = spStr;
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      this.fdNum = fdNum;
      this.srcDirName = srcDirName;
      this.dstDirName = dstDirName;
      this.hostIp = hostIp;
      this.hostPort = hostPort;
      this.hostName = hostName;
      this.hostPassword = hostPassword;
      this.user = user;
      this.krb5Path = krb5Path;
      this.keytabPath = keytabPath;
      this.principalPath = principalPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectFieldKerberos_args(selectFieldKerberos_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSpStr()) {
        this.spStr = other.spStr;
      }
      this.fdSum = other.fdSum;
      if (other.isSetFdNum()) {
        this.fdNum = other.fdNum;
      }
      if (other.isSetSrcDirName()) {
        this.srcDirName = other.srcDirName;
      }
      if (other.isSetDstDirName()) {
        this.dstDirName = other.dstDirName;
      }
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetHostPort()) {
        this.hostPort = other.hostPort;
      }
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
      if (other.isSetHostPassword()) {
        this.hostPassword = other.hostPassword;
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetKrb5Path()) {
        this.krb5Path = other.krb5Path;
      }
      if (other.isSetKeytabPath()) {
        this.keytabPath = other.keytabPath;
      }
      if (other.isSetPrincipalPath()) {
        this.principalPath = other.principalPath;
      }
    }

    public selectFieldKerberos_args deepCopy() {
      return new selectFieldKerberos_args(this);
    }


    public void clear() {
      this.spStr = null;
      setFdSumIsSet(false);
      this.fdSum = 0;
      this.fdNum = null;
      this.srcDirName = null;
      this.dstDirName = null;
      this.hostIp = null;
      this.hostPort = null;
      this.hostName = null;
      this.hostPassword = null;
      this.user = null;
      this.krb5Path = null;
      this.keytabPath = null;
      this.principalPath = null;
    }

    public String getSpStr() {
      return this.spStr;
    }

    public selectFieldKerberos_args setSpStr(String spStr) {
      this.spStr = spStr;
      return this;
    }

    public void unsetSpStr() {
      this.spStr = null;
    }

    /** Returns true if field spStr is set (has been assigned a value) and false otherwise */
    public boolean isSetSpStr() {
      return this.spStr != null;
    }

    public void setSpStrIsSet(boolean value) {
      if (!value) {
        this.spStr = null;
      }
    }

    public int getFdSum() {
      return this.fdSum;
    }

    public selectFieldKerberos_args setFdSum(int fdSum) {
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      return this;
    }

    public void unsetFdSum() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    /** Returns true if field fdSum is set (has been assigned a value) and false otherwise */
    public boolean isSetFdSum() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    public void setFdSumIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FDSUM_ISSET_ID, value);
    }

    public String getFdNum() {
      return this.fdNum;
    }

    public selectFieldKerberos_args setFdNum(String fdNum) {
      this.fdNum = fdNum;
      return this;
    }

    public void unsetFdNum() {
      this.fdNum = null;
    }

    /** Returns true if field fdNum is set (has been assigned a value) and false otherwise */
    public boolean isSetFdNum() {
      return this.fdNum != null;
    }

    public void setFdNumIsSet(boolean value) {
      if (!value) {
        this.fdNum = null;
      }
    }

    public String getSrcDirName() {
      return this.srcDirName;
    }

    public selectFieldKerberos_args setSrcDirName(String srcDirName) {
      this.srcDirName = srcDirName;
      return this;
    }

    public void unsetSrcDirName() {
      this.srcDirName = null;
    }

    /** Returns true if field srcDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcDirName() {
      return this.srcDirName != null;
    }

    public void setSrcDirNameIsSet(boolean value) {
      if (!value) {
        this.srcDirName = null;
      }
    }

    public String getDstDirName() {
      return this.dstDirName;
    }

    public selectFieldKerberos_args setDstDirName(String dstDirName) {
      this.dstDirName = dstDirName;
      return this;
    }

    public void unsetDstDirName() {
      this.dstDirName = null;
    }

    /** Returns true if field dstDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetDstDirName() {
      return this.dstDirName != null;
    }

    public void setDstDirNameIsSet(boolean value) {
      if (!value) {
        this.dstDirName = null;
      }
    }

    public String getHostIp() {
      return this.hostIp;
    }

    public selectFieldKerberos_args setHostIp(String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public String getHostPort() {
      return this.hostPort;
    }

    public selectFieldKerberos_args setHostPort(String hostPort) {
      this.hostPort = hostPort;
      return this;
    }

    public void unsetHostPort() {
      this.hostPort = null;
    }

    /** Returns true if field hostPort is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPort() {
      return this.hostPort != null;
    }

    public void setHostPortIsSet(boolean value) {
      if (!value) {
        this.hostPort = null;
      }
    }

    public String getHostName() {
      return this.hostName;
    }

    public selectFieldKerberos_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public String getHostPassword() {
      return this.hostPassword;
    }

    public selectFieldKerberos_args setHostPassword(String hostPassword) {
      this.hostPassword = hostPassword;
      return this;
    }

    public void unsetHostPassword() {
      this.hostPassword = null;
    }

    /** Returns true if field hostPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPassword() {
      return this.hostPassword != null;
    }

    public void setHostPasswordIsSet(boolean value) {
      if (!value) {
        this.hostPassword = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public selectFieldKerberos_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getKrb5Path() {
      return this.krb5Path;
    }

    public selectFieldKerberos_args setKrb5Path(String krb5Path) {
      this.krb5Path = krb5Path;
      return this;
    }

    public void unsetKrb5Path() {
      this.krb5Path = null;
    }

    /** Returns true if field krb5Path is set (has been assigned a value) and false otherwise */
    public boolean isSetKrb5Path() {
      return this.krb5Path != null;
    }

    public void setKrb5PathIsSet(boolean value) {
      if (!value) {
        this.krb5Path = null;
      }
    }

    public String getKeytabPath() {
      return this.keytabPath;
    }

    public selectFieldKerberos_args setKeytabPath(String keytabPath) {
      this.keytabPath = keytabPath;
      return this;
    }

    public void unsetKeytabPath() {
      this.keytabPath = null;
    }

    /** Returns true if field keytabPath is set (has been assigned a value) and false otherwise */
    public boolean isSetKeytabPath() {
      return this.keytabPath != null;
    }

    public void setKeytabPathIsSet(boolean value) {
      if (!value) {
        this.keytabPath = null;
      }
    }

    public String getPrincipalPath() {
      return this.principalPath;
    }

    public selectFieldKerberos_args setPrincipalPath(String principalPath) {
      this.principalPath = principalPath;
      return this;
    }

    public void unsetPrincipalPath() {
      this.principalPath = null;
    }

    /** Returns true if field principalPath is set (has been assigned a value) and false otherwise */
    public boolean isSetPrincipalPath() {
      return this.principalPath != null;
    }

    public void setPrincipalPathIsSet(boolean value) {
      if (!value) {
        this.principalPath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SP_STR:
        if (value == null) {
          unsetSpStr();
        } else {
          setSpStr((String)value);
        }
        break;

      case FD_SUM:
        if (value == null) {
          unsetFdSum();
        } else {
          setFdSum((Integer)value);
        }
        break;

      case FD_NUM:
        if (value == null) {
          unsetFdNum();
        } else {
          setFdNum((String)value);
        }
        break;

      case SRC_DIR_NAME:
        if (value == null) {
          unsetSrcDirName();
        } else {
          setSrcDirName((String)value);
        }
        break;

      case DST_DIR_NAME:
        if (value == null) {
          unsetDstDirName();
        } else {
          setDstDirName((String)value);
        }
        break;

      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((String)value);
        }
        break;

      case HOST_PORT:
        if (value == null) {
          unsetHostPort();
        } else {
          setHostPort((String)value);
        }
        break;

      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      case HOST_PASSWORD:
        if (value == null) {
          unsetHostPassword();
        } else {
          setHostPassword((String)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case KRB5_PATH:
        if (value == null) {
          unsetKrb5Path();
        } else {
          setKrb5Path((String)value);
        }
        break;

      case KEYTAB_PATH:
        if (value == null) {
          unsetKeytabPath();
        } else {
          setKeytabPath((String)value);
        }
        break;

      case PRINCIPAL_PATH:
        if (value == null) {
          unsetPrincipalPath();
        } else {
          setPrincipalPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SP_STR:
        return getSpStr();

      case FD_SUM:
        return getFdSum();

      case FD_NUM:
        return getFdNum();

      case SRC_DIR_NAME:
        return getSrcDirName();

      case DST_DIR_NAME:
        return getDstDirName();

      case HOST_IP:
        return getHostIp();

      case HOST_PORT:
        return getHostPort();

      case HOST_NAME:
        return getHostName();

      case HOST_PASSWORD:
        return getHostPassword();

      case USER:
        return getUser();

      case KRB5_PATH:
        return getKrb5Path();

      case KEYTAB_PATH:
        return getKeytabPath();

      case PRINCIPAL_PATH:
        return getPrincipalPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SP_STR:
        return isSetSpStr();
      case FD_SUM:
        return isSetFdSum();
      case FD_NUM:
        return isSetFdNum();
      case SRC_DIR_NAME:
        return isSetSrcDirName();
      case DST_DIR_NAME:
        return isSetDstDirName();
      case HOST_IP:
        return isSetHostIp();
      case HOST_PORT:
        return isSetHostPort();
      case HOST_NAME:
        return isSetHostName();
      case HOST_PASSWORD:
        return isSetHostPassword();
      case USER:
        return isSetUser();
      case KRB5_PATH:
        return isSetKrb5Path();
      case KEYTAB_PATH:
        return isSetKeytabPath();
      case PRINCIPAL_PATH:
        return isSetPrincipalPath();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectFieldKerberos_args)
        return this.equals((selectFieldKerberos_args)that);
      return false;
    }

    public boolean equals(selectFieldKerberos_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_spStr = true && this.isSetSpStr();
      boolean that_present_spStr = true && that.isSetSpStr();
      if (this_present_spStr || that_present_spStr) {
        if (!(this_present_spStr && that_present_spStr))
          return false;
        if (!this.spStr.equals(that.spStr))
          return false;
      }

      boolean this_present_fdSum = true;
      boolean that_present_fdSum = true;
      if (this_present_fdSum || that_present_fdSum) {
        if (!(this_present_fdSum && that_present_fdSum))
          return false;
        if (this.fdSum != that.fdSum)
          return false;
      }

      boolean this_present_fdNum = true && this.isSetFdNum();
      boolean that_present_fdNum = true && that.isSetFdNum();
      if (this_present_fdNum || that_present_fdNum) {
        if (!(this_present_fdNum && that_present_fdNum))
          return false;
        if (!this.fdNum.equals(that.fdNum))
          return false;
      }

      boolean this_present_srcDirName = true && this.isSetSrcDirName();
      boolean that_present_srcDirName = true && that.isSetSrcDirName();
      if (this_present_srcDirName || that_present_srcDirName) {
        if (!(this_present_srcDirName && that_present_srcDirName))
          return false;
        if (!this.srcDirName.equals(that.srcDirName))
          return false;
      }

      boolean this_present_dstDirName = true && this.isSetDstDirName();
      boolean that_present_dstDirName = true && that.isSetDstDirName();
      if (this_present_dstDirName || that_present_dstDirName) {
        if (!(this_present_dstDirName && that_present_dstDirName))
          return false;
        if (!this.dstDirName.equals(that.dstDirName))
          return false;
      }

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_hostPort = true && this.isSetHostPort();
      boolean that_present_hostPort = true && that.isSetHostPort();
      if (this_present_hostPort || that_present_hostPort) {
        if (!(this_present_hostPort && that_present_hostPort))
          return false;
        if (!this.hostPort.equals(that.hostPort))
          return false;
      }

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      boolean this_present_hostPassword = true && this.isSetHostPassword();
      boolean that_present_hostPassword = true && that.isSetHostPassword();
      if (this_present_hostPassword || that_present_hostPassword) {
        if (!(this_present_hostPassword && that_present_hostPassword))
          return false;
        if (!this.hostPassword.equals(that.hostPassword))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_krb5Path = true && this.isSetKrb5Path();
      boolean that_present_krb5Path = true && that.isSetKrb5Path();
      if (this_present_krb5Path || that_present_krb5Path) {
        if (!(this_present_krb5Path && that_present_krb5Path))
          return false;
        if (!this.krb5Path.equals(that.krb5Path))
          return false;
      }

      boolean this_present_keytabPath = true && this.isSetKeytabPath();
      boolean that_present_keytabPath = true && that.isSetKeytabPath();
      if (this_present_keytabPath || that_present_keytabPath) {
        if (!(this_present_keytabPath && that_present_keytabPath))
          return false;
        if (!this.keytabPath.equals(that.keytabPath))
          return false;
      }

      boolean this_present_principalPath = true && this.isSetPrincipalPath();
      boolean that_present_principalPath = true && that.isSetPrincipalPath();
      if (this_present_principalPath || that_present_principalPath) {
        if (!(this_present_principalPath && that_present_principalPath))
          return false;
        if (!this.principalPath.equals(that.principalPath))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSpStr()) ? 131071 : 524287);
      if (isSetSpStr())
        hashCode = hashCode * 8191 + spStr.hashCode();

      hashCode = hashCode * 8191 + fdSum;

      hashCode = hashCode * 8191 + ((isSetFdNum()) ? 131071 : 524287);
      if (isSetFdNum())
        hashCode = hashCode * 8191 + fdNum.hashCode();

      hashCode = hashCode * 8191 + ((isSetSrcDirName()) ? 131071 : 524287);
      if (isSetSrcDirName())
        hashCode = hashCode * 8191 + srcDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDstDirName()) ? 131071 : 524287);
      if (isSetDstDirName())
        hashCode = hashCode * 8191 + dstDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPort()) ? 131071 : 524287);
      if (isSetHostPort())
        hashCode = hashCode * 8191 + hostPort.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
      if (isSetHostName())
        hashCode = hashCode * 8191 + hostName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPassword()) ? 131071 : 524287);
      if (isSetHostPassword())
        hashCode = hashCode * 8191 + hostPassword.hashCode();

      hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
      if (isSetUser())
        hashCode = hashCode * 8191 + user.hashCode();

      hashCode = hashCode * 8191 + ((isSetKrb5Path()) ? 131071 : 524287);
      if (isSetKrb5Path())
        hashCode = hashCode * 8191 + krb5Path.hashCode();

      hashCode = hashCode * 8191 + ((isSetKeytabPath()) ? 131071 : 524287);
      if (isSetKeytabPath())
        hashCode = hashCode * 8191 + keytabPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetPrincipalPath()) ? 131071 : 524287);
      if (isSetPrincipalPath())
        hashCode = hashCode * 8191 + principalPath.hashCode();

      return hashCode;
    }


    public int compareTo(selectFieldKerberos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpStr()).compareTo(other.isSetSpStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spStr, other.spStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdSum()).compareTo(other.isSetFdSum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdSum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdSum, other.fdSum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdNum()).compareTo(other.isSetFdNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdNum, other.fdNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrcDirName()).compareTo(other.isSetSrcDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcDirName, other.srcDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDstDirName()).compareTo(other.isSetDstDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstDirName, other.dstDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPort()).compareTo(other.isSetHostPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPort, other.hostPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPassword()).compareTo(other.isSetHostPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPassword, other.hostPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKrb5Path()).compareTo(other.isSetKrb5Path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKrb5Path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.krb5Path, other.krb5Path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeytabPath()).compareTo(other.isSetKeytabPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeytabPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keytabPath, other.keytabPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrincipalPath()).compareTo(other.isSetPrincipalPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrincipalPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalPath, other.principalPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public String toString() {
      StringBuilder sb = new StringBuilder("selectFieldKerberos_args(");
      boolean first = true;

      sb.append("spStr:");
      if (this.spStr == null) {
        sb.append("null");
      } else {
        sb.append(this.spStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdSum:");
      sb.append(this.fdSum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdNum:");
      if (this.fdNum == null) {
        sb.append("null");
      } else {
        sb.append(this.fdNum);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcDirName:");
      if (this.srcDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.srcDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstDirName:");
      if (this.dstDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.dstDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPort:");
      if (this.hostPort == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPassword:");
      if (this.hostPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPassword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("krb5Path:");
      if (this.krb5Path == null) {
        sb.append("null");
      } else {
        sb.append(this.krb5Path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keytabPath:");
      if (this.keytabPath == null) {
        sb.append("null");
      } else {
        sb.append(this.keytabPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("principalPath:");
      if (this.principalPath == null) {
        sb.append("null");
      } else {
        sb.append(this.principalPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectFieldKerberos_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public selectFieldKerberos_argsStandardScheme getScheme() {
        return new selectFieldKerberos_argsStandardScheme();
      }
    }

    private static class selectFieldKerberos_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<selectFieldKerberos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectFieldKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SP_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.spStr = iprot.readString();
                struct.setSpStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FD_SUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fdSum = iprot.readI32();
                struct.setFdSumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FD_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fdNum = iprot.readString();
                struct.setFdNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SRC_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcDirName = iprot.readString();
                struct.setSrcDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DST_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dstDirName = iprot.readString();
                struct.setDstDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // HOST_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPort = iprot.readString();
                struct.setHostPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // HOST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // HOST_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPassword = iprot.readString();
                struct.setHostPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // KRB5_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.krb5Path = iprot.readString();
                struct.setKrb5PathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // KEYTAB_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keytabPath = iprot.readString();
                struct.setKeytabPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // PRINCIPAL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.principalPath = iprot.readString();
                struct.setPrincipalPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectFieldKerberos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spStr != null) {
          oprot.writeFieldBegin(SP_STR_FIELD_DESC);
          oprot.writeString(struct.spStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FD_SUM_FIELD_DESC);
        oprot.writeI32(struct.fdSum);
        oprot.writeFieldEnd();
        if (struct.fdNum != null) {
          oprot.writeFieldBegin(FD_NUM_FIELD_DESC);
          oprot.writeString(struct.fdNum);
          oprot.writeFieldEnd();
        }
        if (struct.srcDirName != null) {
          oprot.writeFieldBegin(SRC_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.srcDirName);
          oprot.writeFieldEnd();
        }
        if (struct.dstDirName != null) {
          oprot.writeFieldBegin(DST_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.dstDirName);
          oprot.writeFieldEnd();
        }
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.hostPort != null) {
          oprot.writeFieldBegin(HOST_PORT_FIELD_DESC);
          oprot.writeString(struct.hostPort);
          oprot.writeFieldEnd();
        }
        if (struct.hostName != null) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
        if (struct.hostPassword != null) {
          oprot.writeFieldBegin(HOST_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.hostPassword);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.krb5Path != null) {
          oprot.writeFieldBegin(KRB5_PATH_FIELD_DESC);
          oprot.writeString(struct.krb5Path);
          oprot.writeFieldEnd();
        }
        if (struct.keytabPath != null) {
          oprot.writeFieldBegin(KEYTAB_PATH_FIELD_DESC);
          oprot.writeString(struct.keytabPath);
          oprot.writeFieldEnd();
        }
        if (struct.principalPath != null) {
          oprot.writeFieldBegin(PRINCIPAL_PATH_FIELD_DESC);
          oprot.writeString(struct.principalPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectFieldKerberos_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public selectFieldKerberos_argsTupleScheme getScheme() {
        return new selectFieldKerberos_argsTupleScheme();
      }
    }

    private static class selectFieldKerberos_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<selectFieldKerberos_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, selectFieldKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSpStr()) {
          optionals.set(0);
        }
        if (struct.isSetFdSum()) {
          optionals.set(1);
        }
        if (struct.isSetFdNum()) {
          optionals.set(2);
        }
        if (struct.isSetSrcDirName()) {
          optionals.set(3);
        }
        if (struct.isSetDstDirName()) {
          optionals.set(4);
        }
        if (struct.isSetHostIp()) {
          optionals.set(5);
        }
        if (struct.isSetHostPort()) {
          optionals.set(6);
        }
        if (struct.isSetHostName()) {
          optionals.set(7);
        }
        if (struct.isSetHostPassword()) {
          optionals.set(8);
        }
        if (struct.isSetUser()) {
          optionals.set(9);
        }
        if (struct.isSetKrb5Path()) {
          optionals.set(10);
        }
        if (struct.isSetKeytabPath()) {
          optionals.set(11);
        }
        if (struct.isSetPrincipalPath()) {
          optionals.set(12);
        }
        oprot.writeBitSet(optionals, 13);
        if (struct.isSetSpStr()) {
          oprot.writeString(struct.spStr);
        }
        if (struct.isSetFdSum()) {
          oprot.writeI32(struct.fdSum);
        }
        if (struct.isSetFdNum()) {
          oprot.writeString(struct.fdNum);
        }
        if (struct.isSetSrcDirName()) {
          oprot.writeString(struct.srcDirName);
        }
        if (struct.isSetDstDirName()) {
          oprot.writeString(struct.dstDirName);
        }
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetHostPort()) {
          oprot.writeString(struct.hostPort);
        }
        if (struct.isSetHostName()) {
          oprot.writeString(struct.hostName);
        }
        if (struct.isSetHostPassword()) {
          oprot.writeString(struct.hostPassword);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetKrb5Path()) {
          oprot.writeString(struct.krb5Path);
        }
        if (struct.isSetKeytabPath()) {
          oprot.writeString(struct.keytabPath);
        }
        if (struct.isSetPrincipalPath()) {
          oprot.writeString(struct.principalPath);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, selectFieldKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(13);
        if (incoming.get(0)) {
          struct.spStr = iprot.readString();
          struct.setSpStrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdSum = iprot.readI32();
          struct.setFdSumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fdNum = iprot.readString();
          struct.setFdNumIsSet(true);
        }
        if (incoming.get(3)) {
          struct.srcDirName = iprot.readString();
          struct.setSrcDirNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dstDirName = iprot.readString();
          struct.setDstDirNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(6)) {
          struct.hostPort = iprot.readString();
          struct.setHostPortIsSet(true);
        }
        if (incoming.get(7)) {
          struct.hostName = iprot.readString();
          struct.setHostNameIsSet(true);
        }
        if (incoming.get(8)) {
          struct.hostPassword = iprot.readString();
          struct.setHostPasswordIsSet(true);
        }
        if (incoming.get(9)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(10)) {
          struct.krb5Path = iprot.readString();
          struct.setKrb5PathIsSet(true);
        }
        if (incoming.get(11)) {
          struct.keytabPath = iprot.readString();
          struct.setKeytabPathIsSet(true);
        }
        if (incoming.get(12)) {
          struct.principalPath = iprot.readString();
          struct.setPrincipalPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class selectFieldKerberos_result implements org.apache.thrift.TBase<selectFieldKerberos_result, selectFieldKerberos_result._Fields>, java.io.Serializable, Cloneable, Comparable<selectFieldKerberos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("selectFieldKerberos_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new selectFieldKerberos_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new selectFieldKerberos_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(selectFieldKerberos_result.class, metaDataMap);
    }

    public selectFieldKerberos_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public selectFieldKerberos_result(selectFieldKerberos_result other) {
    }

    public selectFieldKerberos_result deepCopy() {
      return new selectFieldKerberos_result(this);
    }


    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof selectFieldKerberos_result)
        return this.equals((selectFieldKerberos_result)that);
      return false;
    }

    public boolean equals(selectFieldKerberos_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }


    public int compareTo(selectFieldKerberos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public String toString() {
      StringBuilder sb = new StringBuilder("selectFieldKerberos_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class selectFieldKerberos_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public selectFieldKerberos_resultStandardScheme getScheme() {
        return new selectFieldKerberos_resultStandardScheme();
      }
    }

    private static class selectFieldKerberos_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<selectFieldKerberos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, selectFieldKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, selectFieldKerberos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class selectFieldKerberos_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public selectFieldKerberos_resultTupleScheme getScheme() {
        return new selectFieldKerberos_resultTupleScheme();
      }
    }

    private static class selectFieldKerberos_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<selectFieldKerberos_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, selectFieldKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, selectFieldKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
