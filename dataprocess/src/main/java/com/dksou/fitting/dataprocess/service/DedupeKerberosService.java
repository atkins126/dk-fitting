/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dksou.fitting.dataprocess.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-02")
public class DedupeKerberosService {

  public interface Iface {

    /**
     * 该方法可筛选出不同的数据或字段
     * @param spStr分隔符号;
     * @param fdNum：字段数组（去重的字段，0为整条记录，输入格式：0或逗号分隔的数字（1,2,3...）;
     * @param srcDirName：源目录名;
     * @param dstDirName输出目录名，输出目录如果存在将会覆盖;
     * @param hostIp：要连接hiveserver主机的ip地址;
     * @param hostPort：hiveserver的端口，默认10000;
     * @param hostName：要连接主机的用户名;
     * @param hostPassword：要连接主机的密码（要具备执行Hadoop的权限的用户）;
     * @param user：Service Principal登陆用户名;
     * @param krb5Path：krb5.conf存放路径
     * @param keytabPath：hive.keytab存放路径
     * @param principalPath：hive服务所对应的principal 例: principal=hive/cdh166@EXAMPLE.COM
     * 
     * 
     * @param spStr
     * @param fdNum
     * @param srcDirName
     * @param dstDirName
     * @param hostIp
     * @param hostPort
     * @param hostName
     * @param hostPassword
     * @param user
     * @param krb5Path
     * @param keytabPath
     * @param principalPath
     */
    public void dedupKerberos(String spStr, String fdNum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void dedupKerberos(String spStr, String fdNum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void dedupKerberos(String spStr, String fdNum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException
    {
      send_dedupKerberos(spStr, fdNum, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath);
      recv_dedupKerberos();
    }

    public void send_dedupKerberos(String spStr, String fdNum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath) throws org.apache.thrift.TException
    {
      dedupKerberos_args args = new dedupKerberos_args();
      args.setSpStr(spStr);
      args.setFdNum(fdNum);
      args.setSrcDirName(srcDirName);
      args.setDstDirName(dstDirName);
      args.setHostIp(hostIp);
      args.setHostPort(hostPort);
      args.setHostName(hostName);
      args.setHostPassword(hostPassword);
      args.setUser(user);
      args.setKrb5Path(krb5Path);
      args.setKeytabPath(keytabPath);
      args.setPrincipalPath(principalPath);
      sendBase("dedupKerberos", args);
    }

    public void recv_dedupKerberos() throws org.apache.thrift.TException
    {
      dedupKerberos_result result = new dedupKerberos_result();
      receiveBase(result, "dedupKerberos");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void dedupKerberos(String spStr, String fdNum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dedupKerberos_call method_call = new dedupKerberos_call(spStr, fdNum, srcDirName, dstDirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dedupKerberos_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private String spStr;
      private String fdNum;
      private String srcDirName;
      private String dstDirName;
      private String hostIp;
      private String hostPort;
      private String hostName;
      private String hostPassword;
      private String user;
      private String krb5Path;
      private String keytabPath;
      private String principalPath;
      public dedupKerberos_call(String spStr, String fdNum, String srcDirName, String dstDirName, String hostIp, String hostPort, String hostName, String hostPassword, String user, String krb5Path, String keytabPath, String principalPath, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.spStr = spStr;
        this.fdNum = fdNum;
        this.srcDirName = srcDirName;
        this.dstDirName = dstDirName;
        this.hostIp = hostIp;
        this.hostPort = hostPort;
        this.hostName = hostName;
        this.hostPassword = hostPassword;
        this.user = user;
        this.krb5Path = krb5Path;
        this.keytabPath = keytabPath;
        this.principalPath = principalPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dedupKerberos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dedupKerberos_args args = new dedupKerberos_args();
        args.setSpStr(spStr);
        args.setFdNum(fdNum);
        args.setSrcDirName(srcDirName);
        args.setDstDirName(dstDirName);
        args.setHostIp(hostIp);
        args.setHostPort(hostPort);
        args.setHostName(hostName);
        args.setHostPassword(hostPassword);
        args.setUser(user);
        args.setKrb5Path(krb5Path);
        args.setKeytabPath(keytabPath);
        args.setPrincipalPath(principalPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("dedupKerberos", new dedupKerberos());
      return processMap;
    }

    public static class dedupKerberos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dedupKerberos_args> {
      public dedupKerberos() {
        super("dedupKerberos");
      }

      public dedupKerberos_args getEmptyArgsInstance() {
        return new dedupKerberos_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public dedupKerberos_result getResult(I iface, dedupKerberos_args args) throws org.apache.thrift.TException {
        dedupKerberos_result result = new dedupKerberos_result();
        iface.dedupKerberos(args.spStr, args.fdNum, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("dedupKerberos", new dedupKerberos());
      return processMap;
    }

    public static class dedupKerberos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dedupKerberos_args, Void> {
      public dedupKerberos() {
        super("dedupKerberos");
      }

      public dedupKerberos_args getEmptyArgsInstance() {
        return new dedupKerberos_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            dedupKerberos_result result = new dedupKerberos_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            dedupKerberos_result result = new dedupKerberos_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dedupKerberos_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.dedupKerberos(args.spStr, args.fdNum, args.srcDirName, args.dstDirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath,resultHandler);
      }
    }

  }

  public static class dedupKerberos_args implements org.apache.thrift.TBase<dedupKerberos_args, dedupKerberos_args._Fields>, java.io.Serializable, Cloneable, Comparable<dedupKerberos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dedupKerberos_args");

    private static final org.apache.thrift.protocol.TField SP_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("spStr", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fdNum", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SRC_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("srcDirName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DST_DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dstDirName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField HOST_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPort", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField HOST_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPassword", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField KRB5_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("krb5Path", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField KEYTAB_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("keytabPath", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField PRINCIPAL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("principalPath", org.apache.thrift.protocol.TType.STRING, (short)12);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dedupKerberos_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dedupKerberos_argsTupleSchemeFactory();

    public String spStr; // required
    public String fdNum; // required
    public String srcDirName; // required
    public String dstDirName; // required
    public String hostIp; // required
    public String hostPort; // required
    public String hostName; // required
    public String hostPassword; // required
    public String user; // required
    public String krb5Path; // required
    public String keytabPath; // required
    public String principalPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SP_STR((short)1, "spStr"),
      FD_NUM((short)2, "fdNum"),
      SRC_DIR_NAME((short)3, "srcDirName"),
      DST_DIR_NAME((short)4, "dstDirName"),
      HOST_IP((short)5, "hostIp"),
      HOST_PORT((short)6, "hostPort"),
      HOST_NAME((short)7, "hostName"),
      HOST_PASSWORD((short)8, "hostPassword"),
      USER((short)9, "user"),
      KRB5_PATH((short)10, "krb5Path"),
      KEYTAB_PATH((short)11, "keytabPath"),
      PRINCIPAL_PATH((short)12, "principalPath");

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SP_STR
            return SP_STR;
          case 2: // FD_NUM
            return FD_NUM;
          case 3: // SRC_DIR_NAME
            return SRC_DIR_NAME;
          case 4: // DST_DIR_NAME
            return DST_DIR_NAME;
          case 5: // HOST_IP
            return HOST_IP;
          case 6: // HOST_PORT
            return HOST_PORT;
          case 7: // HOST_NAME
            return HOST_NAME;
          case 8: // HOST_PASSWORD
            return HOST_PASSWORD;
          case 9: // USER
            return USER;
          case 10: // KRB5_PATH
            return KRB5_PATH;
          case 11: // KEYTAB_PATH
            return KEYTAB_PATH;
          case 12: // PRINCIPAL_PATH
            return PRINCIPAL_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SP_STR, new org.apache.thrift.meta_data.FieldMetaData("spStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FD_NUM, new org.apache.thrift.meta_data.FieldMetaData("fdNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SRC_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("srcDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DST_DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("dstDirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PORT, new org.apache.thrift.meta_data.FieldMetaData("hostPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("hostPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KRB5_PATH, new org.apache.thrift.meta_data.FieldMetaData("krb5Path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEYTAB_PATH, new org.apache.thrift.meta_data.FieldMetaData("keytabPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRINCIPAL_PATH, new org.apache.thrift.meta_data.FieldMetaData("principalPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dedupKerberos_args.class, metaDataMap);
    }

    public dedupKerberos_args() {
    }

    public dedupKerberos_args(
      String spStr,
      String fdNum,
      String srcDirName,
      String dstDirName,
      String hostIp,
      String hostPort,
      String hostName,
      String hostPassword,
      String user,
      String krb5Path,
      String keytabPath,
      String principalPath)
    {
      this();
      this.spStr = spStr;
      this.fdNum = fdNum;
      this.srcDirName = srcDirName;
      this.dstDirName = dstDirName;
      this.hostIp = hostIp;
      this.hostPort = hostPort;
      this.hostName = hostName;
      this.hostPassword = hostPassword;
      this.user = user;
      this.krb5Path = krb5Path;
      this.keytabPath = keytabPath;
      this.principalPath = principalPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dedupKerberos_args(dedupKerberos_args other) {
      if (other.isSetSpStr()) {
        this.spStr = other.spStr;
      }
      if (other.isSetFdNum()) {
        this.fdNum = other.fdNum;
      }
      if (other.isSetSrcDirName()) {
        this.srcDirName = other.srcDirName;
      }
      if (other.isSetDstDirName()) {
        this.dstDirName = other.dstDirName;
      }
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetHostPort()) {
        this.hostPort = other.hostPort;
      }
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
      if (other.isSetHostPassword()) {
        this.hostPassword = other.hostPassword;
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetKrb5Path()) {
        this.krb5Path = other.krb5Path;
      }
      if (other.isSetKeytabPath()) {
        this.keytabPath = other.keytabPath;
      }
      if (other.isSetPrincipalPath()) {
        this.principalPath = other.principalPath;
      }
    }

    public dedupKerberos_args deepCopy() {
      return new dedupKerberos_args(this);
    }


    public void clear() {
      this.spStr = null;
      this.fdNum = null;
      this.srcDirName = null;
      this.dstDirName = null;
      this.hostIp = null;
      this.hostPort = null;
      this.hostName = null;
      this.hostPassword = null;
      this.user = null;
      this.krb5Path = null;
      this.keytabPath = null;
      this.principalPath = null;
    }

    public String getSpStr() {
      return this.spStr;
    }

    public dedupKerberos_args setSpStr(String spStr) {
      this.spStr = spStr;
      return this;
    }

    public void unsetSpStr() {
      this.spStr = null;
    }

    /** Returns true if field spStr is set (has been assigned a value) and false otherwise */
    public boolean isSetSpStr() {
      return this.spStr != null;
    }

    public void setSpStrIsSet(boolean value) {
      if (!value) {
        this.spStr = null;
      }
    }

    public String getFdNum() {
      return this.fdNum;
    }

    public dedupKerberos_args setFdNum(String fdNum) {
      this.fdNum = fdNum;
      return this;
    }

    public void unsetFdNum() {
      this.fdNum = null;
    }

    /** Returns true if field fdNum is set (has been assigned a value) and false otherwise */
    public boolean isSetFdNum() {
      return this.fdNum != null;
    }

    public void setFdNumIsSet(boolean value) {
      if (!value) {
        this.fdNum = null;
      }
    }

    public String getSrcDirName() {
      return this.srcDirName;
    }

    public dedupKerberos_args setSrcDirName(String srcDirName) {
      this.srcDirName = srcDirName;
      return this;
    }

    public void unsetSrcDirName() {
      this.srcDirName = null;
    }

    /** Returns true if field srcDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetSrcDirName() {
      return this.srcDirName != null;
    }

    public void setSrcDirNameIsSet(boolean value) {
      if (!value) {
        this.srcDirName = null;
      }
    }

    public String getDstDirName() {
      return this.dstDirName;
    }

    public dedupKerberos_args setDstDirName(String dstDirName) {
      this.dstDirName = dstDirName;
      return this;
    }

    public void unsetDstDirName() {
      this.dstDirName = null;
    }

    /** Returns true if field dstDirName is set (has been assigned a value) and false otherwise */
    public boolean isSetDstDirName() {
      return this.dstDirName != null;
    }

    public void setDstDirNameIsSet(boolean value) {
      if (!value) {
        this.dstDirName = null;
      }
    }

    public String getHostIp() {
      return this.hostIp;
    }

    public dedupKerberos_args setHostIp(String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public String getHostPort() {
      return this.hostPort;
    }

    public dedupKerberos_args setHostPort(String hostPort) {
      this.hostPort = hostPort;
      return this;
    }

    public void unsetHostPort() {
      this.hostPort = null;
    }

    /** Returns true if field hostPort is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPort() {
      return this.hostPort != null;
    }

    public void setHostPortIsSet(boolean value) {
      if (!value) {
        this.hostPort = null;
      }
    }

    public String getHostName() {
      return this.hostName;
    }

    public dedupKerberos_args setHostName(String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public String getHostPassword() {
      return this.hostPassword;
    }

    public dedupKerberos_args setHostPassword(String hostPassword) {
      this.hostPassword = hostPassword;
      return this;
    }

    public void unsetHostPassword() {
      this.hostPassword = null;
    }

    /** Returns true if field hostPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPassword() {
      return this.hostPassword != null;
    }

    public void setHostPasswordIsSet(boolean value) {
      if (!value) {
        this.hostPassword = null;
      }
    }

    public String getUser() {
      return this.user;
    }

    public dedupKerberos_args setUser(String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public String getKrb5Path() {
      return this.krb5Path;
    }

    public dedupKerberos_args setKrb5Path(String krb5Path) {
      this.krb5Path = krb5Path;
      return this;
    }

    public void unsetKrb5Path() {
      this.krb5Path = null;
    }

    /** Returns true if field krb5Path is set (has been assigned a value) and false otherwise */
    public boolean isSetKrb5Path() {
      return this.krb5Path != null;
    }

    public void setKrb5PathIsSet(boolean value) {
      if (!value) {
        this.krb5Path = null;
      }
    }

    public String getKeytabPath() {
      return this.keytabPath;
    }

    public dedupKerberos_args setKeytabPath(String keytabPath) {
      this.keytabPath = keytabPath;
      return this;
    }

    public void unsetKeytabPath() {
      this.keytabPath = null;
    }

    /** Returns true if field keytabPath is set (has been assigned a value) and false otherwise */
    public boolean isSetKeytabPath() {
      return this.keytabPath != null;
    }

    public void setKeytabPathIsSet(boolean value) {
      if (!value) {
        this.keytabPath = null;
      }
    }

    public String getPrincipalPath() {
      return this.principalPath;
    }

    public dedupKerberos_args setPrincipalPath(String principalPath) {
      this.principalPath = principalPath;
      return this;
    }

    public void unsetPrincipalPath() {
      this.principalPath = null;
    }

    /** Returns true if field principalPath is set (has been assigned a value) and false otherwise */
    public boolean isSetPrincipalPath() {
      return this.principalPath != null;
    }

    public void setPrincipalPathIsSet(boolean value) {
      if (!value) {
        this.principalPath = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SP_STR:
        if (value == null) {
          unsetSpStr();
        } else {
          setSpStr((String)value);
        }
        break;

      case FD_NUM:
        if (value == null) {
          unsetFdNum();
        } else {
          setFdNum((String)value);
        }
        break;

      case SRC_DIR_NAME:
        if (value == null) {
          unsetSrcDirName();
        } else {
          setSrcDirName((String)value);
        }
        break;

      case DST_DIR_NAME:
        if (value == null) {
          unsetDstDirName();
        } else {
          setDstDirName((String)value);
        }
        break;

      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((String)value);
        }
        break;

      case HOST_PORT:
        if (value == null) {
          unsetHostPort();
        } else {
          setHostPort((String)value);
        }
        break;

      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((String)value);
        }
        break;

      case HOST_PASSWORD:
        if (value == null) {
          unsetHostPassword();
        } else {
          setHostPassword((String)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((String)value);
        }
        break;

      case KRB5_PATH:
        if (value == null) {
          unsetKrb5Path();
        } else {
          setKrb5Path((String)value);
        }
        break;

      case KEYTAB_PATH:
        if (value == null) {
          unsetKeytabPath();
        } else {
          setKeytabPath((String)value);
        }
        break;

      case PRINCIPAL_PATH:
        if (value == null) {
          unsetPrincipalPath();
        } else {
          setPrincipalPath((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SP_STR:
        return getSpStr();

      case FD_NUM:
        return getFdNum();

      case SRC_DIR_NAME:
        return getSrcDirName();

      case DST_DIR_NAME:
        return getDstDirName();

      case HOST_IP:
        return getHostIp();

      case HOST_PORT:
        return getHostPort();

      case HOST_NAME:
        return getHostName();

      case HOST_PASSWORD:
        return getHostPassword();

      case USER:
        return getUser();

      case KRB5_PATH:
        return getKrb5Path();

      case KEYTAB_PATH:
        return getKeytabPath();

      case PRINCIPAL_PATH:
        return getPrincipalPath();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SP_STR:
        return isSetSpStr();
      case FD_NUM:
        return isSetFdNum();
      case SRC_DIR_NAME:
        return isSetSrcDirName();
      case DST_DIR_NAME:
        return isSetDstDirName();
      case HOST_IP:
        return isSetHostIp();
      case HOST_PORT:
        return isSetHostPort();
      case HOST_NAME:
        return isSetHostName();
      case HOST_PASSWORD:
        return isSetHostPassword();
      case USER:
        return isSetUser();
      case KRB5_PATH:
        return isSetKrb5Path();
      case KEYTAB_PATH:
        return isSetKeytabPath();
      case PRINCIPAL_PATH:
        return isSetPrincipalPath();
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dedupKerberos_args)
        return this.equals((dedupKerberos_args)that);
      return false;
    }

    public boolean equals(dedupKerberos_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_spStr = true && this.isSetSpStr();
      boolean that_present_spStr = true && that.isSetSpStr();
      if (this_present_spStr || that_present_spStr) {
        if (!(this_present_spStr && that_present_spStr))
          return false;
        if (!this.spStr.equals(that.spStr))
          return false;
      }

      boolean this_present_fdNum = true && this.isSetFdNum();
      boolean that_present_fdNum = true && that.isSetFdNum();
      if (this_present_fdNum || that_present_fdNum) {
        if (!(this_present_fdNum && that_present_fdNum))
          return false;
        if (!this.fdNum.equals(that.fdNum))
          return false;
      }

      boolean this_present_srcDirName = true && this.isSetSrcDirName();
      boolean that_present_srcDirName = true && that.isSetSrcDirName();
      if (this_present_srcDirName || that_present_srcDirName) {
        if (!(this_present_srcDirName && that_present_srcDirName))
          return false;
        if (!this.srcDirName.equals(that.srcDirName))
          return false;
      }

      boolean this_present_dstDirName = true && this.isSetDstDirName();
      boolean that_present_dstDirName = true && that.isSetDstDirName();
      if (this_present_dstDirName || that_present_dstDirName) {
        if (!(this_present_dstDirName && that_present_dstDirName))
          return false;
        if (!this.dstDirName.equals(that.dstDirName))
          return false;
      }

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_hostPort = true && this.isSetHostPort();
      boolean that_present_hostPort = true && that.isSetHostPort();
      if (this_present_hostPort || that_present_hostPort) {
        if (!(this_present_hostPort && that_present_hostPort))
          return false;
        if (!this.hostPort.equals(that.hostPort))
          return false;
      }

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      boolean this_present_hostPassword = true && this.isSetHostPassword();
      boolean that_present_hostPassword = true && that.isSetHostPassword();
      if (this_present_hostPassword || that_present_hostPassword) {
        if (!(this_present_hostPassword && that_present_hostPassword))
          return false;
        if (!this.hostPassword.equals(that.hostPassword))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_krb5Path = true && this.isSetKrb5Path();
      boolean that_present_krb5Path = true && that.isSetKrb5Path();
      if (this_present_krb5Path || that_present_krb5Path) {
        if (!(this_present_krb5Path && that_present_krb5Path))
          return false;
        if (!this.krb5Path.equals(that.krb5Path))
          return false;
      }

      boolean this_present_keytabPath = true && this.isSetKeytabPath();
      boolean that_present_keytabPath = true && that.isSetKeytabPath();
      if (this_present_keytabPath || that_present_keytabPath) {
        if (!(this_present_keytabPath && that_present_keytabPath))
          return false;
        if (!this.keytabPath.equals(that.keytabPath))
          return false;
      }

      boolean this_present_principalPath = true && this.isSetPrincipalPath();
      boolean that_present_principalPath = true && that.isSetPrincipalPath();
      if (this_present_principalPath || that_present_principalPath) {
        if (!(this_present_principalPath && that_present_principalPath))
          return false;
        if (!this.principalPath.equals(that.principalPath))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSpStr()) ? 131071 : 524287);
      if (isSetSpStr())
        hashCode = hashCode * 8191 + spStr.hashCode();

      hashCode = hashCode * 8191 + ((isSetFdNum()) ? 131071 : 524287);
      if (isSetFdNum())
        hashCode = hashCode * 8191 + fdNum.hashCode();

      hashCode = hashCode * 8191 + ((isSetSrcDirName()) ? 131071 : 524287);
      if (isSetSrcDirName())
        hashCode = hashCode * 8191 + srcDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDstDirName()) ? 131071 : 524287);
      if (isSetDstDirName())
        hashCode = hashCode * 8191 + dstDirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPort()) ? 131071 : 524287);
      if (isSetHostPort())
        hashCode = hashCode * 8191 + hostPort.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
      if (isSetHostName())
        hashCode = hashCode * 8191 + hostName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPassword()) ? 131071 : 524287);
      if (isSetHostPassword())
        hashCode = hashCode * 8191 + hostPassword.hashCode();

      hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
      if (isSetUser())
        hashCode = hashCode * 8191 + user.hashCode();

      hashCode = hashCode * 8191 + ((isSetKrb5Path()) ? 131071 : 524287);
      if (isSetKrb5Path())
        hashCode = hashCode * 8191 + krb5Path.hashCode();

      hashCode = hashCode * 8191 + ((isSetKeytabPath()) ? 131071 : 524287);
      if (isSetKeytabPath())
        hashCode = hashCode * 8191 + keytabPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetPrincipalPath()) ? 131071 : 524287);
      if (isSetPrincipalPath())
        hashCode = hashCode * 8191 + principalPath.hashCode();

      return hashCode;
    }


    public int compareTo(dedupKerberos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSpStr()).compareTo(other.isSetSpStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spStr, other.spStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFdNum()).compareTo(other.isSetFdNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdNum, other.fdNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrcDirName()).compareTo(other.isSetSrcDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrcDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srcDirName, other.srcDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDstDirName()).compareTo(other.isSetDstDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDstDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dstDirName, other.dstDirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPort()).compareTo(other.isSetHostPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPort, other.hostPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostPassword()).compareTo(other.isSetHostPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPassword, other.hostPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKrb5Path()).compareTo(other.isSetKrb5Path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKrb5Path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.krb5Path, other.krb5Path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeytabPath()).compareTo(other.isSetKeytabPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeytabPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keytabPath, other.keytabPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPrincipalPath()).compareTo(other.isSetPrincipalPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrincipalPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalPath, other.principalPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public String toString() {
      StringBuilder sb = new StringBuilder("dedupKerberos_args(");
      boolean first = true;

      sb.append("spStr:");
      if (this.spStr == null) {
        sb.append("null");
      } else {
        sb.append(this.spStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdNum:");
      if (this.fdNum == null) {
        sb.append("null");
      } else {
        sb.append(this.fdNum);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srcDirName:");
      if (this.srcDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.srcDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dstDirName:");
      if (this.dstDirName == null) {
        sb.append("null");
      } else {
        sb.append(this.dstDirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPort:");
      if (this.hostPort == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPassword:");
      if (this.hostPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPassword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("krb5Path:");
      if (this.krb5Path == null) {
        sb.append("null");
      } else {
        sb.append(this.krb5Path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keytabPath:");
      if (this.keytabPath == null) {
        sb.append("null");
      } else {
        sb.append(this.keytabPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("principalPath:");
      if (this.principalPath == null) {
        sb.append("null");
      } else {
        sb.append(this.principalPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dedupKerberos_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dedupKerberos_argsStandardScheme getScheme() {
        return new dedupKerberos_argsStandardScheme();
      }
    }

    private static class dedupKerberos_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<dedupKerberos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dedupKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SP_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.spStr = iprot.readString();
                struct.setSpStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FD_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fdNum = iprot.readString();
                struct.setFdNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SRC_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.srcDirName = iprot.readString();
                struct.setSrcDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DST_DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dstDirName = iprot.readString();
                struct.setDstDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // HOST_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPort = iprot.readString();
                struct.setHostPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // HOST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // HOST_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPassword = iprot.readString();
                struct.setHostPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // KRB5_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.krb5Path = iprot.readString();
                struct.setKrb5PathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // KEYTAB_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keytabPath = iprot.readString();
                struct.setKeytabPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // PRINCIPAL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.principalPath = iprot.readString();
                struct.setPrincipalPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dedupKerberos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.spStr != null) {
          oprot.writeFieldBegin(SP_STR_FIELD_DESC);
          oprot.writeString(struct.spStr);
          oprot.writeFieldEnd();
        }
        if (struct.fdNum != null) {
          oprot.writeFieldBegin(FD_NUM_FIELD_DESC);
          oprot.writeString(struct.fdNum);
          oprot.writeFieldEnd();
        }
        if (struct.srcDirName != null) {
          oprot.writeFieldBegin(SRC_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.srcDirName);
          oprot.writeFieldEnd();
        }
        if (struct.dstDirName != null) {
          oprot.writeFieldBegin(DST_DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.dstDirName);
          oprot.writeFieldEnd();
        }
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.hostPort != null) {
          oprot.writeFieldBegin(HOST_PORT_FIELD_DESC);
          oprot.writeString(struct.hostPort);
          oprot.writeFieldEnd();
        }
        if (struct.hostName != null) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
        if (struct.hostPassword != null) {
          oprot.writeFieldBegin(HOST_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.hostPassword);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.krb5Path != null) {
          oprot.writeFieldBegin(KRB5_PATH_FIELD_DESC);
          oprot.writeString(struct.krb5Path);
          oprot.writeFieldEnd();
        }
        if (struct.keytabPath != null) {
          oprot.writeFieldBegin(KEYTAB_PATH_FIELD_DESC);
          oprot.writeString(struct.keytabPath);
          oprot.writeFieldEnd();
        }
        if (struct.principalPath != null) {
          oprot.writeFieldBegin(PRINCIPAL_PATH_FIELD_DESC);
          oprot.writeString(struct.principalPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dedupKerberos_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dedupKerberos_argsTupleScheme getScheme() {
        return new dedupKerberos_argsTupleScheme();
      }
    }

    private static class dedupKerberos_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<dedupKerberos_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, dedupKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSpStr()) {
          optionals.set(0);
        }
        if (struct.isSetFdNum()) {
          optionals.set(1);
        }
        if (struct.isSetSrcDirName()) {
          optionals.set(2);
        }
        if (struct.isSetDstDirName()) {
          optionals.set(3);
        }
        if (struct.isSetHostIp()) {
          optionals.set(4);
        }
        if (struct.isSetHostPort()) {
          optionals.set(5);
        }
        if (struct.isSetHostName()) {
          optionals.set(6);
        }
        if (struct.isSetHostPassword()) {
          optionals.set(7);
        }
        if (struct.isSetUser()) {
          optionals.set(8);
        }
        if (struct.isSetKrb5Path()) {
          optionals.set(9);
        }
        if (struct.isSetKeytabPath()) {
          optionals.set(10);
        }
        if (struct.isSetPrincipalPath()) {
          optionals.set(11);
        }
        oprot.writeBitSet(optionals, 12);
        if (struct.isSetSpStr()) {
          oprot.writeString(struct.spStr);
        }
        if (struct.isSetFdNum()) {
          oprot.writeString(struct.fdNum);
        }
        if (struct.isSetSrcDirName()) {
          oprot.writeString(struct.srcDirName);
        }
        if (struct.isSetDstDirName()) {
          oprot.writeString(struct.dstDirName);
        }
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetHostPort()) {
          oprot.writeString(struct.hostPort);
        }
        if (struct.isSetHostName()) {
          oprot.writeString(struct.hostName);
        }
        if (struct.isSetHostPassword()) {
          oprot.writeString(struct.hostPassword);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetKrb5Path()) {
          oprot.writeString(struct.krb5Path);
        }
        if (struct.isSetKeytabPath()) {
          oprot.writeString(struct.keytabPath);
        }
        if (struct.isSetPrincipalPath()) {
          oprot.writeString(struct.principalPath);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, dedupKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(12);
        if (incoming.get(0)) {
          struct.spStr = iprot.readString();
          struct.setSpStrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdNum = iprot.readString();
          struct.setFdNumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.srcDirName = iprot.readString();
          struct.setSrcDirNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dstDirName = iprot.readString();
          struct.setDstDirNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(5)) {
          struct.hostPort = iprot.readString();
          struct.setHostPortIsSet(true);
        }
        if (incoming.get(6)) {
          struct.hostName = iprot.readString();
          struct.setHostNameIsSet(true);
        }
        if (incoming.get(7)) {
          struct.hostPassword = iprot.readString();
          struct.setHostPasswordIsSet(true);
        }
        if (incoming.get(8)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(9)) {
          struct.krb5Path = iprot.readString();
          struct.setKrb5PathIsSet(true);
        }
        if (incoming.get(10)) {
          struct.keytabPath = iprot.readString();
          struct.setKeytabPathIsSet(true);
        }
        if (incoming.get(11)) {
          struct.principalPath = iprot.readString();
          struct.setPrincipalPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dedupKerberos_result implements org.apache.thrift.TBase<dedupKerberos_result, dedupKerberos_result._Fields>, java.io.Serializable, Cloneable, Comparable<dedupKerberos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dedupKerberos_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dedupKerberos_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dedupKerberos_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dedupKerberos_result.class, metaDataMap);
    }

    public dedupKerberos_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dedupKerberos_result(dedupKerberos_result other) {
    }

    public dedupKerberos_result deepCopy() {
      return new dedupKerberos_result(this);
    }


    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }


    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof dedupKerberos_result)
        return this.equals((dedupKerberos_result)that);
      return false;
    }

    public boolean equals(dedupKerberos_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }


    public int compareTo(dedupKerberos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public String toString() {
      StringBuilder sb = new StringBuilder("dedupKerberos_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dedupKerberos_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dedupKerberos_resultStandardScheme getScheme() {
        return new dedupKerberos_resultStandardScheme();
      }
    }

    private static class dedupKerberos_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<dedupKerberos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dedupKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dedupKerberos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dedupKerberos_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dedupKerberos_resultTupleScheme getScheme() {
        return new dedupKerberos_resultTupleScheme();
      }
    }

    private static class dedupKerberos_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<dedupKerberos_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, dedupKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, dedupKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
