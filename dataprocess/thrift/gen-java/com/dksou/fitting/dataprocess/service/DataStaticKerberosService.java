/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dksou.fitting.dataprocess.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-02")
public class DataStaticKerberosService {

  public interface Iface {

    /**
     * 该方法可对某字段取最大值、最小值、求和、计算平均值。
     * @param fun：功能avg,min,max,sum，
     * @param fdSum：字段数量
     * @param spStr分隔符号，
     * @param fdNum：字段编号，
     * @param dirName：目录名
     * @param hostIp：要连接hiveserver主机的ip地址，
     * @param hostPort：hiveserver的端口，默认10000
     * @param hostName：要连接主机的用户名，
     * @param hostPassword：要连接主机的密码（要具备执行Hadoop的权限的用户）
     * @param user：Service Principal登陆用户名;
     * @param krb5Path：krb5.conf存放路径
     * @param keytabPath：hive.keytab存放路径
     * @param principalPath：hive服务所对应的principal
     * 
     * @param fun
     * @param fdSum
     * @param spStr
     * @param fdNum
     * @param dirName
     * @param hostIp
     * @param hostPort
     * @param hostName
     * @param hostPassword
     * @param user
     * @param krb5Path
     * @param keytabPath
     * @param principalPath
     */
    public double countKerberos(java.lang.String fun, int fdSum, java.lang.String spStr, int fdNum, java.lang.String dirName, java.lang.String hostIp, java.lang.String hostPort, java.lang.String hostName, java.lang.String hostPassword, java.lang.String user, java.lang.String krb5Path, java.lang.String keytabPath, java.lang.String principalPath) throws org.apache.thrift.TException;

    /**
     * 该方法可计算某字段符合某条件的记录数。
     * @param fun：功能count
     * @param fdSum：字段数量
     * @param spStr分隔符号，
     * @param fdNum：字段编号，
     * @param @param compStr：比较符号，>, <, >=, <=, =,!=用法："'>='"
     * @param whereStr：比较条件
     * @param dirName：目录名
     * @param hostIp：要连接hiveserver主机的ip地址，
     * @param hostPort：hiveserver的端口，默认10000
     * @param hostName：要连接主机的用户名，
     * @param hostPassword：要连接主机的密码（要具备执行Hadoop的权限的用户）。
     * @param user：Service Principal登陆用户名;
     * @param krb5Path：krb5.conf存放路径
     * @param keytabPath：hive.keytab存放路径
     * @param principalPath：hive服务所对应的principal
     * 
     * @param fun
     * @param fdSum
     * @param spStr
     * @param fdNum
     * @param compStr
     * @param whereStr
     * @param dirName
     * @param hostIp
     * @param hostPort
     * @param hostName
     * @param hostPassword
     * @param user
     * @param krb5Path
     * @param keytabPath
     * @param principalPath
     */
    public double countRecordKerberos(java.lang.String fun, int fdSum, java.lang.String spStr, int fdNum, java.lang.String compStr, java.lang.String whereStr, java.lang.String dirName, java.lang.String hostIp, java.lang.String hostPort, java.lang.String hostName, java.lang.String hostPassword, java.lang.String user, java.lang.String krb5Path, java.lang.String keytabPath, java.lang.String principalPath) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void countKerberos(java.lang.String fun, int fdSum, java.lang.String spStr, int fdNum, java.lang.String dirName, java.lang.String hostIp, java.lang.String hostPort, java.lang.String hostName, java.lang.String hostPassword, java.lang.String user, java.lang.String krb5Path, java.lang.String keytabPath, java.lang.String principalPath, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException;

    public void countRecordKerberos(java.lang.String fun, int fdSum, java.lang.String spStr, int fdNum, java.lang.String compStr, java.lang.String whereStr, java.lang.String dirName, java.lang.String hostIp, java.lang.String hostPort, java.lang.String hostName, java.lang.String hostPassword, java.lang.String user, java.lang.String krb5Path, java.lang.String keytabPath, java.lang.String principalPath, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public double countKerberos(java.lang.String fun, int fdSum, java.lang.String spStr, int fdNum, java.lang.String dirName, java.lang.String hostIp, java.lang.String hostPort, java.lang.String hostName, java.lang.String hostPassword, java.lang.String user, java.lang.String krb5Path, java.lang.String keytabPath, java.lang.String principalPath) throws org.apache.thrift.TException
    {
      send_countKerberos(fun, fdSum, spStr, fdNum, dirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath);
      return recv_countKerberos();
    }

    public void send_countKerberos(java.lang.String fun, int fdSum, java.lang.String spStr, int fdNum, java.lang.String dirName, java.lang.String hostIp, java.lang.String hostPort, java.lang.String hostName, java.lang.String hostPassword, java.lang.String user, java.lang.String krb5Path, java.lang.String keytabPath, java.lang.String principalPath) throws org.apache.thrift.TException
    {
      countKerberos_args args = new countKerberos_args();
      args.setFun(fun);
      args.setFdSum(fdSum);
      args.setSpStr(spStr);
      args.setFdNum(fdNum);
      args.setDirName(dirName);
      args.setHostIp(hostIp);
      args.setHostPort(hostPort);
      args.setHostName(hostName);
      args.setHostPassword(hostPassword);
      args.setUser(user);
      args.setKrb5Path(krb5Path);
      args.setKeytabPath(keytabPath);
      args.setPrincipalPath(principalPath);
      sendBase("countKerberos", args);
    }

    public double recv_countKerberos() throws org.apache.thrift.TException
    {
      countKerberos_result result = new countKerberos_result();
      receiveBase(result, "countKerberos");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countKerberos failed: unknown result");
    }

    public double countRecordKerberos(java.lang.String fun, int fdSum, java.lang.String spStr, int fdNum, java.lang.String compStr, java.lang.String whereStr, java.lang.String dirName, java.lang.String hostIp, java.lang.String hostPort, java.lang.String hostName, java.lang.String hostPassword, java.lang.String user, java.lang.String krb5Path, java.lang.String keytabPath, java.lang.String principalPath) throws org.apache.thrift.TException
    {
      send_countRecordKerberos(fun, fdSum, spStr, fdNum, compStr, whereStr, dirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath);
      return recv_countRecordKerberos();
    }

    public void send_countRecordKerberos(java.lang.String fun, int fdSum, java.lang.String spStr, int fdNum, java.lang.String compStr, java.lang.String whereStr, java.lang.String dirName, java.lang.String hostIp, java.lang.String hostPort, java.lang.String hostName, java.lang.String hostPassword, java.lang.String user, java.lang.String krb5Path, java.lang.String keytabPath, java.lang.String principalPath) throws org.apache.thrift.TException
    {
      countRecordKerberos_args args = new countRecordKerberos_args();
      args.setFun(fun);
      args.setFdSum(fdSum);
      args.setSpStr(spStr);
      args.setFdNum(fdNum);
      args.setCompStr(compStr);
      args.setWhereStr(whereStr);
      args.setDirName(dirName);
      args.setHostIp(hostIp);
      args.setHostPort(hostPort);
      args.setHostName(hostName);
      args.setHostPassword(hostPassword);
      args.setUser(user);
      args.setKrb5Path(krb5Path);
      args.setKeytabPath(keytabPath);
      args.setPrincipalPath(principalPath);
      sendBase("countRecordKerberos", args);
    }

    public double recv_countRecordKerberos() throws org.apache.thrift.TException
    {
      countRecordKerberos_result result = new countRecordKerberos_result();
      receiveBase(result, "countRecordKerberos");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countRecordKerberos failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void countKerberos(java.lang.String fun, int fdSum, java.lang.String spStr, int fdNum, java.lang.String dirName, java.lang.String hostIp, java.lang.String hostPort, java.lang.String hostName, java.lang.String hostPassword, java.lang.String user, java.lang.String krb5Path, java.lang.String keytabPath, java.lang.String principalPath, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countKerberos_call method_call = new countKerberos_call(fun, fdSum, spStr, fdNum, dirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countKerberos_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Double> {
      private java.lang.String fun;
      private int fdSum;
      private java.lang.String spStr;
      private int fdNum;
      private java.lang.String dirName;
      private java.lang.String hostIp;
      private java.lang.String hostPort;
      private java.lang.String hostName;
      private java.lang.String hostPassword;
      private java.lang.String user;
      private java.lang.String krb5Path;
      private java.lang.String keytabPath;
      private java.lang.String principalPath;
      public countKerberos_call(java.lang.String fun, int fdSum, java.lang.String spStr, int fdNum, java.lang.String dirName, java.lang.String hostIp, java.lang.String hostPort, java.lang.String hostName, java.lang.String hostPassword, java.lang.String user, java.lang.String krb5Path, java.lang.String keytabPath, java.lang.String principalPath, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fun = fun;
        this.fdSum = fdSum;
        this.spStr = spStr;
        this.fdNum = fdNum;
        this.dirName = dirName;
        this.hostIp = hostIp;
        this.hostPort = hostPort;
        this.hostName = hostName;
        this.hostPassword = hostPassword;
        this.user = user;
        this.krb5Path = krb5Path;
        this.keytabPath = keytabPath;
        this.principalPath = principalPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countKerberos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countKerberos_args args = new countKerberos_args();
        args.setFun(fun);
        args.setFdSum(fdSum);
        args.setSpStr(spStr);
        args.setFdNum(fdNum);
        args.setDirName(dirName);
        args.setHostIp(hostIp);
        args.setHostPort(hostPort);
        args.setHostName(hostName);
        args.setHostPassword(hostPassword);
        args.setUser(user);
        args.setKrb5Path(krb5Path);
        args.setKeytabPath(keytabPath);
        args.setPrincipalPath(principalPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countKerberos();
      }
    }

    public void countRecordKerberos(java.lang.String fun, int fdSum, java.lang.String spStr, int fdNum, java.lang.String compStr, java.lang.String whereStr, java.lang.String dirName, java.lang.String hostIp, java.lang.String hostPort, java.lang.String hostName, java.lang.String hostPassword, java.lang.String user, java.lang.String krb5Path, java.lang.String keytabPath, java.lang.String principalPath, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countRecordKerberos_call method_call = new countRecordKerberos_call(fun, fdSum, spStr, fdNum, compStr, whereStr, dirName, hostIp, hostPort, hostName, hostPassword, user, krb5Path, keytabPath, principalPath, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countRecordKerberos_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Double> {
      private java.lang.String fun;
      private int fdSum;
      private java.lang.String spStr;
      private int fdNum;
      private java.lang.String compStr;
      private java.lang.String whereStr;
      private java.lang.String dirName;
      private java.lang.String hostIp;
      private java.lang.String hostPort;
      private java.lang.String hostName;
      private java.lang.String hostPassword;
      private java.lang.String user;
      private java.lang.String krb5Path;
      private java.lang.String keytabPath;
      private java.lang.String principalPath;
      public countRecordKerberos_call(java.lang.String fun, int fdSum, java.lang.String spStr, int fdNum, java.lang.String compStr, java.lang.String whereStr, java.lang.String dirName, java.lang.String hostIp, java.lang.String hostPort, java.lang.String hostName, java.lang.String hostPassword, java.lang.String user, java.lang.String krb5Path, java.lang.String keytabPath, java.lang.String principalPath, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fun = fun;
        this.fdSum = fdSum;
        this.spStr = spStr;
        this.fdNum = fdNum;
        this.compStr = compStr;
        this.whereStr = whereStr;
        this.dirName = dirName;
        this.hostIp = hostIp;
        this.hostPort = hostPort;
        this.hostName = hostName;
        this.hostPassword = hostPassword;
        this.user = user;
        this.krb5Path = krb5Path;
        this.keytabPath = keytabPath;
        this.principalPath = principalPath;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countRecordKerberos", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countRecordKerberos_args args = new countRecordKerberos_args();
        args.setFun(fun);
        args.setFdSum(fdSum);
        args.setSpStr(spStr);
        args.setFdNum(fdNum);
        args.setCompStr(compStr);
        args.setWhereStr(whereStr);
        args.setDirName(dirName);
        args.setHostIp(hostIp);
        args.setHostPort(hostPort);
        args.setHostName(hostName);
        args.setHostPassword(hostPassword);
        args.setUser(user);
        args.setKrb5Path(krb5Path);
        args.setKeytabPath(keytabPath);
        args.setPrincipalPath(principalPath);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Double getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countRecordKerberos();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("countKerberos", new countKerberos());
      processMap.put("countRecordKerberos", new countRecordKerberos());
      return processMap;
    }

    public static class countKerberos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countKerberos_args> {
      public countKerberos() {
        super("countKerberos");
      }

      public countKerberos_args getEmptyArgsInstance() {
        return new countKerberos_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public countKerberos_result getResult(I iface, countKerberos_args args) throws org.apache.thrift.TException {
        countKerberos_result result = new countKerberos_result();
        result.success = iface.countKerberos(args.fun, args.fdSum, args.spStr, args.fdNum, args.dirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class countRecordKerberos<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countRecordKerberos_args> {
      public countRecordKerberos() {
        super("countRecordKerberos");
      }

      public countRecordKerberos_args getEmptyArgsInstance() {
        return new countRecordKerberos_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public countRecordKerberos_result getResult(I iface, countRecordKerberos_args args) throws org.apache.thrift.TException {
        countRecordKerberos_result result = new countRecordKerberos_result();
        result.success = iface.countRecordKerberos(args.fun, args.fdSum, args.spStr, args.fdNum, args.compStr, args.whereStr, args.dirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("countKerberos", new countKerberos());
      processMap.put("countRecordKerberos", new countRecordKerberos());
      return processMap;
    }

    public static class countKerberos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countKerberos_args, java.lang.Double> {
      public countKerberos() {
        super("countKerberos");
      }

      public countKerberos_args getEmptyArgsInstance() {
        return new countKerberos_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Double>() { 
          public void onComplete(java.lang.Double o) {
            countKerberos_result result = new countKerberos_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            countKerberos_result result = new countKerberos_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countKerberos_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
        iface.countKerberos(args.fun, args.fdSum, args.spStr, args.fdNum, args.dirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath,resultHandler);
      }
    }

    public static class countRecordKerberos<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countRecordKerberos_args, java.lang.Double> {
      public countRecordKerberos() {
        super("countRecordKerberos");
      }

      public countRecordKerberos_args getEmptyArgsInstance() {
        return new countRecordKerberos_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Double>() { 
          public void onComplete(java.lang.Double o) {
            countRecordKerberos_result result = new countRecordKerberos_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            countRecordKerberos_result result = new countRecordKerberos_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countRecordKerberos_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Double> resultHandler) throws org.apache.thrift.TException {
        iface.countRecordKerberos(args.fun, args.fdSum, args.spStr, args.fdNum, args.compStr, args.whereStr, args.dirName, args.hostIp, args.hostPort, args.hostName, args.hostPassword, args.user, args.krb5Path, args.keytabPath, args.principalPath,resultHandler);
      }
    }

  }

  public static class countKerberos_args implements org.apache.thrift.TBase<countKerberos_args, countKerberos_args._Fields>, java.io.Serializable, Cloneable, Comparable<countKerberos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countKerberos_args");

    private static final org.apache.thrift.protocol.TField FUN_FIELD_DESC = new org.apache.thrift.protocol.TField("fun", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FD_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fdSum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SP_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("spStr", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fdNum", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dirName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField HOST_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPort", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField HOST_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPassword", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField KRB5_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("krb5Path", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField KEYTAB_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("keytabPath", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField PRINCIPAL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("principalPath", org.apache.thrift.protocol.TType.STRING, (short)13);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countKerberos_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countKerberos_argsTupleSchemeFactory();

    public java.lang.String fun; // required
    public int fdSum; // required
    public java.lang.String spStr; // required
    public int fdNum; // required
    public java.lang.String dirName; // required
    public java.lang.String hostIp; // required
    public java.lang.String hostPort; // required
    public java.lang.String hostName; // required
    public java.lang.String hostPassword; // required
    public java.lang.String user; // required
    public java.lang.String krb5Path; // required
    public java.lang.String keytabPath; // required
    public java.lang.String principalPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FUN((short)1, "fun"),
      FD_SUM((short)2, "fdSum"),
      SP_STR((short)3, "spStr"),
      FD_NUM((short)4, "fdNum"),
      DIR_NAME((short)5, "dirName"),
      HOST_IP((short)6, "hostIp"),
      HOST_PORT((short)7, "hostPort"),
      HOST_NAME((short)8, "hostName"),
      HOST_PASSWORD((short)9, "hostPassword"),
      USER((short)10, "user"),
      KRB5_PATH((short)11, "krb5Path"),
      KEYTAB_PATH((short)12, "keytabPath"),
      PRINCIPAL_PATH((short)13, "principalPath");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FUN
            return FUN;
          case 2: // FD_SUM
            return FD_SUM;
          case 3: // SP_STR
            return SP_STR;
          case 4: // FD_NUM
            return FD_NUM;
          case 5: // DIR_NAME
            return DIR_NAME;
          case 6: // HOST_IP
            return HOST_IP;
          case 7: // HOST_PORT
            return HOST_PORT;
          case 8: // HOST_NAME
            return HOST_NAME;
          case 9: // HOST_PASSWORD
            return HOST_PASSWORD;
          case 10: // USER
            return USER;
          case 11: // KRB5_PATH
            return KRB5_PATH;
          case 12: // KEYTAB_PATH
            return KEYTAB_PATH;
          case 13: // PRINCIPAL_PATH
            return PRINCIPAL_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FDSUM_ISSET_ID = 0;
    private static final int __FDNUM_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FUN, new org.apache.thrift.meta_data.FieldMetaData("fun", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FD_SUM, new org.apache.thrift.meta_data.FieldMetaData("fdSum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SP_STR, new org.apache.thrift.meta_data.FieldMetaData("spStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FD_NUM, new org.apache.thrift.meta_data.FieldMetaData("fdNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("dirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PORT, new org.apache.thrift.meta_data.FieldMetaData("hostPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("hostPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KRB5_PATH, new org.apache.thrift.meta_data.FieldMetaData("krb5Path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEYTAB_PATH, new org.apache.thrift.meta_data.FieldMetaData("keytabPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRINCIPAL_PATH, new org.apache.thrift.meta_data.FieldMetaData("principalPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countKerberos_args.class, metaDataMap);
    }

    public countKerberos_args() {
    }

    public countKerberos_args(
      java.lang.String fun,
      int fdSum,
      java.lang.String spStr,
      int fdNum,
      java.lang.String dirName,
      java.lang.String hostIp,
      java.lang.String hostPort,
      java.lang.String hostName,
      java.lang.String hostPassword,
      java.lang.String user,
      java.lang.String krb5Path,
      java.lang.String keytabPath,
      java.lang.String principalPath)
    {
      this();
      this.fun = fun;
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      this.spStr = spStr;
      this.fdNum = fdNum;
      setFdNumIsSet(true);
      this.dirName = dirName;
      this.hostIp = hostIp;
      this.hostPort = hostPort;
      this.hostName = hostName;
      this.hostPassword = hostPassword;
      this.user = user;
      this.krb5Path = krb5Path;
      this.keytabPath = keytabPath;
      this.principalPath = principalPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countKerberos_args(countKerberos_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFun()) {
        this.fun = other.fun;
      }
      this.fdSum = other.fdSum;
      if (other.isSetSpStr()) {
        this.spStr = other.spStr;
      }
      this.fdNum = other.fdNum;
      if (other.isSetDirName()) {
        this.dirName = other.dirName;
      }
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetHostPort()) {
        this.hostPort = other.hostPort;
      }
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
      if (other.isSetHostPassword()) {
        this.hostPassword = other.hostPassword;
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetKrb5Path()) {
        this.krb5Path = other.krb5Path;
      }
      if (other.isSetKeytabPath()) {
        this.keytabPath = other.keytabPath;
      }
      if (other.isSetPrincipalPath()) {
        this.principalPath = other.principalPath;
      }
    }

    public countKerberos_args deepCopy() {
      return new countKerberos_args(this);
    }


    public void clear() {
      this.fun = null;
      setFdSumIsSet(false);
      this.fdSum = 0;
      this.spStr = null;
      setFdNumIsSet(false);
      this.fdNum = 0;
      this.dirName = null;
      this.hostIp = null;
      this.hostPort = null;
      this.hostName = null;
      this.hostPassword = null;
      this.user = null;
      this.krb5Path = null;
      this.keytabPath = null;
      this.principalPath = null;
    }

    public java.lang.String getFun() {
      return this.fun;
    }

    public countKerberos_args setFun(java.lang.String fun) {
      this.fun = fun;
      return this;
    }

    public void unsetFun() {
      this.fun = null;
    }

    /** Returns true if field fun is set (has been assigned a value) and false otherwise */
    public boolean isSetFun() {
      return this.fun != null;
    }

    public void setFunIsSet(boolean value) {
      if (!value) {
        this.fun = null;
      }
    }

    public int getFdSum() {
      return this.fdSum;
    }

    public countKerberos_args setFdSum(int fdSum) {
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      return this;
    }

    public void unsetFdSum() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    /** Returns true if field fdSum is set (has been assigned a value) and false otherwise */
    public boolean isSetFdSum() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    public void setFdSumIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FDSUM_ISSET_ID, value);
    }

    public java.lang.String getSpStr() {
      return this.spStr;
    }

    public countKerberos_args setSpStr(java.lang.String spStr) {
      this.spStr = spStr;
      return this;
    }

    public void unsetSpStr() {
      this.spStr = null;
    }

    /** Returns true if field spStr is set (has been assigned a value) and false otherwise */
    public boolean isSetSpStr() {
      return this.spStr != null;
    }

    public void setSpStrIsSet(boolean value) {
      if (!value) {
        this.spStr = null;
      }
    }

    public int getFdNum() {
      return this.fdNum;
    }

    public countKerberos_args setFdNum(int fdNum) {
      this.fdNum = fdNum;
      setFdNumIsSet(true);
      return this;
    }

    public void unsetFdNum() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FDNUM_ISSET_ID);
    }

    /** Returns true if field fdNum is set (has been assigned a value) and false otherwise */
    public boolean isSetFdNum() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FDNUM_ISSET_ID);
    }

    public void setFdNumIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FDNUM_ISSET_ID, value);
    }

    public java.lang.String getDirName() {
      return this.dirName;
    }

    public countKerberos_args setDirName(java.lang.String dirName) {
      this.dirName = dirName;
      return this;
    }

    public void unsetDirName() {
      this.dirName = null;
    }

    /** Returns true if field dirName is set (has been assigned a value) and false otherwise */
    public boolean isSetDirName() {
      return this.dirName != null;
    }

    public void setDirNameIsSet(boolean value) {
      if (!value) {
        this.dirName = null;
      }
    }

    public java.lang.String getHostIp() {
      return this.hostIp;
    }

    public countKerberos_args setHostIp(java.lang.String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public java.lang.String getHostPort() {
      return this.hostPort;
    }

    public countKerberos_args setHostPort(java.lang.String hostPort) {
      this.hostPort = hostPort;
      return this;
    }

    public void unsetHostPort() {
      this.hostPort = null;
    }

    /** Returns true if field hostPort is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPort() {
      return this.hostPort != null;
    }

    public void setHostPortIsSet(boolean value) {
      if (!value) {
        this.hostPort = null;
      }
    }

    public java.lang.String getHostName() {
      return this.hostName;
    }

    public countKerberos_args setHostName(java.lang.String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public java.lang.String getHostPassword() {
      return this.hostPassword;
    }

    public countKerberos_args setHostPassword(java.lang.String hostPassword) {
      this.hostPassword = hostPassword;
      return this;
    }

    public void unsetHostPassword() {
      this.hostPassword = null;
    }

    /** Returns true if field hostPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPassword() {
      return this.hostPassword != null;
    }

    public void setHostPasswordIsSet(boolean value) {
      if (!value) {
        this.hostPassword = null;
      }
    }

    public java.lang.String getUser() {
      return this.user;
    }

    public countKerberos_args setUser(java.lang.String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public java.lang.String getKrb5Path() {
      return this.krb5Path;
    }

    public countKerberos_args setKrb5Path(java.lang.String krb5Path) {
      this.krb5Path = krb5Path;
      return this;
    }

    public void unsetKrb5Path() {
      this.krb5Path = null;
    }

    /** Returns true if field krb5Path is set (has been assigned a value) and false otherwise */
    public boolean isSetKrb5Path() {
      return this.krb5Path != null;
    }

    public void setKrb5PathIsSet(boolean value) {
      if (!value) {
        this.krb5Path = null;
      }
    }

    public java.lang.String getKeytabPath() {
      return this.keytabPath;
    }

    public countKerberos_args setKeytabPath(java.lang.String keytabPath) {
      this.keytabPath = keytabPath;
      return this;
    }

    public void unsetKeytabPath() {
      this.keytabPath = null;
    }

    /** Returns true if field keytabPath is set (has been assigned a value) and false otherwise */
    public boolean isSetKeytabPath() {
      return this.keytabPath != null;
    }

    public void setKeytabPathIsSet(boolean value) {
      if (!value) {
        this.keytabPath = null;
      }
    }

    public java.lang.String getPrincipalPath() {
      return this.principalPath;
    }

    public countKerberos_args setPrincipalPath(java.lang.String principalPath) {
      this.principalPath = principalPath;
      return this;
    }

    public void unsetPrincipalPath() {
      this.principalPath = null;
    }

    /** Returns true if field principalPath is set (has been assigned a value) and false otherwise */
    public boolean isSetPrincipalPath() {
      return this.principalPath != null;
    }

    public void setPrincipalPathIsSet(boolean value) {
      if (!value) {
        this.principalPath = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FUN:
        if (value == null) {
          unsetFun();
        } else {
          setFun((java.lang.String)value);
        }
        break;

      case FD_SUM:
        if (value == null) {
          unsetFdSum();
        } else {
          setFdSum((java.lang.Integer)value);
        }
        break;

      case SP_STR:
        if (value == null) {
          unsetSpStr();
        } else {
          setSpStr((java.lang.String)value);
        }
        break;

      case FD_NUM:
        if (value == null) {
          unsetFdNum();
        } else {
          setFdNum((java.lang.Integer)value);
        }
        break;

      case DIR_NAME:
        if (value == null) {
          unsetDirName();
        } else {
          setDirName((java.lang.String)value);
        }
        break;

      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((java.lang.String)value);
        }
        break;

      case HOST_PORT:
        if (value == null) {
          unsetHostPort();
        } else {
          setHostPort((java.lang.String)value);
        }
        break;

      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((java.lang.String)value);
        }
        break;

      case HOST_PASSWORD:
        if (value == null) {
          unsetHostPassword();
        } else {
          setHostPassword((java.lang.String)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((java.lang.String)value);
        }
        break;

      case KRB5_PATH:
        if (value == null) {
          unsetKrb5Path();
        } else {
          setKrb5Path((java.lang.String)value);
        }
        break;

      case KEYTAB_PATH:
        if (value == null) {
          unsetKeytabPath();
        } else {
          setKeytabPath((java.lang.String)value);
        }
        break;

      case PRINCIPAL_PATH:
        if (value == null) {
          unsetPrincipalPath();
        } else {
          setPrincipalPath((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FUN:
        return getFun();

      case FD_SUM:
        return getFdSum();

      case SP_STR:
        return getSpStr();

      case FD_NUM:
        return getFdNum();

      case DIR_NAME:
        return getDirName();

      case HOST_IP:
        return getHostIp();

      case HOST_PORT:
        return getHostPort();

      case HOST_NAME:
        return getHostName();

      case HOST_PASSWORD:
        return getHostPassword();

      case USER:
        return getUser();

      case KRB5_PATH:
        return getKrb5Path();

      case KEYTAB_PATH:
        return getKeytabPath();

      case PRINCIPAL_PATH:
        return getPrincipalPath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FUN:
        return isSetFun();
      case FD_SUM:
        return isSetFdSum();
      case SP_STR:
        return isSetSpStr();
      case FD_NUM:
        return isSetFdNum();
      case DIR_NAME:
        return isSetDirName();
      case HOST_IP:
        return isSetHostIp();
      case HOST_PORT:
        return isSetHostPort();
      case HOST_NAME:
        return isSetHostName();
      case HOST_PASSWORD:
        return isSetHostPassword();
      case USER:
        return isSetUser();
      case KRB5_PATH:
        return isSetKrb5Path();
      case KEYTAB_PATH:
        return isSetKeytabPath();
      case PRINCIPAL_PATH:
        return isSetPrincipalPath();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countKerberos_args)
        return this.equals((countKerberos_args)that);
      return false;
    }

    public boolean equals(countKerberos_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fun = true && this.isSetFun();
      boolean that_present_fun = true && that.isSetFun();
      if (this_present_fun || that_present_fun) {
        if (!(this_present_fun && that_present_fun))
          return false;
        if (!this.fun.equals(that.fun))
          return false;
      }

      boolean this_present_fdSum = true;
      boolean that_present_fdSum = true;
      if (this_present_fdSum || that_present_fdSum) {
        if (!(this_present_fdSum && that_present_fdSum))
          return false;
        if (this.fdSum != that.fdSum)
          return false;
      }

      boolean this_present_spStr = true && this.isSetSpStr();
      boolean that_present_spStr = true && that.isSetSpStr();
      if (this_present_spStr || that_present_spStr) {
        if (!(this_present_spStr && that_present_spStr))
          return false;
        if (!this.spStr.equals(that.spStr))
          return false;
      }

      boolean this_present_fdNum = true;
      boolean that_present_fdNum = true;
      if (this_present_fdNum || that_present_fdNum) {
        if (!(this_present_fdNum && that_present_fdNum))
          return false;
        if (this.fdNum != that.fdNum)
          return false;
      }

      boolean this_present_dirName = true && this.isSetDirName();
      boolean that_present_dirName = true && that.isSetDirName();
      if (this_present_dirName || that_present_dirName) {
        if (!(this_present_dirName && that_present_dirName))
          return false;
        if (!this.dirName.equals(that.dirName))
          return false;
      }

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_hostPort = true && this.isSetHostPort();
      boolean that_present_hostPort = true && that.isSetHostPort();
      if (this_present_hostPort || that_present_hostPort) {
        if (!(this_present_hostPort && that_present_hostPort))
          return false;
        if (!this.hostPort.equals(that.hostPort))
          return false;
      }

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      boolean this_present_hostPassword = true && this.isSetHostPassword();
      boolean that_present_hostPassword = true && that.isSetHostPassword();
      if (this_present_hostPassword || that_present_hostPassword) {
        if (!(this_present_hostPassword && that_present_hostPassword))
          return false;
        if (!this.hostPassword.equals(that.hostPassword))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_krb5Path = true && this.isSetKrb5Path();
      boolean that_present_krb5Path = true && that.isSetKrb5Path();
      if (this_present_krb5Path || that_present_krb5Path) {
        if (!(this_present_krb5Path && that_present_krb5Path))
          return false;
        if (!this.krb5Path.equals(that.krb5Path))
          return false;
      }

      boolean this_present_keytabPath = true && this.isSetKeytabPath();
      boolean that_present_keytabPath = true && that.isSetKeytabPath();
      if (this_present_keytabPath || that_present_keytabPath) {
        if (!(this_present_keytabPath && that_present_keytabPath))
          return false;
        if (!this.keytabPath.equals(that.keytabPath))
          return false;
      }

      boolean this_present_principalPath = true && this.isSetPrincipalPath();
      boolean that_present_principalPath = true && that.isSetPrincipalPath();
      if (this_present_principalPath || that_present_principalPath) {
        if (!(this_present_principalPath && that_present_principalPath))
          return false;
        if (!this.principalPath.equals(that.principalPath))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFun()) ? 131071 : 524287);
      if (isSetFun())
        hashCode = hashCode * 8191 + fun.hashCode();

      hashCode = hashCode * 8191 + fdSum;

      hashCode = hashCode * 8191 + ((isSetSpStr()) ? 131071 : 524287);
      if (isSetSpStr())
        hashCode = hashCode * 8191 + spStr.hashCode();

      hashCode = hashCode * 8191 + fdNum;

      hashCode = hashCode * 8191 + ((isSetDirName()) ? 131071 : 524287);
      if (isSetDirName())
        hashCode = hashCode * 8191 + dirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPort()) ? 131071 : 524287);
      if (isSetHostPort())
        hashCode = hashCode * 8191 + hostPort.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
      if (isSetHostName())
        hashCode = hashCode * 8191 + hostName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPassword()) ? 131071 : 524287);
      if (isSetHostPassword())
        hashCode = hashCode * 8191 + hostPassword.hashCode();

      hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
      if (isSetUser())
        hashCode = hashCode * 8191 + user.hashCode();

      hashCode = hashCode * 8191 + ((isSetKrb5Path()) ? 131071 : 524287);
      if (isSetKrb5Path())
        hashCode = hashCode * 8191 + krb5Path.hashCode();

      hashCode = hashCode * 8191 + ((isSetKeytabPath()) ? 131071 : 524287);
      if (isSetKeytabPath())
        hashCode = hashCode * 8191 + keytabPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetPrincipalPath()) ? 131071 : 524287);
      if (isSetPrincipalPath())
        hashCode = hashCode * 8191 + principalPath.hashCode();

      return hashCode;
    }


    public int compareTo(countKerberos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFun()).compareTo(other.isSetFun());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFun()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fun, other.fun);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFdSum()).compareTo(other.isSetFdSum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdSum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdSum, other.fdSum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSpStr()).compareTo(other.isSetSpStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spStr, other.spStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFdNum()).compareTo(other.isSetFdNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdNum, other.fdNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDirName()).compareTo(other.isSetDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dirName, other.dirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHostPort()).compareTo(other.isSetHostPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPort, other.hostPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHostPassword()).compareTo(other.isSetHostPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPassword, other.hostPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKrb5Path()).compareTo(other.isSetKrb5Path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKrb5Path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.krb5Path, other.krb5Path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKeytabPath()).compareTo(other.isSetKeytabPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeytabPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keytabPath, other.keytabPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPrincipalPath()).compareTo(other.isSetPrincipalPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrincipalPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalPath, other.principalPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countKerberos_args(");
      boolean first = true;

      sb.append("fun:");
      if (this.fun == null) {
        sb.append("null");
      } else {
        sb.append(this.fun);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdSum:");
      sb.append(this.fdSum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("spStr:");
      if (this.spStr == null) {
        sb.append("null");
      } else {
        sb.append(this.spStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdNum:");
      sb.append(this.fdNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dirName:");
      if (this.dirName == null) {
        sb.append("null");
      } else {
        sb.append(this.dirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPort:");
      if (this.hostPort == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPassword:");
      if (this.hostPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPassword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("krb5Path:");
      if (this.krb5Path == null) {
        sb.append("null");
      } else {
        sb.append(this.krb5Path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keytabPath:");
      if (this.keytabPath == null) {
        sb.append("null");
      } else {
        sb.append(this.keytabPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("principalPath:");
      if (this.principalPath == null) {
        sb.append("null");
      } else {
        sb.append(this.principalPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countKerberos_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countKerberos_argsStandardScheme getScheme() {
        return new countKerberos_argsStandardScheme();
      }
    }

    private static class countKerberos_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<countKerberos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FUN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fun = iprot.readString();
                struct.setFunIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FD_SUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fdSum = iprot.readI32();
                struct.setFdSumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SP_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.spStr = iprot.readString();
                struct.setSpStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FD_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fdNum = iprot.readI32();
                struct.setFdNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dirName = iprot.readString();
                struct.setDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // HOST_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPort = iprot.readString();
                struct.setHostPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // HOST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // HOST_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPassword = iprot.readString();
                struct.setHostPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // KRB5_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.krb5Path = iprot.readString();
                struct.setKrb5PathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // KEYTAB_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keytabPath = iprot.readString();
                struct.setKeytabPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // PRINCIPAL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.principalPath = iprot.readString();
                struct.setPrincipalPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countKerberos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fun != null) {
          oprot.writeFieldBegin(FUN_FIELD_DESC);
          oprot.writeString(struct.fun);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FD_SUM_FIELD_DESC);
        oprot.writeI32(struct.fdSum);
        oprot.writeFieldEnd();
        if (struct.spStr != null) {
          oprot.writeFieldBegin(SP_STR_FIELD_DESC);
          oprot.writeString(struct.spStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FD_NUM_FIELD_DESC);
        oprot.writeI32(struct.fdNum);
        oprot.writeFieldEnd();
        if (struct.dirName != null) {
          oprot.writeFieldBegin(DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.dirName);
          oprot.writeFieldEnd();
        }
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.hostPort != null) {
          oprot.writeFieldBegin(HOST_PORT_FIELD_DESC);
          oprot.writeString(struct.hostPort);
          oprot.writeFieldEnd();
        }
        if (struct.hostName != null) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
        if (struct.hostPassword != null) {
          oprot.writeFieldBegin(HOST_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.hostPassword);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.krb5Path != null) {
          oprot.writeFieldBegin(KRB5_PATH_FIELD_DESC);
          oprot.writeString(struct.krb5Path);
          oprot.writeFieldEnd();
        }
        if (struct.keytabPath != null) {
          oprot.writeFieldBegin(KEYTAB_PATH_FIELD_DESC);
          oprot.writeString(struct.keytabPath);
          oprot.writeFieldEnd();
        }
        if (struct.principalPath != null) {
          oprot.writeFieldBegin(PRINCIPAL_PATH_FIELD_DESC);
          oprot.writeString(struct.principalPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countKerberos_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countKerberos_argsTupleScheme getScheme() {
        return new countKerberos_argsTupleScheme();
      }
    }

    private static class countKerberos_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<countKerberos_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, countKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFun()) {
          optionals.set(0);
        }
        if (struct.isSetFdSum()) {
          optionals.set(1);
        }
        if (struct.isSetSpStr()) {
          optionals.set(2);
        }
        if (struct.isSetFdNum()) {
          optionals.set(3);
        }
        if (struct.isSetDirName()) {
          optionals.set(4);
        }
        if (struct.isSetHostIp()) {
          optionals.set(5);
        }
        if (struct.isSetHostPort()) {
          optionals.set(6);
        }
        if (struct.isSetHostName()) {
          optionals.set(7);
        }
        if (struct.isSetHostPassword()) {
          optionals.set(8);
        }
        if (struct.isSetUser()) {
          optionals.set(9);
        }
        if (struct.isSetKrb5Path()) {
          optionals.set(10);
        }
        if (struct.isSetKeytabPath()) {
          optionals.set(11);
        }
        if (struct.isSetPrincipalPath()) {
          optionals.set(12);
        }
        oprot.writeBitSet(optionals, 13);
        if (struct.isSetFun()) {
          oprot.writeString(struct.fun);
        }
        if (struct.isSetFdSum()) {
          oprot.writeI32(struct.fdSum);
        }
        if (struct.isSetSpStr()) {
          oprot.writeString(struct.spStr);
        }
        if (struct.isSetFdNum()) {
          oprot.writeI32(struct.fdNum);
        }
        if (struct.isSetDirName()) {
          oprot.writeString(struct.dirName);
        }
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetHostPort()) {
          oprot.writeString(struct.hostPort);
        }
        if (struct.isSetHostName()) {
          oprot.writeString(struct.hostName);
        }
        if (struct.isSetHostPassword()) {
          oprot.writeString(struct.hostPassword);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetKrb5Path()) {
          oprot.writeString(struct.krb5Path);
        }
        if (struct.isSetKeytabPath()) {
          oprot.writeString(struct.keytabPath);
        }
        if (struct.isSetPrincipalPath()) {
          oprot.writeString(struct.principalPath);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, countKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(13);
        if (incoming.get(0)) {
          struct.fun = iprot.readString();
          struct.setFunIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdSum = iprot.readI32();
          struct.setFdSumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.spStr = iprot.readString();
          struct.setSpStrIsSet(true);
        }
        if (incoming.get(3)) {
          struct.fdNum = iprot.readI32();
          struct.setFdNumIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dirName = iprot.readString();
          struct.setDirNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(6)) {
          struct.hostPort = iprot.readString();
          struct.setHostPortIsSet(true);
        }
        if (incoming.get(7)) {
          struct.hostName = iprot.readString();
          struct.setHostNameIsSet(true);
        }
        if (incoming.get(8)) {
          struct.hostPassword = iprot.readString();
          struct.setHostPasswordIsSet(true);
        }
        if (incoming.get(9)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(10)) {
          struct.krb5Path = iprot.readString();
          struct.setKrb5PathIsSet(true);
        }
        if (incoming.get(11)) {
          struct.keytabPath = iprot.readString();
          struct.setKeytabPathIsSet(true);
        }
        if (incoming.get(12)) {
          struct.principalPath = iprot.readString();
          struct.setPrincipalPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countKerberos_result implements org.apache.thrift.TBase<countKerberos_result, countKerberos_result._Fields>, java.io.Serializable, Cloneable, Comparable<countKerberos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countKerberos_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countKerberos_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countKerberos_resultTupleSchemeFactory();

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countKerberos_result.class, metaDataMap);
    }

    public countKerberos_result() {
    }

    public countKerberos_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countKerberos_result(countKerberos_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countKerberos_result deepCopy() {
      return new countKerberos_result(this);
    }


    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public countKerberos_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countKerberos_result)
        return this.equals((countKerberos_result)that);
      return false;
    }

    public boolean equals(countKerberos_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }


    public int compareTo(countKerberos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countKerberos_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countKerberos_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countKerberos_resultStandardScheme getScheme() {
        return new countKerberos_resultStandardScheme();
      }
    }

    private static class countKerberos_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<countKerberos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countKerberos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countKerberos_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countKerberos_resultTupleScheme getScheme() {
        return new countKerberos_resultTupleScheme();
      }
    }

    private static class countKerberos_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<countKerberos_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, countKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, countKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countRecordKerberos_args implements org.apache.thrift.TBase<countRecordKerberos_args, countRecordKerberos_args._Fields>, java.io.Serializable, Cloneable, Comparable<countRecordKerberos_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countRecordKerberos_args");

    private static final org.apache.thrift.protocol.TField FUN_FIELD_DESC = new org.apache.thrift.protocol.TField("fun", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FD_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fdSum", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField SP_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("spStr", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField FD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fdNum", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField COMP_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("compStr", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField WHERE_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("whereStr", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dirName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField HOST_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPort", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField HOST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostName", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField HOST_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("hostPassword", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField KRB5_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("krb5Path", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField KEYTAB_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("keytabPath", org.apache.thrift.protocol.TType.STRING, (short)14);
    private static final org.apache.thrift.protocol.TField PRINCIPAL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("principalPath", org.apache.thrift.protocol.TType.STRING, (short)15);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countRecordKerberos_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countRecordKerberos_argsTupleSchemeFactory();

    public java.lang.String fun; // required
    public int fdSum; // required
    public java.lang.String spStr; // required
    public int fdNum; // required
    public java.lang.String compStr; // required
    public java.lang.String whereStr; // required
    public java.lang.String dirName; // required
    public java.lang.String hostIp; // required
    public java.lang.String hostPort; // required
    public java.lang.String hostName; // required
    public java.lang.String hostPassword; // required
    public java.lang.String user; // required
    public java.lang.String krb5Path; // required
    public java.lang.String keytabPath; // required
    public java.lang.String principalPath; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FUN((short)1, "fun"),
      FD_SUM((short)2, "fdSum"),
      SP_STR((short)3, "spStr"),
      FD_NUM((short)4, "fdNum"),
      COMP_STR((short)5, "compStr"),
      WHERE_STR((short)6, "whereStr"),
      DIR_NAME((short)7, "dirName"),
      HOST_IP((short)8, "hostIp"),
      HOST_PORT((short)9, "hostPort"),
      HOST_NAME((short)10, "hostName"),
      HOST_PASSWORD((short)11, "hostPassword"),
      USER((short)12, "user"),
      KRB5_PATH((short)13, "krb5Path"),
      KEYTAB_PATH((short)14, "keytabPath"),
      PRINCIPAL_PATH((short)15, "principalPath");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FUN
            return FUN;
          case 2: // FD_SUM
            return FD_SUM;
          case 3: // SP_STR
            return SP_STR;
          case 4: // FD_NUM
            return FD_NUM;
          case 5: // COMP_STR
            return COMP_STR;
          case 6: // WHERE_STR
            return WHERE_STR;
          case 7: // DIR_NAME
            return DIR_NAME;
          case 8: // HOST_IP
            return HOST_IP;
          case 9: // HOST_PORT
            return HOST_PORT;
          case 10: // HOST_NAME
            return HOST_NAME;
          case 11: // HOST_PASSWORD
            return HOST_PASSWORD;
          case 12: // USER
            return USER;
          case 13: // KRB5_PATH
            return KRB5_PATH;
          case 14: // KEYTAB_PATH
            return KEYTAB_PATH;
          case 15: // PRINCIPAL_PATH
            return PRINCIPAL_PATH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FDSUM_ISSET_ID = 0;
    private static final int __FDNUM_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FUN, new org.apache.thrift.meta_data.FieldMetaData("fun", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FD_SUM, new org.apache.thrift.meta_data.FieldMetaData("fdSum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SP_STR, new org.apache.thrift.meta_data.FieldMetaData("spStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FD_NUM, new org.apache.thrift.meta_data.FieldMetaData("fdNum", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COMP_STR, new org.apache.thrift.meta_data.FieldMetaData("compStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WHERE_STR, new org.apache.thrift.meta_data.FieldMetaData("whereStr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("dirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PORT, new org.apache.thrift.meta_data.FieldMetaData("hostPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_NAME, new org.apache.thrift.meta_data.FieldMetaData("hostName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("hostPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KRB5_PATH, new org.apache.thrift.meta_data.FieldMetaData("krb5Path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEYTAB_PATH, new org.apache.thrift.meta_data.FieldMetaData("keytabPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRINCIPAL_PATH, new org.apache.thrift.meta_data.FieldMetaData("principalPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countRecordKerberos_args.class, metaDataMap);
    }

    public countRecordKerberos_args() {
    }

    public countRecordKerberos_args(
      java.lang.String fun,
      int fdSum,
      java.lang.String spStr,
      int fdNum,
      java.lang.String compStr,
      java.lang.String whereStr,
      java.lang.String dirName,
      java.lang.String hostIp,
      java.lang.String hostPort,
      java.lang.String hostName,
      java.lang.String hostPassword,
      java.lang.String user,
      java.lang.String krb5Path,
      java.lang.String keytabPath,
      java.lang.String principalPath)
    {
      this();
      this.fun = fun;
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      this.spStr = spStr;
      this.fdNum = fdNum;
      setFdNumIsSet(true);
      this.compStr = compStr;
      this.whereStr = whereStr;
      this.dirName = dirName;
      this.hostIp = hostIp;
      this.hostPort = hostPort;
      this.hostName = hostName;
      this.hostPassword = hostPassword;
      this.user = user;
      this.krb5Path = krb5Path;
      this.keytabPath = keytabPath;
      this.principalPath = principalPath;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countRecordKerberos_args(countRecordKerberos_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFun()) {
        this.fun = other.fun;
      }
      this.fdSum = other.fdSum;
      if (other.isSetSpStr()) {
        this.spStr = other.spStr;
      }
      this.fdNum = other.fdNum;
      if (other.isSetCompStr()) {
        this.compStr = other.compStr;
      }
      if (other.isSetWhereStr()) {
        this.whereStr = other.whereStr;
      }
      if (other.isSetDirName()) {
        this.dirName = other.dirName;
      }
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetHostPort()) {
        this.hostPort = other.hostPort;
      }
      if (other.isSetHostName()) {
        this.hostName = other.hostName;
      }
      if (other.isSetHostPassword()) {
        this.hostPassword = other.hostPassword;
      }
      if (other.isSetUser()) {
        this.user = other.user;
      }
      if (other.isSetKrb5Path()) {
        this.krb5Path = other.krb5Path;
      }
      if (other.isSetKeytabPath()) {
        this.keytabPath = other.keytabPath;
      }
      if (other.isSetPrincipalPath()) {
        this.principalPath = other.principalPath;
      }
    }

    public countRecordKerberos_args deepCopy() {
      return new countRecordKerberos_args(this);
    }


    public void clear() {
      this.fun = null;
      setFdSumIsSet(false);
      this.fdSum = 0;
      this.spStr = null;
      setFdNumIsSet(false);
      this.fdNum = 0;
      this.compStr = null;
      this.whereStr = null;
      this.dirName = null;
      this.hostIp = null;
      this.hostPort = null;
      this.hostName = null;
      this.hostPassword = null;
      this.user = null;
      this.krb5Path = null;
      this.keytabPath = null;
      this.principalPath = null;
    }

    public java.lang.String getFun() {
      return this.fun;
    }

    public countRecordKerberos_args setFun(java.lang.String fun) {
      this.fun = fun;
      return this;
    }

    public void unsetFun() {
      this.fun = null;
    }

    /** Returns true if field fun is set (has been assigned a value) and false otherwise */
    public boolean isSetFun() {
      return this.fun != null;
    }

    public void setFunIsSet(boolean value) {
      if (!value) {
        this.fun = null;
      }
    }

    public int getFdSum() {
      return this.fdSum;
    }

    public countRecordKerberos_args setFdSum(int fdSum) {
      this.fdSum = fdSum;
      setFdSumIsSet(true);
      return this;
    }

    public void unsetFdSum() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    /** Returns true if field fdSum is set (has been assigned a value) and false otherwise */
    public boolean isSetFdSum() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FDSUM_ISSET_ID);
    }

    public void setFdSumIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FDSUM_ISSET_ID, value);
    }

    public java.lang.String getSpStr() {
      return this.spStr;
    }

    public countRecordKerberos_args setSpStr(java.lang.String spStr) {
      this.spStr = spStr;
      return this;
    }

    public void unsetSpStr() {
      this.spStr = null;
    }

    /** Returns true if field spStr is set (has been assigned a value) and false otherwise */
    public boolean isSetSpStr() {
      return this.spStr != null;
    }

    public void setSpStrIsSet(boolean value) {
      if (!value) {
        this.spStr = null;
      }
    }

    public int getFdNum() {
      return this.fdNum;
    }

    public countRecordKerberos_args setFdNum(int fdNum) {
      this.fdNum = fdNum;
      setFdNumIsSet(true);
      return this;
    }

    public void unsetFdNum() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FDNUM_ISSET_ID);
    }

    /** Returns true if field fdNum is set (has been assigned a value) and false otherwise */
    public boolean isSetFdNum() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FDNUM_ISSET_ID);
    }

    public void setFdNumIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FDNUM_ISSET_ID, value);
    }

    public java.lang.String getCompStr() {
      return this.compStr;
    }

    public countRecordKerberos_args setCompStr(java.lang.String compStr) {
      this.compStr = compStr;
      return this;
    }

    public void unsetCompStr() {
      this.compStr = null;
    }

    /** Returns true if field compStr is set (has been assigned a value) and false otherwise */
    public boolean isSetCompStr() {
      return this.compStr != null;
    }

    public void setCompStrIsSet(boolean value) {
      if (!value) {
        this.compStr = null;
      }
    }

    public java.lang.String getWhereStr() {
      return this.whereStr;
    }

    public countRecordKerberos_args setWhereStr(java.lang.String whereStr) {
      this.whereStr = whereStr;
      return this;
    }

    public void unsetWhereStr() {
      this.whereStr = null;
    }

    /** Returns true if field whereStr is set (has been assigned a value) and false otherwise */
    public boolean isSetWhereStr() {
      return this.whereStr != null;
    }

    public void setWhereStrIsSet(boolean value) {
      if (!value) {
        this.whereStr = null;
      }
    }

    public java.lang.String getDirName() {
      return this.dirName;
    }

    public countRecordKerberos_args setDirName(java.lang.String dirName) {
      this.dirName = dirName;
      return this;
    }

    public void unsetDirName() {
      this.dirName = null;
    }

    /** Returns true if field dirName is set (has been assigned a value) and false otherwise */
    public boolean isSetDirName() {
      return this.dirName != null;
    }

    public void setDirNameIsSet(boolean value) {
      if (!value) {
        this.dirName = null;
      }
    }

    public java.lang.String getHostIp() {
      return this.hostIp;
    }

    public countRecordKerberos_args setHostIp(java.lang.String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public java.lang.String getHostPort() {
      return this.hostPort;
    }

    public countRecordKerberos_args setHostPort(java.lang.String hostPort) {
      this.hostPort = hostPort;
      return this;
    }

    public void unsetHostPort() {
      this.hostPort = null;
    }

    /** Returns true if field hostPort is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPort() {
      return this.hostPort != null;
    }

    public void setHostPortIsSet(boolean value) {
      if (!value) {
        this.hostPort = null;
      }
    }

    public java.lang.String getHostName() {
      return this.hostName;
    }

    public countRecordKerberos_args setHostName(java.lang.String hostName) {
      this.hostName = hostName;
      return this;
    }

    public void unsetHostName() {
      this.hostName = null;
    }

    /** Returns true if field hostName is set (has been assigned a value) and false otherwise */
    public boolean isSetHostName() {
      return this.hostName != null;
    }

    public void setHostNameIsSet(boolean value) {
      if (!value) {
        this.hostName = null;
      }
    }

    public java.lang.String getHostPassword() {
      return this.hostPassword;
    }

    public countRecordKerberos_args setHostPassword(java.lang.String hostPassword) {
      this.hostPassword = hostPassword;
      return this;
    }

    public void unsetHostPassword() {
      this.hostPassword = null;
    }

    /** Returns true if field hostPassword is set (has been assigned a value) and false otherwise */
    public boolean isSetHostPassword() {
      return this.hostPassword != null;
    }

    public void setHostPasswordIsSet(boolean value) {
      if (!value) {
        this.hostPassword = null;
      }
    }

    public java.lang.String getUser() {
      return this.user;
    }

    public countRecordKerberos_args setUser(java.lang.String user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public java.lang.String getKrb5Path() {
      return this.krb5Path;
    }

    public countRecordKerberos_args setKrb5Path(java.lang.String krb5Path) {
      this.krb5Path = krb5Path;
      return this;
    }

    public void unsetKrb5Path() {
      this.krb5Path = null;
    }

    /** Returns true if field krb5Path is set (has been assigned a value) and false otherwise */
    public boolean isSetKrb5Path() {
      return this.krb5Path != null;
    }

    public void setKrb5PathIsSet(boolean value) {
      if (!value) {
        this.krb5Path = null;
      }
    }

    public java.lang.String getKeytabPath() {
      return this.keytabPath;
    }

    public countRecordKerberos_args setKeytabPath(java.lang.String keytabPath) {
      this.keytabPath = keytabPath;
      return this;
    }

    public void unsetKeytabPath() {
      this.keytabPath = null;
    }

    /** Returns true if field keytabPath is set (has been assigned a value) and false otherwise */
    public boolean isSetKeytabPath() {
      return this.keytabPath != null;
    }

    public void setKeytabPathIsSet(boolean value) {
      if (!value) {
        this.keytabPath = null;
      }
    }

    public java.lang.String getPrincipalPath() {
      return this.principalPath;
    }

    public countRecordKerberos_args setPrincipalPath(java.lang.String principalPath) {
      this.principalPath = principalPath;
      return this;
    }

    public void unsetPrincipalPath() {
      this.principalPath = null;
    }

    /** Returns true if field principalPath is set (has been assigned a value) and false otherwise */
    public boolean isSetPrincipalPath() {
      return this.principalPath != null;
    }

    public void setPrincipalPathIsSet(boolean value) {
      if (!value) {
        this.principalPath = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FUN:
        if (value == null) {
          unsetFun();
        } else {
          setFun((java.lang.String)value);
        }
        break;

      case FD_SUM:
        if (value == null) {
          unsetFdSum();
        } else {
          setFdSum((java.lang.Integer)value);
        }
        break;

      case SP_STR:
        if (value == null) {
          unsetSpStr();
        } else {
          setSpStr((java.lang.String)value);
        }
        break;

      case FD_NUM:
        if (value == null) {
          unsetFdNum();
        } else {
          setFdNum((java.lang.Integer)value);
        }
        break;

      case COMP_STR:
        if (value == null) {
          unsetCompStr();
        } else {
          setCompStr((java.lang.String)value);
        }
        break;

      case WHERE_STR:
        if (value == null) {
          unsetWhereStr();
        } else {
          setWhereStr((java.lang.String)value);
        }
        break;

      case DIR_NAME:
        if (value == null) {
          unsetDirName();
        } else {
          setDirName((java.lang.String)value);
        }
        break;

      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((java.lang.String)value);
        }
        break;

      case HOST_PORT:
        if (value == null) {
          unsetHostPort();
        } else {
          setHostPort((java.lang.String)value);
        }
        break;

      case HOST_NAME:
        if (value == null) {
          unsetHostName();
        } else {
          setHostName((java.lang.String)value);
        }
        break;

      case HOST_PASSWORD:
        if (value == null) {
          unsetHostPassword();
        } else {
          setHostPassword((java.lang.String)value);
        }
        break;

      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((java.lang.String)value);
        }
        break;

      case KRB5_PATH:
        if (value == null) {
          unsetKrb5Path();
        } else {
          setKrb5Path((java.lang.String)value);
        }
        break;

      case KEYTAB_PATH:
        if (value == null) {
          unsetKeytabPath();
        } else {
          setKeytabPath((java.lang.String)value);
        }
        break;

      case PRINCIPAL_PATH:
        if (value == null) {
          unsetPrincipalPath();
        } else {
          setPrincipalPath((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FUN:
        return getFun();

      case FD_SUM:
        return getFdSum();

      case SP_STR:
        return getSpStr();

      case FD_NUM:
        return getFdNum();

      case COMP_STR:
        return getCompStr();

      case WHERE_STR:
        return getWhereStr();

      case DIR_NAME:
        return getDirName();

      case HOST_IP:
        return getHostIp();

      case HOST_PORT:
        return getHostPort();

      case HOST_NAME:
        return getHostName();

      case HOST_PASSWORD:
        return getHostPassword();

      case USER:
        return getUser();

      case KRB5_PATH:
        return getKrb5Path();

      case KEYTAB_PATH:
        return getKeytabPath();

      case PRINCIPAL_PATH:
        return getPrincipalPath();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FUN:
        return isSetFun();
      case FD_SUM:
        return isSetFdSum();
      case SP_STR:
        return isSetSpStr();
      case FD_NUM:
        return isSetFdNum();
      case COMP_STR:
        return isSetCompStr();
      case WHERE_STR:
        return isSetWhereStr();
      case DIR_NAME:
        return isSetDirName();
      case HOST_IP:
        return isSetHostIp();
      case HOST_PORT:
        return isSetHostPort();
      case HOST_NAME:
        return isSetHostName();
      case HOST_PASSWORD:
        return isSetHostPassword();
      case USER:
        return isSetUser();
      case KRB5_PATH:
        return isSetKrb5Path();
      case KEYTAB_PATH:
        return isSetKeytabPath();
      case PRINCIPAL_PATH:
        return isSetPrincipalPath();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countRecordKerberos_args)
        return this.equals((countRecordKerberos_args)that);
      return false;
    }

    public boolean equals(countRecordKerberos_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fun = true && this.isSetFun();
      boolean that_present_fun = true && that.isSetFun();
      if (this_present_fun || that_present_fun) {
        if (!(this_present_fun && that_present_fun))
          return false;
        if (!this.fun.equals(that.fun))
          return false;
      }

      boolean this_present_fdSum = true;
      boolean that_present_fdSum = true;
      if (this_present_fdSum || that_present_fdSum) {
        if (!(this_present_fdSum && that_present_fdSum))
          return false;
        if (this.fdSum != that.fdSum)
          return false;
      }

      boolean this_present_spStr = true && this.isSetSpStr();
      boolean that_present_spStr = true && that.isSetSpStr();
      if (this_present_spStr || that_present_spStr) {
        if (!(this_present_spStr && that_present_spStr))
          return false;
        if (!this.spStr.equals(that.spStr))
          return false;
      }

      boolean this_present_fdNum = true;
      boolean that_present_fdNum = true;
      if (this_present_fdNum || that_present_fdNum) {
        if (!(this_present_fdNum && that_present_fdNum))
          return false;
        if (this.fdNum != that.fdNum)
          return false;
      }

      boolean this_present_compStr = true && this.isSetCompStr();
      boolean that_present_compStr = true && that.isSetCompStr();
      if (this_present_compStr || that_present_compStr) {
        if (!(this_present_compStr && that_present_compStr))
          return false;
        if (!this.compStr.equals(that.compStr))
          return false;
      }

      boolean this_present_whereStr = true && this.isSetWhereStr();
      boolean that_present_whereStr = true && that.isSetWhereStr();
      if (this_present_whereStr || that_present_whereStr) {
        if (!(this_present_whereStr && that_present_whereStr))
          return false;
        if (!this.whereStr.equals(that.whereStr))
          return false;
      }

      boolean this_present_dirName = true && this.isSetDirName();
      boolean that_present_dirName = true && that.isSetDirName();
      if (this_present_dirName || that_present_dirName) {
        if (!(this_present_dirName && that_present_dirName))
          return false;
        if (!this.dirName.equals(that.dirName))
          return false;
      }

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_hostPort = true && this.isSetHostPort();
      boolean that_present_hostPort = true && that.isSetHostPort();
      if (this_present_hostPort || that_present_hostPort) {
        if (!(this_present_hostPort && that_present_hostPort))
          return false;
        if (!this.hostPort.equals(that.hostPort))
          return false;
      }

      boolean this_present_hostName = true && this.isSetHostName();
      boolean that_present_hostName = true && that.isSetHostName();
      if (this_present_hostName || that_present_hostName) {
        if (!(this_present_hostName && that_present_hostName))
          return false;
        if (!this.hostName.equals(that.hostName))
          return false;
      }

      boolean this_present_hostPassword = true && this.isSetHostPassword();
      boolean that_present_hostPassword = true && that.isSetHostPassword();
      if (this_present_hostPassword || that_present_hostPassword) {
        if (!(this_present_hostPassword && that_present_hostPassword))
          return false;
        if (!this.hostPassword.equals(that.hostPassword))
          return false;
      }

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      boolean this_present_krb5Path = true && this.isSetKrb5Path();
      boolean that_present_krb5Path = true && that.isSetKrb5Path();
      if (this_present_krb5Path || that_present_krb5Path) {
        if (!(this_present_krb5Path && that_present_krb5Path))
          return false;
        if (!this.krb5Path.equals(that.krb5Path))
          return false;
      }

      boolean this_present_keytabPath = true && this.isSetKeytabPath();
      boolean that_present_keytabPath = true && that.isSetKeytabPath();
      if (this_present_keytabPath || that_present_keytabPath) {
        if (!(this_present_keytabPath && that_present_keytabPath))
          return false;
        if (!this.keytabPath.equals(that.keytabPath))
          return false;
      }

      boolean this_present_principalPath = true && this.isSetPrincipalPath();
      boolean that_present_principalPath = true && that.isSetPrincipalPath();
      if (this_present_principalPath || that_present_principalPath) {
        if (!(this_present_principalPath && that_present_principalPath))
          return false;
        if (!this.principalPath.equals(that.principalPath))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFun()) ? 131071 : 524287);
      if (isSetFun())
        hashCode = hashCode * 8191 + fun.hashCode();

      hashCode = hashCode * 8191 + fdSum;

      hashCode = hashCode * 8191 + ((isSetSpStr()) ? 131071 : 524287);
      if (isSetSpStr())
        hashCode = hashCode * 8191 + spStr.hashCode();

      hashCode = hashCode * 8191 + fdNum;

      hashCode = hashCode * 8191 + ((isSetCompStr()) ? 131071 : 524287);
      if (isSetCompStr())
        hashCode = hashCode * 8191 + compStr.hashCode();

      hashCode = hashCode * 8191 + ((isSetWhereStr()) ? 131071 : 524287);
      if (isSetWhereStr())
        hashCode = hashCode * 8191 + whereStr.hashCode();

      hashCode = hashCode * 8191 + ((isSetDirName()) ? 131071 : 524287);
      if (isSetDirName())
        hashCode = hashCode * 8191 + dirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPort()) ? 131071 : 524287);
      if (isSetHostPort())
        hashCode = hashCode * 8191 + hostPort.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostName()) ? 131071 : 524287);
      if (isSetHostName())
        hashCode = hashCode * 8191 + hostName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostPassword()) ? 131071 : 524287);
      if (isSetHostPassword())
        hashCode = hashCode * 8191 + hostPassword.hashCode();

      hashCode = hashCode * 8191 + ((isSetUser()) ? 131071 : 524287);
      if (isSetUser())
        hashCode = hashCode * 8191 + user.hashCode();

      hashCode = hashCode * 8191 + ((isSetKrb5Path()) ? 131071 : 524287);
      if (isSetKrb5Path())
        hashCode = hashCode * 8191 + krb5Path.hashCode();

      hashCode = hashCode * 8191 + ((isSetKeytabPath()) ? 131071 : 524287);
      if (isSetKeytabPath())
        hashCode = hashCode * 8191 + keytabPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetPrincipalPath()) ? 131071 : 524287);
      if (isSetPrincipalPath())
        hashCode = hashCode * 8191 + principalPath.hashCode();

      return hashCode;
    }


    public int compareTo(countRecordKerberos_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFun()).compareTo(other.isSetFun());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFun()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fun, other.fun);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFdSum()).compareTo(other.isSetFdSum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdSum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdSum, other.fdSum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSpStr()).compareTo(other.isSetSpStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.spStr, other.spStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFdNum()).compareTo(other.isSetFdNum());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFdNum()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fdNum, other.fdNum);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCompStr()).compareTo(other.isSetCompStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCompStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.compStr, other.compStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWhereStr()).compareTo(other.isSetWhereStr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhereStr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.whereStr, other.whereStr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDirName()).compareTo(other.isSetDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dirName, other.dirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHostPort()).compareTo(other.isSetHostPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPort, other.hostPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHostName()).compareTo(other.isSetHostName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostName, other.hostName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHostPassword()).compareTo(other.isSetHostPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostPassword, other.hostPassword);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKrb5Path()).compareTo(other.isSetKrb5Path());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKrb5Path()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.krb5Path, other.krb5Path);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKeytabPath()).compareTo(other.isSetKeytabPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeytabPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keytabPath, other.keytabPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPrincipalPath()).compareTo(other.isSetPrincipalPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrincipalPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.principalPath, other.principalPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countRecordKerberos_args(");
      boolean first = true;

      sb.append("fun:");
      if (this.fun == null) {
        sb.append("null");
      } else {
        sb.append(this.fun);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdSum:");
      sb.append(this.fdSum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("spStr:");
      if (this.spStr == null) {
        sb.append("null");
      } else {
        sb.append(this.spStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fdNum:");
      sb.append(this.fdNum);
      first = false;
      if (!first) sb.append(", ");
      sb.append("compStr:");
      if (this.compStr == null) {
        sb.append("null");
      } else {
        sb.append(this.compStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("whereStr:");
      if (this.whereStr == null) {
        sb.append("null");
      } else {
        sb.append(this.whereStr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dirName:");
      if (this.dirName == null) {
        sb.append("null");
      } else {
        sb.append(this.dirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPort:");
      if (this.hostPort == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostName:");
      if (this.hostName == null) {
        sb.append("null");
      } else {
        sb.append(this.hostName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostPassword:");
      if (this.hostPassword == null) {
        sb.append("null");
      } else {
        sb.append(this.hostPassword);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("krb5Path:");
      if (this.krb5Path == null) {
        sb.append("null");
      } else {
        sb.append(this.krb5Path);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keytabPath:");
      if (this.keytabPath == null) {
        sb.append("null");
      } else {
        sb.append(this.keytabPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("principalPath:");
      if (this.principalPath == null) {
        sb.append("null");
      } else {
        sb.append(this.principalPath);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countRecordKerberos_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countRecordKerberos_argsStandardScheme getScheme() {
        return new countRecordKerberos_argsStandardScheme();
      }
    }

    private static class countRecordKerberos_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<countRecordKerberos_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countRecordKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FUN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fun = iprot.readString();
                struct.setFunIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FD_SUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fdSum = iprot.readI32();
                struct.setFdSumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SP_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.spStr = iprot.readString();
                struct.setSpStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FD_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fdNum = iprot.readI32();
                struct.setFdNumIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // COMP_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.compStr = iprot.readString();
                struct.setCompStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // WHERE_STR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.whereStr = iprot.readString();
                struct.setWhereStrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dirName = iprot.readString();
                struct.setDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // HOST_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPort = iprot.readString();
                struct.setHostPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // HOST_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostName = iprot.readString();
                struct.setHostNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // HOST_PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostPassword = iprot.readString();
                struct.setHostPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.user = iprot.readString();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // KRB5_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.krb5Path = iprot.readString();
                struct.setKrb5PathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // KEYTAB_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keytabPath = iprot.readString();
                struct.setKeytabPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 15: // PRINCIPAL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.principalPath = iprot.readString();
                struct.setPrincipalPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countRecordKerberos_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fun != null) {
          oprot.writeFieldBegin(FUN_FIELD_DESC);
          oprot.writeString(struct.fun);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FD_SUM_FIELD_DESC);
        oprot.writeI32(struct.fdSum);
        oprot.writeFieldEnd();
        if (struct.spStr != null) {
          oprot.writeFieldBegin(SP_STR_FIELD_DESC);
          oprot.writeString(struct.spStr);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FD_NUM_FIELD_DESC);
        oprot.writeI32(struct.fdNum);
        oprot.writeFieldEnd();
        if (struct.compStr != null) {
          oprot.writeFieldBegin(COMP_STR_FIELD_DESC);
          oprot.writeString(struct.compStr);
          oprot.writeFieldEnd();
        }
        if (struct.whereStr != null) {
          oprot.writeFieldBegin(WHERE_STR_FIELD_DESC);
          oprot.writeString(struct.whereStr);
          oprot.writeFieldEnd();
        }
        if (struct.dirName != null) {
          oprot.writeFieldBegin(DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.dirName);
          oprot.writeFieldEnd();
        }
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.hostPort != null) {
          oprot.writeFieldBegin(HOST_PORT_FIELD_DESC);
          oprot.writeString(struct.hostPort);
          oprot.writeFieldEnd();
        }
        if (struct.hostName != null) {
          oprot.writeFieldBegin(HOST_NAME_FIELD_DESC);
          oprot.writeString(struct.hostName);
          oprot.writeFieldEnd();
        }
        if (struct.hostPassword != null) {
          oprot.writeFieldBegin(HOST_PASSWORD_FIELD_DESC);
          oprot.writeString(struct.hostPassword);
          oprot.writeFieldEnd();
        }
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          oprot.writeString(struct.user);
          oprot.writeFieldEnd();
        }
        if (struct.krb5Path != null) {
          oprot.writeFieldBegin(KRB5_PATH_FIELD_DESC);
          oprot.writeString(struct.krb5Path);
          oprot.writeFieldEnd();
        }
        if (struct.keytabPath != null) {
          oprot.writeFieldBegin(KEYTAB_PATH_FIELD_DESC);
          oprot.writeString(struct.keytabPath);
          oprot.writeFieldEnd();
        }
        if (struct.principalPath != null) {
          oprot.writeFieldBegin(PRINCIPAL_PATH_FIELD_DESC);
          oprot.writeString(struct.principalPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countRecordKerberos_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countRecordKerberos_argsTupleScheme getScheme() {
        return new countRecordKerberos_argsTupleScheme();
      }
    }

    private static class countRecordKerberos_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<countRecordKerberos_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, countRecordKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFun()) {
          optionals.set(0);
        }
        if (struct.isSetFdSum()) {
          optionals.set(1);
        }
        if (struct.isSetSpStr()) {
          optionals.set(2);
        }
        if (struct.isSetFdNum()) {
          optionals.set(3);
        }
        if (struct.isSetCompStr()) {
          optionals.set(4);
        }
        if (struct.isSetWhereStr()) {
          optionals.set(5);
        }
        if (struct.isSetDirName()) {
          optionals.set(6);
        }
        if (struct.isSetHostIp()) {
          optionals.set(7);
        }
        if (struct.isSetHostPort()) {
          optionals.set(8);
        }
        if (struct.isSetHostName()) {
          optionals.set(9);
        }
        if (struct.isSetHostPassword()) {
          optionals.set(10);
        }
        if (struct.isSetUser()) {
          optionals.set(11);
        }
        if (struct.isSetKrb5Path()) {
          optionals.set(12);
        }
        if (struct.isSetKeytabPath()) {
          optionals.set(13);
        }
        if (struct.isSetPrincipalPath()) {
          optionals.set(14);
        }
        oprot.writeBitSet(optionals, 15);
        if (struct.isSetFun()) {
          oprot.writeString(struct.fun);
        }
        if (struct.isSetFdSum()) {
          oprot.writeI32(struct.fdSum);
        }
        if (struct.isSetSpStr()) {
          oprot.writeString(struct.spStr);
        }
        if (struct.isSetFdNum()) {
          oprot.writeI32(struct.fdNum);
        }
        if (struct.isSetCompStr()) {
          oprot.writeString(struct.compStr);
        }
        if (struct.isSetWhereStr()) {
          oprot.writeString(struct.whereStr);
        }
        if (struct.isSetDirName()) {
          oprot.writeString(struct.dirName);
        }
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetHostPort()) {
          oprot.writeString(struct.hostPort);
        }
        if (struct.isSetHostName()) {
          oprot.writeString(struct.hostName);
        }
        if (struct.isSetHostPassword()) {
          oprot.writeString(struct.hostPassword);
        }
        if (struct.isSetUser()) {
          oprot.writeString(struct.user);
        }
        if (struct.isSetKrb5Path()) {
          oprot.writeString(struct.krb5Path);
        }
        if (struct.isSetKeytabPath()) {
          oprot.writeString(struct.keytabPath);
        }
        if (struct.isSetPrincipalPath()) {
          oprot.writeString(struct.principalPath);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, countRecordKerberos_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(15);
        if (incoming.get(0)) {
          struct.fun = iprot.readString();
          struct.setFunIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fdSum = iprot.readI32();
          struct.setFdSumIsSet(true);
        }
        if (incoming.get(2)) {
          struct.spStr = iprot.readString();
          struct.setSpStrIsSet(true);
        }
        if (incoming.get(3)) {
          struct.fdNum = iprot.readI32();
          struct.setFdNumIsSet(true);
        }
        if (incoming.get(4)) {
          struct.compStr = iprot.readString();
          struct.setCompStrIsSet(true);
        }
        if (incoming.get(5)) {
          struct.whereStr = iprot.readString();
          struct.setWhereStrIsSet(true);
        }
        if (incoming.get(6)) {
          struct.dirName = iprot.readString();
          struct.setDirNameIsSet(true);
        }
        if (incoming.get(7)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(8)) {
          struct.hostPort = iprot.readString();
          struct.setHostPortIsSet(true);
        }
        if (incoming.get(9)) {
          struct.hostName = iprot.readString();
          struct.setHostNameIsSet(true);
        }
        if (incoming.get(10)) {
          struct.hostPassword = iprot.readString();
          struct.setHostPasswordIsSet(true);
        }
        if (incoming.get(11)) {
          struct.user = iprot.readString();
          struct.setUserIsSet(true);
        }
        if (incoming.get(12)) {
          struct.krb5Path = iprot.readString();
          struct.setKrb5PathIsSet(true);
        }
        if (incoming.get(13)) {
          struct.keytabPath = iprot.readString();
          struct.setKeytabPathIsSet(true);
        }
        if (incoming.get(14)) {
          struct.principalPath = iprot.readString();
          struct.setPrincipalPathIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countRecordKerberos_result implements org.apache.thrift.TBase<countRecordKerberos_result, countRecordKerberos_result._Fields>, java.io.Serializable, Cloneable, Comparable<countRecordKerberos_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countRecordKerberos_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.DOUBLE, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countRecordKerberos_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countRecordKerberos_resultTupleSchemeFactory();

    public double success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countRecordKerberos_result.class, metaDataMap);
    }

    public countRecordKerberos_result() {
    }

    public countRecordKerberos_result(
      double success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countRecordKerberos_result(countRecordKerberos_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public countRecordKerberos_result deepCopy() {
      return new countRecordKerberos_result(this);
    }


    public void clear() {
      setSuccessIsSet(false);
      this.success = 0.0;
    }

    public double getSuccess() {
      return this.success;
    }

    public countRecordKerberos_result setSuccess(double success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Double)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countRecordKerberos_result)
        return this.equals((countRecordKerberos_result)that);
      return false;
    }

    public boolean equals(countRecordKerberos_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }


    public int compareTo(countRecordKerberos_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countRecordKerberos_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countRecordKerberos_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countRecordKerberos_resultStandardScheme getScheme() {
        return new countRecordKerberos_resultStandardScheme();
      }
    }

    private static class countRecordKerberos_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<countRecordKerberos_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countRecordKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.success = iprot.readDouble();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countRecordKerberos_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeDouble(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countRecordKerberos_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countRecordKerberos_resultTupleScheme getScheme() {
        return new countRecordKerberos_resultTupleScheme();
      }
    }

    private static class countRecordKerberos_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<countRecordKerberos_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, countRecordKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeDouble(struct.success);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, countRecordKerberos_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readDouble();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
