/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dksou.fitting.datasource.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-06-21")
public class DKDBInput {

  public interface Iface {

    /**
     * @param connect       JDBC连接字符串
     * @param username      数据库用户名
     * @param password      数据库密码
     * @param table         关系数据库表名，数据从该表中获取
     * @param targetDir     指定hdfs路径,数据导入至该路径下
     * @param numMappers    启动的map来并行导入数据，默认是4个，最好不要将数字设置为高于集群的节点数
     * @param splitBy       表的列名，用来切分工作单元，一般后面跟主键ID，和numMappers参数结合使用，详见文档
     * @param where         从关系数据库导入数据时的查询条件，示例：–where “id = 2”
     * @param fileSeparator 指定各字段的分隔符，默认为英文逗号
     * @param extra         额外的合法参数，参考sqoop官网（格式：--xxx --xxx）
     * @param dkdbConf      dkdb服务的配置项，详见文档
     * @return
     * 
     * @param connect
     * @param username
     * @param password
     * @param table
     * @param targetDir
     * @param numMappers
     * @param splitBy
     * @param where
     * @param fileSeparator
     * @param extra
     * @param dkdbConf
     */
    public ResultEntity dbFullToHdfs(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String targetDir, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException;

    /**
     * @param connect       JDBC连接字符串
     * @param username      数据库用户名
     * @param password      数据库密码
     * @param table         关系数据库表名，数据从该表中获取
     * @param targetDir     指定hdfs路径,数据导入至该路径下
     * @param writeMode     写入模式：1表示Append模式增量导入，需设置一个自增主键来作为检查字段 2表示LastModified的append增量导入 备注：详细说明见文档
     * @param checkColumn   增量导入模式下指定要检查的列
     * @param lastValue     指定前一个导入中的检查列的最大值
     * @param numMappers    启动的map来并行导入数据，默认是4个，最好不要将数字设置为高于集群的节点数
     * @param splitBy       表的列名，用来切分工作单元，一般后面跟主键ID，和numMappers参数结合使用，详见文档
     * @param where         从关系数据库导入数据时的查询条件，示例：–where “id = 2”
     * @param fileSeparator 指定各字段的分隔符，默认为英文逗号
     * @param extra         额外的合法参数，参考sqoop官网（格式：--xxx --xxx）
     * @param dkdbConf      dkdb服务的配置项，详见文档
     * @return
     * 
     * @param connect
     * @param username
     * @param password
     * @param table
     * @param targetDir
     * @param writeMode
     * @param checkColumn
     * @param lastValue
     * @param numMappers
     * @param splitBy
     * @param where
     * @param fileSeparator
     * @param extra
     * @param dkdbConf
     */
    public ResultEntity dbIncrToHdfs(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String targetDir, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException;

    /**
     * @param connect       JDBC连接字符串
     * @param username      数据库用户名
     * @param password      数据库密码
     * @param table         关系数据库表名，数据从该表中获取
     * @param hTable        指定导入到Hive中的表名
     * @param numMappers    启动的map来并行导入数据，默认是4个，最好不要将数字设置为高于集群的节点数
     * @param splitBy       表的列名，用来切分工作单元，一般后面跟主键ID，和numMappers参数结合使用，详见文档
     * @param where         从关系数据库导入数据时的查询条件，示例：–where “id = 2”
     * @param fileSeparator 指定各字段的分隔符，默认为英文逗号
     * @param extra         额外的合法参数，参考sqoop官网（格式：--xxx --xxx）
     * @param dkdbConf      dkdb服务的配置项，详见文档
     * @return
     * 
     * @param connect
     * @param username
     * @param password
     * @param table
     * @param hTable
     * @param numMappers
     * @param splitBy
     * @param where
     * @param fileSeparator
     * @param extra
     * @param dkdbConf
     */
    public ResultEntity dbFullToHive(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException;

    /**
     * @param connect       JDBC连接字符串
     * @param username      数据库用户名
     * @param password      数据库密码
     * @param table         关系数据库表名，数据从该表中获取
     * @param hTable        指定导入到Hive中的表名
     * @param writeMode     写入模式：1表示Append模式增量导入，需设置一个自增主键来作为检查字段 2表示LastModified增量导入 备注：详细说明见文档
     * @param checkColumn   增量导入模式下指定要检查的列
     * @param lastValue     指定前一个导入中的检查列的最大值
     * @param numMappers    启动的map来并行导入数据，默认是4个，最好不要将数字设置为高于集群的节点数
     * @param splitBy       表的列名，用来切分工作单元，一般后面跟主键ID，和numMappers参数结合使用，详见文档
     * @param where         从关系数据库导入数据时的查询条件，示例：–where “id = 2”
     * @param fileSeparator 指定各字段的分隔符，默认为英文逗号
     * @param extra         额外的合法参数，参考sqoop官网（格式：--xxx --xxx）
     * @param dkdbConf      dkdb服务的配置项，详见文档
     * @return
     * 
     * @param connect
     * @param username
     * @param password
     * @param table
     * @param hTable
     * @param writeMode
     * @param checkColumn
     * @param lastValue
     * @param numMappers
     * @param splitBy
     * @param where
     * @param fileSeparator
     * @param extra
     * @param dkdbConf
     */
    public ResultEntity dbIncrToHive(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException;

    /**
     * @param connect    JDBC连接字符串
     * @param username   数据库用户名
     * @param password   数据库密码
     * @param table      关系数据库表名，数据从该表中获取
     * @param hTable     指定导入到Hbase中的表名
     * @param col        指定数据表的哪一列作为rowkey，建议主键
     * @param family     Hbase数据表列族名
     * @param numMappers 启动的map来并行导入数据，默认是4个，最好不要将数字设置为高于集群的节点数
     * @param splitBy    表的列名，用来切分工作单元，一般后面跟主键ID，和numMappers参数结合使用，详见文档
     * @param where      从关系数据库导入数据时的查询条件，示例：–where “id = 2”
     * @param extra      额外的合法参数，参考sqoop官网（格式：--xxx --xxx）
     * @param dkdbConf   dkdb服务的配置项，详见文档
     * @return
     * 
     * @param connect
     * @param username
     * @param password
     * @param table
     * @param hTable
     * @param col
     * @param family
     * @param numMappers
     * @param splitBy
     * @param where
     * @param extra
     * @param dkdbConf
     */
    public ResultEntity dbFullToHbase(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String col, java.lang.String family, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException;

    /**
     * @param connect     JDBC连接字符串
     * @param username    数据库用户名
     * @param password    数据库密码
     * @param table       关系数据库表名，数据从该表中获取
     * @param hTable      指定导入到Hbase中的表名
     * @param col         指定数据表的哪一列作为rowkey，建议主键
     * @param family      Hbase数据表列族名
     * @param writeMode   写入模式：1表示Append模式增量导入，需设置一个自增主键来作为检查字段 2表示LastModified的append增量导入 备注：详细说明见文档
     * @param checkColumn 增量导入模式下指定要检查的列
     * @param lastValue   指定前一个导入中的检查列的最大值
     * @param numMappers  启动的map来并行导入数据，默认是4个，最好不要将数字设置为高于集群的节点数
     * @param splitBy     表的列名，用来切分工作单元，一般后面跟主键ID，和numMappers参数结合使用，详见文档
     * @param where       从关系数据库导入数据时的查询条件，示例：–where “id = 2”
     * @param extra       额外的合法参数，参考sqoop官网（格式：--xxx --xxx）
     * @param dkdbConf    dkdb服务的配置项，详见文档
     * @return
     * 
     * @param connect
     * @param username
     * @param password
     * @param table
     * @param hTable
     * @param col
     * @param family
     * @param writeMode
     * @param checkColumn
     * @param lastValue
     * @param numMappers
     * @param splitBy
     * @param where
     * @param extra
     * @param dkdbConf
     */
    public ResultEntity dbIncrToHbase(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String col, java.lang.String family, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void dbFullToHdfs(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String targetDir, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException;

    public void dbIncrToHdfs(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String targetDir, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException;

    public void dbFullToHive(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException;

    public void dbIncrToHive(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException;

    public void dbFullToHbase(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String col, java.lang.String family, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException;

    public void dbIncrToHbase(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String col, java.lang.String family, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ResultEntity dbFullToHdfs(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String targetDir, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException
    {
      send_dbFullToHdfs(connect, username, password, table, targetDir, numMappers, splitBy, where, fileSeparator, extra, dkdbConf);
      return recv_dbFullToHdfs();
    }

    public void send_dbFullToHdfs(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String targetDir, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException
    {
      dbFullToHdfs_args args = new dbFullToHdfs_args();
      args.setConnect(connect);
      args.setUsername(username);
      args.setPassword(password);
      args.setTable(table);
      args.setTargetDir(targetDir);
      args.setNumMappers(numMappers);
      args.setSplitBy(splitBy);
      args.setWhere(where);
      args.setFileSeparator(fileSeparator);
      args.setExtra(extra);
      args.setDkdbConf(dkdbConf);
      sendBase("dbFullToHdfs", args);
    }

    public ResultEntity recv_dbFullToHdfs() throws org.apache.thrift.TException
    {
      dbFullToHdfs_result result = new dbFullToHdfs_result();
      receiveBase(result, "dbFullToHdfs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dbFullToHdfs failed: unknown result");
    }

    public ResultEntity dbIncrToHdfs(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String targetDir, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException
    {
      send_dbIncrToHdfs(connect, username, password, table, targetDir, writeMode, checkColumn, lastValue, numMappers, splitBy, where, fileSeparator, extra, dkdbConf);
      return recv_dbIncrToHdfs();
    }

    public void send_dbIncrToHdfs(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String targetDir, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException
    {
      dbIncrToHdfs_args args = new dbIncrToHdfs_args();
      args.setConnect(connect);
      args.setUsername(username);
      args.setPassword(password);
      args.setTable(table);
      args.setTargetDir(targetDir);
      args.setWriteMode(writeMode);
      args.setCheckColumn(checkColumn);
      args.setLastValue(lastValue);
      args.setNumMappers(numMappers);
      args.setSplitBy(splitBy);
      args.setWhere(where);
      args.setFileSeparator(fileSeparator);
      args.setExtra(extra);
      args.setDkdbConf(dkdbConf);
      sendBase("dbIncrToHdfs", args);
    }

    public ResultEntity recv_dbIncrToHdfs() throws org.apache.thrift.TException
    {
      dbIncrToHdfs_result result = new dbIncrToHdfs_result();
      receiveBase(result, "dbIncrToHdfs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dbIncrToHdfs failed: unknown result");
    }

    public ResultEntity dbFullToHive(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException
    {
      send_dbFullToHive(connect, username, password, table, hTable, numMappers, splitBy, where, fileSeparator, extra, dkdbConf);
      return recv_dbFullToHive();
    }

    public void send_dbFullToHive(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException
    {
      dbFullToHive_args args = new dbFullToHive_args();
      args.setConnect(connect);
      args.setUsername(username);
      args.setPassword(password);
      args.setTable(table);
      args.setHTable(hTable);
      args.setNumMappers(numMappers);
      args.setSplitBy(splitBy);
      args.setWhere(where);
      args.setFileSeparator(fileSeparator);
      args.setExtra(extra);
      args.setDkdbConf(dkdbConf);
      sendBase("dbFullToHive", args);
    }

    public ResultEntity recv_dbFullToHive() throws org.apache.thrift.TException
    {
      dbFullToHive_result result = new dbFullToHive_result();
      receiveBase(result, "dbFullToHive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dbFullToHive failed: unknown result");
    }

    public ResultEntity dbIncrToHive(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException
    {
      send_dbIncrToHive(connect, username, password, table, hTable, writeMode, checkColumn, lastValue, numMappers, splitBy, where, fileSeparator, extra, dkdbConf);
      return recv_dbIncrToHive();
    }

    public void send_dbIncrToHive(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException
    {
      dbIncrToHive_args args = new dbIncrToHive_args();
      args.setConnect(connect);
      args.setUsername(username);
      args.setPassword(password);
      args.setTable(table);
      args.setHTable(hTable);
      args.setWriteMode(writeMode);
      args.setCheckColumn(checkColumn);
      args.setLastValue(lastValue);
      args.setNumMappers(numMappers);
      args.setSplitBy(splitBy);
      args.setWhere(where);
      args.setFileSeparator(fileSeparator);
      args.setExtra(extra);
      args.setDkdbConf(dkdbConf);
      sendBase("dbIncrToHive", args);
    }

    public ResultEntity recv_dbIncrToHive() throws org.apache.thrift.TException
    {
      dbIncrToHive_result result = new dbIncrToHive_result();
      receiveBase(result, "dbIncrToHive");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dbIncrToHive failed: unknown result");
    }

    public ResultEntity dbFullToHbase(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String col, java.lang.String family, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException
    {
      send_dbFullToHbase(connect, username, password, table, hTable, col, family, numMappers, splitBy, where, extra, dkdbConf);
      return recv_dbFullToHbase();
    }

    public void send_dbFullToHbase(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String col, java.lang.String family, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException
    {
      dbFullToHbase_args args = new dbFullToHbase_args();
      args.setConnect(connect);
      args.setUsername(username);
      args.setPassword(password);
      args.setTable(table);
      args.setHTable(hTable);
      args.setCol(col);
      args.setFamily(family);
      args.setNumMappers(numMappers);
      args.setSplitBy(splitBy);
      args.setWhere(where);
      args.setExtra(extra);
      args.setDkdbConf(dkdbConf);
      sendBase("dbFullToHbase", args);
    }

    public ResultEntity recv_dbFullToHbase() throws org.apache.thrift.TException
    {
      dbFullToHbase_result result = new dbFullToHbase_result();
      receiveBase(result, "dbFullToHbase");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dbFullToHbase failed: unknown result");
    }

    public ResultEntity dbIncrToHbase(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String col, java.lang.String family, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException
    {
      send_dbIncrToHbase(connect, username, password, table, hTable, col, family, writeMode, checkColumn, lastValue, numMappers, splitBy, where, extra, dkdbConf);
      return recv_dbIncrToHbase();
    }

    public void send_dbIncrToHbase(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String col, java.lang.String family, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String extra, DKDBConf dkdbConf) throws org.apache.thrift.TException
    {
      dbIncrToHbase_args args = new dbIncrToHbase_args();
      args.setConnect(connect);
      args.setUsername(username);
      args.setPassword(password);
      args.setTable(table);
      args.setHTable(hTable);
      args.setCol(col);
      args.setFamily(family);
      args.setWriteMode(writeMode);
      args.setCheckColumn(checkColumn);
      args.setLastValue(lastValue);
      args.setNumMappers(numMappers);
      args.setSplitBy(splitBy);
      args.setWhere(where);
      args.setExtra(extra);
      args.setDkdbConf(dkdbConf);
      sendBase("dbIncrToHbase", args);
    }

    public ResultEntity recv_dbIncrToHbase() throws org.apache.thrift.TException
    {
      dbIncrToHbase_result result = new dbIncrToHbase_result();
      receiveBase(result, "dbIncrToHbase");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "dbIncrToHbase failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void dbFullToHdfs(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String targetDir, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dbFullToHdfs_call method_call = new dbFullToHdfs_call(connect, username, password, table, targetDir, numMappers, splitBy, where, fileSeparator, extra, dkdbConf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dbFullToHdfs_call extends org.apache.thrift.async.TAsyncMethodCall<ResultEntity> {
      private java.lang.String connect;
      private java.lang.String username;
      private java.lang.String password;
      private java.lang.String table;
      private java.lang.String targetDir;
      private java.lang.String numMappers;
      private java.lang.String splitBy;
      private java.lang.String where;
      private java.lang.String fileSeparator;
      private java.lang.String extra;
      private DKDBConf dkdbConf;
      public dbFullToHdfs_call(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String targetDir, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connect = connect;
        this.username = username;
        this.password = password;
        this.table = table;
        this.targetDir = targetDir;
        this.numMappers = numMappers;
        this.splitBy = splitBy;
        this.where = where;
        this.fileSeparator = fileSeparator;
        this.extra = extra;
        this.dkdbConf = dkdbConf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dbFullToHdfs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dbFullToHdfs_args args = new dbFullToHdfs_args();
        args.setConnect(connect);
        args.setUsername(username);
        args.setPassword(password);
        args.setTable(table);
        args.setTargetDir(targetDir);
        args.setNumMappers(numMappers);
        args.setSplitBy(splitBy);
        args.setWhere(where);
        args.setFileSeparator(fileSeparator);
        args.setExtra(extra);
        args.setDkdbConf(dkdbConf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultEntity getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dbFullToHdfs();
      }
    }

    public void dbIncrToHdfs(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String targetDir, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dbIncrToHdfs_call method_call = new dbIncrToHdfs_call(connect, username, password, table, targetDir, writeMode, checkColumn, lastValue, numMappers, splitBy, where, fileSeparator, extra, dkdbConf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dbIncrToHdfs_call extends org.apache.thrift.async.TAsyncMethodCall<ResultEntity> {
      private java.lang.String connect;
      private java.lang.String username;
      private java.lang.String password;
      private java.lang.String table;
      private java.lang.String targetDir;
      private int writeMode;
      private java.lang.String checkColumn;
      private java.lang.String lastValue;
      private java.lang.String numMappers;
      private java.lang.String splitBy;
      private java.lang.String where;
      private java.lang.String fileSeparator;
      private java.lang.String extra;
      private DKDBConf dkdbConf;
      public dbIncrToHdfs_call(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String targetDir, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connect = connect;
        this.username = username;
        this.password = password;
        this.table = table;
        this.targetDir = targetDir;
        this.writeMode = writeMode;
        this.checkColumn = checkColumn;
        this.lastValue = lastValue;
        this.numMappers = numMappers;
        this.splitBy = splitBy;
        this.where = where;
        this.fileSeparator = fileSeparator;
        this.extra = extra;
        this.dkdbConf = dkdbConf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dbIncrToHdfs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dbIncrToHdfs_args args = new dbIncrToHdfs_args();
        args.setConnect(connect);
        args.setUsername(username);
        args.setPassword(password);
        args.setTable(table);
        args.setTargetDir(targetDir);
        args.setWriteMode(writeMode);
        args.setCheckColumn(checkColumn);
        args.setLastValue(lastValue);
        args.setNumMappers(numMappers);
        args.setSplitBy(splitBy);
        args.setWhere(where);
        args.setFileSeparator(fileSeparator);
        args.setExtra(extra);
        args.setDkdbConf(dkdbConf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultEntity getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dbIncrToHdfs();
      }
    }

    public void dbFullToHive(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dbFullToHive_call method_call = new dbFullToHive_call(connect, username, password, table, hTable, numMappers, splitBy, where, fileSeparator, extra, dkdbConf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dbFullToHive_call extends org.apache.thrift.async.TAsyncMethodCall<ResultEntity> {
      private java.lang.String connect;
      private java.lang.String username;
      private java.lang.String password;
      private java.lang.String table;
      private java.lang.String hTable;
      private java.lang.String numMappers;
      private java.lang.String splitBy;
      private java.lang.String where;
      private java.lang.String fileSeparator;
      private java.lang.String extra;
      private DKDBConf dkdbConf;
      public dbFullToHive_call(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connect = connect;
        this.username = username;
        this.password = password;
        this.table = table;
        this.hTable = hTable;
        this.numMappers = numMappers;
        this.splitBy = splitBy;
        this.where = where;
        this.fileSeparator = fileSeparator;
        this.extra = extra;
        this.dkdbConf = dkdbConf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dbFullToHive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dbFullToHive_args args = new dbFullToHive_args();
        args.setConnect(connect);
        args.setUsername(username);
        args.setPassword(password);
        args.setTable(table);
        args.setHTable(hTable);
        args.setNumMappers(numMappers);
        args.setSplitBy(splitBy);
        args.setWhere(where);
        args.setFileSeparator(fileSeparator);
        args.setExtra(extra);
        args.setDkdbConf(dkdbConf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultEntity getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dbFullToHive();
      }
    }

    public void dbIncrToHive(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dbIncrToHive_call method_call = new dbIncrToHive_call(connect, username, password, table, hTable, writeMode, checkColumn, lastValue, numMappers, splitBy, where, fileSeparator, extra, dkdbConf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dbIncrToHive_call extends org.apache.thrift.async.TAsyncMethodCall<ResultEntity> {
      private java.lang.String connect;
      private java.lang.String username;
      private java.lang.String password;
      private java.lang.String table;
      private java.lang.String hTable;
      private int writeMode;
      private java.lang.String checkColumn;
      private java.lang.String lastValue;
      private java.lang.String numMappers;
      private java.lang.String splitBy;
      private java.lang.String where;
      private java.lang.String fileSeparator;
      private java.lang.String extra;
      private DKDBConf dkdbConf;
      public dbIncrToHive_call(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String fileSeparator, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connect = connect;
        this.username = username;
        this.password = password;
        this.table = table;
        this.hTable = hTable;
        this.writeMode = writeMode;
        this.checkColumn = checkColumn;
        this.lastValue = lastValue;
        this.numMappers = numMappers;
        this.splitBy = splitBy;
        this.where = where;
        this.fileSeparator = fileSeparator;
        this.extra = extra;
        this.dkdbConf = dkdbConf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dbIncrToHive", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dbIncrToHive_args args = new dbIncrToHive_args();
        args.setConnect(connect);
        args.setUsername(username);
        args.setPassword(password);
        args.setTable(table);
        args.setHTable(hTable);
        args.setWriteMode(writeMode);
        args.setCheckColumn(checkColumn);
        args.setLastValue(lastValue);
        args.setNumMappers(numMappers);
        args.setSplitBy(splitBy);
        args.setWhere(where);
        args.setFileSeparator(fileSeparator);
        args.setExtra(extra);
        args.setDkdbConf(dkdbConf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultEntity getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dbIncrToHive();
      }
    }

    public void dbFullToHbase(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String col, java.lang.String family, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dbFullToHbase_call method_call = new dbFullToHbase_call(connect, username, password, table, hTable, col, family, numMappers, splitBy, where, extra, dkdbConf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dbFullToHbase_call extends org.apache.thrift.async.TAsyncMethodCall<ResultEntity> {
      private java.lang.String connect;
      private java.lang.String username;
      private java.lang.String password;
      private java.lang.String table;
      private java.lang.String hTable;
      private java.lang.String col;
      private java.lang.String family;
      private java.lang.String numMappers;
      private java.lang.String splitBy;
      private java.lang.String where;
      private java.lang.String extra;
      private DKDBConf dkdbConf;
      public dbFullToHbase_call(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String col, java.lang.String family, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connect = connect;
        this.username = username;
        this.password = password;
        this.table = table;
        this.hTable = hTable;
        this.col = col;
        this.family = family;
        this.numMappers = numMappers;
        this.splitBy = splitBy;
        this.where = where;
        this.extra = extra;
        this.dkdbConf = dkdbConf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dbFullToHbase", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dbFullToHbase_args args = new dbFullToHbase_args();
        args.setConnect(connect);
        args.setUsername(username);
        args.setPassword(password);
        args.setTable(table);
        args.setHTable(hTable);
        args.setCol(col);
        args.setFamily(family);
        args.setNumMappers(numMappers);
        args.setSplitBy(splitBy);
        args.setWhere(where);
        args.setExtra(extra);
        args.setDkdbConf(dkdbConf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultEntity getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dbFullToHbase();
      }
    }

    public void dbIncrToHbase(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String col, java.lang.String family, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dbIncrToHbase_call method_call = new dbIncrToHbase_call(connect, username, password, table, hTable, col, family, writeMode, checkColumn, lastValue, numMappers, splitBy, where, extra, dkdbConf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dbIncrToHbase_call extends org.apache.thrift.async.TAsyncMethodCall<ResultEntity> {
      private java.lang.String connect;
      private java.lang.String username;
      private java.lang.String password;
      private java.lang.String table;
      private java.lang.String hTable;
      private java.lang.String col;
      private java.lang.String family;
      private int writeMode;
      private java.lang.String checkColumn;
      private java.lang.String lastValue;
      private java.lang.String numMappers;
      private java.lang.String splitBy;
      private java.lang.String where;
      private java.lang.String extra;
      private DKDBConf dkdbConf;
      public dbIncrToHbase_call(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String hTable, java.lang.String col, java.lang.String family, int writeMode, java.lang.String checkColumn, java.lang.String lastValue, java.lang.String numMappers, java.lang.String splitBy, java.lang.String where, java.lang.String extra, DKDBConf dkdbConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connect = connect;
        this.username = username;
        this.password = password;
        this.table = table;
        this.hTable = hTable;
        this.col = col;
        this.family = family;
        this.writeMode = writeMode;
        this.checkColumn = checkColumn;
        this.lastValue = lastValue;
        this.numMappers = numMappers;
        this.splitBy = splitBy;
        this.where = where;
        this.extra = extra;
        this.dkdbConf = dkdbConf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dbIncrToHbase", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dbIncrToHbase_args args = new dbIncrToHbase_args();
        args.setConnect(connect);
        args.setUsername(username);
        args.setPassword(password);
        args.setTable(table);
        args.setHTable(hTable);
        args.setCol(col);
        args.setFamily(family);
        args.setWriteMode(writeMode);
        args.setCheckColumn(checkColumn);
        args.setLastValue(lastValue);
        args.setNumMappers(numMappers);
        args.setSplitBy(splitBy);
        args.setWhere(where);
        args.setExtra(extra);
        args.setDkdbConf(dkdbConf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultEntity getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_dbIncrToHbase();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("dbFullToHdfs", new dbFullToHdfs());
      processMap.put("dbIncrToHdfs", new dbIncrToHdfs());
      processMap.put("dbFullToHive", new dbFullToHive());
      processMap.put("dbIncrToHive", new dbIncrToHive());
      processMap.put("dbFullToHbase", new dbFullToHbase());
      processMap.put("dbIncrToHbase", new dbIncrToHbase());
      return processMap;
    }

    public static class dbFullToHdfs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dbFullToHdfs_args> {
      public dbFullToHdfs() {
        super("dbFullToHdfs");
      }

      public dbFullToHdfs_args getEmptyArgsInstance() {
        return new dbFullToHdfs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public dbFullToHdfs_result getResult(I iface, dbFullToHdfs_args args) throws org.apache.thrift.TException {
        dbFullToHdfs_result result = new dbFullToHdfs_result();
        result.success = iface.dbFullToHdfs(args.connect, args.username, args.password, args.table, args.targetDir, args.numMappers, args.splitBy, args.where, args.fileSeparator, args.extra, args.dkdbConf);
        return result;
      }
    }

    public static class dbIncrToHdfs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dbIncrToHdfs_args> {
      public dbIncrToHdfs() {
        super("dbIncrToHdfs");
      }

      public dbIncrToHdfs_args getEmptyArgsInstance() {
        return new dbIncrToHdfs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public dbIncrToHdfs_result getResult(I iface, dbIncrToHdfs_args args) throws org.apache.thrift.TException {
        dbIncrToHdfs_result result = new dbIncrToHdfs_result();
        result.success = iface.dbIncrToHdfs(args.connect, args.username, args.password, args.table, args.targetDir, args.writeMode, args.checkColumn, args.lastValue, args.numMappers, args.splitBy, args.where, args.fileSeparator, args.extra, args.dkdbConf);
        return result;
      }
    }

    public static class dbFullToHive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dbFullToHive_args> {
      public dbFullToHive() {
        super("dbFullToHive");
      }

      public dbFullToHive_args getEmptyArgsInstance() {
        return new dbFullToHive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public dbFullToHive_result getResult(I iface, dbFullToHive_args args) throws org.apache.thrift.TException {
        dbFullToHive_result result = new dbFullToHive_result();
        result.success = iface.dbFullToHive(args.connect, args.username, args.password, args.table, args.hTable, args.numMappers, args.splitBy, args.where, args.fileSeparator, args.extra, args.dkdbConf);
        return result;
      }
    }

    public static class dbIncrToHive<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dbIncrToHive_args> {
      public dbIncrToHive() {
        super("dbIncrToHive");
      }

      public dbIncrToHive_args getEmptyArgsInstance() {
        return new dbIncrToHive_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public dbIncrToHive_result getResult(I iface, dbIncrToHive_args args) throws org.apache.thrift.TException {
        dbIncrToHive_result result = new dbIncrToHive_result();
        result.success = iface.dbIncrToHive(args.connect, args.username, args.password, args.table, args.hTable, args.writeMode, args.checkColumn, args.lastValue, args.numMappers, args.splitBy, args.where, args.fileSeparator, args.extra, args.dkdbConf);
        return result;
      }
    }

    public static class dbFullToHbase<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dbFullToHbase_args> {
      public dbFullToHbase() {
        super("dbFullToHbase");
      }

      public dbFullToHbase_args getEmptyArgsInstance() {
        return new dbFullToHbase_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public dbFullToHbase_result getResult(I iface, dbFullToHbase_args args) throws org.apache.thrift.TException {
        dbFullToHbase_result result = new dbFullToHbase_result();
        result.success = iface.dbFullToHbase(args.connect, args.username, args.password, args.table, args.hTable, args.col, args.family, args.numMappers, args.splitBy, args.where, args.extra, args.dkdbConf);
        return result;
      }
    }

    public static class dbIncrToHbase<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dbIncrToHbase_args> {
      public dbIncrToHbase() {
        super("dbIncrToHbase");
      }

      public dbIncrToHbase_args getEmptyArgsInstance() {
        return new dbIncrToHbase_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public dbIncrToHbase_result getResult(I iface, dbIncrToHbase_args args) throws org.apache.thrift.TException {
        dbIncrToHbase_result result = new dbIncrToHbase_result();
        result.success = iface.dbIncrToHbase(args.connect, args.username, args.password, args.table, args.hTable, args.col, args.family, args.writeMode, args.checkColumn, args.lastValue, args.numMappers, args.splitBy, args.where, args.extra, args.dkdbConf);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("dbFullToHdfs", new dbFullToHdfs());
      processMap.put("dbIncrToHdfs", new dbIncrToHdfs());
      processMap.put("dbFullToHive", new dbFullToHive());
      processMap.put("dbIncrToHive", new dbIncrToHive());
      processMap.put("dbFullToHbase", new dbFullToHbase());
      processMap.put("dbIncrToHbase", new dbIncrToHbase());
      return processMap;
    }

    public static class dbFullToHdfs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dbFullToHdfs_args, ResultEntity> {
      public dbFullToHdfs() {
        super("dbFullToHdfs");
      }

      public dbFullToHdfs_args getEmptyArgsInstance() {
        return new dbFullToHdfs_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ResultEntity> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ResultEntity>() { 
          public void onComplete(ResultEntity o) {
            dbFullToHdfs_result result = new dbFullToHdfs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            dbFullToHdfs_result result = new dbFullToHdfs_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dbFullToHdfs_args args, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
        iface.dbFullToHdfs(args.connect, args.username, args.password, args.table, args.targetDir, args.numMappers, args.splitBy, args.where, args.fileSeparator, args.extra, args.dkdbConf,resultHandler);
      }
    }

    public static class dbIncrToHdfs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dbIncrToHdfs_args, ResultEntity> {
      public dbIncrToHdfs() {
        super("dbIncrToHdfs");
      }

      public dbIncrToHdfs_args getEmptyArgsInstance() {
        return new dbIncrToHdfs_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ResultEntity> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ResultEntity>() { 
          public void onComplete(ResultEntity o) {
            dbIncrToHdfs_result result = new dbIncrToHdfs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            dbIncrToHdfs_result result = new dbIncrToHdfs_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dbIncrToHdfs_args args, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
        iface.dbIncrToHdfs(args.connect, args.username, args.password, args.table, args.targetDir, args.writeMode, args.checkColumn, args.lastValue, args.numMappers, args.splitBy, args.where, args.fileSeparator, args.extra, args.dkdbConf,resultHandler);
      }
    }

    public static class dbFullToHive<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dbFullToHive_args, ResultEntity> {
      public dbFullToHive() {
        super("dbFullToHive");
      }

      public dbFullToHive_args getEmptyArgsInstance() {
        return new dbFullToHive_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ResultEntity> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ResultEntity>() { 
          public void onComplete(ResultEntity o) {
            dbFullToHive_result result = new dbFullToHive_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            dbFullToHive_result result = new dbFullToHive_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dbFullToHive_args args, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
        iface.dbFullToHive(args.connect, args.username, args.password, args.table, args.hTable, args.numMappers, args.splitBy, args.where, args.fileSeparator, args.extra, args.dkdbConf,resultHandler);
      }
    }

    public static class dbIncrToHive<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dbIncrToHive_args, ResultEntity> {
      public dbIncrToHive() {
        super("dbIncrToHive");
      }

      public dbIncrToHive_args getEmptyArgsInstance() {
        return new dbIncrToHive_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ResultEntity> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ResultEntity>() { 
          public void onComplete(ResultEntity o) {
            dbIncrToHive_result result = new dbIncrToHive_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            dbIncrToHive_result result = new dbIncrToHive_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dbIncrToHive_args args, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
        iface.dbIncrToHive(args.connect, args.username, args.password, args.table, args.hTable, args.writeMode, args.checkColumn, args.lastValue, args.numMappers, args.splitBy, args.where, args.fileSeparator, args.extra, args.dkdbConf,resultHandler);
      }
    }

    public static class dbFullToHbase<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dbFullToHbase_args, ResultEntity> {
      public dbFullToHbase() {
        super("dbFullToHbase");
      }

      public dbFullToHbase_args getEmptyArgsInstance() {
        return new dbFullToHbase_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ResultEntity> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ResultEntity>() { 
          public void onComplete(ResultEntity o) {
            dbFullToHbase_result result = new dbFullToHbase_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            dbFullToHbase_result result = new dbFullToHbase_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dbFullToHbase_args args, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
        iface.dbFullToHbase(args.connect, args.username, args.password, args.table, args.hTable, args.col, args.family, args.numMappers, args.splitBy, args.where, args.extra, args.dkdbConf,resultHandler);
      }
    }

    public static class dbIncrToHbase<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dbIncrToHbase_args, ResultEntity> {
      public dbIncrToHbase() {
        super("dbIncrToHbase");
      }

      public dbIncrToHbase_args getEmptyArgsInstance() {
        return new dbIncrToHbase_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ResultEntity> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ResultEntity>() { 
          public void onComplete(ResultEntity o) {
            dbIncrToHbase_result result = new dbIncrToHbase_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            dbIncrToHbase_result result = new dbIncrToHbase_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dbIncrToHbase_args args, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
        iface.dbIncrToHbase(args.connect, args.username, args.password, args.table, args.hTable, args.col, args.family, args.writeMode, args.checkColumn, args.lastValue, args.numMappers, args.splitBy, args.where, args.extra, args.dkdbConf,resultHandler);
      }
    }

  }

  public static class dbFullToHdfs_args implements org.apache.thrift.TBase<dbFullToHdfs_args, dbFullToHdfs_args._Fields>, java.io.Serializable, Cloneable, Comparable<dbFullToHdfs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbFullToHdfs_args");

    private static final org.apache.thrift.protocol.TField CONNECT_FIELD_DESC = new org.apache.thrift.protocol.TField("connect", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TARGET_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("targetDir", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField NUM_MAPPERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numMappers", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField SPLIT_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("splitBy", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField WHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("where", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField FILE_SEPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSeparator", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField DKDB_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkdbConf", org.apache.thrift.protocol.TType.STRUCT, (short)11);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dbFullToHdfs_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dbFullToHdfs_argsTupleSchemeFactory();

    public java.lang.String connect; // required
    public java.lang.String username; // required
    public java.lang.String password; // required
    public java.lang.String table; // required
    public java.lang.String targetDir; // required
    public java.lang.String numMappers; // required
    public java.lang.String splitBy; // required
    public java.lang.String where; // required
    public java.lang.String fileSeparator; // required
    public java.lang.String extra; // required
    public DKDBConf dkdbConf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECT((short)1, "connect"),
      USERNAME((short)2, "username"),
      PASSWORD((short)3, "password"),
      TABLE((short)4, "table"),
      TARGET_DIR((short)5, "targetDir"),
      NUM_MAPPERS((short)6, "numMappers"),
      SPLIT_BY((short)7, "splitBy"),
      WHERE((short)8, "where"),
      FILE_SEPARATOR((short)9, "fileSeparator"),
      EXTRA((short)10, "extra"),
      DKDB_CONF((short)11, "dkdbConf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECT
            return CONNECT;
          case 2: // USERNAME
            return USERNAME;
          case 3: // PASSWORD
            return PASSWORD;
          case 4: // TABLE
            return TABLE;
          case 5: // TARGET_DIR
            return TARGET_DIR;
          case 6: // NUM_MAPPERS
            return NUM_MAPPERS;
          case 7: // SPLIT_BY
            return SPLIT_BY;
          case 8: // WHERE
            return WHERE;
          case 9: // FILE_SEPARATOR
            return FILE_SEPARATOR;
          case 10: // EXTRA
            return EXTRA;
          case 11: // DKDB_CONF
            return DKDB_CONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECT, new org.apache.thrift.meta_data.FieldMetaData("connect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TARGET_DIR, new org.apache.thrift.meta_data.FieldMetaData("targetDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM_MAPPERS, new org.apache.thrift.meta_data.FieldMetaData("numMappers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPLIT_BY, new org.apache.thrift.meta_data.FieldMetaData("splitBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WHERE, new org.apache.thrift.meta_data.FieldMetaData("where", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_SEPARATOR, new org.apache.thrift.meta_data.FieldMetaData("fileSeparator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("extra", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKDB_CONF, new org.apache.thrift.meta_data.FieldMetaData("dkdbConf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKDBConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbFullToHdfs_args.class, metaDataMap);
    }

    public dbFullToHdfs_args() {
    }

    public dbFullToHdfs_args(
      java.lang.String connect,
      java.lang.String username,
      java.lang.String password,
      java.lang.String table,
      java.lang.String targetDir,
      java.lang.String numMappers,
      java.lang.String splitBy,
      java.lang.String where,
      java.lang.String fileSeparator,
      java.lang.String extra,
      DKDBConf dkdbConf)
    {
      this();
      this.connect = connect;
      this.username = username;
      this.password = password;
      this.table = table;
      this.targetDir = targetDir;
      this.numMappers = numMappers;
      this.splitBy = splitBy;
      this.where = where;
      this.fileSeparator = fileSeparator;
      this.extra = extra;
      this.dkdbConf = dkdbConf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbFullToHdfs_args(dbFullToHdfs_args other) {
      if (other.isSetConnect()) {
        this.connect = other.connect;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetTargetDir()) {
        this.targetDir = other.targetDir;
      }
      if (other.isSetNumMappers()) {
        this.numMappers = other.numMappers;
      }
      if (other.isSetSplitBy()) {
        this.splitBy = other.splitBy;
      }
      if (other.isSetWhere()) {
        this.where = other.where;
      }
      if (other.isSetFileSeparator()) {
        this.fileSeparator = other.fileSeparator;
      }
      if (other.isSetExtra()) {
        this.extra = other.extra;
      }
      if (other.isSetDkdbConf()) {
        this.dkdbConf = new DKDBConf(other.dkdbConf);
      }
    }

    public dbFullToHdfs_args deepCopy() {
      return new dbFullToHdfs_args(this);
    }

    @Override
    public void clear() {
      this.connect = null;
      this.username = null;
      this.password = null;
      this.table = null;
      this.targetDir = null;
      this.numMappers = null;
      this.splitBy = null;
      this.where = null;
      this.fileSeparator = null;
      this.extra = null;
      this.dkdbConf = null;
    }

    public java.lang.String getConnect() {
      return this.connect;
    }

    public dbFullToHdfs_args setConnect(java.lang.String connect) {
      this.connect = connect;
      return this;
    }

    public void unsetConnect() {
      this.connect = null;
    }

    /** Returns true if field connect is set (has been assigned a value) and false otherwise */
    public boolean isSetConnect() {
      return this.connect != null;
    }

    public void setConnectIsSet(boolean value) {
      if (!value) {
        this.connect = null;
      }
    }

    public java.lang.String getUsername() {
      return this.username;
    }

    public dbFullToHdfs_args setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public dbFullToHdfs_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public java.lang.String getTable() {
      return this.table;
    }

    public dbFullToHdfs_args setTable(java.lang.String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public java.lang.String getTargetDir() {
      return this.targetDir;
    }

    public dbFullToHdfs_args setTargetDir(java.lang.String targetDir) {
      this.targetDir = targetDir;
      return this;
    }

    public void unsetTargetDir() {
      this.targetDir = null;
    }

    /** Returns true if field targetDir is set (has been assigned a value) and false otherwise */
    public boolean isSetTargetDir() {
      return this.targetDir != null;
    }

    public void setTargetDirIsSet(boolean value) {
      if (!value) {
        this.targetDir = null;
      }
    }

    public java.lang.String getNumMappers() {
      return this.numMappers;
    }

    public dbFullToHdfs_args setNumMappers(java.lang.String numMappers) {
      this.numMappers = numMappers;
      return this;
    }

    public void unsetNumMappers() {
      this.numMappers = null;
    }

    /** Returns true if field numMappers is set (has been assigned a value) and false otherwise */
    public boolean isSetNumMappers() {
      return this.numMappers != null;
    }

    public void setNumMappersIsSet(boolean value) {
      if (!value) {
        this.numMappers = null;
      }
    }

    public java.lang.String getSplitBy() {
      return this.splitBy;
    }

    public dbFullToHdfs_args setSplitBy(java.lang.String splitBy) {
      this.splitBy = splitBy;
      return this;
    }

    public void unsetSplitBy() {
      this.splitBy = null;
    }

    /** Returns true if field splitBy is set (has been assigned a value) and false otherwise */
    public boolean isSetSplitBy() {
      return this.splitBy != null;
    }

    public void setSplitByIsSet(boolean value) {
      if (!value) {
        this.splitBy = null;
      }
    }

    public java.lang.String getWhere() {
      return this.where;
    }

    public dbFullToHdfs_args setWhere(java.lang.String where) {
      this.where = where;
      return this;
    }

    public void unsetWhere() {
      this.where = null;
    }

    /** Returns true if field where is set (has been assigned a value) and false otherwise */
    public boolean isSetWhere() {
      return this.where != null;
    }

    public void setWhereIsSet(boolean value) {
      if (!value) {
        this.where = null;
      }
    }

    public java.lang.String getFileSeparator() {
      return this.fileSeparator;
    }

    public dbFullToHdfs_args setFileSeparator(java.lang.String fileSeparator) {
      this.fileSeparator = fileSeparator;
      return this;
    }

    public void unsetFileSeparator() {
      this.fileSeparator = null;
    }

    /** Returns true if field fileSeparator is set (has been assigned a value) and false otherwise */
    public boolean isSetFileSeparator() {
      return this.fileSeparator != null;
    }

    public void setFileSeparatorIsSet(boolean value) {
      if (!value) {
        this.fileSeparator = null;
      }
    }

    public java.lang.String getExtra() {
      return this.extra;
    }

    public dbFullToHdfs_args setExtra(java.lang.String extra) {
      this.extra = extra;
      return this;
    }

    public void unsetExtra() {
      this.extra = null;
    }

    /** Returns true if field extra is set (has been assigned a value) and false otherwise */
    public boolean isSetExtra() {
      return this.extra != null;
    }

    public void setExtraIsSet(boolean value) {
      if (!value) {
        this.extra = null;
      }
    }

    public DKDBConf getDkdbConf() {
      return this.dkdbConf;
    }

    public dbFullToHdfs_args setDkdbConf(DKDBConf dkdbConf) {
      this.dkdbConf = dkdbConf;
      return this;
    }

    public void unsetDkdbConf() {
      this.dkdbConf = null;
    }

    /** Returns true if field dkdbConf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkdbConf() {
      return this.dkdbConf != null;
    }

    public void setDkdbConfIsSet(boolean value) {
      if (!value) {
        this.dkdbConf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CONNECT:
        if (value == null) {
          unsetConnect();
        } else {
          setConnect((java.lang.String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((java.lang.String)value);
        }
        break;

      case TARGET_DIR:
        if (value == null) {
          unsetTargetDir();
        } else {
          setTargetDir((java.lang.String)value);
        }
        break;

      case NUM_MAPPERS:
        if (value == null) {
          unsetNumMappers();
        } else {
          setNumMappers((java.lang.String)value);
        }
        break;

      case SPLIT_BY:
        if (value == null) {
          unsetSplitBy();
        } else {
          setSplitBy((java.lang.String)value);
        }
        break;

      case WHERE:
        if (value == null) {
          unsetWhere();
        } else {
          setWhere((java.lang.String)value);
        }
        break;

      case FILE_SEPARATOR:
        if (value == null) {
          unsetFileSeparator();
        } else {
          setFileSeparator((java.lang.String)value);
        }
        break;

      case EXTRA:
        if (value == null) {
          unsetExtra();
        } else {
          setExtra((java.lang.String)value);
        }
        break;

      case DKDB_CONF:
        if (value == null) {
          unsetDkdbConf();
        } else {
          setDkdbConf((DKDBConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECT:
        return getConnect();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case TABLE:
        return getTable();

      case TARGET_DIR:
        return getTargetDir();

      case NUM_MAPPERS:
        return getNumMappers();

      case SPLIT_BY:
        return getSplitBy();

      case WHERE:
        return getWhere();

      case FILE_SEPARATOR:
        return getFileSeparator();

      case EXTRA:
        return getExtra();

      case DKDB_CONF:
        return getDkdbConf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CONNECT:
        return isSetConnect();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case TABLE:
        return isSetTable();
      case TARGET_DIR:
        return isSetTargetDir();
      case NUM_MAPPERS:
        return isSetNumMappers();
      case SPLIT_BY:
        return isSetSplitBy();
      case WHERE:
        return isSetWhere();
      case FILE_SEPARATOR:
        return isSetFileSeparator();
      case EXTRA:
        return isSetExtra();
      case DKDB_CONF:
        return isSetDkdbConf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dbFullToHdfs_args)
        return this.equals((dbFullToHdfs_args)that);
      return false;
    }

    public boolean equals(dbFullToHdfs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_connect = true && this.isSetConnect();
      boolean that_present_connect = true && that.isSetConnect();
      if (this_present_connect || that_present_connect) {
        if (!(this_present_connect && that_present_connect))
          return false;
        if (!this.connect.equals(that.connect))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_targetDir = true && this.isSetTargetDir();
      boolean that_present_targetDir = true && that.isSetTargetDir();
      if (this_present_targetDir || that_present_targetDir) {
        if (!(this_present_targetDir && that_present_targetDir))
          return false;
        if (!this.targetDir.equals(that.targetDir))
          return false;
      }

      boolean this_present_numMappers = true && this.isSetNumMappers();
      boolean that_present_numMappers = true && that.isSetNumMappers();
      if (this_present_numMappers || that_present_numMappers) {
        if (!(this_present_numMappers && that_present_numMappers))
          return false;
        if (!this.numMappers.equals(that.numMappers))
          return false;
      }

      boolean this_present_splitBy = true && this.isSetSplitBy();
      boolean that_present_splitBy = true && that.isSetSplitBy();
      if (this_present_splitBy || that_present_splitBy) {
        if (!(this_present_splitBy && that_present_splitBy))
          return false;
        if (!this.splitBy.equals(that.splitBy))
          return false;
      }

      boolean this_present_where = true && this.isSetWhere();
      boolean that_present_where = true && that.isSetWhere();
      if (this_present_where || that_present_where) {
        if (!(this_present_where && that_present_where))
          return false;
        if (!this.where.equals(that.where))
          return false;
      }

      boolean this_present_fileSeparator = true && this.isSetFileSeparator();
      boolean that_present_fileSeparator = true && that.isSetFileSeparator();
      if (this_present_fileSeparator || that_present_fileSeparator) {
        if (!(this_present_fileSeparator && that_present_fileSeparator))
          return false;
        if (!this.fileSeparator.equals(that.fileSeparator))
          return false;
      }

      boolean this_present_extra = true && this.isSetExtra();
      boolean that_present_extra = true && that.isSetExtra();
      if (this_present_extra || that_present_extra) {
        if (!(this_present_extra && that_present_extra))
          return false;
        if (!this.extra.equals(that.extra))
          return false;
      }

      boolean this_present_dkdbConf = true && this.isSetDkdbConf();
      boolean that_present_dkdbConf = true && that.isSetDkdbConf();
      if (this_present_dkdbConf || that_present_dkdbConf) {
        if (!(this_present_dkdbConf && that_present_dkdbConf))
          return false;
        if (!this.dkdbConf.equals(that.dkdbConf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetConnect()) ? 131071 : 524287);
      if (isSetConnect())
        hashCode = hashCode * 8191 + connect.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetTargetDir()) ? 131071 : 524287);
      if (isSetTargetDir())
        hashCode = hashCode * 8191 + targetDir.hashCode();

      hashCode = hashCode * 8191 + ((isSetNumMappers()) ? 131071 : 524287);
      if (isSetNumMappers())
        hashCode = hashCode * 8191 + numMappers.hashCode();

      hashCode = hashCode * 8191 + ((isSetSplitBy()) ? 131071 : 524287);
      if (isSetSplitBy())
        hashCode = hashCode * 8191 + splitBy.hashCode();

      hashCode = hashCode * 8191 + ((isSetWhere()) ? 131071 : 524287);
      if (isSetWhere())
        hashCode = hashCode * 8191 + where.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileSeparator()) ? 131071 : 524287);
      if (isSetFileSeparator())
        hashCode = hashCode * 8191 + fileSeparator.hashCode();

      hashCode = hashCode * 8191 + ((isSetExtra()) ? 131071 : 524287);
      if (isSetExtra())
        hashCode = hashCode * 8191 + extra.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkdbConf()) ? 131071 : 524287);
      if (isSetDkdbConf())
        hashCode = hashCode * 8191 + dkdbConf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dbFullToHdfs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetConnect()).compareTo(other.isSetConnect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connect, other.connect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTargetDir()).compareTo(other.isSetTargetDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTargetDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetDir, other.targetDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumMappers()).compareTo(other.isSetNumMappers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumMappers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numMappers, other.numMappers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSplitBy()).compareTo(other.isSetSplitBy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSplitBy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitBy, other.splitBy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWhere()).compareTo(other.isSetWhere());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhere()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.where, other.where);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileSeparator()).compareTo(other.isSetFileSeparator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileSeparator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSeparator, other.fileSeparator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExtra()).compareTo(other.isSetExtra());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtra()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra, other.extra);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkdbConf()).compareTo(other.isSetDkdbConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkdbConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkdbConf, other.dkdbConf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dbFullToHdfs_args(");
      boolean first = true;

      sb.append("connect:");
      if (this.connect == null) {
        sb.append("null");
      } else {
        sb.append(this.connect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("targetDir:");
      if (this.targetDir == null) {
        sb.append("null");
      } else {
        sb.append(this.targetDir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numMappers:");
      if (this.numMappers == null) {
        sb.append("null");
      } else {
        sb.append(this.numMappers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("splitBy:");
      if (this.splitBy == null) {
        sb.append("null");
      } else {
        sb.append(this.splitBy);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("where:");
      if (this.where == null) {
        sb.append("null");
      } else {
        sb.append(this.where);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileSeparator:");
      if (this.fileSeparator == null) {
        sb.append("null");
      } else {
        sb.append(this.fileSeparator);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("extra:");
      if (this.extra == null) {
        sb.append("null");
      } else {
        sb.append(this.extra);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkdbConf:");
      if (this.dkdbConf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkdbConf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkdbConf != null) {
        dkdbConf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbFullToHdfs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbFullToHdfs_argsStandardScheme getScheme() {
        return new dbFullToHdfs_argsStandardScheme();
      }
    }

    private static class dbFullToHdfs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<dbFullToHdfs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbFullToHdfs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.connect = iprot.readString();
                struct.setConnectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TARGET_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.targetDir = iprot.readString();
                struct.setTargetDirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // NUM_MAPPERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.numMappers = iprot.readString();
                struct.setNumMappersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SPLIT_BY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.splitBy = iprot.readString();
                struct.setSplitByIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // WHERE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.where = iprot.readString();
                struct.setWhereIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // FILE_SEPARATOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileSeparator = iprot.readString();
                struct.setFileSeparatorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // EXTRA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.extra = iprot.readString();
                struct.setExtraIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // DKDB_CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkdbConf = new DKDBConf();
                struct.dkdbConf.read(iprot);
                struct.setDkdbConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbFullToHdfs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connect != null) {
          oprot.writeFieldBegin(CONNECT_FIELD_DESC);
          oprot.writeString(struct.connect);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.targetDir != null) {
          oprot.writeFieldBegin(TARGET_DIR_FIELD_DESC);
          oprot.writeString(struct.targetDir);
          oprot.writeFieldEnd();
        }
        if (struct.numMappers != null) {
          oprot.writeFieldBegin(NUM_MAPPERS_FIELD_DESC);
          oprot.writeString(struct.numMappers);
          oprot.writeFieldEnd();
        }
        if (struct.splitBy != null) {
          oprot.writeFieldBegin(SPLIT_BY_FIELD_DESC);
          oprot.writeString(struct.splitBy);
          oprot.writeFieldEnd();
        }
        if (struct.where != null) {
          oprot.writeFieldBegin(WHERE_FIELD_DESC);
          oprot.writeString(struct.where);
          oprot.writeFieldEnd();
        }
        if (struct.fileSeparator != null) {
          oprot.writeFieldBegin(FILE_SEPARATOR_FIELD_DESC);
          oprot.writeString(struct.fileSeparator);
          oprot.writeFieldEnd();
        }
        if (struct.extra != null) {
          oprot.writeFieldBegin(EXTRA_FIELD_DESC);
          oprot.writeString(struct.extra);
          oprot.writeFieldEnd();
        }
        if (struct.dkdbConf != null) {
          oprot.writeFieldBegin(DKDB_CONF_FIELD_DESC);
          struct.dkdbConf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbFullToHdfs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbFullToHdfs_argsTupleScheme getScheme() {
        return new dbFullToHdfs_argsTupleScheme();
      }
    }

    private static class dbFullToHdfs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<dbFullToHdfs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbFullToHdfs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetConnect()) {
          optionals.set(0);
        }
        if (struct.isSetUsername()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        if (struct.isSetTable()) {
          optionals.set(3);
        }
        if (struct.isSetTargetDir()) {
          optionals.set(4);
        }
        if (struct.isSetNumMappers()) {
          optionals.set(5);
        }
        if (struct.isSetSplitBy()) {
          optionals.set(6);
        }
        if (struct.isSetWhere()) {
          optionals.set(7);
        }
        if (struct.isSetFileSeparator()) {
          optionals.set(8);
        }
        if (struct.isSetExtra()) {
          optionals.set(9);
        }
        if (struct.isSetDkdbConf()) {
          optionals.set(10);
        }
        oprot.writeBitSet(optionals, 11);
        if (struct.isSetConnect()) {
          oprot.writeString(struct.connect);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetTargetDir()) {
          oprot.writeString(struct.targetDir);
        }
        if (struct.isSetNumMappers()) {
          oprot.writeString(struct.numMappers);
        }
        if (struct.isSetSplitBy()) {
          oprot.writeString(struct.splitBy);
        }
        if (struct.isSetWhere()) {
          oprot.writeString(struct.where);
        }
        if (struct.isSetFileSeparator()) {
          oprot.writeString(struct.fileSeparator);
        }
        if (struct.isSetExtra()) {
          oprot.writeString(struct.extra);
        }
        if (struct.isSetDkdbConf()) {
          struct.dkdbConf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbFullToHdfs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(11);
        if (incoming.get(0)) {
          struct.connect = iprot.readString();
          struct.setConnectIsSet(true);
        }
        if (incoming.get(1)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(3)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(4)) {
          struct.targetDir = iprot.readString();
          struct.setTargetDirIsSet(true);
        }
        if (incoming.get(5)) {
          struct.numMappers = iprot.readString();
          struct.setNumMappersIsSet(true);
        }
        if (incoming.get(6)) {
          struct.splitBy = iprot.readString();
          struct.setSplitByIsSet(true);
        }
        if (incoming.get(7)) {
          struct.where = iprot.readString();
          struct.setWhereIsSet(true);
        }
        if (incoming.get(8)) {
          struct.fileSeparator = iprot.readString();
          struct.setFileSeparatorIsSet(true);
        }
        if (incoming.get(9)) {
          struct.extra = iprot.readString();
          struct.setExtraIsSet(true);
        }
        if (incoming.get(10)) {
          struct.dkdbConf = new DKDBConf();
          struct.dkdbConf.read(iprot);
          struct.setDkdbConfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dbFullToHdfs_result implements org.apache.thrift.TBase<dbFullToHdfs_result, dbFullToHdfs_result._Fields>, java.io.Serializable, Cloneable, Comparable<dbFullToHdfs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbFullToHdfs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dbFullToHdfs_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dbFullToHdfs_resultTupleSchemeFactory();

    public ResultEntity success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbFullToHdfs_result.class, metaDataMap);
    }

    public dbFullToHdfs_result() {
    }

    public dbFullToHdfs_result(
      ResultEntity success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbFullToHdfs_result(dbFullToHdfs_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultEntity(other.success);
      }
    }

    public dbFullToHdfs_result deepCopy() {
      return new dbFullToHdfs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultEntity getSuccess() {
      return this.success;
    }

    public dbFullToHdfs_result setSuccess(ResultEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultEntity)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dbFullToHdfs_result)
        return this.equals((dbFullToHdfs_result)that);
      return false;
    }

    public boolean equals(dbFullToHdfs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dbFullToHdfs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dbFullToHdfs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbFullToHdfs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbFullToHdfs_resultStandardScheme getScheme() {
        return new dbFullToHdfs_resultStandardScheme();
      }
    }

    private static class dbFullToHdfs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<dbFullToHdfs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbFullToHdfs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbFullToHdfs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbFullToHdfs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbFullToHdfs_resultTupleScheme getScheme() {
        return new dbFullToHdfs_resultTupleScheme();
      }
    }

    private static class dbFullToHdfs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<dbFullToHdfs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbFullToHdfs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbFullToHdfs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dbIncrToHdfs_args implements org.apache.thrift.TBase<dbIncrToHdfs_args, dbIncrToHdfs_args._Fields>, java.io.Serializable, Cloneable, Comparable<dbIncrToHdfs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbIncrToHdfs_args");

    private static final org.apache.thrift.protocol.TField CONNECT_FIELD_DESC = new org.apache.thrift.protocol.TField("connect", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TARGET_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("targetDir", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField WRITE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("writeMode", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField CHECK_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("checkColumn", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField LAST_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastValue", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField NUM_MAPPERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numMappers", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField SPLIT_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("splitBy", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField WHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("where", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField FILE_SEPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSeparator", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField DKDB_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkdbConf", org.apache.thrift.protocol.TType.STRUCT, (short)14);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dbIncrToHdfs_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dbIncrToHdfs_argsTupleSchemeFactory();

    public java.lang.String connect; // required
    public java.lang.String username; // required
    public java.lang.String password; // required
    public java.lang.String table; // required
    public java.lang.String targetDir; // required
    public int writeMode; // required
    public java.lang.String checkColumn; // required
    public java.lang.String lastValue; // required
    public java.lang.String numMappers; // required
    public java.lang.String splitBy; // required
    public java.lang.String where; // required
    public java.lang.String fileSeparator; // required
    public java.lang.String extra; // required
    public DKDBConf dkdbConf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECT((short)1, "connect"),
      USERNAME((short)2, "username"),
      PASSWORD((short)3, "password"),
      TABLE((short)4, "table"),
      TARGET_DIR((short)5, "targetDir"),
      WRITE_MODE((short)6, "writeMode"),
      CHECK_COLUMN((short)7, "checkColumn"),
      LAST_VALUE((short)8, "lastValue"),
      NUM_MAPPERS((short)9, "numMappers"),
      SPLIT_BY((short)10, "splitBy"),
      WHERE((short)11, "where"),
      FILE_SEPARATOR((short)12, "fileSeparator"),
      EXTRA((short)13, "extra"),
      DKDB_CONF((short)14, "dkdbConf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECT
            return CONNECT;
          case 2: // USERNAME
            return USERNAME;
          case 3: // PASSWORD
            return PASSWORD;
          case 4: // TABLE
            return TABLE;
          case 5: // TARGET_DIR
            return TARGET_DIR;
          case 6: // WRITE_MODE
            return WRITE_MODE;
          case 7: // CHECK_COLUMN
            return CHECK_COLUMN;
          case 8: // LAST_VALUE
            return LAST_VALUE;
          case 9: // NUM_MAPPERS
            return NUM_MAPPERS;
          case 10: // SPLIT_BY
            return SPLIT_BY;
          case 11: // WHERE
            return WHERE;
          case 12: // FILE_SEPARATOR
            return FILE_SEPARATOR;
          case 13: // EXTRA
            return EXTRA;
          case 14: // DKDB_CONF
            return DKDB_CONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WRITEMODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECT, new org.apache.thrift.meta_data.FieldMetaData("connect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TARGET_DIR, new org.apache.thrift.meta_data.FieldMetaData("targetDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WRITE_MODE, new org.apache.thrift.meta_data.FieldMetaData("writeMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CHECK_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("checkColumn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LAST_VALUE, new org.apache.thrift.meta_data.FieldMetaData("lastValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM_MAPPERS, new org.apache.thrift.meta_data.FieldMetaData("numMappers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPLIT_BY, new org.apache.thrift.meta_data.FieldMetaData("splitBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WHERE, new org.apache.thrift.meta_data.FieldMetaData("where", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_SEPARATOR, new org.apache.thrift.meta_data.FieldMetaData("fileSeparator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("extra", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKDB_CONF, new org.apache.thrift.meta_data.FieldMetaData("dkdbConf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKDBConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbIncrToHdfs_args.class, metaDataMap);
    }

    public dbIncrToHdfs_args() {
    }

    public dbIncrToHdfs_args(
      java.lang.String connect,
      java.lang.String username,
      java.lang.String password,
      java.lang.String table,
      java.lang.String targetDir,
      int writeMode,
      java.lang.String checkColumn,
      java.lang.String lastValue,
      java.lang.String numMappers,
      java.lang.String splitBy,
      java.lang.String where,
      java.lang.String fileSeparator,
      java.lang.String extra,
      DKDBConf dkdbConf)
    {
      this();
      this.connect = connect;
      this.username = username;
      this.password = password;
      this.table = table;
      this.targetDir = targetDir;
      this.writeMode = writeMode;
      setWriteModeIsSet(true);
      this.checkColumn = checkColumn;
      this.lastValue = lastValue;
      this.numMappers = numMappers;
      this.splitBy = splitBy;
      this.where = where;
      this.fileSeparator = fileSeparator;
      this.extra = extra;
      this.dkdbConf = dkdbConf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbIncrToHdfs_args(dbIncrToHdfs_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetConnect()) {
        this.connect = other.connect;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetTargetDir()) {
        this.targetDir = other.targetDir;
      }
      this.writeMode = other.writeMode;
      if (other.isSetCheckColumn()) {
        this.checkColumn = other.checkColumn;
      }
      if (other.isSetLastValue()) {
        this.lastValue = other.lastValue;
      }
      if (other.isSetNumMappers()) {
        this.numMappers = other.numMappers;
      }
      if (other.isSetSplitBy()) {
        this.splitBy = other.splitBy;
      }
      if (other.isSetWhere()) {
        this.where = other.where;
      }
      if (other.isSetFileSeparator()) {
        this.fileSeparator = other.fileSeparator;
      }
      if (other.isSetExtra()) {
        this.extra = other.extra;
      }
      if (other.isSetDkdbConf()) {
        this.dkdbConf = new DKDBConf(other.dkdbConf);
      }
    }

    public dbIncrToHdfs_args deepCopy() {
      return new dbIncrToHdfs_args(this);
    }

    @Override
    public void clear() {
      this.connect = null;
      this.username = null;
      this.password = null;
      this.table = null;
      this.targetDir = null;
      setWriteModeIsSet(false);
      this.writeMode = 0;
      this.checkColumn = null;
      this.lastValue = null;
      this.numMappers = null;
      this.splitBy = null;
      this.where = null;
      this.fileSeparator = null;
      this.extra = null;
      this.dkdbConf = null;
    }

    public java.lang.String getConnect() {
      return this.connect;
    }

    public dbIncrToHdfs_args setConnect(java.lang.String connect) {
      this.connect = connect;
      return this;
    }

    public void unsetConnect() {
      this.connect = null;
    }

    /** Returns true if field connect is set (has been assigned a value) and false otherwise */
    public boolean isSetConnect() {
      return this.connect != null;
    }

    public void setConnectIsSet(boolean value) {
      if (!value) {
        this.connect = null;
      }
    }

    public java.lang.String getUsername() {
      return this.username;
    }

    public dbIncrToHdfs_args setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public dbIncrToHdfs_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public java.lang.String getTable() {
      return this.table;
    }

    public dbIncrToHdfs_args setTable(java.lang.String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public java.lang.String getTargetDir() {
      return this.targetDir;
    }

    public dbIncrToHdfs_args setTargetDir(java.lang.String targetDir) {
      this.targetDir = targetDir;
      return this;
    }

    public void unsetTargetDir() {
      this.targetDir = null;
    }

    /** Returns true if field targetDir is set (has been assigned a value) and false otherwise */
    public boolean isSetTargetDir() {
      return this.targetDir != null;
    }

    public void setTargetDirIsSet(boolean value) {
      if (!value) {
        this.targetDir = null;
      }
    }

    public int getWriteMode() {
      return this.writeMode;
    }

    public dbIncrToHdfs_args setWriteMode(int writeMode) {
      this.writeMode = writeMode;
      setWriteModeIsSet(true);
      return this;
    }

    public void unsetWriteMode() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WRITEMODE_ISSET_ID);
    }

    /** Returns true if field writeMode is set (has been assigned a value) and false otherwise */
    public boolean isSetWriteMode() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WRITEMODE_ISSET_ID);
    }

    public void setWriteModeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WRITEMODE_ISSET_ID, value);
    }

    public java.lang.String getCheckColumn() {
      return this.checkColumn;
    }

    public dbIncrToHdfs_args setCheckColumn(java.lang.String checkColumn) {
      this.checkColumn = checkColumn;
      return this;
    }

    public void unsetCheckColumn() {
      this.checkColumn = null;
    }

    /** Returns true if field checkColumn is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckColumn() {
      return this.checkColumn != null;
    }

    public void setCheckColumnIsSet(boolean value) {
      if (!value) {
        this.checkColumn = null;
      }
    }

    public java.lang.String getLastValue() {
      return this.lastValue;
    }

    public dbIncrToHdfs_args setLastValue(java.lang.String lastValue) {
      this.lastValue = lastValue;
      return this;
    }

    public void unsetLastValue() {
      this.lastValue = null;
    }

    /** Returns true if field lastValue is set (has been assigned a value) and false otherwise */
    public boolean isSetLastValue() {
      return this.lastValue != null;
    }

    public void setLastValueIsSet(boolean value) {
      if (!value) {
        this.lastValue = null;
      }
    }

    public java.lang.String getNumMappers() {
      return this.numMappers;
    }

    public dbIncrToHdfs_args setNumMappers(java.lang.String numMappers) {
      this.numMappers = numMappers;
      return this;
    }

    public void unsetNumMappers() {
      this.numMappers = null;
    }

    /** Returns true if field numMappers is set (has been assigned a value) and false otherwise */
    public boolean isSetNumMappers() {
      return this.numMappers != null;
    }

    public void setNumMappersIsSet(boolean value) {
      if (!value) {
        this.numMappers = null;
      }
    }

    public java.lang.String getSplitBy() {
      return this.splitBy;
    }

    public dbIncrToHdfs_args setSplitBy(java.lang.String splitBy) {
      this.splitBy = splitBy;
      return this;
    }

    public void unsetSplitBy() {
      this.splitBy = null;
    }

    /** Returns true if field splitBy is set (has been assigned a value) and false otherwise */
    public boolean isSetSplitBy() {
      return this.splitBy != null;
    }

    public void setSplitByIsSet(boolean value) {
      if (!value) {
        this.splitBy = null;
      }
    }

    public java.lang.String getWhere() {
      return this.where;
    }

    public dbIncrToHdfs_args setWhere(java.lang.String where) {
      this.where = where;
      return this;
    }

    public void unsetWhere() {
      this.where = null;
    }

    /** Returns true if field where is set (has been assigned a value) and false otherwise */
    public boolean isSetWhere() {
      return this.where != null;
    }

    public void setWhereIsSet(boolean value) {
      if (!value) {
        this.where = null;
      }
    }

    public java.lang.String getFileSeparator() {
      return this.fileSeparator;
    }

    public dbIncrToHdfs_args setFileSeparator(java.lang.String fileSeparator) {
      this.fileSeparator = fileSeparator;
      return this;
    }

    public void unsetFileSeparator() {
      this.fileSeparator = null;
    }

    /** Returns true if field fileSeparator is set (has been assigned a value) and false otherwise */
    public boolean isSetFileSeparator() {
      return this.fileSeparator != null;
    }

    public void setFileSeparatorIsSet(boolean value) {
      if (!value) {
        this.fileSeparator = null;
      }
    }

    public java.lang.String getExtra() {
      return this.extra;
    }

    public dbIncrToHdfs_args setExtra(java.lang.String extra) {
      this.extra = extra;
      return this;
    }

    public void unsetExtra() {
      this.extra = null;
    }

    /** Returns true if field extra is set (has been assigned a value) and false otherwise */
    public boolean isSetExtra() {
      return this.extra != null;
    }

    public void setExtraIsSet(boolean value) {
      if (!value) {
        this.extra = null;
      }
    }

    public DKDBConf getDkdbConf() {
      return this.dkdbConf;
    }

    public dbIncrToHdfs_args setDkdbConf(DKDBConf dkdbConf) {
      this.dkdbConf = dkdbConf;
      return this;
    }

    public void unsetDkdbConf() {
      this.dkdbConf = null;
    }

    /** Returns true if field dkdbConf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkdbConf() {
      return this.dkdbConf != null;
    }

    public void setDkdbConfIsSet(boolean value) {
      if (!value) {
        this.dkdbConf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CONNECT:
        if (value == null) {
          unsetConnect();
        } else {
          setConnect((java.lang.String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((java.lang.String)value);
        }
        break;

      case TARGET_DIR:
        if (value == null) {
          unsetTargetDir();
        } else {
          setTargetDir((java.lang.String)value);
        }
        break;

      case WRITE_MODE:
        if (value == null) {
          unsetWriteMode();
        } else {
          setWriteMode((java.lang.Integer)value);
        }
        break;

      case CHECK_COLUMN:
        if (value == null) {
          unsetCheckColumn();
        } else {
          setCheckColumn((java.lang.String)value);
        }
        break;

      case LAST_VALUE:
        if (value == null) {
          unsetLastValue();
        } else {
          setLastValue((java.lang.String)value);
        }
        break;

      case NUM_MAPPERS:
        if (value == null) {
          unsetNumMappers();
        } else {
          setNumMappers((java.lang.String)value);
        }
        break;

      case SPLIT_BY:
        if (value == null) {
          unsetSplitBy();
        } else {
          setSplitBy((java.lang.String)value);
        }
        break;

      case WHERE:
        if (value == null) {
          unsetWhere();
        } else {
          setWhere((java.lang.String)value);
        }
        break;

      case FILE_SEPARATOR:
        if (value == null) {
          unsetFileSeparator();
        } else {
          setFileSeparator((java.lang.String)value);
        }
        break;

      case EXTRA:
        if (value == null) {
          unsetExtra();
        } else {
          setExtra((java.lang.String)value);
        }
        break;

      case DKDB_CONF:
        if (value == null) {
          unsetDkdbConf();
        } else {
          setDkdbConf((DKDBConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECT:
        return getConnect();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case TABLE:
        return getTable();

      case TARGET_DIR:
        return getTargetDir();

      case WRITE_MODE:
        return getWriteMode();

      case CHECK_COLUMN:
        return getCheckColumn();

      case LAST_VALUE:
        return getLastValue();

      case NUM_MAPPERS:
        return getNumMappers();

      case SPLIT_BY:
        return getSplitBy();

      case WHERE:
        return getWhere();

      case FILE_SEPARATOR:
        return getFileSeparator();

      case EXTRA:
        return getExtra();

      case DKDB_CONF:
        return getDkdbConf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CONNECT:
        return isSetConnect();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case TABLE:
        return isSetTable();
      case TARGET_DIR:
        return isSetTargetDir();
      case WRITE_MODE:
        return isSetWriteMode();
      case CHECK_COLUMN:
        return isSetCheckColumn();
      case LAST_VALUE:
        return isSetLastValue();
      case NUM_MAPPERS:
        return isSetNumMappers();
      case SPLIT_BY:
        return isSetSplitBy();
      case WHERE:
        return isSetWhere();
      case FILE_SEPARATOR:
        return isSetFileSeparator();
      case EXTRA:
        return isSetExtra();
      case DKDB_CONF:
        return isSetDkdbConf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dbIncrToHdfs_args)
        return this.equals((dbIncrToHdfs_args)that);
      return false;
    }

    public boolean equals(dbIncrToHdfs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_connect = true && this.isSetConnect();
      boolean that_present_connect = true && that.isSetConnect();
      if (this_present_connect || that_present_connect) {
        if (!(this_present_connect && that_present_connect))
          return false;
        if (!this.connect.equals(that.connect))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_targetDir = true && this.isSetTargetDir();
      boolean that_present_targetDir = true && that.isSetTargetDir();
      if (this_present_targetDir || that_present_targetDir) {
        if (!(this_present_targetDir && that_present_targetDir))
          return false;
        if (!this.targetDir.equals(that.targetDir))
          return false;
      }

      boolean this_present_writeMode = true;
      boolean that_present_writeMode = true;
      if (this_present_writeMode || that_present_writeMode) {
        if (!(this_present_writeMode && that_present_writeMode))
          return false;
        if (this.writeMode != that.writeMode)
          return false;
      }

      boolean this_present_checkColumn = true && this.isSetCheckColumn();
      boolean that_present_checkColumn = true && that.isSetCheckColumn();
      if (this_present_checkColumn || that_present_checkColumn) {
        if (!(this_present_checkColumn && that_present_checkColumn))
          return false;
        if (!this.checkColumn.equals(that.checkColumn))
          return false;
      }

      boolean this_present_lastValue = true && this.isSetLastValue();
      boolean that_present_lastValue = true && that.isSetLastValue();
      if (this_present_lastValue || that_present_lastValue) {
        if (!(this_present_lastValue && that_present_lastValue))
          return false;
        if (!this.lastValue.equals(that.lastValue))
          return false;
      }

      boolean this_present_numMappers = true && this.isSetNumMappers();
      boolean that_present_numMappers = true && that.isSetNumMappers();
      if (this_present_numMappers || that_present_numMappers) {
        if (!(this_present_numMappers && that_present_numMappers))
          return false;
        if (!this.numMappers.equals(that.numMappers))
          return false;
      }

      boolean this_present_splitBy = true && this.isSetSplitBy();
      boolean that_present_splitBy = true && that.isSetSplitBy();
      if (this_present_splitBy || that_present_splitBy) {
        if (!(this_present_splitBy && that_present_splitBy))
          return false;
        if (!this.splitBy.equals(that.splitBy))
          return false;
      }

      boolean this_present_where = true && this.isSetWhere();
      boolean that_present_where = true && that.isSetWhere();
      if (this_present_where || that_present_where) {
        if (!(this_present_where && that_present_where))
          return false;
        if (!this.where.equals(that.where))
          return false;
      }

      boolean this_present_fileSeparator = true && this.isSetFileSeparator();
      boolean that_present_fileSeparator = true && that.isSetFileSeparator();
      if (this_present_fileSeparator || that_present_fileSeparator) {
        if (!(this_present_fileSeparator && that_present_fileSeparator))
          return false;
        if (!this.fileSeparator.equals(that.fileSeparator))
          return false;
      }

      boolean this_present_extra = true && this.isSetExtra();
      boolean that_present_extra = true && that.isSetExtra();
      if (this_present_extra || that_present_extra) {
        if (!(this_present_extra && that_present_extra))
          return false;
        if (!this.extra.equals(that.extra))
          return false;
      }

      boolean this_present_dkdbConf = true && this.isSetDkdbConf();
      boolean that_present_dkdbConf = true && that.isSetDkdbConf();
      if (this_present_dkdbConf || that_present_dkdbConf) {
        if (!(this_present_dkdbConf && that_present_dkdbConf))
          return false;
        if (!this.dkdbConf.equals(that.dkdbConf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetConnect()) ? 131071 : 524287);
      if (isSetConnect())
        hashCode = hashCode * 8191 + connect.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetTargetDir()) ? 131071 : 524287);
      if (isSetTargetDir())
        hashCode = hashCode * 8191 + targetDir.hashCode();

      hashCode = hashCode * 8191 + writeMode;

      hashCode = hashCode * 8191 + ((isSetCheckColumn()) ? 131071 : 524287);
      if (isSetCheckColumn())
        hashCode = hashCode * 8191 + checkColumn.hashCode();

      hashCode = hashCode * 8191 + ((isSetLastValue()) ? 131071 : 524287);
      if (isSetLastValue())
        hashCode = hashCode * 8191 + lastValue.hashCode();

      hashCode = hashCode * 8191 + ((isSetNumMappers()) ? 131071 : 524287);
      if (isSetNumMappers())
        hashCode = hashCode * 8191 + numMappers.hashCode();

      hashCode = hashCode * 8191 + ((isSetSplitBy()) ? 131071 : 524287);
      if (isSetSplitBy())
        hashCode = hashCode * 8191 + splitBy.hashCode();

      hashCode = hashCode * 8191 + ((isSetWhere()) ? 131071 : 524287);
      if (isSetWhere())
        hashCode = hashCode * 8191 + where.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileSeparator()) ? 131071 : 524287);
      if (isSetFileSeparator())
        hashCode = hashCode * 8191 + fileSeparator.hashCode();

      hashCode = hashCode * 8191 + ((isSetExtra()) ? 131071 : 524287);
      if (isSetExtra())
        hashCode = hashCode * 8191 + extra.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkdbConf()) ? 131071 : 524287);
      if (isSetDkdbConf())
        hashCode = hashCode * 8191 + dkdbConf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dbIncrToHdfs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetConnect()).compareTo(other.isSetConnect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connect, other.connect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTargetDir()).compareTo(other.isSetTargetDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTargetDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetDir, other.targetDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWriteMode()).compareTo(other.isSetWriteMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWriteMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeMode, other.writeMode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCheckColumn()).compareTo(other.isSetCheckColumn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckColumn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkColumn, other.checkColumn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLastValue()).compareTo(other.isSetLastValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastValue, other.lastValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumMappers()).compareTo(other.isSetNumMappers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumMappers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numMappers, other.numMappers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSplitBy()).compareTo(other.isSetSplitBy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSplitBy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitBy, other.splitBy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWhere()).compareTo(other.isSetWhere());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhere()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.where, other.where);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileSeparator()).compareTo(other.isSetFileSeparator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileSeparator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSeparator, other.fileSeparator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExtra()).compareTo(other.isSetExtra());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtra()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra, other.extra);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkdbConf()).compareTo(other.isSetDkdbConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkdbConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkdbConf, other.dkdbConf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dbIncrToHdfs_args(");
      boolean first = true;

      sb.append("connect:");
      if (this.connect == null) {
        sb.append("null");
      } else {
        sb.append(this.connect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("targetDir:");
      if (this.targetDir == null) {
        sb.append("null");
      } else {
        sb.append(this.targetDir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("writeMode:");
      sb.append(this.writeMode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkColumn:");
      if (this.checkColumn == null) {
        sb.append("null");
      } else {
        sb.append(this.checkColumn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastValue:");
      if (this.lastValue == null) {
        sb.append("null");
      } else {
        sb.append(this.lastValue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numMappers:");
      if (this.numMappers == null) {
        sb.append("null");
      } else {
        sb.append(this.numMappers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("splitBy:");
      if (this.splitBy == null) {
        sb.append("null");
      } else {
        sb.append(this.splitBy);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("where:");
      if (this.where == null) {
        sb.append("null");
      } else {
        sb.append(this.where);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileSeparator:");
      if (this.fileSeparator == null) {
        sb.append("null");
      } else {
        sb.append(this.fileSeparator);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("extra:");
      if (this.extra == null) {
        sb.append("null");
      } else {
        sb.append(this.extra);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkdbConf:");
      if (this.dkdbConf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkdbConf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkdbConf != null) {
        dkdbConf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbIncrToHdfs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbIncrToHdfs_argsStandardScheme getScheme() {
        return new dbIncrToHdfs_argsStandardScheme();
      }
    }

    private static class dbIncrToHdfs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<dbIncrToHdfs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbIncrToHdfs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.connect = iprot.readString();
                struct.setConnectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TARGET_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.targetDir = iprot.readString();
                struct.setTargetDirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // WRITE_MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.writeMode = iprot.readI32();
                struct.setWriteModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // CHECK_COLUMN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.checkColumn = iprot.readString();
                struct.setCheckColumnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // LAST_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lastValue = iprot.readString();
                struct.setLastValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // NUM_MAPPERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.numMappers = iprot.readString();
                struct.setNumMappersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // SPLIT_BY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.splitBy = iprot.readString();
                struct.setSplitByIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // WHERE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.where = iprot.readString();
                struct.setWhereIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // FILE_SEPARATOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileSeparator = iprot.readString();
                struct.setFileSeparatorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // EXTRA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.extra = iprot.readString();
                struct.setExtraIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // DKDB_CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkdbConf = new DKDBConf();
                struct.dkdbConf.read(iprot);
                struct.setDkdbConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbIncrToHdfs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connect != null) {
          oprot.writeFieldBegin(CONNECT_FIELD_DESC);
          oprot.writeString(struct.connect);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.targetDir != null) {
          oprot.writeFieldBegin(TARGET_DIR_FIELD_DESC);
          oprot.writeString(struct.targetDir);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WRITE_MODE_FIELD_DESC);
        oprot.writeI32(struct.writeMode);
        oprot.writeFieldEnd();
        if (struct.checkColumn != null) {
          oprot.writeFieldBegin(CHECK_COLUMN_FIELD_DESC);
          oprot.writeString(struct.checkColumn);
          oprot.writeFieldEnd();
        }
        if (struct.lastValue != null) {
          oprot.writeFieldBegin(LAST_VALUE_FIELD_DESC);
          oprot.writeString(struct.lastValue);
          oprot.writeFieldEnd();
        }
        if (struct.numMappers != null) {
          oprot.writeFieldBegin(NUM_MAPPERS_FIELD_DESC);
          oprot.writeString(struct.numMappers);
          oprot.writeFieldEnd();
        }
        if (struct.splitBy != null) {
          oprot.writeFieldBegin(SPLIT_BY_FIELD_DESC);
          oprot.writeString(struct.splitBy);
          oprot.writeFieldEnd();
        }
        if (struct.where != null) {
          oprot.writeFieldBegin(WHERE_FIELD_DESC);
          oprot.writeString(struct.where);
          oprot.writeFieldEnd();
        }
        if (struct.fileSeparator != null) {
          oprot.writeFieldBegin(FILE_SEPARATOR_FIELD_DESC);
          oprot.writeString(struct.fileSeparator);
          oprot.writeFieldEnd();
        }
        if (struct.extra != null) {
          oprot.writeFieldBegin(EXTRA_FIELD_DESC);
          oprot.writeString(struct.extra);
          oprot.writeFieldEnd();
        }
        if (struct.dkdbConf != null) {
          oprot.writeFieldBegin(DKDB_CONF_FIELD_DESC);
          struct.dkdbConf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbIncrToHdfs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbIncrToHdfs_argsTupleScheme getScheme() {
        return new dbIncrToHdfs_argsTupleScheme();
      }
    }

    private static class dbIncrToHdfs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<dbIncrToHdfs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbIncrToHdfs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetConnect()) {
          optionals.set(0);
        }
        if (struct.isSetUsername()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        if (struct.isSetTable()) {
          optionals.set(3);
        }
        if (struct.isSetTargetDir()) {
          optionals.set(4);
        }
        if (struct.isSetWriteMode()) {
          optionals.set(5);
        }
        if (struct.isSetCheckColumn()) {
          optionals.set(6);
        }
        if (struct.isSetLastValue()) {
          optionals.set(7);
        }
        if (struct.isSetNumMappers()) {
          optionals.set(8);
        }
        if (struct.isSetSplitBy()) {
          optionals.set(9);
        }
        if (struct.isSetWhere()) {
          optionals.set(10);
        }
        if (struct.isSetFileSeparator()) {
          optionals.set(11);
        }
        if (struct.isSetExtra()) {
          optionals.set(12);
        }
        if (struct.isSetDkdbConf()) {
          optionals.set(13);
        }
        oprot.writeBitSet(optionals, 14);
        if (struct.isSetConnect()) {
          oprot.writeString(struct.connect);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetTargetDir()) {
          oprot.writeString(struct.targetDir);
        }
        if (struct.isSetWriteMode()) {
          oprot.writeI32(struct.writeMode);
        }
        if (struct.isSetCheckColumn()) {
          oprot.writeString(struct.checkColumn);
        }
        if (struct.isSetLastValue()) {
          oprot.writeString(struct.lastValue);
        }
        if (struct.isSetNumMappers()) {
          oprot.writeString(struct.numMappers);
        }
        if (struct.isSetSplitBy()) {
          oprot.writeString(struct.splitBy);
        }
        if (struct.isSetWhere()) {
          oprot.writeString(struct.where);
        }
        if (struct.isSetFileSeparator()) {
          oprot.writeString(struct.fileSeparator);
        }
        if (struct.isSetExtra()) {
          oprot.writeString(struct.extra);
        }
        if (struct.isSetDkdbConf()) {
          struct.dkdbConf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbIncrToHdfs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(14);
        if (incoming.get(0)) {
          struct.connect = iprot.readString();
          struct.setConnectIsSet(true);
        }
        if (incoming.get(1)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(3)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(4)) {
          struct.targetDir = iprot.readString();
          struct.setTargetDirIsSet(true);
        }
        if (incoming.get(5)) {
          struct.writeMode = iprot.readI32();
          struct.setWriteModeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.checkColumn = iprot.readString();
          struct.setCheckColumnIsSet(true);
        }
        if (incoming.get(7)) {
          struct.lastValue = iprot.readString();
          struct.setLastValueIsSet(true);
        }
        if (incoming.get(8)) {
          struct.numMappers = iprot.readString();
          struct.setNumMappersIsSet(true);
        }
        if (incoming.get(9)) {
          struct.splitBy = iprot.readString();
          struct.setSplitByIsSet(true);
        }
        if (incoming.get(10)) {
          struct.where = iprot.readString();
          struct.setWhereIsSet(true);
        }
        if (incoming.get(11)) {
          struct.fileSeparator = iprot.readString();
          struct.setFileSeparatorIsSet(true);
        }
        if (incoming.get(12)) {
          struct.extra = iprot.readString();
          struct.setExtraIsSet(true);
        }
        if (incoming.get(13)) {
          struct.dkdbConf = new DKDBConf();
          struct.dkdbConf.read(iprot);
          struct.setDkdbConfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dbIncrToHdfs_result implements org.apache.thrift.TBase<dbIncrToHdfs_result, dbIncrToHdfs_result._Fields>, java.io.Serializable, Cloneable, Comparable<dbIncrToHdfs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbIncrToHdfs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dbIncrToHdfs_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dbIncrToHdfs_resultTupleSchemeFactory();

    public ResultEntity success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbIncrToHdfs_result.class, metaDataMap);
    }

    public dbIncrToHdfs_result() {
    }

    public dbIncrToHdfs_result(
      ResultEntity success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbIncrToHdfs_result(dbIncrToHdfs_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultEntity(other.success);
      }
    }

    public dbIncrToHdfs_result deepCopy() {
      return new dbIncrToHdfs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultEntity getSuccess() {
      return this.success;
    }

    public dbIncrToHdfs_result setSuccess(ResultEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultEntity)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dbIncrToHdfs_result)
        return this.equals((dbIncrToHdfs_result)that);
      return false;
    }

    public boolean equals(dbIncrToHdfs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dbIncrToHdfs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dbIncrToHdfs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbIncrToHdfs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbIncrToHdfs_resultStandardScheme getScheme() {
        return new dbIncrToHdfs_resultStandardScheme();
      }
    }

    private static class dbIncrToHdfs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<dbIncrToHdfs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbIncrToHdfs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbIncrToHdfs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbIncrToHdfs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbIncrToHdfs_resultTupleScheme getScheme() {
        return new dbIncrToHdfs_resultTupleScheme();
      }
    }

    private static class dbIncrToHdfs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<dbIncrToHdfs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbIncrToHdfs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbIncrToHdfs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dbFullToHive_args implements org.apache.thrift.TBase<dbFullToHive_args, dbFullToHive_args._Fields>, java.io.Serializable, Cloneable, Comparable<dbFullToHive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbFullToHive_args");

    private static final org.apache.thrift.protocol.TField CONNECT_FIELD_DESC = new org.apache.thrift.protocol.TField("connect", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField H_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("hTable", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField NUM_MAPPERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numMappers", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField SPLIT_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("splitBy", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField WHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("where", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField FILE_SEPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSeparator", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField DKDB_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkdbConf", org.apache.thrift.protocol.TType.STRUCT, (short)11);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dbFullToHive_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dbFullToHive_argsTupleSchemeFactory();

    public java.lang.String connect; // required
    public java.lang.String username; // required
    public java.lang.String password; // required
    public java.lang.String table; // required
    public java.lang.String hTable; // required
    public java.lang.String numMappers; // required
    public java.lang.String splitBy; // required
    public java.lang.String where; // required
    public java.lang.String fileSeparator; // required
    public java.lang.String extra; // required
    public DKDBConf dkdbConf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECT((short)1, "connect"),
      USERNAME((short)2, "username"),
      PASSWORD((short)3, "password"),
      TABLE((short)4, "table"),
      H_TABLE((short)5, "hTable"),
      NUM_MAPPERS((short)6, "numMappers"),
      SPLIT_BY((short)7, "splitBy"),
      WHERE((short)8, "where"),
      FILE_SEPARATOR((short)9, "fileSeparator"),
      EXTRA((short)10, "extra"),
      DKDB_CONF((short)11, "dkdbConf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECT
            return CONNECT;
          case 2: // USERNAME
            return USERNAME;
          case 3: // PASSWORD
            return PASSWORD;
          case 4: // TABLE
            return TABLE;
          case 5: // H_TABLE
            return H_TABLE;
          case 6: // NUM_MAPPERS
            return NUM_MAPPERS;
          case 7: // SPLIT_BY
            return SPLIT_BY;
          case 8: // WHERE
            return WHERE;
          case 9: // FILE_SEPARATOR
            return FILE_SEPARATOR;
          case 10: // EXTRA
            return EXTRA;
          case 11: // DKDB_CONF
            return DKDB_CONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECT, new org.apache.thrift.meta_data.FieldMetaData("connect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.H_TABLE, new org.apache.thrift.meta_data.FieldMetaData("hTable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM_MAPPERS, new org.apache.thrift.meta_data.FieldMetaData("numMappers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPLIT_BY, new org.apache.thrift.meta_data.FieldMetaData("splitBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WHERE, new org.apache.thrift.meta_data.FieldMetaData("where", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_SEPARATOR, new org.apache.thrift.meta_data.FieldMetaData("fileSeparator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("extra", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKDB_CONF, new org.apache.thrift.meta_data.FieldMetaData("dkdbConf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKDBConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbFullToHive_args.class, metaDataMap);
    }

    public dbFullToHive_args() {
    }

    public dbFullToHive_args(
      java.lang.String connect,
      java.lang.String username,
      java.lang.String password,
      java.lang.String table,
      java.lang.String hTable,
      java.lang.String numMappers,
      java.lang.String splitBy,
      java.lang.String where,
      java.lang.String fileSeparator,
      java.lang.String extra,
      DKDBConf dkdbConf)
    {
      this();
      this.connect = connect;
      this.username = username;
      this.password = password;
      this.table = table;
      this.hTable = hTable;
      this.numMappers = numMappers;
      this.splitBy = splitBy;
      this.where = where;
      this.fileSeparator = fileSeparator;
      this.extra = extra;
      this.dkdbConf = dkdbConf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbFullToHive_args(dbFullToHive_args other) {
      if (other.isSetConnect()) {
        this.connect = other.connect;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetHTable()) {
        this.hTable = other.hTable;
      }
      if (other.isSetNumMappers()) {
        this.numMappers = other.numMappers;
      }
      if (other.isSetSplitBy()) {
        this.splitBy = other.splitBy;
      }
      if (other.isSetWhere()) {
        this.where = other.where;
      }
      if (other.isSetFileSeparator()) {
        this.fileSeparator = other.fileSeparator;
      }
      if (other.isSetExtra()) {
        this.extra = other.extra;
      }
      if (other.isSetDkdbConf()) {
        this.dkdbConf = new DKDBConf(other.dkdbConf);
      }
    }

    public dbFullToHive_args deepCopy() {
      return new dbFullToHive_args(this);
    }

    @Override
    public void clear() {
      this.connect = null;
      this.username = null;
      this.password = null;
      this.table = null;
      this.hTable = null;
      this.numMappers = null;
      this.splitBy = null;
      this.where = null;
      this.fileSeparator = null;
      this.extra = null;
      this.dkdbConf = null;
    }

    public java.lang.String getConnect() {
      return this.connect;
    }

    public dbFullToHive_args setConnect(java.lang.String connect) {
      this.connect = connect;
      return this;
    }

    public void unsetConnect() {
      this.connect = null;
    }

    /** Returns true if field connect is set (has been assigned a value) and false otherwise */
    public boolean isSetConnect() {
      return this.connect != null;
    }

    public void setConnectIsSet(boolean value) {
      if (!value) {
        this.connect = null;
      }
    }

    public java.lang.String getUsername() {
      return this.username;
    }

    public dbFullToHive_args setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public dbFullToHive_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public java.lang.String getTable() {
      return this.table;
    }

    public dbFullToHive_args setTable(java.lang.String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public java.lang.String getHTable() {
      return this.hTable;
    }

    public dbFullToHive_args setHTable(java.lang.String hTable) {
      this.hTable = hTable;
      return this;
    }

    public void unsetHTable() {
      this.hTable = null;
    }

    /** Returns true if field hTable is set (has been assigned a value) and false otherwise */
    public boolean isSetHTable() {
      return this.hTable != null;
    }

    public void setHTableIsSet(boolean value) {
      if (!value) {
        this.hTable = null;
      }
    }

    public java.lang.String getNumMappers() {
      return this.numMappers;
    }

    public dbFullToHive_args setNumMappers(java.lang.String numMappers) {
      this.numMappers = numMappers;
      return this;
    }

    public void unsetNumMappers() {
      this.numMappers = null;
    }

    /** Returns true if field numMappers is set (has been assigned a value) and false otherwise */
    public boolean isSetNumMappers() {
      return this.numMappers != null;
    }

    public void setNumMappersIsSet(boolean value) {
      if (!value) {
        this.numMappers = null;
      }
    }

    public java.lang.String getSplitBy() {
      return this.splitBy;
    }

    public dbFullToHive_args setSplitBy(java.lang.String splitBy) {
      this.splitBy = splitBy;
      return this;
    }

    public void unsetSplitBy() {
      this.splitBy = null;
    }

    /** Returns true if field splitBy is set (has been assigned a value) and false otherwise */
    public boolean isSetSplitBy() {
      return this.splitBy != null;
    }

    public void setSplitByIsSet(boolean value) {
      if (!value) {
        this.splitBy = null;
      }
    }

    public java.lang.String getWhere() {
      return this.where;
    }

    public dbFullToHive_args setWhere(java.lang.String where) {
      this.where = where;
      return this;
    }

    public void unsetWhere() {
      this.where = null;
    }

    /** Returns true if field where is set (has been assigned a value) and false otherwise */
    public boolean isSetWhere() {
      return this.where != null;
    }

    public void setWhereIsSet(boolean value) {
      if (!value) {
        this.where = null;
      }
    }

    public java.lang.String getFileSeparator() {
      return this.fileSeparator;
    }

    public dbFullToHive_args setFileSeparator(java.lang.String fileSeparator) {
      this.fileSeparator = fileSeparator;
      return this;
    }

    public void unsetFileSeparator() {
      this.fileSeparator = null;
    }

    /** Returns true if field fileSeparator is set (has been assigned a value) and false otherwise */
    public boolean isSetFileSeparator() {
      return this.fileSeparator != null;
    }

    public void setFileSeparatorIsSet(boolean value) {
      if (!value) {
        this.fileSeparator = null;
      }
    }

    public java.lang.String getExtra() {
      return this.extra;
    }

    public dbFullToHive_args setExtra(java.lang.String extra) {
      this.extra = extra;
      return this;
    }

    public void unsetExtra() {
      this.extra = null;
    }

    /** Returns true if field extra is set (has been assigned a value) and false otherwise */
    public boolean isSetExtra() {
      return this.extra != null;
    }

    public void setExtraIsSet(boolean value) {
      if (!value) {
        this.extra = null;
      }
    }

    public DKDBConf getDkdbConf() {
      return this.dkdbConf;
    }

    public dbFullToHive_args setDkdbConf(DKDBConf dkdbConf) {
      this.dkdbConf = dkdbConf;
      return this;
    }

    public void unsetDkdbConf() {
      this.dkdbConf = null;
    }

    /** Returns true if field dkdbConf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkdbConf() {
      return this.dkdbConf != null;
    }

    public void setDkdbConfIsSet(boolean value) {
      if (!value) {
        this.dkdbConf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CONNECT:
        if (value == null) {
          unsetConnect();
        } else {
          setConnect((java.lang.String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((java.lang.String)value);
        }
        break;

      case H_TABLE:
        if (value == null) {
          unsetHTable();
        } else {
          setHTable((java.lang.String)value);
        }
        break;

      case NUM_MAPPERS:
        if (value == null) {
          unsetNumMappers();
        } else {
          setNumMappers((java.lang.String)value);
        }
        break;

      case SPLIT_BY:
        if (value == null) {
          unsetSplitBy();
        } else {
          setSplitBy((java.lang.String)value);
        }
        break;

      case WHERE:
        if (value == null) {
          unsetWhere();
        } else {
          setWhere((java.lang.String)value);
        }
        break;

      case FILE_SEPARATOR:
        if (value == null) {
          unsetFileSeparator();
        } else {
          setFileSeparator((java.lang.String)value);
        }
        break;

      case EXTRA:
        if (value == null) {
          unsetExtra();
        } else {
          setExtra((java.lang.String)value);
        }
        break;

      case DKDB_CONF:
        if (value == null) {
          unsetDkdbConf();
        } else {
          setDkdbConf((DKDBConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECT:
        return getConnect();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case TABLE:
        return getTable();

      case H_TABLE:
        return getHTable();

      case NUM_MAPPERS:
        return getNumMappers();

      case SPLIT_BY:
        return getSplitBy();

      case WHERE:
        return getWhere();

      case FILE_SEPARATOR:
        return getFileSeparator();

      case EXTRA:
        return getExtra();

      case DKDB_CONF:
        return getDkdbConf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CONNECT:
        return isSetConnect();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case TABLE:
        return isSetTable();
      case H_TABLE:
        return isSetHTable();
      case NUM_MAPPERS:
        return isSetNumMappers();
      case SPLIT_BY:
        return isSetSplitBy();
      case WHERE:
        return isSetWhere();
      case FILE_SEPARATOR:
        return isSetFileSeparator();
      case EXTRA:
        return isSetExtra();
      case DKDB_CONF:
        return isSetDkdbConf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dbFullToHive_args)
        return this.equals((dbFullToHive_args)that);
      return false;
    }

    public boolean equals(dbFullToHive_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_connect = true && this.isSetConnect();
      boolean that_present_connect = true && that.isSetConnect();
      if (this_present_connect || that_present_connect) {
        if (!(this_present_connect && that_present_connect))
          return false;
        if (!this.connect.equals(that.connect))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_hTable = true && this.isSetHTable();
      boolean that_present_hTable = true && that.isSetHTable();
      if (this_present_hTable || that_present_hTable) {
        if (!(this_present_hTable && that_present_hTable))
          return false;
        if (!this.hTable.equals(that.hTable))
          return false;
      }

      boolean this_present_numMappers = true && this.isSetNumMappers();
      boolean that_present_numMappers = true && that.isSetNumMappers();
      if (this_present_numMappers || that_present_numMappers) {
        if (!(this_present_numMappers && that_present_numMappers))
          return false;
        if (!this.numMappers.equals(that.numMappers))
          return false;
      }

      boolean this_present_splitBy = true && this.isSetSplitBy();
      boolean that_present_splitBy = true && that.isSetSplitBy();
      if (this_present_splitBy || that_present_splitBy) {
        if (!(this_present_splitBy && that_present_splitBy))
          return false;
        if (!this.splitBy.equals(that.splitBy))
          return false;
      }

      boolean this_present_where = true && this.isSetWhere();
      boolean that_present_where = true && that.isSetWhere();
      if (this_present_where || that_present_where) {
        if (!(this_present_where && that_present_where))
          return false;
        if (!this.where.equals(that.where))
          return false;
      }

      boolean this_present_fileSeparator = true && this.isSetFileSeparator();
      boolean that_present_fileSeparator = true && that.isSetFileSeparator();
      if (this_present_fileSeparator || that_present_fileSeparator) {
        if (!(this_present_fileSeparator && that_present_fileSeparator))
          return false;
        if (!this.fileSeparator.equals(that.fileSeparator))
          return false;
      }

      boolean this_present_extra = true && this.isSetExtra();
      boolean that_present_extra = true && that.isSetExtra();
      if (this_present_extra || that_present_extra) {
        if (!(this_present_extra && that_present_extra))
          return false;
        if (!this.extra.equals(that.extra))
          return false;
      }

      boolean this_present_dkdbConf = true && this.isSetDkdbConf();
      boolean that_present_dkdbConf = true && that.isSetDkdbConf();
      if (this_present_dkdbConf || that_present_dkdbConf) {
        if (!(this_present_dkdbConf && that_present_dkdbConf))
          return false;
        if (!this.dkdbConf.equals(that.dkdbConf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetConnect()) ? 131071 : 524287);
      if (isSetConnect())
        hashCode = hashCode * 8191 + connect.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetHTable()) ? 131071 : 524287);
      if (isSetHTable())
        hashCode = hashCode * 8191 + hTable.hashCode();

      hashCode = hashCode * 8191 + ((isSetNumMappers()) ? 131071 : 524287);
      if (isSetNumMappers())
        hashCode = hashCode * 8191 + numMappers.hashCode();

      hashCode = hashCode * 8191 + ((isSetSplitBy()) ? 131071 : 524287);
      if (isSetSplitBy())
        hashCode = hashCode * 8191 + splitBy.hashCode();

      hashCode = hashCode * 8191 + ((isSetWhere()) ? 131071 : 524287);
      if (isSetWhere())
        hashCode = hashCode * 8191 + where.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileSeparator()) ? 131071 : 524287);
      if (isSetFileSeparator())
        hashCode = hashCode * 8191 + fileSeparator.hashCode();

      hashCode = hashCode * 8191 + ((isSetExtra()) ? 131071 : 524287);
      if (isSetExtra())
        hashCode = hashCode * 8191 + extra.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkdbConf()) ? 131071 : 524287);
      if (isSetDkdbConf())
        hashCode = hashCode * 8191 + dkdbConf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dbFullToHive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetConnect()).compareTo(other.isSetConnect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connect, other.connect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHTable()).compareTo(other.isSetHTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hTable, other.hTable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumMappers()).compareTo(other.isSetNumMappers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumMappers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numMappers, other.numMappers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSplitBy()).compareTo(other.isSetSplitBy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSplitBy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitBy, other.splitBy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWhere()).compareTo(other.isSetWhere());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhere()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.where, other.where);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileSeparator()).compareTo(other.isSetFileSeparator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileSeparator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSeparator, other.fileSeparator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExtra()).compareTo(other.isSetExtra());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtra()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra, other.extra);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkdbConf()).compareTo(other.isSetDkdbConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkdbConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkdbConf, other.dkdbConf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dbFullToHive_args(");
      boolean first = true;

      sb.append("connect:");
      if (this.connect == null) {
        sb.append("null");
      } else {
        sb.append(this.connect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hTable:");
      if (this.hTable == null) {
        sb.append("null");
      } else {
        sb.append(this.hTable);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numMappers:");
      if (this.numMappers == null) {
        sb.append("null");
      } else {
        sb.append(this.numMappers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("splitBy:");
      if (this.splitBy == null) {
        sb.append("null");
      } else {
        sb.append(this.splitBy);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("where:");
      if (this.where == null) {
        sb.append("null");
      } else {
        sb.append(this.where);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileSeparator:");
      if (this.fileSeparator == null) {
        sb.append("null");
      } else {
        sb.append(this.fileSeparator);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("extra:");
      if (this.extra == null) {
        sb.append("null");
      } else {
        sb.append(this.extra);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkdbConf:");
      if (this.dkdbConf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkdbConf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkdbConf != null) {
        dkdbConf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbFullToHive_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbFullToHive_argsStandardScheme getScheme() {
        return new dbFullToHive_argsStandardScheme();
      }
    }

    private static class dbFullToHive_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<dbFullToHive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbFullToHive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.connect = iprot.readString();
                struct.setConnectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // H_TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hTable = iprot.readString();
                struct.setHTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // NUM_MAPPERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.numMappers = iprot.readString();
                struct.setNumMappersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SPLIT_BY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.splitBy = iprot.readString();
                struct.setSplitByIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // WHERE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.where = iprot.readString();
                struct.setWhereIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // FILE_SEPARATOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileSeparator = iprot.readString();
                struct.setFileSeparatorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // EXTRA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.extra = iprot.readString();
                struct.setExtraIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // DKDB_CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkdbConf = new DKDBConf();
                struct.dkdbConf.read(iprot);
                struct.setDkdbConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbFullToHive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connect != null) {
          oprot.writeFieldBegin(CONNECT_FIELD_DESC);
          oprot.writeString(struct.connect);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.hTable != null) {
          oprot.writeFieldBegin(H_TABLE_FIELD_DESC);
          oprot.writeString(struct.hTable);
          oprot.writeFieldEnd();
        }
        if (struct.numMappers != null) {
          oprot.writeFieldBegin(NUM_MAPPERS_FIELD_DESC);
          oprot.writeString(struct.numMappers);
          oprot.writeFieldEnd();
        }
        if (struct.splitBy != null) {
          oprot.writeFieldBegin(SPLIT_BY_FIELD_DESC);
          oprot.writeString(struct.splitBy);
          oprot.writeFieldEnd();
        }
        if (struct.where != null) {
          oprot.writeFieldBegin(WHERE_FIELD_DESC);
          oprot.writeString(struct.where);
          oprot.writeFieldEnd();
        }
        if (struct.fileSeparator != null) {
          oprot.writeFieldBegin(FILE_SEPARATOR_FIELD_DESC);
          oprot.writeString(struct.fileSeparator);
          oprot.writeFieldEnd();
        }
        if (struct.extra != null) {
          oprot.writeFieldBegin(EXTRA_FIELD_DESC);
          oprot.writeString(struct.extra);
          oprot.writeFieldEnd();
        }
        if (struct.dkdbConf != null) {
          oprot.writeFieldBegin(DKDB_CONF_FIELD_DESC);
          struct.dkdbConf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbFullToHive_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbFullToHive_argsTupleScheme getScheme() {
        return new dbFullToHive_argsTupleScheme();
      }
    }

    private static class dbFullToHive_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<dbFullToHive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbFullToHive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetConnect()) {
          optionals.set(0);
        }
        if (struct.isSetUsername()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        if (struct.isSetTable()) {
          optionals.set(3);
        }
        if (struct.isSetHTable()) {
          optionals.set(4);
        }
        if (struct.isSetNumMappers()) {
          optionals.set(5);
        }
        if (struct.isSetSplitBy()) {
          optionals.set(6);
        }
        if (struct.isSetWhere()) {
          optionals.set(7);
        }
        if (struct.isSetFileSeparator()) {
          optionals.set(8);
        }
        if (struct.isSetExtra()) {
          optionals.set(9);
        }
        if (struct.isSetDkdbConf()) {
          optionals.set(10);
        }
        oprot.writeBitSet(optionals, 11);
        if (struct.isSetConnect()) {
          oprot.writeString(struct.connect);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetHTable()) {
          oprot.writeString(struct.hTable);
        }
        if (struct.isSetNumMappers()) {
          oprot.writeString(struct.numMappers);
        }
        if (struct.isSetSplitBy()) {
          oprot.writeString(struct.splitBy);
        }
        if (struct.isSetWhere()) {
          oprot.writeString(struct.where);
        }
        if (struct.isSetFileSeparator()) {
          oprot.writeString(struct.fileSeparator);
        }
        if (struct.isSetExtra()) {
          oprot.writeString(struct.extra);
        }
        if (struct.isSetDkdbConf()) {
          struct.dkdbConf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbFullToHive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(11);
        if (incoming.get(0)) {
          struct.connect = iprot.readString();
          struct.setConnectIsSet(true);
        }
        if (incoming.get(1)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(3)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(4)) {
          struct.hTable = iprot.readString();
          struct.setHTableIsSet(true);
        }
        if (incoming.get(5)) {
          struct.numMappers = iprot.readString();
          struct.setNumMappersIsSet(true);
        }
        if (incoming.get(6)) {
          struct.splitBy = iprot.readString();
          struct.setSplitByIsSet(true);
        }
        if (incoming.get(7)) {
          struct.where = iprot.readString();
          struct.setWhereIsSet(true);
        }
        if (incoming.get(8)) {
          struct.fileSeparator = iprot.readString();
          struct.setFileSeparatorIsSet(true);
        }
        if (incoming.get(9)) {
          struct.extra = iprot.readString();
          struct.setExtraIsSet(true);
        }
        if (incoming.get(10)) {
          struct.dkdbConf = new DKDBConf();
          struct.dkdbConf.read(iprot);
          struct.setDkdbConfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dbFullToHive_result implements org.apache.thrift.TBase<dbFullToHive_result, dbFullToHive_result._Fields>, java.io.Serializable, Cloneable, Comparable<dbFullToHive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbFullToHive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dbFullToHive_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dbFullToHive_resultTupleSchemeFactory();

    public ResultEntity success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbFullToHive_result.class, metaDataMap);
    }

    public dbFullToHive_result() {
    }

    public dbFullToHive_result(
      ResultEntity success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbFullToHive_result(dbFullToHive_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultEntity(other.success);
      }
    }

    public dbFullToHive_result deepCopy() {
      return new dbFullToHive_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultEntity getSuccess() {
      return this.success;
    }

    public dbFullToHive_result setSuccess(ResultEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultEntity)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dbFullToHive_result)
        return this.equals((dbFullToHive_result)that);
      return false;
    }

    public boolean equals(dbFullToHive_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dbFullToHive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dbFullToHive_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbFullToHive_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbFullToHive_resultStandardScheme getScheme() {
        return new dbFullToHive_resultStandardScheme();
      }
    }

    private static class dbFullToHive_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<dbFullToHive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbFullToHive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbFullToHive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbFullToHive_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbFullToHive_resultTupleScheme getScheme() {
        return new dbFullToHive_resultTupleScheme();
      }
    }

    private static class dbFullToHive_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<dbFullToHive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbFullToHive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbFullToHive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dbIncrToHive_args implements org.apache.thrift.TBase<dbIncrToHive_args, dbIncrToHive_args._Fields>, java.io.Serializable, Cloneable, Comparable<dbIncrToHive_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbIncrToHive_args");

    private static final org.apache.thrift.protocol.TField CONNECT_FIELD_DESC = new org.apache.thrift.protocol.TField("connect", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField H_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("hTable", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField WRITE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("writeMode", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField CHECK_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("checkColumn", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField LAST_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastValue", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField NUM_MAPPERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numMappers", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField SPLIT_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("splitBy", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField WHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("where", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField FILE_SEPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSeparator", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField DKDB_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkdbConf", org.apache.thrift.protocol.TType.STRUCT, (short)14);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dbIncrToHive_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dbIncrToHive_argsTupleSchemeFactory();

    public java.lang.String connect; // required
    public java.lang.String username; // required
    public java.lang.String password; // required
    public java.lang.String table; // required
    public java.lang.String hTable; // required
    public int writeMode; // required
    public java.lang.String checkColumn; // required
    public java.lang.String lastValue; // required
    public java.lang.String numMappers; // required
    public java.lang.String splitBy; // required
    public java.lang.String where; // required
    public java.lang.String fileSeparator; // required
    public java.lang.String extra; // required
    public DKDBConf dkdbConf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECT((short)1, "connect"),
      USERNAME((short)2, "username"),
      PASSWORD((short)3, "password"),
      TABLE((short)4, "table"),
      H_TABLE((short)5, "hTable"),
      WRITE_MODE((short)6, "writeMode"),
      CHECK_COLUMN((short)7, "checkColumn"),
      LAST_VALUE((short)8, "lastValue"),
      NUM_MAPPERS((short)9, "numMappers"),
      SPLIT_BY((short)10, "splitBy"),
      WHERE((short)11, "where"),
      FILE_SEPARATOR((short)12, "fileSeparator"),
      EXTRA((short)13, "extra"),
      DKDB_CONF((short)14, "dkdbConf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECT
            return CONNECT;
          case 2: // USERNAME
            return USERNAME;
          case 3: // PASSWORD
            return PASSWORD;
          case 4: // TABLE
            return TABLE;
          case 5: // H_TABLE
            return H_TABLE;
          case 6: // WRITE_MODE
            return WRITE_MODE;
          case 7: // CHECK_COLUMN
            return CHECK_COLUMN;
          case 8: // LAST_VALUE
            return LAST_VALUE;
          case 9: // NUM_MAPPERS
            return NUM_MAPPERS;
          case 10: // SPLIT_BY
            return SPLIT_BY;
          case 11: // WHERE
            return WHERE;
          case 12: // FILE_SEPARATOR
            return FILE_SEPARATOR;
          case 13: // EXTRA
            return EXTRA;
          case 14: // DKDB_CONF
            return DKDB_CONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WRITEMODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECT, new org.apache.thrift.meta_data.FieldMetaData("connect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.H_TABLE, new org.apache.thrift.meta_data.FieldMetaData("hTable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WRITE_MODE, new org.apache.thrift.meta_data.FieldMetaData("writeMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CHECK_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("checkColumn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LAST_VALUE, new org.apache.thrift.meta_data.FieldMetaData("lastValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM_MAPPERS, new org.apache.thrift.meta_data.FieldMetaData("numMappers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPLIT_BY, new org.apache.thrift.meta_data.FieldMetaData("splitBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WHERE, new org.apache.thrift.meta_data.FieldMetaData("where", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_SEPARATOR, new org.apache.thrift.meta_data.FieldMetaData("fileSeparator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("extra", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKDB_CONF, new org.apache.thrift.meta_data.FieldMetaData("dkdbConf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKDBConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbIncrToHive_args.class, metaDataMap);
    }

    public dbIncrToHive_args() {
    }

    public dbIncrToHive_args(
      java.lang.String connect,
      java.lang.String username,
      java.lang.String password,
      java.lang.String table,
      java.lang.String hTable,
      int writeMode,
      java.lang.String checkColumn,
      java.lang.String lastValue,
      java.lang.String numMappers,
      java.lang.String splitBy,
      java.lang.String where,
      java.lang.String fileSeparator,
      java.lang.String extra,
      DKDBConf dkdbConf)
    {
      this();
      this.connect = connect;
      this.username = username;
      this.password = password;
      this.table = table;
      this.hTable = hTable;
      this.writeMode = writeMode;
      setWriteModeIsSet(true);
      this.checkColumn = checkColumn;
      this.lastValue = lastValue;
      this.numMappers = numMappers;
      this.splitBy = splitBy;
      this.where = where;
      this.fileSeparator = fileSeparator;
      this.extra = extra;
      this.dkdbConf = dkdbConf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbIncrToHive_args(dbIncrToHive_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetConnect()) {
        this.connect = other.connect;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetHTable()) {
        this.hTable = other.hTable;
      }
      this.writeMode = other.writeMode;
      if (other.isSetCheckColumn()) {
        this.checkColumn = other.checkColumn;
      }
      if (other.isSetLastValue()) {
        this.lastValue = other.lastValue;
      }
      if (other.isSetNumMappers()) {
        this.numMappers = other.numMappers;
      }
      if (other.isSetSplitBy()) {
        this.splitBy = other.splitBy;
      }
      if (other.isSetWhere()) {
        this.where = other.where;
      }
      if (other.isSetFileSeparator()) {
        this.fileSeparator = other.fileSeparator;
      }
      if (other.isSetExtra()) {
        this.extra = other.extra;
      }
      if (other.isSetDkdbConf()) {
        this.dkdbConf = new DKDBConf(other.dkdbConf);
      }
    }

    public dbIncrToHive_args deepCopy() {
      return new dbIncrToHive_args(this);
    }

    @Override
    public void clear() {
      this.connect = null;
      this.username = null;
      this.password = null;
      this.table = null;
      this.hTable = null;
      setWriteModeIsSet(false);
      this.writeMode = 0;
      this.checkColumn = null;
      this.lastValue = null;
      this.numMappers = null;
      this.splitBy = null;
      this.where = null;
      this.fileSeparator = null;
      this.extra = null;
      this.dkdbConf = null;
    }

    public java.lang.String getConnect() {
      return this.connect;
    }

    public dbIncrToHive_args setConnect(java.lang.String connect) {
      this.connect = connect;
      return this;
    }

    public void unsetConnect() {
      this.connect = null;
    }

    /** Returns true if field connect is set (has been assigned a value) and false otherwise */
    public boolean isSetConnect() {
      return this.connect != null;
    }

    public void setConnectIsSet(boolean value) {
      if (!value) {
        this.connect = null;
      }
    }

    public java.lang.String getUsername() {
      return this.username;
    }

    public dbIncrToHive_args setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public dbIncrToHive_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public java.lang.String getTable() {
      return this.table;
    }

    public dbIncrToHive_args setTable(java.lang.String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public java.lang.String getHTable() {
      return this.hTable;
    }

    public dbIncrToHive_args setHTable(java.lang.String hTable) {
      this.hTable = hTable;
      return this;
    }

    public void unsetHTable() {
      this.hTable = null;
    }

    /** Returns true if field hTable is set (has been assigned a value) and false otherwise */
    public boolean isSetHTable() {
      return this.hTable != null;
    }

    public void setHTableIsSet(boolean value) {
      if (!value) {
        this.hTable = null;
      }
    }

    public int getWriteMode() {
      return this.writeMode;
    }

    public dbIncrToHive_args setWriteMode(int writeMode) {
      this.writeMode = writeMode;
      setWriteModeIsSet(true);
      return this;
    }

    public void unsetWriteMode() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WRITEMODE_ISSET_ID);
    }

    /** Returns true if field writeMode is set (has been assigned a value) and false otherwise */
    public boolean isSetWriteMode() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WRITEMODE_ISSET_ID);
    }

    public void setWriteModeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WRITEMODE_ISSET_ID, value);
    }

    public java.lang.String getCheckColumn() {
      return this.checkColumn;
    }

    public dbIncrToHive_args setCheckColumn(java.lang.String checkColumn) {
      this.checkColumn = checkColumn;
      return this;
    }

    public void unsetCheckColumn() {
      this.checkColumn = null;
    }

    /** Returns true if field checkColumn is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckColumn() {
      return this.checkColumn != null;
    }

    public void setCheckColumnIsSet(boolean value) {
      if (!value) {
        this.checkColumn = null;
      }
    }

    public java.lang.String getLastValue() {
      return this.lastValue;
    }

    public dbIncrToHive_args setLastValue(java.lang.String lastValue) {
      this.lastValue = lastValue;
      return this;
    }

    public void unsetLastValue() {
      this.lastValue = null;
    }

    /** Returns true if field lastValue is set (has been assigned a value) and false otherwise */
    public boolean isSetLastValue() {
      return this.lastValue != null;
    }

    public void setLastValueIsSet(boolean value) {
      if (!value) {
        this.lastValue = null;
      }
    }

    public java.lang.String getNumMappers() {
      return this.numMappers;
    }

    public dbIncrToHive_args setNumMappers(java.lang.String numMappers) {
      this.numMappers = numMappers;
      return this;
    }

    public void unsetNumMappers() {
      this.numMappers = null;
    }

    /** Returns true if field numMappers is set (has been assigned a value) and false otherwise */
    public boolean isSetNumMappers() {
      return this.numMappers != null;
    }

    public void setNumMappersIsSet(boolean value) {
      if (!value) {
        this.numMappers = null;
      }
    }

    public java.lang.String getSplitBy() {
      return this.splitBy;
    }

    public dbIncrToHive_args setSplitBy(java.lang.String splitBy) {
      this.splitBy = splitBy;
      return this;
    }

    public void unsetSplitBy() {
      this.splitBy = null;
    }

    /** Returns true if field splitBy is set (has been assigned a value) and false otherwise */
    public boolean isSetSplitBy() {
      return this.splitBy != null;
    }

    public void setSplitByIsSet(boolean value) {
      if (!value) {
        this.splitBy = null;
      }
    }

    public java.lang.String getWhere() {
      return this.where;
    }

    public dbIncrToHive_args setWhere(java.lang.String where) {
      this.where = where;
      return this;
    }

    public void unsetWhere() {
      this.where = null;
    }

    /** Returns true if field where is set (has been assigned a value) and false otherwise */
    public boolean isSetWhere() {
      return this.where != null;
    }

    public void setWhereIsSet(boolean value) {
      if (!value) {
        this.where = null;
      }
    }

    public java.lang.String getFileSeparator() {
      return this.fileSeparator;
    }

    public dbIncrToHive_args setFileSeparator(java.lang.String fileSeparator) {
      this.fileSeparator = fileSeparator;
      return this;
    }

    public void unsetFileSeparator() {
      this.fileSeparator = null;
    }

    /** Returns true if field fileSeparator is set (has been assigned a value) and false otherwise */
    public boolean isSetFileSeparator() {
      return this.fileSeparator != null;
    }

    public void setFileSeparatorIsSet(boolean value) {
      if (!value) {
        this.fileSeparator = null;
      }
    }

    public java.lang.String getExtra() {
      return this.extra;
    }

    public dbIncrToHive_args setExtra(java.lang.String extra) {
      this.extra = extra;
      return this;
    }

    public void unsetExtra() {
      this.extra = null;
    }

    /** Returns true if field extra is set (has been assigned a value) and false otherwise */
    public boolean isSetExtra() {
      return this.extra != null;
    }

    public void setExtraIsSet(boolean value) {
      if (!value) {
        this.extra = null;
      }
    }

    public DKDBConf getDkdbConf() {
      return this.dkdbConf;
    }

    public dbIncrToHive_args setDkdbConf(DKDBConf dkdbConf) {
      this.dkdbConf = dkdbConf;
      return this;
    }

    public void unsetDkdbConf() {
      this.dkdbConf = null;
    }

    /** Returns true if field dkdbConf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkdbConf() {
      return this.dkdbConf != null;
    }

    public void setDkdbConfIsSet(boolean value) {
      if (!value) {
        this.dkdbConf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CONNECT:
        if (value == null) {
          unsetConnect();
        } else {
          setConnect((java.lang.String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((java.lang.String)value);
        }
        break;

      case H_TABLE:
        if (value == null) {
          unsetHTable();
        } else {
          setHTable((java.lang.String)value);
        }
        break;

      case WRITE_MODE:
        if (value == null) {
          unsetWriteMode();
        } else {
          setWriteMode((java.lang.Integer)value);
        }
        break;

      case CHECK_COLUMN:
        if (value == null) {
          unsetCheckColumn();
        } else {
          setCheckColumn((java.lang.String)value);
        }
        break;

      case LAST_VALUE:
        if (value == null) {
          unsetLastValue();
        } else {
          setLastValue((java.lang.String)value);
        }
        break;

      case NUM_MAPPERS:
        if (value == null) {
          unsetNumMappers();
        } else {
          setNumMappers((java.lang.String)value);
        }
        break;

      case SPLIT_BY:
        if (value == null) {
          unsetSplitBy();
        } else {
          setSplitBy((java.lang.String)value);
        }
        break;

      case WHERE:
        if (value == null) {
          unsetWhere();
        } else {
          setWhere((java.lang.String)value);
        }
        break;

      case FILE_SEPARATOR:
        if (value == null) {
          unsetFileSeparator();
        } else {
          setFileSeparator((java.lang.String)value);
        }
        break;

      case EXTRA:
        if (value == null) {
          unsetExtra();
        } else {
          setExtra((java.lang.String)value);
        }
        break;

      case DKDB_CONF:
        if (value == null) {
          unsetDkdbConf();
        } else {
          setDkdbConf((DKDBConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECT:
        return getConnect();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case TABLE:
        return getTable();

      case H_TABLE:
        return getHTable();

      case WRITE_MODE:
        return getWriteMode();

      case CHECK_COLUMN:
        return getCheckColumn();

      case LAST_VALUE:
        return getLastValue();

      case NUM_MAPPERS:
        return getNumMappers();

      case SPLIT_BY:
        return getSplitBy();

      case WHERE:
        return getWhere();

      case FILE_SEPARATOR:
        return getFileSeparator();

      case EXTRA:
        return getExtra();

      case DKDB_CONF:
        return getDkdbConf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CONNECT:
        return isSetConnect();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case TABLE:
        return isSetTable();
      case H_TABLE:
        return isSetHTable();
      case WRITE_MODE:
        return isSetWriteMode();
      case CHECK_COLUMN:
        return isSetCheckColumn();
      case LAST_VALUE:
        return isSetLastValue();
      case NUM_MAPPERS:
        return isSetNumMappers();
      case SPLIT_BY:
        return isSetSplitBy();
      case WHERE:
        return isSetWhere();
      case FILE_SEPARATOR:
        return isSetFileSeparator();
      case EXTRA:
        return isSetExtra();
      case DKDB_CONF:
        return isSetDkdbConf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dbIncrToHive_args)
        return this.equals((dbIncrToHive_args)that);
      return false;
    }

    public boolean equals(dbIncrToHive_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_connect = true && this.isSetConnect();
      boolean that_present_connect = true && that.isSetConnect();
      if (this_present_connect || that_present_connect) {
        if (!(this_present_connect && that_present_connect))
          return false;
        if (!this.connect.equals(that.connect))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_hTable = true && this.isSetHTable();
      boolean that_present_hTable = true && that.isSetHTable();
      if (this_present_hTable || that_present_hTable) {
        if (!(this_present_hTable && that_present_hTable))
          return false;
        if (!this.hTable.equals(that.hTable))
          return false;
      }

      boolean this_present_writeMode = true;
      boolean that_present_writeMode = true;
      if (this_present_writeMode || that_present_writeMode) {
        if (!(this_present_writeMode && that_present_writeMode))
          return false;
        if (this.writeMode != that.writeMode)
          return false;
      }

      boolean this_present_checkColumn = true && this.isSetCheckColumn();
      boolean that_present_checkColumn = true && that.isSetCheckColumn();
      if (this_present_checkColumn || that_present_checkColumn) {
        if (!(this_present_checkColumn && that_present_checkColumn))
          return false;
        if (!this.checkColumn.equals(that.checkColumn))
          return false;
      }

      boolean this_present_lastValue = true && this.isSetLastValue();
      boolean that_present_lastValue = true && that.isSetLastValue();
      if (this_present_lastValue || that_present_lastValue) {
        if (!(this_present_lastValue && that_present_lastValue))
          return false;
        if (!this.lastValue.equals(that.lastValue))
          return false;
      }

      boolean this_present_numMappers = true && this.isSetNumMappers();
      boolean that_present_numMappers = true && that.isSetNumMappers();
      if (this_present_numMappers || that_present_numMappers) {
        if (!(this_present_numMappers && that_present_numMappers))
          return false;
        if (!this.numMappers.equals(that.numMappers))
          return false;
      }

      boolean this_present_splitBy = true && this.isSetSplitBy();
      boolean that_present_splitBy = true && that.isSetSplitBy();
      if (this_present_splitBy || that_present_splitBy) {
        if (!(this_present_splitBy && that_present_splitBy))
          return false;
        if (!this.splitBy.equals(that.splitBy))
          return false;
      }

      boolean this_present_where = true && this.isSetWhere();
      boolean that_present_where = true && that.isSetWhere();
      if (this_present_where || that_present_where) {
        if (!(this_present_where && that_present_where))
          return false;
        if (!this.where.equals(that.where))
          return false;
      }

      boolean this_present_fileSeparator = true && this.isSetFileSeparator();
      boolean that_present_fileSeparator = true && that.isSetFileSeparator();
      if (this_present_fileSeparator || that_present_fileSeparator) {
        if (!(this_present_fileSeparator && that_present_fileSeparator))
          return false;
        if (!this.fileSeparator.equals(that.fileSeparator))
          return false;
      }

      boolean this_present_extra = true && this.isSetExtra();
      boolean that_present_extra = true && that.isSetExtra();
      if (this_present_extra || that_present_extra) {
        if (!(this_present_extra && that_present_extra))
          return false;
        if (!this.extra.equals(that.extra))
          return false;
      }

      boolean this_present_dkdbConf = true && this.isSetDkdbConf();
      boolean that_present_dkdbConf = true && that.isSetDkdbConf();
      if (this_present_dkdbConf || that_present_dkdbConf) {
        if (!(this_present_dkdbConf && that_present_dkdbConf))
          return false;
        if (!this.dkdbConf.equals(that.dkdbConf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetConnect()) ? 131071 : 524287);
      if (isSetConnect())
        hashCode = hashCode * 8191 + connect.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetHTable()) ? 131071 : 524287);
      if (isSetHTable())
        hashCode = hashCode * 8191 + hTable.hashCode();

      hashCode = hashCode * 8191 + writeMode;

      hashCode = hashCode * 8191 + ((isSetCheckColumn()) ? 131071 : 524287);
      if (isSetCheckColumn())
        hashCode = hashCode * 8191 + checkColumn.hashCode();

      hashCode = hashCode * 8191 + ((isSetLastValue()) ? 131071 : 524287);
      if (isSetLastValue())
        hashCode = hashCode * 8191 + lastValue.hashCode();

      hashCode = hashCode * 8191 + ((isSetNumMappers()) ? 131071 : 524287);
      if (isSetNumMappers())
        hashCode = hashCode * 8191 + numMappers.hashCode();

      hashCode = hashCode * 8191 + ((isSetSplitBy()) ? 131071 : 524287);
      if (isSetSplitBy())
        hashCode = hashCode * 8191 + splitBy.hashCode();

      hashCode = hashCode * 8191 + ((isSetWhere()) ? 131071 : 524287);
      if (isSetWhere())
        hashCode = hashCode * 8191 + where.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileSeparator()) ? 131071 : 524287);
      if (isSetFileSeparator())
        hashCode = hashCode * 8191 + fileSeparator.hashCode();

      hashCode = hashCode * 8191 + ((isSetExtra()) ? 131071 : 524287);
      if (isSetExtra())
        hashCode = hashCode * 8191 + extra.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkdbConf()) ? 131071 : 524287);
      if (isSetDkdbConf())
        hashCode = hashCode * 8191 + dkdbConf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dbIncrToHive_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetConnect()).compareTo(other.isSetConnect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connect, other.connect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHTable()).compareTo(other.isSetHTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hTable, other.hTable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWriteMode()).compareTo(other.isSetWriteMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWriteMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeMode, other.writeMode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCheckColumn()).compareTo(other.isSetCheckColumn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckColumn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkColumn, other.checkColumn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLastValue()).compareTo(other.isSetLastValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastValue, other.lastValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumMappers()).compareTo(other.isSetNumMappers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumMappers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numMappers, other.numMappers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSplitBy()).compareTo(other.isSetSplitBy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSplitBy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitBy, other.splitBy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWhere()).compareTo(other.isSetWhere());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhere()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.where, other.where);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileSeparator()).compareTo(other.isSetFileSeparator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileSeparator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSeparator, other.fileSeparator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExtra()).compareTo(other.isSetExtra());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtra()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra, other.extra);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkdbConf()).compareTo(other.isSetDkdbConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkdbConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkdbConf, other.dkdbConf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dbIncrToHive_args(");
      boolean first = true;

      sb.append("connect:");
      if (this.connect == null) {
        sb.append("null");
      } else {
        sb.append(this.connect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hTable:");
      if (this.hTable == null) {
        sb.append("null");
      } else {
        sb.append(this.hTable);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("writeMode:");
      sb.append(this.writeMode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkColumn:");
      if (this.checkColumn == null) {
        sb.append("null");
      } else {
        sb.append(this.checkColumn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastValue:");
      if (this.lastValue == null) {
        sb.append("null");
      } else {
        sb.append(this.lastValue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numMappers:");
      if (this.numMappers == null) {
        sb.append("null");
      } else {
        sb.append(this.numMappers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("splitBy:");
      if (this.splitBy == null) {
        sb.append("null");
      } else {
        sb.append(this.splitBy);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("where:");
      if (this.where == null) {
        sb.append("null");
      } else {
        sb.append(this.where);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileSeparator:");
      if (this.fileSeparator == null) {
        sb.append("null");
      } else {
        sb.append(this.fileSeparator);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("extra:");
      if (this.extra == null) {
        sb.append("null");
      } else {
        sb.append(this.extra);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkdbConf:");
      if (this.dkdbConf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkdbConf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkdbConf != null) {
        dkdbConf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbIncrToHive_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbIncrToHive_argsStandardScheme getScheme() {
        return new dbIncrToHive_argsStandardScheme();
      }
    }

    private static class dbIncrToHive_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<dbIncrToHive_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbIncrToHive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.connect = iprot.readString();
                struct.setConnectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // H_TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hTable = iprot.readString();
                struct.setHTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // WRITE_MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.writeMode = iprot.readI32();
                struct.setWriteModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // CHECK_COLUMN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.checkColumn = iprot.readString();
                struct.setCheckColumnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // LAST_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lastValue = iprot.readString();
                struct.setLastValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // NUM_MAPPERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.numMappers = iprot.readString();
                struct.setNumMappersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // SPLIT_BY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.splitBy = iprot.readString();
                struct.setSplitByIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // WHERE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.where = iprot.readString();
                struct.setWhereIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // FILE_SEPARATOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileSeparator = iprot.readString();
                struct.setFileSeparatorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // EXTRA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.extra = iprot.readString();
                struct.setExtraIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // DKDB_CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkdbConf = new DKDBConf();
                struct.dkdbConf.read(iprot);
                struct.setDkdbConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbIncrToHive_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connect != null) {
          oprot.writeFieldBegin(CONNECT_FIELD_DESC);
          oprot.writeString(struct.connect);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.hTable != null) {
          oprot.writeFieldBegin(H_TABLE_FIELD_DESC);
          oprot.writeString(struct.hTable);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WRITE_MODE_FIELD_DESC);
        oprot.writeI32(struct.writeMode);
        oprot.writeFieldEnd();
        if (struct.checkColumn != null) {
          oprot.writeFieldBegin(CHECK_COLUMN_FIELD_DESC);
          oprot.writeString(struct.checkColumn);
          oprot.writeFieldEnd();
        }
        if (struct.lastValue != null) {
          oprot.writeFieldBegin(LAST_VALUE_FIELD_DESC);
          oprot.writeString(struct.lastValue);
          oprot.writeFieldEnd();
        }
        if (struct.numMappers != null) {
          oprot.writeFieldBegin(NUM_MAPPERS_FIELD_DESC);
          oprot.writeString(struct.numMappers);
          oprot.writeFieldEnd();
        }
        if (struct.splitBy != null) {
          oprot.writeFieldBegin(SPLIT_BY_FIELD_DESC);
          oprot.writeString(struct.splitBy);
          oprot.writeFieldEnd();
        }
        if (struct.where != null) {
          oprot.writeFieldBegin(WHERE_FIELD_DESC);
          oprot.writeString(struct.where);
          oprot.writeFieldEnd();
        }
        if (struct.fileSeparator != null) {
          oprot.writeFieldBegin(FILE_SEPARATOR_FIELD_DESC);
          oprot.writeString(struct.fileSeparator);
          oprot.writeFieldEnd();
        }
        if (struct.extra != null) {
          oprot.writeFieldBegin(EXTRA_FIELD_DESC);
          oprot.writeString(struct.extra);
          oprot.writeFieldEnd();
        }
        if (struct.dkdbConf != null) {
          oprot.writeFieldBegin(DKDB_CONF_FIELD_DESC);
          struct.dkdbConf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbIncrToHive_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbIncrToHive_argsTupleScheme getScheme() {
        return new dbIncrToHive_argsTupleScheme();
      }
    }

    private static class dbIncrToHive_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<dbIncrToHive_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbIncrToHive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetConnect()) {
          optionals.set(0);
        }
        if (struct.isSetUsername()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        if (struct.isSetTable()) {
          optionals.set(3);
        }
        if (struct.isSetHTable()) {
          optionals.set(4);
        }
        if (struct.isSetWriteMode()) {
          optionals.set(5);
        }
        if (struct.isSetCheckColumn()) {
          optionals.set(6);
        }
        if (struct.isSetLastValue()) {
          optionals.set(7);
        }
        if (struct.isSetNumMappers()) {
          optionals.set(8);
        }
        if (struct.isSetSplitBy()) {
          optionals.set(9);
        }
        if (struct.isSetWhere()) {
          optionals.set(10);
        }
        if (struct.isSetFileSeparator()) {
          optionals.set(11);
        }
        if (struct.isSetExtra()) {
          optionals.set(12);
        }
        if (struct.isSetDkdbConf()) {
          optionals.set(13);
        }
        oprot.writeBitSet(optionals, 14);
        if (struct.isSetConnect()) {
          oprot.writeString(struct.connect);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetHTable()) {
          oprot.writeString(struct.hTable);
        }
        if (struct.isSetWriteMode()) {
          oprot.writeI32(struct.writeMode);
        }
        if (struct.isSetCheckColumn()) {
          oprot.writeString(struct.checkColumn);
        }
        if (struct.isSetLastValue()) {
          oprot.writeString(struct.lastValue);
        }
        if (struct.isSetNumMappers()) {
          oprot.writeString(struct.numMappers);
        }
        if (struct.isSetSplitBy()) {
          oprot.writeString(struct.splitBy);
        }
        if (struct.isSetWhere()) {
          oprot.writeString(struct.where);
        }
        if (struct.isSetFileSeparator()) {
          oprot.writeString(struct.fileSeparator);
        }
        if (struct.isSetExtra()) {
          oprot.writeString(struct.extra);
        }
        if (struct.isSetDkdbConf()) {
          struct.dkdbConf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbIncrToHive_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(14);
        if (incoming.get(0)) {
          struct.connect = iprot.readString();
          struct.setConnectIsSet(true);
        }
        if (incoming.get(1)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(3)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(4)) {
          struct.hTable = iprot.readString();
          struct.setHTableIsSet(true);
        }
        if (incoming.get(5)) {
          struct.writeMode = iprot.readI32();
          struct.setWriteModeIsSet(true);
        }
        if (incoming.get(6)) {
          struct.checkColumn = iprot.readString();
          struct.setCheckColumnIsSet(true);
        }
        if (incoming.get(7)) {
          struct.lastValue = iprot.readString();
          struct.setLastValueIsSet(true);
        }
        if (incoming.get(8)) {
          struct.numMappers = iprot.readString();
          struct.setNumMappersIsSet(true);
        }
        if (incoming.get(9)) {
          struct.splitBy = iprot.readString();
          struct.setSplitByIsSet(true);
        }
        if (incoming.get(10)) {
          struct.where = iprot.readString();
          struct.setWhereIsSet(true);
        }
        if (incoming.get(11)) {
          struct.fileSeparator = iprot.readString();
          struct.setFileSeparatorIsSet(true);
        }
        if (incoming.get(12)) {
          struct.extra = iprot.readString();
          struct.setExtraIsSet(true);
        }
        if (incoming.get(13)) {
          struct.dkdbConf = new DKDBConf();
          struct.dkdbConf.read(iprot);
          struct.setDkdbConfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dbIncrToHive_result implements org.apache.thrift.TBase<dbIncrToHive_result, dbIncrToHive_result._Fields>, java.io.Serializable, Cloneable, Comparable<dbIncrToHive_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbIncrToHive_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dbIncrToHive_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dbIncrToHive_resultTupleSchemeFactory();

    public ResultEntity success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbIncrToHive_result.class, metaDataMap);
    }

    public dbIncrToHive_result() {
    }

    public dbIncrToHive_result(
      ResultEntity success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbIncrToHive_result(dbIncrToHive_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultEntity(other.success);
      }
    }

    public dbIncrToHive_result deepCopy() {
      return new dbIncrToHive_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultEntity getSuccess() {
      return this.success;
    }

    public dbIncrToHive_result setSuccess(ResultEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultEntity)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dbIncrToHive_result)
        return this.equals((dbIncrToHive_result)that);
      return false;
    }

    public boolean equals(dbIncrToHive_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dbIncrToHive_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dbIncrToHive_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbIncrToHive_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbIncrToHive_resultStandardScheme getScheme() {
        return new dbIncrToHive_resultStandardScheme();
      }
    }

    private static class dbIncrToHive_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<dbIncrToHive_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbIncrToHive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbIncrToHive_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbIncrToHive_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbIncrToHive_resultTupleScheme getScheme() {
        return new dbIncrToHive_resultTupleScheme();
      }
    }

    private static class dbIncrToHive_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<dbIncrToHive_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbIncrToHive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbIncrToHive_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dbFullToHbase_args implements org.apache.thrift.TBase<dbFullToHbase_args, dbFullToHbase_args._Fields>, java.io.Serializable, Cloneable, Comparable<dbFullToHbase_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbFullToHbase_args");

    private static final org.apache.thrift.protocol.TField CONNECT_FIELD_DESC = new org.apache.thrift.protocol.TField("connect", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField H_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("hTable", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField COL_FIELD_DESC = new org.apache.thrift.protocol.TField("col", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("family", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField NUM_MAPPERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numMappers", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField SPLIT_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("splitBy", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField WHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("where", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField DKDB_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkdbConf", org.apache.thrift.protocol.TType.STRUCT, (short)12);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dbFullToHbase_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dbFullToHbase_argsTupleSchemeFactory();

    public java.lang.String connect; // required
    public java.lang.String username; // required
    public java.lang.String password; // required
    public java.lang.String table; // required
    public java.lang.String hTable; // required
    public java.lang.String col; // required
    public java.lang.String family; // required
    public java.lang.String numMappers; // required
    public java.lang.String splitBy; // required
    public java.lang.String where; // required
    public java.lang.String extra; // required
    public DKDBConf dkdbConf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECT((short)1, "connect"),
      USERNAME((short)2, "username"),
      PASSWORD((short)3, "password"),
      TABLE((short)4, "table"),
      H_TABLE((short)5, "hTable"),
      COL((short)6, "col"),
      FAMILY((short)7, "family"),
      NUM_MAPPERS((short)8, "numMappers"),
      SPLIT_BY((short)9, "splitBy"),
      WHERE((short)10, "where"),
      EXTRA((short)11, "extra"),
      DKDB_CONF((short)12, "dkdbConf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECT
            return CONNECT;
          case 2: // USERNAME
            return USERNAME;
          case 3: // PASSWORD
            return PASSWORD;
          case 4: // TABLE
            return TABLE;
          case 5: // H_TABLE
            return H_TABLE;
          case 6: // COL
            return COL;
          case 7: // FAMILY
            return FAMILY;
          case 8: // NUM_MAPPERS
            return NUM_MAPPERS;
          case 9: // SPLIT_BY
            return SPLIT_BY;
          case 10: // WHERE
            return WHERE;
          case 11: // EXTRA
            return EXTRA;
          case 12: // DKDB_CONF
            return DKDB_CONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECT, new org.apache.thrift.meta_data.FieldMetaData("connect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.H_TABLE, new org.apache.thrift.meta_data.FieldMetaData("hTable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COL, new org.apache.thrift.meta_data.FieldMetaData("col", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FAMILY, new org.apache.thrift.meta_data.FieldMetaData("family", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM_MAPPERS, new org.apache.thrift.meta_data.FieldMetaData("numMappers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPLIT_BY, new org.apache.thrift.meta_data.FieldMetaData("splitBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WHERE, new org.apache.thrift.meta_data.FieldMetaData("where", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("extra", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKDB_CONF, new org.apache.thrift.meta_data.FieldMetaData("dkdbConf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKDBConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbFullToHbase_args.class, metaDataMap);
    }

    public dbFullToHbase_args() {
    }

    public dbFullToHbase_args(
      java.lang.String connect,
      java.lang.String username,
      java.lang.String password,
      java.lang.String table,
      java.lang.String hTable,
      java.lang.String col,
      java.lang.String family,
      java.lang.String numMappers,
      java.lang.String splitBy,
      java.lang.String where,
      java.lang.String extra,
      DKDBConf dkdbConf)
    {
      this();
      this.connect = connect;
      this.username = username;
      this.password = password;
      this.table = table;
      this.hTable = hTable;
      this.col = col;
      this.family = family;
      this.numMappers = numMappers;
      this.splitBy = splitBy;
      this.where = where;
      this.extra = extra;
      this.dkdbConf = dkdbConf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbFullToHbase_args(dbFullToHbase_args other) {
      if (other.isSetConnect()) {
        this.connect = other.connect;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetHTable()) {
        this.hTable = other.hTable;
      }
      if (other.isSetCol()) {
        this.col = other.col;
      }
      if (other.isSetFamily()) {
        this.family = other.family;
      }
      if (other.isSetNumMappers()) {
        this.numMappers = other.numMappers;
      }
      if (other.isSetSplitBy()) {
        this.splitBy = other.splitBy;
      }
      if (other.isSetWhere()) {
        this.where = other.where;
      }
      if (other.isSetExtra()) {
        this.extra = other.extra;
      }
      if (other.isSetDkdbConf()) {
        this.dkdbConf = new DKDBConf(other.dkdbConf);
      }
    }

    public dbFullToHbase_args deepCopy() {
      return new dbFullToHbase_args(this);
    }

    @Override
    public void clear() {
      this.connect = null;
      this.username = null;
      this.password = null;
      this.table = null;
      this.hTable = null;
      this.col = null;
      this.family = null;
      this.numMappers = null;
      this.splitBy = null;
      this.where = null;
      this.extra = null;
      this.dkdbConf = null;
    }

    public java.lang.String getConnect() {
      return this.connect;
    }

    public dbFullToHbase_args setConnect(java.lang.String connect) {
      this.connect = connect;
      return this;
    }

    public void unsetConnect() {
      this.connect = null;
    }

    /** Returns true if field connect is set (has been assigned a value) and false otherwise */
    public boolean isSetConnect() {
      return this.connect != null;
    }

    public void setConnectIsSet(boolean value) {
      if (!value) {
        this.connect = null;
      }
    }

    public java.lang.String getUsername() {
      return this.username;
    }

    public dbFullToHbase_args setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public dbFullToHbase_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public java.lang.String getTable() {
      return this.table;
    }

    public dbFullToHbase_args setTable(java.lang.String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public java.lang.String getHTable() {
      return this.hTable;
    }

    public dbFullToHbase_args setHTable(java.lang.String hTable) {
      this.hTable = hTable;
      return this;
    }

    public void unsetHTable() {
      this.hTable = null;
    }

    /** Returns true if field hTable is set (has been assigned a value) and false otherwise */
    public boolean isSetHTable() {
      return this.hTable != null;
    }

    public void setHTableIsSet(boolean value) {
      if (!value) {
        this.hTable = null;
      }
    }

    public java.lang.String getCol() {
      return this.col;
    }

    public dbFullToHbase_args setCol(java.lang.String col) {
      this.col = col;
      return this;
    }

    public void unsetCol() {
      this.col = null;
    }

    /** Returns true if field col is set (has been assigned a value) and false otherwise */
    public boolean isSetCol() {
      return this.col != null;
    }

    public void setColIsSet(boolean value) {
      if (!value) {
        this.col = null;
      }
    }

    public java.lang.String getFamily() {
      return this.family;
    }

    public dbFullToHbase_args setFamily(java.lang.String family) {
      this.family = family;
      return this;
    }

    public void unsetFamily() {
      this.family = null;
    }

    /** Returns true if field family is set (has been assigned a value) and false otherwise */
    public boolean isSetFamily() {
      return this.family != null;
    }

    public void setFamilyIsSet(boolean value) {
      if (!value) {
        this.family = null;
      }
    }

    public java.lang.String getNumMappers() {
      return this.numMappers;
    }

    public dbFullToHbase_args setNumMappers(java.lang.String numMappers) {
      this.numMappers = numMappers;
      return this;
    }

    public void unsetNumMappers() {
      this.numMappers = null;
    }

    /** Returns true if field numMappers is set (has been assigned a value) and false otherwise */
    public boolean isSetNumMappers() {
      return this.numMappers != null;
    }

    public void setNumMappersIsSet(boolean value) {
      if (!value) {
        this.numMappers = null;
      }
    }

    public java.lang.String getSplitBy() {
      return this.splitBy;
    }

    public dbFullToHbase_args setSplitBy(java.lang.String splitBy) {
      this.splitBy = splitBy;
      return this;
    }

    public void unsetSplitBy() {
      this.splitBy = null;
    }

    /** Returns true if field splitBy is set (has been assigned a value) and false otherwise */
    public boolean isSetSplitBy() {
      return this.splitBy != null;
    }

    public void setSplitByIsSet(boolean value) {
      if (!value) {
        this.splitBy = null;
      }
    }

    public java.lang.String getWhere() {
      return this.where;
    }

    public dbFullToHbase_args setWhere(java.lang.String where) {
      this.where = where;
      return this;
    }

    public void unsetWhere() {
      this.where = null;
    }

    /** Returns true if field where is set (has been assigned a value) and false otherwise */
    public boolean isSetWhere() {
      return this.where != null;
    }

    public void setWhereIsSet(boolean value) {
      if (!value) {
        this.where = null;
      }
    }

    public java.lang.String getExtra() {
      return this.extra;
    }

    public dbFullToHbase_args setExtra(java.lang.String extra) {
      this.extra = extra;
      return this;
    }

    public void unsetExtra() {
      this.extra = null;
    }

    /** Returns true if field extra is set (has been assigned a value) and false otherwise */
    public boolean isSetExtra() {
      return this.extra != null;
    }

    public void setExtraIsSet(boolean value) {
      if (!value) {
        this.extra = null;
      }
    }

    public DKDBConf getDkdbConf() {
      return this.dkdbConf;
    }

    public dbFullToHbase_args setDkdbConf(DKDBConf dkdbConf) {
      this.dkdbConf = dkdbConf;
      return this;
    }

    public void unsetDkdbConf() {
      this.dkdbConf = null;
    }

    /** Returns true if field dkdbConf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkdbConf() {
      return this.dkdbConf != null;
    }

    public void setDkdbConfIsSet(boolean value) {
      if (!value) {
        this.dkdbConf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CONNECT:
        if (value == null) {
          unsetConnect();
        } else {
          setConnect((java.lang.String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((java.lang.String)value);
        }
        break;

      case H_TABLE:
        if (value == null) {
          unsetHTable();
        } else {
          setHTable((java.lang.String)value);
        }
        break;

      case COL:
        if (value == null) {
          unsetCol();
        } else {
          setCol((java.lang.String)value);
        }
        break;

      case FAMILY:
        if (value == null) {
          unsetFamily();
        } else {
          setFamily((java.lang.String)value);
        }
        break;

      case NUM_MAPPERS:
        if (value == null) {
          unsetNumMappers();
        } else {
          setNumMappers((java.lang.String)value);
        }
        break;

      case SPLIT_BY:
        if (value == null) {
          unsetSplitBy();
        } else {
          setSplitBy((java.lang.String)value);
        }
        break;

      case WHERE:
        if (value == null) {
          unsetWhere();
        } else {
          setWhere((java.lang.String)value);
        }
        break;

      case EXTRA:
        if (value == null) {
          unsetExtra();
        } else {
          setExtra((java.lang.String)value);
        }
        break;

      case DKDB_CONF:
        if (value == null) {
          unsetDkdbConf();
        } else {
          setDkdbConf((DKDBConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECT:
        return getConnect();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case TABLE:
        return getTable();

      case H_TABLE:
        return getHTable();

      case COL:
        return getCol();

      case FAMILY:
        return getFamily();

      case NUM_MAPPERS:
        return getNumMappers();

      case SPLIT_BY:
        return getSplitBy();

      case WHERE:
        return getWhere();

      case EXTRA:
        return getExtra();

      case DKDB_CONF:
        return getDkdbConf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CONNECT:
        return isSetConnect();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case TABLE:
        return isSetTable();
      case H_TABLE:
        return isSetHTable();
      case COL:
        return isSetCol();
      case FAMILY:
        return isSetFamily();
      case NUM_MAPPERS:
        return isSetNumMappers();
      case SPLIT_BY:
        return isSetSplitBy();
      case WHERE:
        return isSetWhere();
      case EXTRA:
        return isSetExtra();
      case DKDB_CONF:
        return isSetDkdbConf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dbFullToHbase_args)
        return this.equals((dbFullToHbase_args)that);
      return false;
    }

    public boolean equals(dbFullToHbase_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_connect = true && this.isSetConnect();
      boolean that_present_connect = true && that.isSetConnect();
      if (this_present_connect || that_present_connect) {
        if (!(this_present_connect && that_present_connect))
          return false;
        if (!this.connect.equals(that.connect))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_hTable = true && this.isSetHTable();
      boolean that_present_hTable = true && that.isSetHTable();
      if (this_present_hTable || that_present_hTable) {
        if (!(this_present_hTable && that_present_hTable))
          return false;
        if (!this.hTable.equals(that.hTable))
          return false;
      }

      boolean this_present_col = true && this.isSetCol();
      boolean that_present_col = true && that.isSetCol();
      if (this_present_col || that_present_col) {
        if (!(this_present_col && that_present_col))
          return false;
        if (!this.col.equals(that.col))
          return false;
      }

      boolean this_present_family = true && this.isSetFamily();
      boolean that_present_family = true && that.isSetFamily();
      if (this_present_family || that_present_family) {
        if (!(this_present_family && that_present_family))
          return false;
        if (!this.family.equals(that.family))
          return false;
      }

      boolean this_present_numMappers = true && this.isSetNumMappers();
      boolean that_present_numMappers = true && that.isSetNumMappers();
      if (this_present_numMappers || that_present_numMappers) {
        if (!(this_present_numMappers && that_present_numMappers))
          return false;
        if (!this.numMappers.equals(that.numMappers))
          return false;
      }

      boolean this_present_splitBy = true && this.isSetSplitBy();
      boolean that_present_splitBy = true && that.isSetSplitBy();
      if (this_present_splitBy || that_present_splitBy) {
        if (!(this_present_splitBy && that_present_splitBy))
          return false;
        if (!this.splitBy.equals(that.splitBy))
          return false;
      }

      boolean this_present_where = true && this.isSetWhere();
      boolean that_present_where = true && that.isSetWhere();
      if (this_present_where || that_present_where) {
        if (!(this_present_where && that_present_where))
          return false;
        if (!this.where.equals(that.where))
          return false;
      }

      boolean this_present_extra = true && this.isSetExtra();
      boolean that_present_extra = true && that.isSetExtra();
      if (this_present_extra || that_present_extra) {
        if (!(this_present_extra && that_present_extra))
          return false;
        if (!this.extra.equals(that.extra))
          return false;
      }

      boolean this_present_dkdbConf = true && this.isSetDkdbConf();
      boolean that_present_dkdbConf = true && that.isSetDkdbConf();
      if (this_present_dkdbConf || that_present_dkdbConf) {
        if (!(this_present_dkdbConf && that_present_dkdbConf))
          return false;
        if (!this.dkdbConf.equals(that.dkdbConf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetConnect()) ? 131071 : 524287);
      if (isSetConnect())
        hashCode = hashCode * 8191 + connect.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetHTable()) ? 131071 : 524287);
      if (isSetHTable())
        hashCode = hashCode * 8191 + hTable.hashCode();

      hashCode = hashCode * 8191 + ((isSetCol()) ? 131071 : 524287);
      if (isSetCol())
        hashCode = hashCode * 8191 + col.hashCode();

      hashCode = hashCode * 8191 + ((isSetFamily()) ? 131071 : 524287);
      if (isSetFamily())
        hashCode = hashCode * 8191 + family.hashCode();

      hashCode = hashCode * 8191 + ((isSetNumMappers()) ? 131071 : 524287);
      if (isSetNumMappers())
        hashCode = hashCode * 8191 + numMappers.hashCode();

      hashCode = hashCode * 8191 + ((isSetSplitBy()) ? 131071 : 524287);
      if (isSetSplitBy())
        hashCode = hashCode * 8191 + splitBy.hashCode();

      hashCode = hashCode * 8191 + ((isSetWhere()) ? 131071 : 524287);
      if (isSetWhere())
        hashCode = hashCode * 8191 + where.hashCode();

      hashCode = hashCode * 8191 + ((isSetExtra()) ? 131071 : 524287);
      if (isSetExtra())
        hashCode = hashCode * 8191 + extra.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkdbConf()) ? 131071 : 524287);
      if (isSetDkdbConf())
        hashCode = hashCode * 8191 + dkdbConf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dbFullToHbase_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetConnect()).compareTo(other.isSetConnect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connect, other.connect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHTable()).compareTo(other.isSetHTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hTable, other.hTable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCol()).compareTo(other.isSetCol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col, other.col);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFamily()).compareTo(other.isSetFamily());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFamily()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.family, other.family);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumMappers()).compareTo(other.isSetNumMappers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumMappers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numMappers, other.numMappers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSplitBy()).compareTo(other.isSetSplitBy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSplitBy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitBy, other.splitBy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWhere()).compareTo(other.isSetWhere());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhere()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.where, other.where);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExtra()).compareTo(other.isSetExtra());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtra()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra, other.extra);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkdbConf()).compareTo(other.isSetDkdbConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkdbConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkdbConf, other.dkdbConf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dbFullToHbase_args(");
      boolean first = true;

      sb.append("connect:");
      if (this.connect == null) {
        sb.append("null");
      } else {
        sb.append(this.connect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hTable:");
      if (this.hTable == null) {
        sb.append("null");
      } else {
        sb.append(this.hTable);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("col:");
      if (this.col == null) {
        sb.append("null");
      } else {
        sb.append(this.col);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("family:");
      if (this.family == null) {
        sb.append("null");
      } else {
        sb.append(this.family);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numMappers:");
      if (this.numMappers == null) {
        sb.append("null");
      } else {
        sb.append(this.numMappers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("splitBy:");
      if (this.splitBy == null) {
        sb.append("null");
      } else {
        sb.append(this.splitBy);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("where:");
      if (this.where == null) {
        sb.append("null");
      } else {
        sb.append(this.where);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("extra:");
      if (this.extra == null) {
        sb.append("null");
      } else {
        sb.append(this.extra);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkdbConf:");
      if (this.dkdbConf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkdbConf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkdbConf != null) {
        dkdbConf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbFullToHbase_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbFullToHbase_argsStandardScheme getScheme() {
        return new dbFullToHbase_argsStandardScheme();
      }
    }

    private static class dbFullToHbase_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<dbFullToHbase_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbFullToHbase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.connect = iprot.readString();
                struct.setConnectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // H_TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hTable = iprot.readString();
                struct.setHTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // COL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.col = iprot.readString();
                struct.setColIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // FAMILY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.family = iprot.readString();
                struct.setFamilyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // NUM_MAPPERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.numMappers = iprot.readString();
                struct.setNumMappersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // SPLIT_BY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.splitBy = iprot.readString();
                struct.setSplitByIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // WHERE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.where = iprot.readString();
                struct.setWhereIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // EXTRA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.extra = iprot.readString();
                struct.setExtraIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // DKDB_CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkdbConf = new DKDBConf();
                struct.dkdbConf.read(iprot);
                struct.setDkdbConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbFullToHbase_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connect != null) {
          oprot.writeFieldBegin(CONNECT_FIELD_DESC);
          oprot.writeString(struct.connect);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.hTable != null) {
          oprot.writeFieldBegin(H_TABLE_FIELD_DESC);
          oprot.writeString(struct.hTable);
          oprot.writeFieldEnd();
        }
        if (struct.col != null) {
          oprot.writeFieldBegin(COL_FIELD_DESC);
          oprot.writeString(struct.col);
          oprot.writeFieldEnd();
        }
        if (struct.family != null) {
          oprot.writeFieldBegin(FAMILY_FIELD_DESC);
          oprot.writeString(struct.family);
          oprot.writeFieldEnd();
        }
        if (struct.numMappers != null) {
          oprot.writeFieldBegin(NUM_MAPPERS_FIELD_DESC);
          oprot.writeString(struct.numMappers);
          oprot.writeFieldEnd();
        }
        if (struct.splitBy != null) {
          oprot.writeFieldBegin(SPLIT_BY_FIELD_DESC);
          oprot.writeString(struct.splitBy);
          oprot.writeFieldEnd();
        }
        if (struct.where != null) {
          oprot.writeFieldBegin(WHERE_FIELD_DESC);
          oprot.writeString(struct.where);
          oprot.writeFieldEnd();
        }
        if (struct.extra != null) {
          oprot.writeFieldBegin(EXTRA_FIELD_DESC);
          oprot.writeString(struct.extra);
          oprot.writeFieldEnd();
        }
        if (struct.dkdbConf != null) {
          oprot.writeFieldBegin(DKDB_CONF_FIELD_DESC);
          struct.dkdbConf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbFullToHbase_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbFullToHbase_argsTupleScheme getScheme() {
        return new dbFullToHbase_argsTupleScheme();
      }
    }

    private static class dbFullToHbase_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<dbFullToHbase_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbFullToHbase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetConnect()) {
          optionals.set(0);
        }
        if (struct.isSetUsername()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        if (struct.isSetTable()) {
          optionals.set(3);
        }
        if (struct.isSetHTable()) {
          optionals.set(4);
        }
        if (struct.isSetCol()) {
          optionals.set(5);
        }
        if (struct.isSetFamily()) {
          optionals.set(6);
        }
        if (struct.isSetNumMappers()) {
          optionals.set(7);
        }
        if (struct.isSetSplitBy()) {
          optionals.set(8);
        }
        if (struct.isSetWhere()) {
          optionals.set(9);
        }
        if (struct.isSetExtra()) {
          optionals.set(10);
        }
        if (struct.isSetDkdbConf()) {
          optionals.set(11);
        }
        oprot.writeBitSet(optionals, 12);
        if (struct.isSetConnect()) {
          oprot.writeString(struct.connect);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetHTable()) {
          oprot.writeString(struct.hTable);
        }
        if (struct.isSetCol()) {
          oprot.writeString(struct.col);
        }
        if (struct.isSetFamily()) {
          oprot.writeString(struct.family);
        }
        if (struct.isSetNumMappers()) {
          oprot.writeString(struct.numMappers);
        }
        if (struct.isSetSplitBy()) {
          oprot.writeString(struct.splitBy);
        }
        if (struct.isSetWhere()) {
          oprot.writeString(struct.where);
        }
        if (struct.isSetExtra()) {
          oprot.writeString(struct.extra);
        }
        if (struct.isSetDkdbConf()) {
          struct.dkdbConf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbFullToHbase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(12);
        if (incoming.get(0)) {
          struct.connect = iprot.readString();
          struct.setConnectIsSet(true);
        }
        if (incoming.get(1)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(3)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(4)) {
          struct.hTable = iprot.readString();
          struct.setHTableIsSet(true);
        }
        if (incoming.get(5)) {
          struct.col = iprot.readString();
          struct.setColIsSet(true);
        }
        if (incoming.get(6)) {
          struct.family = iprot.readString();
          struct.setFamilyIsSet(true);
        }
        if (incoming.get(7)) {
          struct.numMappers = iprot.readString();
          struct.setNumMappersIsSet(true);
        }
        if (incoming.get(8)) {
          struct.splitBy = iprot.readString();
          struct.setSplitByIsSet(true);
        }
        if (incoming.get(9)) {
          struct.where = iprot.readString();
          struct.setWhereIsSet(true);
        }
        if (incoming.get(10)) {
          struct.extra = iprot.readString();
          struct.setExtraIsSet(true);
        }
        if (incoming.get(11)) {
          struct.dkdbConf = new DKDBConf();
          struct.dkdbConf.read(iprot);
          struct.setDkdbConfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dbFullToHbase_result implements org.apache.thrift.TBase<dbFullToHbase_result, dbFullToHbase_result._Fields>, java.io.Serializable, Cloneable, Comparable<dbFullToHbase_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbFullToHbase_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dbFullToHbase_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dbFullToHbase_resultTupleSchemeFactory();

    public ResultEntity success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbFullToHbase_result.class, metaDataMap);
    }

    public dbFullToHbase_result() {
    }

    public dbFullToHbase_result(
      ResultEntity success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbFullToHbase_result(dbFullToHbase_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultEntity(other.success);
      }
    }

    public dbFullToHbase_result deepCopy() {
      return new dbFullToHbase_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultEntity getSuccess() {
      return this.success;
    }

    public dbFullToHbase_result setSuccess(ResultEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultEntity)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dbFullToHbase_result)
        return this.equals((dbFullToHbase_result)that);
      return false;
    }

    public boolean equals(dbFullToHbase_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dbFullToHbase_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dbFullToHbase_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbFullToHbase_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbFullToHbase_resultStandardScheme getScheme() {
        return new dbFullToHbase_resultStandardScheme();
      }
    }

    private static class dbFullToHbase_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<dbFullToHbase_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbFullToHbase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbFullToHbase_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbFullToHbase_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbFullToHbase_resultTupleScheme getScheme() {
        return new dbFullToHbase_resultTupleScheme();
      }
    }

    private static class dbFullToHbase_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<dbFullToHbase_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbFullToHbase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbFullToHbase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dbIncrToHbase_args implements org.apache.thrift.TBase<dbIncrToHbase_args, dbIncrToHbase_args._Fields>, java.io.Serializable, Cloneable, Comparable<dbIncrToHbase_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbIncrToHbase_args");

    private static final org.apache.thrift.protocol.TField CONNECT_FIELD_DESC = new org.apache.thrift.protocol.TField("connect", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField H_TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("hTable", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField COL_FIELD_DESC = new org.apache.thrift.protocol.TField("col", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField FAMILY_FIELD_DESC = new org.apache.thrift.protocol.TField("family", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField WRITE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("writeMode", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField CHECK_COLUMN_FIELD_DESC = new org.apache.thrift.protocol.TField("checkColumn", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField LAST_VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("lastValue", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField NUM_MAPPERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numMappers", org.apache.thrift.protocol.TType.STRING, (short)11);
    private static final org.apache.thrift.protocol.TField SPLIT_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("splitBy", org.apache.thrift.protocol.TType.STRING, (short)12);
    private static final org.apache.thrift.protocol.TField WHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("where", org.apache.thrift.protocol.TType.STRING, (short)13);
    private static final org.apache.thrift.protocol.TField EXTRA_FIELD_DESC = new org.apache.thrift.protocol.TField("extra", org.apache.thrift.protocol.TType.STRING, (short)14);
    private static final org.apache.thrift.protocol.TField DKDB_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkdbConf", org.apache.thrift.protocol.TType.STRUCT, (short)15);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dbIncrToHbase_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dbIncrToHbase_argsTupleSchemeFactory();

    public java.lang.String connect; // required
    public java.lang.String username; // required
    public java.lang.String password; // required
    public java.lang.String table; // required
    public java.lang.String hTable; // required
    public java.lang.String col; // required
    public java.lang.String family; // required
    public int writeMode; // required
    public java.lang.String checkColumn; // required
    public java.lang.String lastValue; // required
    public java.lang.String numMappers; // required
    public java.lang.String splitBy; // required
    public java.lang.String where; // required
    public java.lang.String extra; // required
    public DKDBConf dkdbConf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECT((short)1, "connect"),
      USERNAME((short)2, "username"),
      PASSWORD((short)3, "password"),
      TABLE((short)4, "table"),
      H_TABLE((short)5, "hTable"),
      COL((short)6, "col"),
      FAMILY((short)7, "family"),
      WRITE_MODE((short)8, "writeMode"),
      CHECK_COLUMN((short)9, "checkColumn"),
      LAST_VALUE((short)10, "lastValue"),
      NUM_MAPPERS((short)11, "numMappers"),
      SPLIT_BY((short)12, "splitBy"),
      WHERE((short)13, "where"),
      EXTRA((short)14, "extra"),
      DKDB_CONF((short)15, "dkdbConf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECT
            return CONNECT;
          case 2: // USERNAME
            return USERNAME;
          case 3: // PASSWORD
            return PASSWORD;
          case 4: // TABLE
            return TABLE;
          case 5: // H_TABLE
            return H_TABLE;
          case 6: // COL
            return COL;
          case 7: // FAMILY
            return FAMILY;
          case 8: // WRITE_MODE
            return WRITE_MODE;
          case 9: // CHECK_COLUMN
            return CHECK_COLUMN;
          case 10: // LAST_VALUE
            return LAST_VALUE;
          case 11: // NUM_MAPPERS
            return NUM_MAPPERS;
          case 12: // SPLIT_BY
            return SPLIT_BY;
          case 13: // WHERE
            return WHERE;
          case 14: // EXTRA
            return EXTRA;
          case 15: // DKDB_CONF
            return DKDB_CONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __WRITEMODE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECT, new org.apache.thrift.meta_data.FieldMetaData("connect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.H_TABLE, new org.apache.thrift.meta_data.FieldMetaData("hTable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.COL, new org.apache.thrift.meta_data.FieldMetaData("col", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FAMILY, new org.apache.thrift.meta_data.FieldMetaData("family", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WRITE_MODE, new org.apache.thrift.meta_data.FieldMetaData("writeMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CHECK_COLUMN, new org.apache.thrift.meta_data.FieldMetaData("checkColumn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LAST_VALUE, new org.apache.thrift.meta_data.FieldMetaData("lastValue", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM_MAPPERS, new org.apache.thrift.meta_data.FieldMetaData("numMappers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SPLIT_BY, new org.apache.thrift.meta_data.FieldMetaData("splitBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WHERE, new org.apache.thrift.meta_data.FieldMetaData("where", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXTRA, new org.apache.thrift.meta_data.FieldMetaData("extra", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKDB_CONF, new org.apache.thrift.meta_data.FieldMetaData("dkdbConf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKDBConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbIncrToHbase_args.class, metaDataMap);
    }

    public dbIncrToHbase_args() {
    }

    public dbIncrToHbase_args(
      java.lang.String connect,
      java.lang.String username,
      java.lang.String password,
      java.lang.String table,
      java.lang.String hTable,
      java.lang.String col,
      java.lang.String family,
      int writeMode,
      java.lang.String checkColumn,
      java.lang.String lastValue,
      java.lang.String numMappers,
      java.lang.String splitBy,
      java.lang.String where,
      java.lang.String extra,
      DKDBConf dkdbConf)
    {
      this();
      this.connect = connect;
      this.username = username;
      this.password = password;
      this.table = table;
      this.hTable = hTable;
      this.col = col;
      this.family = family;
      this.writeMode = writeMode;
      setWriteModeIsSet(true);
      this.checkColumn = checkColumn;
      this.lastValue = lastValue;
      this.numMappers = numMappers;
      this.splitBy = splitBy;
      this.where = where;
      this.extra = extra;
      this.dkdbConf = dkdbConf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbIncrToHbase_args(dbIncrToHbase_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetConnect()) {
        this.connect = other.connect;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetHTable()) {
        this.hTable = other.hTable;
      }
      if (other.isSetCol()) {
        this.col = other.col;
      }
      if (other.isSetFamily()) {
        this.family = other.family;
      }
      this.writeMode = other.writeMode;
      if (other.isSetCheckColumn()) {
        this.checkColumn = other.checkColumn;
      }
      if (other.isSetLastValue()) {
        this.lastValue = other.lastValue;
      }
      if (other.isSetNumMappers()) {
        this.numMappers = other.numMappers;
      }
      if (other.isSetSplitBy()) {
        this.splitBy = other.splitBy;
      }
      if (other.isSetWhere()) {
        this.where = other.where;
      }
      if (other.isSetExtra()) {
        this.extra = other.extra;
      }
      if (other.isSetDkdbConf()) {
        this.dkdbConf = new DKDBConf(other.dkdbConf);
      }
    }

    public dbIncrToHbase_args deepCopy() {
      return new dbIncrToHbase_args(this);
    }

    @Override
    public void clear() {
      this.connect = null;
      this.username = null;
      this.password = null;
      this.table = null;
      this.hTable = null;
      this.col = null;
      this.family = null;
      setWriteModeIsSet(false);
      this.writeMode = 0;
      this.checkColumn = null;
      this.lastValue = null;
      this.numMappers = null;
      this.splitBy = null;
      this.where = null;
      this.extra = null;
      this.dkdbConf = null;
    }

    public java.lang.String getConnect() {
      return this.connect;
    }

    public dbIncrToHbase_args setConnect(java.lang.String connect) {
      this.connect = connect;
      return this;
    }

    public void unsetConnect() {
      this.connect = null;
    }

    /** Returns true if field connect is set (has been assigned a value) and false otherwise */
    public boolean isSetConnect() {
      return this.connect != null;
    }

    public void setConnectIsSet(boolean value) {
      if (!value) {
        this.connect = null;
      }
    }

    public java.lang.String getUsername() {
      return this.username;
    }

    public dbIncrToHbase_args setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public dbIncrToHbase_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public java.lang.String getTable() {
      return this.table;
    }

    public dbIncrToHbase_args setTable(java.lang.String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public java.lang.String getHTable() {
      return this.hTable;
    }

    public dbIncrToHbase_args setHTable(java.lang.String hTable) {
      this.hTable = hTable;
      return this;
    }

    public void unsetHTable() {
      this.hTable = null;
    }

    /** Returns true if field hTable is set (has been assigned a value) and false otherwise */
    public boolean isSetHTable() {
      return this.hTable != null;
    }

    public void setHTableIsSet(boolean value) {
      if (!value) {
        this.hTable = null;
      }
    }

    public java.lang.String getCol() {
      return this.col;
    }

    public dbIncrToHbase_args setCol(java.lang.String col) {
      this.col = col;
      return this;
    }

    public void unsetCol() {
      this.col = null;
    }

    /** Returns true if field col is set (has been assigned a value) and false otherwise */
    public boolean isSetCol() {
      return this.col != null;
    }

    public void setColIsSet(boolean value) {
      if (!value) {
        this.col = null;
      }
    }

    public java.lang.String getFamily() {
      return this.family;
    }

    public dbIncrToHbase_args setFamily(java.lang.String family) {
      this.family = family;
      return this;
    }

    public void unsetFamily() {
      this.family = null;
    }

    /** Returns true if field family is set (has been assigned a value) and false otherwise */
    public boolean isSetFamily() {
      return this.family != null;
    }

    public void setFamilyIsSet(boolean value) {
      if (!value) {
        this.family = null;
      }
    }

    public int getWriteMode() {
      return this.writeMode;
    }

    public dbIncrToHbase_args setWriteMode(int writeMode) {
      this.writeMode = writeMode;
      setWriteModeIsSet(true);
      return this;
    }

    public void unsetWriteMode() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __WRITEMODE_ISSET_ID);
    }

    /** Returns true if field writeMode is set (has been assigned a value) and false otherwise */
    public boolean isSetWriteMode() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __WRITEMODE_ISSET_ID);
    }

    public void setWriteModeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __WRITEMODE_ISSET_ID, value);
    }

    public java.lang.String getCheckColumn() {
      return this.checkColumn;
    }

    public dbIncrToHbase_args setCheckColumn(java.lang.String checkColumn) {
      this.checkColumn = checkColumn;
      return this;
    }

    public void unsetCheckColumn() {
      this.checkColumn = null;
    }

    /** Returns true if field checkColumn is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckColumn() {
      return this.checkColumn != null;
    }

    public void setCheckColumnIsSet(boolean value) {
      if (!value) {
        this.checkColumn = null;
      }
    }

    public java.lang.String getLastValue() {
      return this.lastValue;
    }

    public dbIncrToHbase_args setLastValue(java.lang.String lastValue) {
      this.lastValue = lastValue;
      return this;
    }

    public void unsetLastValue() {
      this.lastValue = null;
    }

    /** Returns true if field lastValue is set (has been assigned a value) and false otherwise */
    public boolean isSetLastValue() {
      return this.lastValue != null;
    }

    public void setLastValueIsSet(boolean value) {
      if (!value) {
        this.lastValue = null;
      }
    }

    public java.lang.String getNumMappers() {
      return this.numMappers;
    }

    public dbIncrToHbase_args setNumMappers(java.lang.String numMappers) {
      this.numMappers = numMappers;
      return this;
    }

    public void unsetNumMappers() {
      this.numMappers = null;
    }

    /** Returns true if field numMappers is set (has been assigned a value) and false otherwise */
    public boolean isSetNumMappers() {
      return this.numMappers != null;
    }

    public void setNumMappersIsSet(boolean value) {
      if (!value) {
        this.numMappers = null;
      }
    }

    public java.lang.String getSplitBy() {
      return this.splitBy;
    }

    public dbIncrToHbase_args setSplitBy(java.lang.String splitBy) {
      this.splitBy = splitBy;
      return this;
    }

    public void unsetSplitBy() {
      this.splitBy = null;
    }

    /** Returns true if field splitBy is set (has been assigned a value) and false otherwise */
    public boolean isSetSplitBy() {
      return this.splitBy != null;
    }

    public void setSplitByIsSet(boolean value) {
      if (!value) {
        this.splitBy = null;
      }
    }

    public java.lang.String getWhere() {
      return this.where;
    }

    public dbIncrToHbase_args setWhere(java.lang.String where) {
      this.where = where;
      return this;
    }

    public void unsetWhere() {
      this.where = null;
    }

    /** Returns true if field where is set (has been assigned a value) and false otherwise */
    public boolean isSetWhere() {
      return this.where != null;
    }

    public void setWhereIsSet(boolean value) {
      if (!value) {
        this.where = null;
      }
    }

    public java.lang.String getExtra() {
      return this.extra;
    }

    public dbIncrToHbase_args setExtra(java.lang.String extra) {
      this.extra = extra;
      return this;
    }

    public void unsetExtra() {
      this.extra = null;
    }

    /** Returns true if field extra is set (has been assigned a value) and false otherwise */
    public boolean isSetExtra() {
      return this.extra != null;
    }

    public void setExtraIsSet(boolean value) {
      if (!value) {
        this.extra = null;
      }
    }

    public DKDBConf getDkdbConf() {
      return this.dkdbConf;
    }

    public dbIncrToHbase_args setDkdbConf(DKDBConf dkdbConf) {
      this.dkdbConf = dkdbConf;
      return this;
    }

    public void unsetDkdbConf() {
      this.dkdbConf = null;
    }

    /** Returns true if field dkdbConf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkdbConf() {
      return this.dkdbConf != null;
    }

    public void setDkdbConfIsSet(boolean value) {
      if (!value) {
        this.dkdbConf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CONNECT:
        if (value == null) {
          unsetConnect();
        } else {
          setConnect((java.lang.String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((java.lang.String)value);
        }
        break;

      case H_TABLE:
        if (value == null) {
          unsetHTable();
        } else {
          setHTable((java.lang.String)value);
        }
        break;

      case COL:
        if (value == null) {
          unsetCol();
        } else {
          setCol((java.lang.String)value);
        }
        break;

      case FAMILY:
        if (value == null) {
          unsetFamily();
        } else {
          setFamily((java.lang.String)value);
        }
        break;

      case WRITE_MODE:
        if (value == null) {
          unsetWriteMode();
        } else {
          setWriteMode((java.lang.Integer)value);
        }
        break;

      case CHECK_COLUMN:
        if (value == null) {
          unsetCheckColumn();
        } else {
          setCheckColumn((java.lang.String)value);
        }
        break;

      case LAST_VALUE:
        if (value == null) {
          unsetLastValue();
        } else {
          setLastValue((java.lang.String)value);
        }
        break;

      case NUM_MAPPERS:
        if (value == null) {
          unsetNumMappers();
        } else {
          setNumMappers((java.lang.String)value);
        }
        break;

      case SPLIT_BY:
        if (value == null) {
          unsetSplitBy();
        } else {
          setSplitBy((java.lang.String)value);
        }
        break;

      case WHERE:
        if (value == null) {
          unsetWhere();
        } else {
          setWhere((java.lang.String)value);
        }
        break;

      case EXTRA:
        if (value == null) {
          unsetExtra();
        } else {
          setExtra((java.lang.String)value);
        }
        break;

      case DKDB_CONF:
        if (value == null) {
          unsetDkdbConf();
        } else {
          setDkdbConf((DKDBConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECT:
        return getConnect();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case TABLE:
        return getTable();

      case H_TABLE:
        return getHTable();

      case COL:
        return getCol();

      case FAMILY:
        return getFamily();

      case WRITE_MODE:
        return getWriteMode();

      case CHECK_COLUMN:
        return getCheckColumn();

      case LAST_VALUE:
        return getLastValue();

      case NUM_MAPPERS:
        return getNumMappers();

      case SPLIT_BY:
        return getSplitBy();

      case WHERE:
        return getWhere();

      case EXTRA:
        return getExtra();

      case DKDB_CONF:
        return getDkdbConf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CONNECT:
        return isSetConnect();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case TABLE:
        return isSetTable();
      case H_TABLE:
        return isSetHTable();
      case COL:
        return isSetCol();
      case FAMILY:
        return isSetFamily();
      case WRITE_MODE:
        return isSetWriteMode();
      case CHECK_COLUMN:
        return isSetCheckColumn();
      case LAST_VALUE:
        return isSetLastValue();
      case NUM_MAPPERS:
        return isSetNumMappers();
      case SPLIT_BY:
        return isSetSplitBy();
      case WHERE:
        return isSetWhere();
      case EXTRA:
        return isSetExtra();
      case DKDB_CONF:
        return isSetDkdbConf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dbIncrToHbase_args)
        return this.equals((dbIncrToHbase_args)that);
      return false;
    }

    public boolean equals(dbIncrToHbase_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_connect = true && this.isSetConnect();
      boolean that_present_connect = true && that.isSetConnect();
      if (this_present_connect || that_present_connect) {
        if (!(this_present_connect && that_present_connect))
          return false;
        if (!this.connect.equals(that.connect))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_hTable = true && this.isSetHTable();
      boolean that_present_hTable = true && that.isSetHTable();
      if (this_present_hTable || that_present_hTable) {
        if (!(this_present_hTable && that_present_hTable))
          return false;
        if (!this.hTable.equals(that.hTable))
          return false;
      }

      boolean this_present_col = true && this.isSetCol();
      boolean that_present_col = true && that.isSetCol();
      if (this_present_col || that_present_col) {
        if (!(this_present_col && that_present_col))
          return false;
        if (!this.col.equals(that.col))
          return false;
      }

      boolean this_present_family = true && this.isSetFamily();
      boolean that_present_family = true && that.isSetFamily();
      if (this_present_family || that_present_family) {
        if (!(this_present_family && that_present_family))
          return false;
        if (!this.family.equals(that.family))
          return false;
      }

      boolean this_present_writeMode = true;
      boolean that_present_writeMode = true;
      if (this_present_writeMode || that_present_writeMode) {
        if (!(this_present_writeMode && that_present_writeMode))
          return false;
        if (this.writeMode != that.writeMode)
          return false;
      }

      boolean this_present_checkColumn = true && this.isSetCheckColumn();
      boolean that_present_checkColumn = true && that.isSetCheckColumn();
      if (this_present_checkColumn || that_present_checkColumn) {
        if (!(this_present_checkColumn && that_present_checkColumn))
          return false;
        if (!this.checkColumn.equals(that.checkColumn))
          return false;
      }

      boolean this_present_lastValue = true && this.isSetLastValue();
      boolean that_present_lastValue = true && that.isSetLastValue();
      if (this_present_lastValue || that_present_lastValue) {
        if (!(this_present_lastValue && that_present_lastValue))
          return false;
        if (!this.lastValue.equals(that.lastValue))
          return false;
      }

      boolean this_present_numMappers = true && this.isSetNumMappers();
      boolean that_present_numMappers = true && that.isSetNumMappers();
      if (this_present_numMappers || that_present_numMappers) {
        if (!(this_present_numMappers && that_present_numMappers))
          return false;
        if (!this.numMappers.equals(that.numMappers))
          return false;
      }

      boolean this_present_splitBy = true && this.isSetSplitBy();
      boolean that_present_splitBy = true && that.isSetSplitBy();
      if (this_present_splitBy || that_present_splitBy) {
        if (!(this_present_splitBy && that_present_splitBy))
          return false;
        if (!this.splitBy.equals(that.splitBy))
          return false;
      }

      boolean this_present_where = true && this.isSetWhere();
      boolean that_present_where = true && that.isSetWhere();
      if (this_present_where || that_present_where) {
        if (!(this_present_where && that_present_where))
          return false;
        if (!this.where.equals(that.where))
          return false;
      }

      boolean this_present_extra = true && this.isSetExtra();
      boolean that_present_extra = true && that.isSetExtra();
      if (this_present_extra || that_present_extra) {
        if (!(this_present_extra && that_present_extra))
          return false;
        if (!this.extra.equals(that.extra))
          return false;
      }

      boolean this_present_dkdbConf = true && this.isSetDkdbConf();
      boolean that_present_dkdbConf = true && that.isSetDkdbConf();
      if (this_present_dkdbConf || that_present_dkdbConf) {
        if (!(this_present_dkdbConf && that_present_dkdbConf))
          return false;
        if (!this.dkdbConf.equals(that.dkdbConf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetConnect()) ? 131071 : 524287);
      if (isSetConnect())
        hashCode = hashCode * 8191 + connect.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetHTable()) ? 131071 : 524287);
      if (isSetHTable())
        hashCode = hashCode * 8191 + hTable.hashCode();

      hashCode = hashCode * 8191 + ((isSetCol()) ? 131071 : 524287);
      if (isSetCol())
        hashCode = hashCode * 8191 + col.hashCode();

      hashCode = hashCode * 8191 + ((isSetFamily()) ? 131071 : 524287);
      if (isSetFamily())
        hashCode = hashCode * 8191 + family.hashCode();

      hashCode = hashCode * 8191 + writeMode;

      hashCode = hashCode * 8191 + ((isSetCheckColumn()) ? 131071 : 524287);
      if (isSetCheckColumn())
        hashCode = hashCode * 8191 + checkColumn.hashCode();

      hashCode = hashCode * 8191 + ((isSetLastValue()) ? 131071 : 524287);
      if (isSetLastValue())
        hashCode = hashCode * 8191 + lastValue.hashCode();

      hashCode = hashCode * 8191 + ((isSetNumMappers()) ? 131071 : 524287);
      if (isSetNumMappers())
        hashCode = hashCode * 8191 + numMappers.hashCode();

      hashCode = hashCode * 8191 + ((isSetSplitBy()) ? 131071 : 524287);
      if (isSetSplitBy())
        hashCode = hashCode * 8191 + splitBy.hashCode();

      hashCode = hashCode * 8191 + ((isSetWhere()) ? 131071 : 524287);
      if (isSetWhere())
        hashCode = hashCode * 8191 + where.hashCode();

      hashCode = hashCode * 8191 + ((isSetExtra()) ? 131071 : 524287);
      if (isSetExtra())
        hashCode = hashCode * 8191 + extra.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkdbConf()) ? 131071 : 524287);
      if (isSetDkdbConf())
        hashCode = hashCode * 8191 + dkdbConf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dbIncrToHbase_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetConnect()).compareTo(other.isSetConnect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connect, other.connect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHTable()).compareTo(other.isSetHTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hTable, other.hTable);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCol()).compareTo(other.isSetCol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.col, other.col);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFamily()).compareTo(other.isSetFamily());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFamily()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.family, other.family);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWriteMode()).compareTo(other.isSetWriteMode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWriteMode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeMode, other.writeMode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCheckColumn()).compareTo(other.isSetCheckColumn());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckColumn()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkColumn, other.checkColumn);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLastValue()).compareTo(other.isSetLastValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLastValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastValue, other.lastValue);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumMappers()).compareTo(other.isSetNumMappers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumMappers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numMappers, other.numMappers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSplitBy()).compareTo(other.isSetSplitBy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSplitBy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.splitBy, other.splitBy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWhere()).compareTo(other.isSetWhere());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhere()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.where, other.where);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExtra()).compareTo(other.isSetExtra());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExtra()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.extra, other.extra);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkdbConf()).compareTo(other.isSetDkdbConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkdbConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkdbConf, other.dkdbConf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dbIncrToHbase_args(");
      boolean first = true;

      sb.append("connect:");
      if (this.connect == null) {
        sb.append("null");
      } else {
        sb.append(this.connect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hTable:");
      if (this.hTable == null) {
        sb.append("null");
      } else {
        sb.append(this.hTable);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("col:");
      if (this.col == null) {
        sb.append("null");
      } else {
        sb.append(this.col);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("family:");
      if (this.family == null) {
        sb.append("null");
      } else {
        sb.append(this.family);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("writeMode:");
      sb.append(this.writeMode);
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkColumn:");
      if (this.checkColumn == null) {
        sb.append("null");
      } else {
        sb.append(this.checkColumn);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lastValue:");
      if (this.lastValue == null) {
        sb.append("null");
      } else {
        sb.append(this.lastValue);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numMappers:");
      if (this.numMappers == null) {
        sb.append("null");
      } else {
        sb.append(this.numMappers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("splitBy:");
      if (this.splitBy == null) {
        sb.append("null");
      } else {
        sb.append(this.splitBy);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("where:");
      if (this.where == null) {
        sb.append("null");
      } else {
        sb.append(this.where);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("extra:");
      if (this.extra == null) {
        sb.append("null");
      } else {
        sb.append(this.extra);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkdbConf:");
      if (this.dkdbConf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkdbConf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkdbConf != null) {
        dkdbConf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbIncrToHbase_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbIncrToHbase_argsStandardScheme getScheme() {
        return new dbIncrToHbase_argsStandardScheme();
      }
    }

    private static class dbIncrToHbase_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<dbIncrToHbase_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbIncrToHbase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.connect = iprot.readString();
                struct.setConnectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // H_TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hTable = iprot.readString();
                struct.setHTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // COL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.col = iprot.readString();
                struct.setColIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // FAMILY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.family = iprot.readString();
                struct.setFamilyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // WRITE_MODE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.writeMode = iprot.readI32();
                struct.setWriteModeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // CHECK_COLUMN
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.checkColumn = iprot.readString();
                struct.setCheckColumnIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // LAST_VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lastValue = iprot.readString();
                struct.setLastValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // NUM_MAPPERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.numMappers = iprot.readString();
                struct.setNumMappersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 12: // SPLIT_BY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.splitBy = iprot.readString();
                struct.setSplitByIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 13: // WHERE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.where = iprot.readString();
                struct.setWhereIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 14: // EXTRA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.extra = iprot.readString();
                struct.setExtraIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 15: // DKDB_CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkdbConf = new DKDBConf();
                struct.dkdbConf.read(iprot);
                struct.setDkdbConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbIncrToHbase_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connect != null) {
          oprot.writeFieldBegin(CONNECT_FIELD_DESC);
          oprot.writeString(struct.connect);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.hTable != null) {
          oprot.writeFieldBegin(H_TABLE_FIELD_DESC);
          oprot.writeString(struct.hTable);
          oprot.writeFieldEnd();
        }
        if (struct.col != null) {
          oprot.writeFieldBegin(COL_FIELD_DESC);
          oprot.writeString(struct.col);
          oprot.writeFieldEnd();
        }
        if (struct.family != null) {
          oprot.writeFieldBegin(FAMILY_FIELD_DESC);
          oprot.writeString(struct.family);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(WRITE_MODE_FIELD_DESC);
        oprot.writeI32(struct.writeMode);
        oprot.writeFieldEnd();
        if (struct.checkColumn != null) {
          oprot.writeFieldBegin(CHECK_COLUMN_FIELD_DESC);
          oprot.writeString(struct.checkColumn);
          oprot.writeFieldEnd();
        }
        if (struct.lastValue != null) {
          oprot.writeFieldBegin(LAST_VALUE_FIELD_DESC);
          oprot.writeString(struct.lastValue);
          oprot.writeFieldEnd();
        }
        if (struct.numMappers != null) {
          oprot.writeFieldBegin(NUM_MAPPERS_FIELD_DESC);
          oprot.writeString(struct.numMappers);
          oprot.writeFieldEnd();
        }
        if (struct.splitBy != null) {
          oprot.writeFieldBegin(SPLIT_BY_FIELD_DESC);
          oprot.writeString(struct.splitBy);
          oprot.writeFieldEnd();
        }
        if (struct.where != null) {
          oprot.writeFieldBegin(WHERE_FIELD_DESC);
          oprot.writeString(struct.where);
          oprot.writeFieldEnd();
        }
        if (struct.extra != null) {
          oprot.writeFieldBegin(EXTRA_FIELD_DESC);
          oprot.writeString(struct.extra);
          oprot.writeFieldEnd();
        }
        if (struct.dkdbConf != null) {
          oprot.writeFieldBegin(DKDB_CONF_FIELD_DESC);
          struct.dkdbConf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbIncrToHbase_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbIncrToHbase_argsTupleScheme getScheme() {
        return new dbIncrToHbase_argsTupleScheme();
      }
    }

    private static class dbIncrToHbase_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<dbIncrToHbase_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbIncrToHbase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetConnect()) {
          optionals.set(0);
        }
        if (struct.isSetUsername()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        if (struct.isSetTable()) {
          optionals.set(3);
        }
        if (struct.isSetHTable()) {
          optionals.set(4);
        }
        if (struct.isSetCol()) {
          optionals.set(5);
        }
        if (struct.isSetFamily()) {
          optionals.set(6);
        }
        if (struct.isSetWriteMode()) {
          optionals.set(7);
        }
        if (struct.isSetCheckColumn()) {
          optionals.set(8);
        }
        if (struct.isSetLastValue()) {
          optionals.set(9);
        }
        if (struct.isSetNumMappers()) {
          optionals.set(10);
        }
        if (struct.isSetSplitBy()) {
          optionals.set(11);
        }
        if (struct.isSetWhere()) {
          optionals.set(12);
        }
        if (struct.isSetExtra()) {
          optionals.set(13);
        }
        if (struct.isSetDkdbConf()) {
          optionals.set(14);
        }
        oprot.writeBitSet(optionals, 15);
        if (struct.isSetConnect()) {
          oprot.writeString(struct.connect);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetHTable()) {
          oprot.writeString(struct.hTable);
        }
        if (struct.isSetCol()) {
          oprot.writeString(struct.col);
        }
        if (struct.isSetFamily()) {
          oprot.writeString(struct.family);
        }
        if (struct.isSetWriteMode()) {
          oprot.writeI32(struct.writeMode);
        }
        if (struct.isSetCheckColumn()) {
          oprot.writeString(struct.checkColumn);
        }
        if (struct.isSetLastValue()) {
          oprot.writeString(struct.lastValue);
        }
        if (struct.isSetNumMappers()) {
          oprot.writeString(struct.numMappers);
        }
        if (struct.isSetSplitBy()) {
          oprot.writeString(struct.splitBy);
        }
        if (struct.isSetWhere()) {
          oprot.writeString(struct.where);
        }
        if (struct.isSetExtra()) {
          oprot.writeString(struct.extra);
        }
        if (struct.isSetDkdbConf()) {
          struct.dkdbConf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbIncrToHbase_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(15);
        if (incoming.get(0)) {
          struct.connect = iprot.readString();
          struct.setConnectIsSet(true);
        }
        if (incoming.get(1)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(3)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(4)) {
          struct.hTable = iprot.readString();
          struct.setHTableIsSet(true);
        }
        if (incoming.get(5)) {
          struct.col = iprot.readString();
          struct.setColIsSet(true);
        }
        if (incoming.get(6)) {
          struct.family = iprot.readString();
          struct.setFamilyIsSet(true);
        }
        if (incoming.get(7)) {
          struct.writeMode = iprot.readI32();
          struct.setWriteModeIsSet(true);
        }
        if (incoming.get(8)) {
          struct.checkColumn = iprot.readString();
          struct.setCheckColumnIsSet(true);
        }
        if (incoming.get(9)) {
          struct.lastValue = iprot.readString();
          struct.setLastValueIsSet(true);
        }
        if (incoming.get(10)) {
          struct.numMappers = iprot.readString();
          struct.setNumMappersIsSet(true);
        }
        if (incoming.get(11)) {
          struct.splitBy = iprot.readString();
          struct.setSplitByIsSet(true);
        }
        if (incoming.get(12)) {
          struct.where = iprot.readString();
          struct.setWhereIsSet(true);
        }
        if (incoming.get(13)) {
          struct.extra = iprot.readString();
          struct.setExtraIsSet(true);
        }
        if (incoming.get(14)) {
          struct.dkdbConf = new DKDBConf();
          struct.dkdbConf.read(iprot);
          struct.setDkdbConfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dbIncrToHbase_result implements org.apache.thrift.TBase<dbIncrToHbase_result, dbIncrToHbase_result._Fields>, java.io.Serializable, Cloneable, Comparable<dbIncrToHbase_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbIncrToHbase_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dbIncrToHbase_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dbIncrToHbase_resultTupleSchemeFactory();

    public ResultEntity success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbIncrToHbase_result.class, metaDataMap);
    }

    public dbIncrToHbase_result() {
    }

    public dbIncrToHbase_result(
      ResultEntity success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbIncrToHbase_result(dbIncrToHbase_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultEntity(other.success);
      }
    }

    public dbIncrToHbase_result deepCopy() {
      return new dbIncrToHbase_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultEntity getSuccess() {
      return this.success;
    }

    public dbIncrToHbase_result setSuccess(ResultEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultEntity)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dbIncrToHbase_result)
        return this.equals((dbIncrToHbase_result)that);
      return false;
    }

    public boolean equals(dbIncrToHbase_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dbIncrToHbase_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dbIncrToHbase_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbIncrToHbase_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbIncrToHbase_resultStandardScheme getScheme() {
        return new dbIncrToHbase_resultStandardScheme();
      }
    }

    private static class dbIncrToHbase_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<dbIncrToHbase_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbIncrToHbase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbIncrToHbase_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbIncrToHbase_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbIncrToHbase_resultTupleScheme getScheme() {
        return new dbIncrToHbase_resultTupleScheme();
      }
    }

    private static class dbIncrToHbase_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<dbIncrToHbase_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbIncrToHbase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbIncrToHbase_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
