/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dksou.fitting.datasource.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-06-21")
public class DKESHandle {

  public interface Iface {

    /**
     * @param connect       JDBC连接字符串
     * @param username      数据库用户名
     * @param password      数据库密码
     * @param table         关系数据库表名，数据从该表中获取
     * @param esIpAndPort   连接elasticsearch的地址及端口（eg:192.168.1.126：9200，端口默认为9200
     * @param esClusterName 为连接elasticsearch的集群名称
     * @param esIndexName   为要导出到elasticsearch的索引名称
     * @param esTypeName    为要导出到的类型名称
     * @param numMappers    启动的map来并行导入数据，默认是4个，最好不要将数字设置为高于集群的节点数
     * @param where         从关系数据库导入数据时的查询条件，示例：–where “id = 2”
     * @param queueName     指定MapReduce作业提交到的队列（为mapreduce.job.queuename此参数设置），默认default
     * 
     * @param connect
     * @param username
     * @param password
     * @param table
     * @param esIpAndPort
     * @param esClusterName
     * @param esIndexName
     * @param esTypeName
     * @param numMappers
     * @param where
     * @param queueName
     */
    public void dbToEs(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String numMappers, java.lang.String where, java.lang.String queueName) throws org.apache.thrift.TException;

    /**
     * @param esIpAndPort   连接elasticsearch的地址及端口（eg:192.168.1.126：9200，端口默认为9200
     * @param esClusterName 为连接elasticsearch的集群名称
     * @param esIndexName   为要导出到elasticsearch的索引名称
     * @param esTypeName    为要导出到的类型名称
     * @param exportDir     要从hdfs导出的目录
     * @param numMappers    启动的map来并行导入数据，默认是4个，最好不要将数字设置为高于集群的节点数
     * @param fileSeparator 指定各字段的分隔符，默认为英文逗号
     * @param queueName     指定MapReduce作业提交到的队列（为mapreduce.job.queuename此参数设置），默认default
     * 
     * @param esIpAndPort
     * @param esClusterName
     * @param esIndexName
     * @param esTypeName
     * @param exportDir
     * @param numMappers
     * @param fileSeparator
     * @param queueName
     */
    public void hdfsToEs(java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String exportDir, java.lang.String numMappers, java.lang.String fileSeparator, java.lang.String queueName) throws org.apache.thrift.TException;

    /**
     * @param connect       JDBC连接字符串
     * @param table         关系数据库表名，数据从该表中获取
     * @param esIpAndPort   连接elasticsearch的地址及端口（eg:192.168.1.126：9200，端口默认为9200
     * @param esClusterName 为连接elasticsearch的集群名称
     * @param esIndexName   为要导出到elasticsearch的索引名称
     * @param esTypeName    为要导出到的类型名称
     * @param numMappers    启动的map来并行导入数据，默认是4个，最好不要将数字设置为高于集群的节点数
     * @param where         从关系数据库导入数据时的查询条件，示例：–where “id = 2”
     * @param queueName     指定MapReduce作业提交到的队列（为mapreduce.job.queuename此参数设置），默认default
     * 
     * @param connect
     * @param table
     * @param esIpAndPort
     * @param esClusterName
     * @param esIndexName
     * @param esTypeName
     * @param numMappers
     * @param where
     * @param queueName
     */
    public void sqlServerToEs(java.lang.String connect, java.lang.String table, java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String numMappers, java.lang.String where, java.lang.String queueName) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void dbToEs(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String numMappers, java.lang.String where, java.lang.String queueName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void hdfsToEs(java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String exportDir, java.lang.String numMappers, java.lang.String fileSeparator, java.lang.String queueName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void sqlServerToEs(java.lang.String connect, java.lang.String table, java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String numMappers, java.lang.String where, java.lang.String queueName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void dbToEs(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String numMappers, java.lang.String where, java.lang.String queueName) throws org.apache.thrift.TException
    {
      send_dbToEs(connect, username, password, table, esIpAndPort, esClusterName, esIndexName, esTypeName, numMappers, where, queueName);
      recv_dbToEs();
    }

    public void send_dbToEs(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String numMappers, java.lang.String where, java.lang.String queueName) throws org.apache.thrift.TException
    {
      dbToEs_args args = new dbToEs_args();
      args.setConnect(connect);
      args.setUsername(username);
      args.setPassword(password);
      args.setTable(table);
      args.setEsIpAndPort(esIpAndPort);
      args.setEsClusterName(esClusterName);
      args.setEsIndexName(esIndexName);
      args.setEsTypeName(esTypeName);
      args.setNumMappers(numMappers);
      args.setWhere(where);
      args.setQueueName(queueName);
      sendBase("dbToEs", args);
    }

    public void recv_dbToEs() throws org.apache.thrift.TException
    {
      dbToEs_result result = new dbToEs_result();
      receiveBase(result, "dbToEs");
      return;
    }

    public void hdfsToEs(java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String exportDir, java.lang.String numMappers, java.lang.String fileSeparator, java.lang.String queueName) throws org.apache.thrift.TException
    {
      send_hdfsToEs(esIpAndPort, esClusterName, esIndexName, esTypeName, exportDir, numMappers, fileSeparator, queueName);
      recv_hdfsToEs();
    }

    public void send_hdfsToEs(java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String exportDir, java.lang.String numMappers, java.lang.String fileSeparator, java.lang.String queueName) throws org.apache.thrift.TException
    {
      hdfsToEs_args args = new hdfsToEs_args();
      args.setEsIpAndPort(esIpAndPort);
      args.setEsClusterName(esClusterName);
      args.setEsIndexName(esIndexName);
      args.setEsTypeName(esTypeName);
      args.setExportDir(exportDir);
      args.setNumMappers(numMappers);
      args.setFileSeparator(fileSeparator);
      args.setQueueName(queueName);
      sendBase("hdfsToEs", args);
    }

    public void recv_hdfsToEs() throws org.apache.thrift.TException
    {
      hdfsToEs_result result = new hdfsToEs_result();
      receiveBase(result, "hdfsToEs");
      return;
    }

    public void sqlServerToEs(java.lang.String connect, java.lang.String table, java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String numMappers, java.lang.String where, java.lang.String queueName) throws org.apache.thrift.TException
    {
      send_sqlServerToEs(connect, table, esIpAndPort, esClusterName, esIndexName, esTypeName, numMappers, where, queueName);
      recv_sqlServerToEs();
    }

    public void send_sqlServerToEs(java.lang.String connect, java.lang.String table, java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String numMappers, java.lang.String where, java.lang.String queueName) throws org.apache.thrift.TException
    {
      sqlServerToEs_args args = new sqlServerToEs_args();
      args.setConnect(connect);
      args.setTable(table);
      args.setEsIpAndPort(esIpAndPort);
      args.setEsClusterName(esClusterName);
      args.setEsIndexName(esIndexName);
      args.setEsTypeName(esTypeName);
      args.setNumMappers(numMappers);
      args.setWhere(where);
      args.setQueueName(queueName);
      sendBase("sqlServerToEs", args);
    }

    public void recv_sqlServerToEs() throws org.apache.thrift.TException
    {
      sqlServerToEs_result result = new sqlServerToEs_result();
      receiveBase(result, "sqlServerToEs");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void dbToEs(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String numMappers, java.lang.String where, java.lang.String queueName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      dbToEs_call method_call = new dbToEs_call(connect, username, password, table, esIpAndPort, esClusterName, esIndexName, esTypeName, numMappers, where, queueName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class dbToEs_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String connect;
      private java.lang.String username;
      private java.lang.String password;
      private java.lang.String table;
      private java.lang.String esIpAndPort;
      private java.lang.String esClusterName;
      private java.lang.String esIndexName;
      private java.lang.String esTypeName;
      private java.lang.String numMappers;
      private java.lang.String where;
      private java.lang.String queueName;
      public dbToEs_call(java.lang.String connect, java.lang.String username, java.lang.String password, java.lang.String table, java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String numMappers, java.lang.String where, java.lang.String queueName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connect = connect;
        this.username = username;
        this.password = password;
        this.table = table;
        this.esIpAndPort = esIpAndPort;
        this.esClusterName = esClusterName;
        this.esIndexName = esIndexName;
        this.esTypeName = esTypeName;
        this.numMappers = numMappers;
        this.where = where;
        this.queueName = queueName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("dbToEs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        dbToEs_args args = new dbToEs_args();
        args.setConnect(connect);
        args.setUsername(username);
        args.setPassword(password);
        args.setTable(table);
        args.setEsIpAndPort(esIpAndPort);
        args.setEsClusterName(esClusterName);
        args.setEsIndexName(esIndexName);
        args.setEsTypeName(esTypeName);
        args.setNumMappers(numMappers);
        args.setWhere(where);
        args.setQueueName(queueName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void hdfsToEs(java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String exportDir, java.lang.String numMappers, java.lang.String fileSeparator, java.lang.String queueName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      hdfsToEs_call method_call = new hdfsToEs_call(esIpAndPort, esClusterName, esIndexName, esTypeName, exportDir, numMappers, fileSeparator, queueName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class hdfsToEs_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String esIpAndPort;
      private java.lang.String esClusterName;
      private java.lang.String esIndexName;
      private java.lang.String esTypeName;
      private java.lang.String exportDir;
      private java.lang.String numMappers;
      private java.lang.String fileSeparator;
      private java.lang.String queueName;
      public hdfsToEs_call(java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String exportDir, java.lang.String numMappers, java.lang.String fileSeparator, java.lang.String queueName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.esIpAndPort = esIpAndPort;
        this.esClusterName = esClusterName;
        this.esIndexName = esIndexName;
        this.esTypeName = esTypeName;
        this.exportDir = exportDir;
        this.numMappers = numMappers;
        this.fileSeparator = fileSeparator;
        this.queueName = queueName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("hdfsToEs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        hdfsToEs_args args = new hdfsToEs_args();
        args.setEsIpAndPort(esIpAndPort);
        args.setEsClusterName(esClusterName);
        args.setEsIndexName(esIndexName);
        args.setEsTypeName(esTypeName);
        args.setExportDir(exportDir);
        args.setNumMappers(numMappers);
        args.setFileSeparator(fileSeparator);
        args.setQueueName(queueName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void sqlServerToEs(java.lang.String connect, java.lang.String table, java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String numMappers, java.lang.String where, java.lang.String queueName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sqlServerToEs_call method_call = new sqlServerToEs_call(connect, table, esIpAndPort, esClusterName, esIndexName, esTypeName, numMappers, where, queueName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sqlServerToEs_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String connect;
      private java.lang.String table;
      private java.lang.String esIpAndPort;
      private java.lang.String esClusterName;
      private java.lang.String esIndexName;
      private java.lang.String esTypeName;
      private java.lang.String numMappers;
      private java.lang.String where;
      private java.lang.String queueName;
      public sqlServerToEs_call(java.lang.String connect, java.lang.String table, java.lang.String esIpAndPort, java.lang.String esClusterName, java.lang.String esIndexName, java.lang.String esTypeName, java.lang.String numMappers, java.lang.String where, java.lang.String queueName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.connect = connect;
        this.table = table;
        this.esIpAndPort = esIpAndPort;
        this.esClusterName = esClusterName;
        this.esIndexName = esIndexName;
        this.esTypeName = esTypeName;
        this.numMappers = numMappers;
        this.where = where;
        this.queueName = queueName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sqlServerToEs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sqlServerToEs_args args = new sqlServerToEs_args();
        args.setConnect(connect);
        args.setTable(table);
        args.setEsIpAndPort(esIpAndPort);
        args.setEsClusterName(esClusterName);
        args.setEsIndexName(esIndexName);
        args.setEsTypeName(esTypeName);
        args.setNumMappers(numMappers);
        args.setWhere(where);
        args.setQueueName(queueName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("dbToEs", new dbToEs());
      processMap.put("hdfsToEs", new hdfsToEs());
      processMap.put("sqlServerToEs", new sqlServerToEs());
      return processMap;
    }

    public static class dbToEs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, dbToEs_args> {
      public dbToEs() {
        super("dbToEs");
      }

      public dbToEs_args getEmptyArgsInstance() {
        return new dbToEs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public dbToEs_result getResult(I iface, dbToEs_args args) throws org.apache.thrift.TException {
        dbToEs_result result = new dbToEs_result();
        iface.dbToEs(args.connect, args.username, args.password, args.table, args.esIpAndPort, args.esClusterName, args.esIndexName, args.esTypeName, args.numMappers, args.where, args.queueName);
        return result;
      }
    }

    public static class hdfsToEs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, hdfsToEs_args> {
      public hdfsToEs() {
        super("hdfsToEs");
      }

      public hdfsToEs_args getEmptyArgsInstance() {
        return new hdfsToEs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public hdfsToEs_result getResult(I iface, hdfsToEs_args args) throws org.apache.thrift.TException {
        hdfsToEs_result result = new hdfsToEs_result();
        iface.hdfsToEs(args.esIpAndPort, args.esClusterName, args.esIndexName, args.esTypeName, args.exportDir, args.numMappers, args.fileSeparator, args.queueName);
        return result;
      }
    }

    public static class sqlServerToEs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sqlServerToEs_args> {
      public sqlServerToEs() {
        super("sqlServerToEs");
      }

      public sqlServerToEs_args getEmptyArgsInstance() {
        return new sqlServerToEs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public sqlServerToEs_result getResult(I iface, sqlServerToEs_args args) throws org.apache.thrift.TException {
        sqlServerToEs_result result = new sqlServerToEs_result();
        iface.sqlServerToEs(args.connect, args.table, args.esIpAndPort, args.esClusterName, args.esIndexName, args.esTypeName, args.numMappers, args.where, args.queueName);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("dbToEs", new dbToEs());
      processMap.put("hdfsToEs", new hdfsToEs());
      processMap.put("sqlServerToEs", new sqlServerToEs());
      return processMap;
    }

    public static class dbToEs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, dbToEs_args, Void> {
      public dbToEs() {
        super("dbToEs");
      }

      public dbToEs_args getEmptyArgsInstance() {
        return new dbToEs_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            dbToEs_result result = new dbToEs_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            dbToEs_result result = new dbToEs_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, dbToEs_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.dbToEs(args.connect, args.username, args.password, args.table, args.esIpAndPort, args.esClusterName, args.esIndexName, args.esTypeName, args.numMappers, args.where, args.queueName,resultHandler);
      }
    }

    public static class hdfsToEs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, hdfsToEs_args, Void> {
      public hdfsToEs() {
        super("hdfsToEs");
      }

      public hdfsToEs_args getEmptyArgsInstance() {
        return new hdfsToEs_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            hdfsToEs_result result = new hdfsToEs_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            hdfsToEs_result result = new hdfsToEs_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, hdfsToEs_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.hdfsToEs(args.esIpAndPort, args.esClusterName, args.esIndexName, args.esTypeName, args.exportDir, args.numMappers, args.fileSeparator, args.queueName,resultHandler);
      }
    }

    public static class sqlServerToEs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sqlServerToEs_args, Void> {
      public sqlServerToEs() {
        super("sqlServerToEs");
      }

      public sqlServerToEs_args getEmptyArgsInstance() {
        return new sqlServerToEs_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sqlServerToEs_result result = new sqlServerToEs_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sqlServerToEs_result result = new sqlServerToEs_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sqlServerToEs_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.sqlServerToEs(args.connect, args.table, args.esIpAndPort, args.esClusterName, args.esIndexName, args.esTypeName, args.numMappers, args.where, args.queueName,resultHandler);
      }
    }

  }

  public static class dbToEs_args implements org.apache.thrift.TBase<dbToEs_args, dbToEs_args._Fields>, java.io.Serializable, Cloneable, Comparable<dbToEs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbToEs_args");

    private static final org.apache.thrift.protocol.TField CONNECT_FIELD_DESC = new org.apache.thrift.protocol.TField("connect", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ES_IP_AND_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("esIpAndPort", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField ES_CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("esClusterName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField ES_INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("esIndexName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField ES_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("esTypeName", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField NUM_MAPPERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numMappers", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField WHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("where", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)11);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dbToEs_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dbToEs_argsTupleSchemeFactory();

    public java.lang.String connect; // required
    public java.lang.String username; // required
    public java.lang.String password; // required
    public java.lang.String table; // required
    public java.lang.String esIpAndPort; // required
    public java.lang.String esClusterName; // required
    public java.lang.String esIndexName; // required
    public java.lang.String esTypeName; // required
    public java.lang.String numMappers; // required
    public java.lang.String where; // required
    public java.lang.String queueName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECT((short)1, "connect"),
      USERNAME((short)2, "username"),
      PASSWORD((short)3, "password"),
      TABLE((short)4, "table"),
      ES_IP_AND_PORT((short)5, "esIpAndPort"),
      ES_CLUSTER_NAME((short)6, "esClusterName"),
      ES_INDEX_NAME((short)7, "esIndexName"),
      ES_TYPE_NAME((short)8, "esTypeName"),
      NUM_MAPPERS((short)9, "numMappers"),
      WHERE((short)10, "where"),
      QUEUE_NAME((short)11, "queueName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECT
            return CONNECT;
          case 2: // USERNAME
            return USERNAME;
          case 3: // PASSWORD
            return PASSWORD;
          case 4: // TABLE
            return TABLE;
          case 5: // ES_IP_AND_PORT
            return ES_IP_AND_PORT;
          case 6: // ES_CLUSTER_NAME
            return ES_CLUSTER_NAME;
          case 7: // ES_INDEX_NAME
            return ES_INDEX_NAME;
          case 8: // ES_TYPE_NAME
            return ES_TYPE_NAME;
          case 9: // NUM_MAPPERS
            return NUM_MAPPERS;
          case 10: // WHERE
            return WHERE;
          case 11: // QUEUE_NAME
            return QUEUE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECT, new org.apache.thrift.meta_data.FieldMetaData("connect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ES_IP_AND_PORT, new org.apache.thrift.meta_data.FieldMetaData("esIpAndPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ES_CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("esClusterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ES_INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("esIndexName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ES_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("esTypeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM_MAPPERS, new org.apache.thrift.meta_data.FieldMetaData("numMappers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WHERE, new org.apache.thrift.meta_data.FieldMetaData("where", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbToEs_args.class, metaDataMap);
    }

    public dbToEs_args() {
    }

    public dbToEs_args(
      java.lang.String connect,
      java.lang.String username,
      java.lang.String password,
      java.lang.String table,
      java.lang.String esIpAndPort,
      java.lang.String esClusterName,
      java.lang.String esIndexName,
      java.lang.String esTypeName,
      java.lang.String numMappers,
      java.lang.String where,
      java.lang.String queueName)
    {
      this();
      this.connect = connect;
      this.username = username;
      this.password = password;
      this.table = table;
      this.esIpAndPort = esIpAndPort;
      this.esClusterName = esClusterName;
      this.esIndexName = esIndexName;
      this.esTypeName = esTypeName;
      this.numMappers = numMappers;
      this.where = where;
      this.queueName = queueName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbToEs_args(dbToEs_args other) {
      if (other.isSetConnect()) {
        this.connect = other.connect;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetEsIpAndPort()) {
        this.esIpAndPort = other.esIpAndPort;
      }
      if (other.isSetEsClusterName()) {
        this.esClusterName = other.esClusterName;
      }
      if (other.isSetEsIndexName()) {
        this.esIndexName = other.esIndexName;
      }
      if (other.isSetEsTypeName()) {
        this.esTypeName = other.esTypeName;
      }
      if (other.isSetNumMappers()) {
        this.numMappers = other.numMappers;
      }
      if (other.isSetWhere()) {
        this.where = other.where;
      }
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
    }

    public dbToEs_args deepCopy() {
      return new dbToEs_args(this);
    }

    @Override
    public void clear() {
      this.connect = null;
      this.username = null;
      this.password = null;
      this.table = null;
      this.esIpAndPort = null;
      this.esClusterName = null;
      this.esIndexName = null;
      this.esTypeName = null;
      this.numMappers = null;
      this.where = null;
      this.queueName = null;
    }

    public java.lang.String getConnect() {
      return this.connect;
    }

    public dbToEs_args setConnect(java.lang.String connect) {
      this.connect = connect;
      return this;
    }

    public void unsetConnect() {
      this.connect = null;
    }

    /** Returns true if field connect is set (has been assigned a value) and false otherwise */
    public boolean isSetConnect() {
      return this.connect != null;
    }

    public void setConnectIsSet(boolean value) {
      if (!value) {
        this.connect = null;
      }
    }

    public java.lang.String getUsername() {
      return this.username;
    }

    public dbToEs_args setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public dbToEs_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public java.lang.String getTable() {
      return this.table;
    }

    public dbToEs_args setTable(java.lang.String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public java.lang.String getEsIpAndPort() {
      return this.esIpAndPort;
    }

    public dbToEs_args setEsIpAndPort(java.lang.String esIpAndPort) {
      this.esIpAndPort = esIpAndPort;
      return this;
    }

    public void unsetEsIpAndPort() {
      this.esIpAndPort = null;
    }

    /** Returns true if field esIpAndPort is set (has been assigned a value) and false otherwise */
    public boolean isSetEsIpAndPort() {
      return this.esIpAndPort != null;
    }

    public void setEsIpAndPortIsSet(boolean value) {
      if (!value) {
        this.esIpAndPort = null;
      }
    }

    public java.lang.String getEsClusterName() {
      return this.esClusterName;
    }

    public dbToEs_args setEsClusterName(java.lang.String esClusterName) {
      this.esClusterName = esClusterName;
      return this;
    }

    public void unsetEsClusterName() {
      this.esClusterName = null;
    }

    /** Returns true if field esClusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetEsClusterName() {
      return this.esClusterName != null;
    }

    public void setEsClusterNameIsSet(boolean value) {
      if (!value) {
        this.esClusterName = null;
      }
    }

    public java.lang.String getEsIndexName() {
      return this.esIndexName;
    }

    public dbToEs_args setEsIndexName(java.lang.String esIndexName) {
      this.esIndexName = esIndexName;
      return this;
    }

    public void unsetEsIndexName() {
      this.esIndexName = null;
    }

    /** Returns true if field esIndexName is set (has been assigned a value) and false otherwise */
    public boolean isSetEsIndexName() {
      return this.esIndexName != null;
    }

    public void setEsIndexNameIsSet(boolean value) {
      if (!value) {
        this.esIndexName = null;
      }
    }

    public java.lang.String getEsTypeName() {
      return this.esTypeName;
    }

    public dbToEs_args setEsTypeName(java.lang.String esTypeName) {
      this.esTypeName = esTypeName;
      return this;
    }

    public void unsetEsTypeName() {
      this.esTypeName = null;
    }

    /** Returns true if field esTypeName is set (has been assigned a value) and false otherwise */
    public boolean isSetEsTypeName() {
      return this.esTypeName != null;
    }

    public void setEsTypeNameIsSet(boolean value) {
      if (!value) {
        this.esTypeName = null;
      }
    }

    public java.lang.String getNumMappers() {
      return this.numMappers;
    }

    public dbToEs_args setNumMappers(java.lang.String numMappers) {
      this.numMappers = numMappers;
      return this;
    }

    public void unsetNumMappers() {
      this.numMappers = null;
    }

    /** Returns true if field numMappers is set (has been assigned a value) and false otherwise */
    public boolean isSetNumMappers() {
      return this.numMappers != null;
    }

    public void setNumMappersIsSet(boolean value) {
      if (!value) {
        this.numMappers = null;
      }
    }

    public java.lang.String getWhere() {
      return this.where;
    }

    public dbToEs_args setWhere(java.lang.String where) {
      this.where = where;
      return this;
    }

    public void unsetWhere() {
      this.where = null;
    }

    /** Returns true if field where is set (has been assigned a value) and false otherwise */
    public boolean isSetWhere() {
      return this.where != null;
    }

    public void setWhereIsSet(boolean value) {
      if (!value) {
        this.where = null;
      }
    }

    public java.lang.String getQueueName() {
      return this.queueName;
    }

    public dbToEs_args setQueueName(java.lang.String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CONNECT:
        if (value == null) {
          unsetConnect();
        } else {
          setConnect((java.lang.String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((java.lang.String)value);
        }
        break;

      case ES_IP_AND_PORT:
        if (value == null) {
          unsetEsIpAndPort();
        } else {
          setEsIpAndPort((java.lang.String)value);
        }
        break;

      case ES_CLUSTER_NAME:
        if (value == null) {
          unsetEsClusterName();
        } else {
          setEsClusterName((java.lang.String)value);
        }
        break;

      case ES_INDEX_NAME:
        if (value == null) {
          unsetEsIndexName();
        } else {
          setEsIndexName((java.lang.String)value);
        }
        break;

      case ES_TYPE_NAME:
        if (value == null) {
          unsetEsTypeName();
        } else {
          setEsTypeName((java.lang.String)value);
        }
        break;

      case NUM_MAPPERS:
        if (value == null) {
          unsetNumMappers();
        } else {
          setNumMappers((java.lang.String)value);
        }
        break;

      case WHERE:
        if (value == null) {
          unsetWhere();
        } else {
          setWhere((java.lang.String)value);
        }
        break;

      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECT:
        return getConnect();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case TABLE:
        return getTable();

      case ES_IP_AND_PORT:
        return getEsIpAndPort();

      case ES_CLUSTER_NAME:
        return getEsClusterName();

      case ES_INDEX_NAME:
        return getEsIndexName();

      case ES_TYPE_NAME:
        return getEsTypeName();

      case NUM_MAPPERS:
        return getNumMappers();

      case WHERE:
        return getWhere();

      case QUEUE_NAME:
        return getQueueName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CONNECT:
        return isSetConnect();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case TABLE:
        return isSetTable();
      case ES_IP_AND_PORT:
        return isSetEsIpAndPort();
      case ES_CLUSTER_NAME:
        return isSetEsClusterName();
      case ES_INDEX_NAME:
        return isSetEsIndexName();
      case ES_TYPE_NAME:
        return isSetEsTypeName();
      case NUM_MAPPERS:
        return isSetNumMappers();
      case WHERE:
        return isSetWhere();
      case QUEUE_NAME:
        return isSetQueueName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dbToEs_args)
        return this.equals((dbToEs_args)that);
      return false;
    }

    public boolean equals(dbToEs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_connect = true && this.isSetConnect();
      boolean that_present_connect = true && that.isSetConnect();
      if (this_present_connect || that_present_connect) {
        if (!(this_present_connect && that_present_connect))
          return false;
        if (!this.connect.equals(that.connect))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_esIpAndPort = true && this.isSetEsIpAndPort();
      boolean that_present_esIpAndPort = true && that.isSetEsIpAndPort();
      if (this_present_esIpAndPort || that_present_esIpAndPort) {
        if (!(this_present_esIpAndPort && that_present_esIpAndPort))
          return false;
        if (!this.esIpAndPort.equals(that.esIpAndPort))
          return false;
      }

      boolean this_present_esClusterName = true && this.isSetEsClusterName();
      boolean that_present_esClusterName = true && that.isSetEsClusterName();
      if (this_present_esClusterName || that_present_esClusterName) {
        if (!(this_present_esClusterName && that_present_esClusterName))
          return false;
        if (!this.esClusterName.equals(that.esClusterName))
          return false;
      }

      boolean this_present_esIndexName = true && this.isSetEsIndexName();
      boolean that_present_esIndexName = true && that.isSetEsIndexName();
      if (this_present_esIndexName || that_present_esIndexName) {
        if (!(this_present_esIndexName && that_present_esIndexName))
          return false;
        if (!this.esIndexName.equals(that.esIndexName))
          return false;
      }

      boolean this_present_esTypeName = true && this.isSetEsTypeName();
      boolean that_present_esTypeName = true && that.isSetEsTypeName();
      if (this_present_esTypeName || that_present_esTypeName) {
        if (!(this_present_esTypeName && that_present_esTypeName))
          return false;
        if (!this.esTypeName.equals(that.esTypeName))
          return false;
      }

      boolean this_present_numMappers = true && this.isSetNumMappers();
      boolean that_present_numMappers = true && that.isSetNumMappers();
      if (this_present_numMappers || that_present_numMappers) {
        if (!(this_present_numMappers && that_present_numMappers))
          return false;
        if (!this.numMappers.equals(that.numMappers))
          return false;
      }

      boolean this_present_where = true && this.isSetWhere();
      boolean that_present_where = true && that.isSetWhere();
      if (this_present_where || that_present_where) {
        if (!(this_present_where && that_present_where))
          return false;
        if (!this.where.equals(that.where))
          return false;
      }

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetConnect()) ? 131071 : 524287);
      if (isSetConnect())
        hashCode = hashCode * 8191 + connect.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetEsIpAndPort()) ? 131071 : 524287);
      if (isSetEsIpAndPort())
        hashCode = hashCode * 8191 + esIpAndPort.hashCode();

      hashCode = hashCode * 8191 + ((isSetEsClusterName()) ? 131071 : 524287);
      if (isSetEsClusterName())
        hashCode = hashCode * 8191 + esClusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetEsIndexName()) ? 131071 : 524287);
      if (isSetEsIndexName())
        hashCode = hashCode * 8191 + esIndexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetEsTypeName()) ? 131071 : 524287);
      if (isSetEsTypeName())
        hashCode = hashCode * 8191 + esTypeName.hashCode();

      hashCode = hashCode * 8191 + ((isSetNumMappers()) ? 131071 : 524287);
      if (isSetNumMappers())
        hashCode = hashCode * 8191 + numMappers.hashCode();

      hashCode = hashCode * 8191 + ((isSetWhere()) ? 131071 : 524287);
      if (isSetWhere())
        hashCode = hashCode * 8191 + where.hashCode();

      hashCode = hashCode * 8191 + ((isSetQueueName()) ? 131071 : 524287);
      if (isSetQueueName())
        hashCode = hashCode * 8191 + queueName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(dbToEs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetConnect()).compareTo(other.isSetConnect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connect, other.connect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEsIpAndPort()).compareTo(other.isSetEsIpAndPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEsIpAndPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esIpAndPort, other.esIpAndPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEsClusterName()).compareTo(other.isSetEsClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEsClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esClusterName, other.esClusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEsIndexName()).compareTo(other.isSetEsIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEsIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esIndexName, other.esIndexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEsTypeName()).compareTo(other.isSetEsTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEsTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esTypeName, other.esTypeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumMappers()).compareTo(other.isSetNumMappers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumMappers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numMappers, other.numMappers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWhere()).compareTo(other.isSetWhere());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhere()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.where, other.where);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQueueName()).compareTo(other.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, other.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dbToEs_args(");
      boolean first = true;

      sb.append("connect:");
      if (this.connect == null) {
        sb.append("null");
      } else {
        sb.append(this.connect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("esIpAndPort:");
      if (this.esIpAndPort == null) {
        sb.append("null");
      } else {
        sb.append(this.esIpAndPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("esClusterName:");
      if (this.esClusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.esClusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("esIndexName:");
      if (this.esIndexName == null) {
        sb.append("null");
      } else {
        sb.append(this.esIndexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("esTypeName:");
      if (this.esTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.esTypeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numMappers:");
      if (this.numMappers == null) {
        sb.append("null");
      } else {
        sb.append(this.numMappers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("where:");
      if (this.where == null) {
        sb.append("null");
      } else {
        sb.append(this.where);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbToEs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbToEs_argsStandardScheme getScheme() {
        return new dbToEs_argsStandardScheme();
      }
    }

    private static class dbToEs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<dbToEs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbToEs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.connect = iprot.readString();
                struct.setConnectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ES_IP_AND_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.esIpAndPort = iprot.readString();
                struct.setEsIpAndPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ES_CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.esClusterName = iprot.readString();
                struct.setEsClusterNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ES_INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.esIndexName = iprot.readString();
                struct.setEsIndexNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // ES_TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.esTypeName = iprot.readString();
                struct.setEsTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // NUM_MAPPERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.numMappers = iprot.readString();
                struct.setNumMappersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // WHERE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.where = iprot.readString();
                struct.setWhereIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbToEs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connect != null) {
          oprot.writeFieldBegin(CONNECT_FIELD_DESC);
          oprot.writeString(struct.connect);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.esIpAndPort != null) {
          oprot.writeFieldBegin(ES_IP_AND_PORT_FIELD_DESC);
          oprot.writeString(struct.esIpAndPort);
          oprot.writeFieldEnd();
        }
        if (struct.esClusterName != null) {
          oprot.writeFieldBegin(ES_CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.esClusterName);
          oprot.writeFieldEnd();
        }
        if (struct.esIndexName != null) {
          oprot.writeFieldBegin(ES_INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.esIndexName);
          oprot.writeFieldEnd();
        }
        if (struct.esTypeName != null) {
          oprot.writeFieldBegin(ES_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.esTypeName);
          oprot.writeFieldEnd();
        }
        if (struct.numMappers != null) {
          oprot.writeFieldBegin(NUM_MAPPERS_FIELD_DESC);
          oprot.writeString(struct.numMappers);
          oprot.writeFieldEnd();
        }
        if (struct.where != null) {
          oprot.writeFieldBegin(WHERE_FIELD_DESC);
          oprot.writeString(struct.where);
          oprot.writeFieldEnd();
        }
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbToEs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbToEs_argsTupleScheme getScheme() {
        return new dbToEs_argsTupleScheme();
      }
    }

    private static class dbToEs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<dbToEs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbToEs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetConnect()) {
          optionals.set(0);
        }
        if (struct.isSetUsername()) {
          optionals.set(1);
        }
        if (struct.isSetPassword()) {
          optionals.set(2);
        }
        if (struct.isSetTable()) {
          optionals.set(3);
        }
        if (struct.isSetEsIpAndPort()) {
          optionals.set(4);
        }
        if (struct.isSetEsClusterName()) {
          optionals.set(5);
        }
        if (struct.isSetEsIndexName()) {
          optionals.set(6);
        }
        if (struct.isSetEsTypeName()) {
          optionals.set(7);
        }
        if (struct.isSetNumMappers()) {
          optionals.set(8);
        }
        if (struct.isSetWhere()) {
          optionals.set(9);
        }
        if (struct.isSetQueueName()) {
          optionals.set(10);
        }
        oprot.writeBitSet(optionals, 11);
        if (struct.isSetConnect()) {
          oprot.writeString(struct.connect);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetEsIpAndPort()) {
          oprot.writeString(struct.esIpAndPort);
        }
        if (struct.isSetEsClusterName()) {
          oprot.writeString(struct.esClusterName);
        }
        if (struct.isSetEsIndexName()) {
          oprot.writeString(struct.esIndexName);
        }
        if (struct.isSetEsTypeName()) {
          oprot.writeString(struct.esTypeName);
        }
        if (struct.isSetNumMappers()) {
          oprot.writeString(struct.numMappers);
        }
        if (struct.isSetWhere()) {
          oprot.writeString(struct.where);
        }
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbToEs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(11);
        if (incoming.get(0)) {
          struct.connect = iprot.readString();
          struct.setConnectIsSet(true);
        }
        if (incoming.get(1)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(3)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(4)) {
          struct.esIpAndPort = iprot.readString();
          struct.setEsIpAndPortIsSet(true);
        }
        if (incoming.get(5)) {
          struct.esClusterName = iprot.readString();
          struct.setEsClusterNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.esIndexName = iprot.readString();
          struct.setEsIndexNameIsSet(true);
        }
        if (incoming.get(7)) {
          struct.esTypeName = iprot.readString();
          struct.setEsTypeNameIsSet(true);
        }
        if (incoming.get(8)) {
          struct.numMappers = iprot.readString();
          struct.setNumMappersIsSet(true);
        }
        if (incoming.get(9)) {
          struct.where = iprot.readString();
          struct.setWhereIsSet(true);
        }
        if (incoming.get(10)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class dbToEs_result implements org.apache.thrift.TBase<dbToEs_result, dbToEs_result._Fields>, java.io.Serializable, Cloneable, Comparable<dbToEs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("dbToEs_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new dbToEs_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new dbToEs_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(dbToEs_result.class, metaDataMap);
    }

    public dbToEs_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public dbToEs_result(dbToEs_result other) {
    }

    public dbToEs_result deepCopy() {
      return new dbToEs_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof dbToEs_result)
        return this.equals((dbToEs_result)that);
      return false;
    }

    public boolean equals(dbToEs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(dbToEs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("dbToEs_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class dbToEs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbToEs_resultStandardScheme getScheme() {
        return new dbToEs_resultStandardScheme();
      }
    }

    private static class dbToEs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<dbToEs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, dbToEs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, dbToEs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class dbToEs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public dbToEs_resultTupleScheme getScheme() {
        return new dbToEs_resultTupleScheme();
      }
    }

    private static class dbToEs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<dbToEs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, dbToEs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, dbToEs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class hdfsToEs_args implements org.apache.thrift.TBase<hdfsToEs_args, hdfsToEs_args._Fields>, java.io.Serializable, Cloneable, Comparable<hdfsToEs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hdfsToEs_args");

    private static final org.apache.thrift.protocol.TField ES_IP_AND_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("esIpAndPort", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ES_CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("esClusterName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ES_INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("esIndexName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField ES_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("esTypeName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField EXPORT_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("exportDir", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField NUM_MAPPERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numMappers", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField FILE_SEPARATOR_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSeparator", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hdfsToEs_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hdfsToEs_argsTupleSchemeFactory();

    public java.lang.String esIpAndPort; // required
    public java.lang.String esClusterName; // required
    public java.lang.String esIndexName; // required
    public java.lang.String esTypeName; // required
    public java.lang.String exportDir; // required
    public java.lang.String numMappers; // required
    public java.lang.String fileSeparator; // required
    public java.lang.String queueName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ES_IP_AND_PORT((short)1, "esIpAndPort"),
      ES_CLUSTER_NAME((short)2, "esClusterName"),
      ES_INDEX_NAME((short)3, "esIndexName"),
      ES_TYPE_NAME((short)4, "esTypeName"),
      EXPORT_DIR((short)5, "exportDir"),
      NUM_MAPPERS((short)6, "numMappers"),
      FILE_SEPARATOR((short)7, "fileSeparator"),
      QUEUE_NAME((short)8, "queueName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ES_IP_AND_PORT
            return ES_IP_AND_PORT;
          case 2: // ES_CLUSTER_NAME
            return ES_CLUSTER_NAME;
          case 3: // ES_INDEX_NAME
            return ES_INDEX_NAME;
          case 4: // ES_TYPE_NAME
            return ES_TYPE_NAME;
          case 5: // EXPORT_DIR
            return EXPORT_DIR;
          case 6: // NUM_MAPPERS
            return NUM_MAPPERS;
          case 7: // FILE_SEPARATOR
            return FILE_SEPARATOR;
          case 8: // QUEUE_NAME
            return QUEUE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ES_IP_AND_PORT, new org.apache.thrift.meta_data.FieldMetaData("esIpAndPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ES_CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("esClusterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ES_INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("esIndexName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ES_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("esTypeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXPORT_DIR, new org.apache.thrift.meta_data.FieldMetaData("exportDir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM_MAPPERS, new org.apache.thrift.meta_data.FieldMetaData("numMappers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_SEPARATOR, new org.apache.thrift.meta_data.FieldMetaData("fileSeparator", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hdfsToEs_args.class, metaDataMap);
    }

    public hdfsToEs_args() {
    }

    public hdfsToEs_args(
      java.lang.String esIpAndPort,
      java.lang.String esClusterName,
      java.lang.String esIndexName,
      java.lang.String esTypeName,
      java.lang.String exportDir,
      java.lang.String numMappers,
      java.lang.String fileSeparator,
      java.lang.String queueName)
    {
      this();
      this.esIpAndPort = esIpAndPort;
      this.esClusterName = esClusterName;
      this.esIndexName = esIndexName;
      this.esTypeName = esTypeName;
      this.exportDir = exportDir;
      this.numMappers = numMappers;
      this.fileSeparator = fileSeparator;
      this.queueName = queueName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hdfsToEs_args(hdfsToEs_args other) {
      if (other.isSetEsIpAndPort()) {
        this.esIpAndPort = other.esIpAndPort;
      }
      if (other.isSetEsClusterName()) {
        this.esClusterName = other.esClusterName;
      }
      if (other.isSetEsIndexName()) {
        this.esIndexName = other.esIndexName;
      }
      if (other.isSetEsTypeName()) {
        this.esTypeName = other.esTypeName;
      }
      if (other.isSetExportDir()) {
        this.exportDir = other.exportDir;
      }
      if (other.isSetNumMappers()) {
        this.numMappers = other.numMappers;
      }
      if (other.isSetFileSeparator()) {
        this.fileSeparator = other.fileSeparator;
      }
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
    }

    public hdfsToEs_args deepCopy() {
      return new hdfsToEs_args(this);
    }

    @Override
    public void clear() {
      this.esIpAndPort = null;
      this.esClusterName = null;
      this.esIndexName = null;
      this.esTypeName = null;
      this.exportDir = null;
      this.numMappers = null;
      this.fileSeparator = null;
      this.queueName = null;
    }

    public java.lang.String getEsIpAndPort() {
      return this.esIpAndPort;
    }

    public hdfsToEs_args setEsIpAndPort(java.lang.String esIpAndPort) {
      this.esIpAndPort = esIpAndPort;
      return this;
    }

    public void unsetEsIpAndPort() {
      this.esIpAndPort = null;
    }

    /** Returns true if field esIpAndPort is set (has been assigned a value) and false otherwise */
    public boolean isSetEsIpAndPort() {
      return this.esIpAndPort != null;
    }

    public void setEsIpAndPortIsSet(boolean value) {
      if (!value) {
        this.esIpAndPort = null;
      }
    }

    public java.lang.String getEsClusterName() {
      return this.esClusterName;
    }

    public hdfsToEs_args setEsClusterName(java.lang.String esClusterName) {
      this.esClusterName = esClusterName;
      return this;
    }

    public void unsetEsClusterName() {
      this.esClusterName = null;
    }

    /** Returns true if field esClusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetEsClusterName() {
      return this.esClusterName != null;
    }

    public void setEsClusterNameIsSet(boolean value) {
      if (!value) {
        this.esClusterName = null;
      }
    }

    public java.lang.String getEsIndexName() {
      return this.esIndexName;
    }

    public hdfsToEs_args setEsIndexName(java.lang.String esIndexName) {
      this.esIndexName = esIndexName;
      return this;
    }

    public void unsetEsIndexName() {
      this.esIndexName = null;
    }

    /** Returns true if field esIndexName is set (has been assigned a value) and false otherwise */
    public boolean isSetEsIndexName() {
      return this.esIndexName != null;
    }

    public void setEsIndexNameIsSet(boolean value) {
      if (!value) {
        this.esIndexName = null;
      }
    }

    public java.lang.String getEsTypeName() {
      return this.esTypeName;
    }

    public hdfsToEs_args setEsTypeName(java.lang.String esTypeName) {
      this.esTypeName = esTypeName;
      return this;
    }

    public void unsetEsTypeName() {
      this.esTypeName = null;
    }

    /** Returns true if field esTypeName is set (has been assigned a value) and false otherwise */
    public boolean isSetEsTypeName() {
      return this.esTypeName != null;
    }

    public void setEsTypeNameIsSet(boolean value) {
      if (!value) {
        this.esTypeName = null;
      }
    }

    public java.lang.String getExportDir() {
      return this.exportDir;
    }

    public hdfsToEs_args setExportDir(java.lang.String exportDir) {
      this.exportDir = exportDir;
      return this;
    }

    public void unsetExportDir() {
      this.exportDir = null;
    }

    /** Returns true if field exportDir is set (has been assigned a value) and false otherwise */
    public boolean isSetExportDir() {
      return this.exportDir != null;
    }

    public void setExportDirIsSet(boolean value) {
      if (!value) {
        this.exportDir = null;
      }
    }

    public java.lang.String getNumMappers() {
      return this.numMappers;
    }

    public hdfsToEs_args setNumMappers(java.lang.String numMappers) {
      this.numMappers = numMappers;
      return this;
    }

    public void unsetNumMappers() {
      this.numMappers = null;
    }

    /** Returns true if field numMappers is set (has been assigned a value) and false otherwise */
    public boolean isSetNumMappers() {
      return this.numMappers != null;
    }

    public void setNumMappersIsSet(boolean value) {
      if (!value) {
        this.numMappers = null;
      }
    }

    public java.lang.String getFileSeparator() {
      return this.fileSeparator;
    }

    public hdfsToEs_args setFileSeparator(java.lang.String fileSeparator) {
      this.fileSeparator = fileSeparator;
      return this;
    }

    public void unsetFileSeparator() {
      this.fileSeparator = null;
    }

    /** Returns true if field fileSeparator is set (has been assigned a value) and false otherwise */
    public boolean isSetFileSeparator() {
      return this.fileSeparator != null;
    }

    public void setFileSeparatorIsSet(boolean value) {
      if (!value) {
        this.fileSeparator = null;
      }
    }

    public java.lang.String getQueueName() {
      return this.queueName;
    }

    public hdfsToEs_args setQueueName(java.lang.String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ES_IP_AND_PORT:
        if (value == null) {
          unsetEsIpAndPort();
        } else {
          setEsIpAndPort((java.lang.String)value);
        }
        break;

      case ES_CLUSTER_NAME:
        if (value == null) {
          unsetEsClusterName();
        } else {
          setEsClusterName((java.lang.String)value);
        }
        break;

      case ES_INDEX_NAME:
        if (value == null) {
          unsetEsIndexName();
        } else {
          setEsIndexName((java.lang.String)value);
        }
        break;

      case ES_TYPE_NAME:
        if (value == null) {
          unsetEsTypeName();
        } else {
          setEsTypeName((java.lang.String)value);
        }
        break;

      case EXPORT_DIR:
        if (value == null) {
          unsetExportDir();
        } else {
          setExportDir((java.lang.String)value);
        }
        break;

      case NUM_MAPPERS:
        if (value == null) {
          unsetNumMappers();
        } else {
          setNumMappers((java.lang.String)value);
        }
        break;

      case FILE_SEPARATOR:
        if (value == null) {
          unsetFileSeparator();
        } else {
          setFileSeparator((java.lang.String)value);
        }
        break;

      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ES_IP_AND_PORT:
        return getEsIpAndPort();

      case ES_CLUSTER_NAME:
        return getEsClusterName();

      case ES_INDEX_NAME:
        return getEsIndexName();

      case ES_TYPE_NAME:
        return getEsTypeName();

      case EXPORT_DIR:
        return getExportDir();

      case NUM_MAPPERS:
        return getNumMappers();

      case FILE_SEPARATOR:
        return getFileSeparator();

      case QUEUE_NAME:
        return getQueueName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ES_IP_AND_PORT:
        return isSetEsIpAndPort();
      case ES_CLUSTER_NAME:
        return isSetEsClusterName();
      case ES_INDEX_NAME:
        return isSetEsIndexName();
      case ES_TYPE_NAME:
        return isSetEsTypeName();
      case EXPORT_DIR:
        return isSetExportDir();
      case NUM_MAPPERS:
        return isSetNumMappers();
      case FILE_SEPARATOR:
        return isSetFileSeparator();
      case QUEUE_NAME:
        return isSetQueueName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof hdfsToEs_args)
        return this.equals((hdfsToEs_args)that);
      return false;
    }

    public boolean equals(hdfsToEs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_esIpAndPort = true && this.isSetEsIpAndPort();
      boolean that_present_esIpAndPort = true && that.isSetEsIpAndPort();
      if (this_present_esIpAndPort || that_present_esIpAndPort) {
        if (!(this_present_esIpAndPort && that_present_esIpAndPort))
          return false;
        if (!this.esIpAndPort.equals(that.esIpAndPort))
          return false;
      }

      boolean this_present_esClusterName = true && this.isSetEsClusterName();
      boolean that_present_esClusterName = true && that.isSetEsClusterName();
      if (this_present_esClusterName || that_present_esClusterName) {
        if (!(this_present_esClusterName && that_present_esClusterName))
          return false;
        if (!this.esClusterName.equals(that.esClusterName))
          return false;
      }

      boolean this_present_esIndexName = true && this.isSetEsIndexName();
      boolean that_present_esIndexName = true && that.isSetEsIndexName();
      if (this_present_esIndexName || that_present_esIndexName) {
        if (!(this_present_esIndexName && that_present_esIndexName))
          return false;
        if (!this.esIndexName.equals(that.esIndexName))
          return false;
      }

      boolean this_present_esTypeName = true && this.isSetEsTypeName();
      boolean that_present_esTypeName = true && that.isSetEsTypeName();
      if (this_present_esTypeName || that_present_esTypeName) {
        if (!(this_present_esTypeName && that_present_esTypeName))
          return false;
        if (!this.esTypeName.equals(that.esTypeName))
          return false;
      }

      boolean this_present_exportDir = true && this.isSetExportDir();
      boolean that_present_exportDir = true && that.isSetExportDir();
      if (this_present_exportDir || that_present_exportDir) {
        if (!(this_present_exportDir && that_present_exportDir))
          return false;
        if (!this.exportDir.equals(that.exportDir))
          return false;
      }

      boolean this_present_numMappers = true && this.isSetNumMappers();
      boolean that_present_numMappers = true && that.isSetNumMappers();
      if (this_present_numMappers || that_present_numMappers) {
        if (!(this_present_numMappers && that_present_numMappers))
          return false;
        if (!this.numMappers.equals(that.numMappers))
          return false;
      }

      boolean this_present_fileSeparator = true && this.isSetFileSeparator();
      boolean that_present_fileSeparator = true && that.isSetFileSeparator();
      if (this_present_fileSeparator || that_present_fileSeparator) {
        if (!(this_present_fileSeparator && that_present_fileSeparator))
          return false;
        if (!this.fileSeparator.equals(that.fileSeparator))
          return false;
      }

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEsIpAndPort()) ? 131071 : 524287);
      if (isSetEsIpAndPort())
        hashCode = hashCode * 8191 + esIpAndPort.hashCode();

      hashCode = hashCode * 8191 + ((isSetEsClusterName()) ? 131071 : 524287);
      if (isSetEsClusterName())
        hashCode = hashCode * 8191 + esClusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetEsIndexName()) ? 131071 : 524287);
      if (isSetEsIndexName())
        hashCode = hashCode * 8191 + esIndexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetEsTypeName()) ? 131071 : 524287);
      if (isSetEsTypeName())
        hashCode = hashCode * 8191 + esTypeName.hashCode();

      hashCode = hashCode * 8191 + ((isSetExportDir()) ? 131071 : 524287);
      if (isSetExportDir())
        hashCode = hashCode * 8191 + exportDir.hashCode();

      hashCode = hashCode * 8191 + ((isSetNumMappers()) ? 131071 : 524287);
      if (isSetNumMappers())
        hashCode = hashCode * 8191 + numMappers.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileSeparator()) ? 131071 : 524287);
      if (isSetFileSeparator())
        hashCode = hashCode * 8191 + fileSeparator.hashCode();

      hashCode = hashCode * 8191 + ((isSetQueueName()) ? 131071 : 524287);
      if (isSetQueueName())
        hashCode = hashCode * 8191 + queueName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(hdfsToEs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEsIpAndPort()).compareTo(other.isSetEsIpAndPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEsIpAndPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esIpAndPort, other.esIpAndPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEsClusterName()).compareTo(other.isSetEsClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEsClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esClusterName, other.esClusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEsIndexName()).compareTo(other.isSetEsIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEsIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esIndexName, other.esIndexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEsTypeName()).compareTo(other.isSetEsTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEsTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esTypeName, other.esTypeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExportDir()).compareTo(other.isSetExportDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExportDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exportDir, other.exportDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumMappers()).compareTo(other.isSetNumMappers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumMappers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numMappers, other.numMappers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileSeparator()).compareTo(other.isSetFileSeparator());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileSeparator()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSeparator, other.fileSeparator);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQueueName()).compareTo(other.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, other.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("hdfsToEs_args(");
      boolean first = true;

      sb.append("esIpAndPort:");
      if (this.esIpAndPort == null) {
        sb.append("null");
      } else {
        sb.append(this.esIpAndPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("esClusterName:");
      if (this.esClusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.esClusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("esIndexName:");
      if (this.esIndexName == null) {
        sb.append("null");
      } else {
        sb.append(this.esIndexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("esTypeName:");
      if (this.esTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.esTypeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exportDir:");
      if (this.exportDir == null) {
        sb.append("null");
      } else {
        sb.append(this.exportDir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numMappers:");
      if (this.numMappers == null) {
        sb.append("null");
      } else {
        sb.append(this.numMappers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileSeparator:");
      if (this.fileSeparator == null) {
        sb.append("null");
      } else {
        sb.append(this.fileSeparator);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hdfsToEs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hdfsToEs_argsStandardScheme getScheme() {
        return new hdfsToEs_argsStandardScheme();
      }
    }

    private static class hdfsToEs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<hdfsToEs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hdfsToEs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ES_IP_AND_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.esIpAndPort = iprot.readString();
                struct.setEsIpAndPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ES_CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.esClusterName = iprot.readString();
                struct.setEsClusterNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ES_INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.esIndexName = iprot.readString();
                struct.setEsIndexNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // ES_TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.esTypeName = iprot.readString();
                struct.setEsTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // EXPORT_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.exportDir = iprot.readString();
                struct.setExportDirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // NUM_MAPPERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.numMappers = iprot.readString();
                struct.setNumMappersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // FILE_SEPARATOR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileSeparator = iprot.readString();
                struct.setFileSeparatorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hdfsToEs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.esIpAndPort != null) {
          oprot.writeFieldBegin(ES_IP_AND_PORT_FIELD_DESC);
          oprot.writeString(struct.esIpAndPort);
          oprot.writeFieldEnd();
        }
        if (struct.esClusterName != null) {
          oprot.writeFieldBegin(ES_CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.esClusterName);
          oprot.writeFieldEnd();
        }
        if (struct.esIndexName != null) {
          oprot.writeFieldBegin(ES_INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.esIndexName);
          oprot.writeFieldEnd();
        }
        if (struct.esTypeName != null) {
          oprot.writeFieldBegin(ES_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.esTypeName);
          oprot.writeFieldEnd();
        }
        if (struct.exportDir != null) {
          oprot.writeFieldBegin(EXPORT_DIR_FIELD_DESC);
          oprot.writeString(struct.exportDir);
          oprot.writeFieldEnd();
        }
        if (struct.numMappers != null) {
          oprot.writeFieldBegin(NUM_MAPPERS_FIELD_DESC);
          oprot.writeString(struct.numMappers);
          oprot.writeFieldEnd();
        }
        if (struct.fileSeparator != null) {
          oprot.writeFieldBegin(FILE_SEPARATOR_FIELD_DESC);
          oprot.writeString(struct.fileSeparator);
          oprot.writeFieldEnd();
        }
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hdfsToEs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hdfsToEs_argsTupleScheme getScheme() {
        return new hdfsToEs_argsTupleScheme();
      }
    }

    private static class hdfsToEs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<hdfsToEs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hdfsToEs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEsIpAndPort()) {
          optionals.set(0);
        }
        if (struct.isSetEsClusterName()) {
          optionals.set(1);
        }
        if (struct.isSetEsIndexName()) {
          optionals.set(2);
        }
        if (struct.isSetEsTypeName()) {
          optionals.set(3);
        }
        if (struct.isSetExportDir()) {
          optionals.set(4);
        }
        if (struct.isSetNumMappers()) {
          optionals.set(5);
        }
        if (struct.isSetFileSeparator()) {
          optionals.set(6);
        }
        if (struct.isSetQueueName()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetEsIpAndPort()) {
          oprot.writeString(struct.esIpAndPort);
        }
        if (struct.isSetEsClusterName()) {
          oprot.writeString(struct.esClusterName);
        }
        if (struct.isSetEsIndexName()) {
          oprot.writeString(struct.esIndexName);
        }
        if (struct.isSetEsTypeName()) {
          oprot.writeString(struct.esTypeName);
        }
        if (struct.isSetExportDir()) {
          oprot.writeString(struct.exportDir);
        }
        if (struct.isSetNumMappers()) {
          oprot.writeString(struct.numMappers);
        }
        if (struct.isSetFileSeparator()) {
          oprot.writeString(struct.fileSeparator);
        }
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hdfsToEs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.esIpAndPort = iprot.readString();
          struct.setEsIpAndPortIsSet(true);
        }
        if (incoming.get(1)) {
          struct.esClusterName = iprot.readString();
          struct.setEsClusterNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.esIndexName = iprot.readString();
          struct.setEsIndexNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.esTypeName = iprot.readString();
          struct.setEsTypeNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.exportDir = iprot.readString();
          struct.setExportDirIsSet(true);
        }
        if (incoming.get(5)) {
          struct.numMappers = iprot.readString();
          struct.setNumMappersIsSet(true);
        }
        if (incoming.get(6)) {
          struct.fileSeparator = iprot.readString();
          struct.setFileSeparatorIsSet(true);
        }
        if (incoming.get(7)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class hdfsToEs_result implements org.apache.thrift.TBase<hdfsToEs_result, hdfsToEs_result._Fields>, java.io.Serializable, Cloneable, Comparable<hdfsToEs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("hdfsToEs_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new hdfsToEs_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new hdfsToEs_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(hdfsToEs_result.class, metaDataMap);
    }

    public hdfsToEs_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public hdfsToEs_result(hdfsToEs_result other) {
    }

    public hdfsToEs_result deepCopy() {
      return new hdfsToEs_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof hdfsToEs_result)
        return this.equals((hdfsToEs_result)that);
      return false;
    }

    public boolean equals(hdfsToEs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(hdfsToEs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("hdfsToEs_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class hdfsToEs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hdfsToEs_resultStandardScheme getScheme() {
        return new hdfsToEs_resultStandardScheme();
      }
    }

    private static class hdfsToEs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<hdfsToEs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, hdfsToEs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, hdfsToEs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class hdfsToEs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public hdfsToEs_resultTupleScheme getScheme() {
        return new hdfsToEs_resultTupleScheme();
      }
    }

    private static class hdfsToEs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<hdfsToEs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, hdfsToEs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, hdfsToEs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sqlServerToEs_args implements org.apache.thrift.TBase<sqlServerToEs_args, sqlServerToEs_args._Fields>, java.io.Serializable, Cloneable, Comparable<sqlServerToEs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sqlServerToEs_args");

    private static final org.apache.thrift.protocol.TField CONNECT_FIELD_DESC = new org.apache.thrift.protocol.TField("connect", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("table", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField ES_IP_AND_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("esIpAndPort", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField ES_CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("esClusterName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField ES_INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("esIndexName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField ES_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("esTypeName", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField NUM_MAPPERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numMappers", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField WHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("where", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)11);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sqlServerToEs_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sqlServerToEs_argsTupleSchemeFactory();

    public java.lang.String connect; // required
    public java.lang.String table; // required
    public java.lang.String esIpAndPort; // required
    public java.lang.String esClusterName; // required
    public java.lang.String esIndexName; // required
    public java.lang.String esTypeName; // required
    public java.lang.String numMappers; // required
    public java.lang.String where; // required
    public java.lang.String queueName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CONNECT((short)1, "connect"),
      TABLE((short)4, "table"),
      ES_IP_AND_PORT((short)5, "esIpAndPort"),
      ES_CLUSTER_NAME((short)6, "esClusterName"),
      ES_INDEX_NAME((short)7, "esIndexName"),
      ES_TYPE_NAME((short)8, "esTypeName"),
      NUM_MAPPERS((short)9, "numMappers"),
      WHERE((short)10, "where"),
      QUEUE_NAME((short)11, "queueName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CONNECT
            return CONNECT;
          case 4: // TABLE
            return TABLE;
          case 5: // ES_IP_AND_PORT
            return ES_IP_AND_PORT;
          case 6: // ES_CLUSTER_NAME
            return ES_CLUSTER_NAME;
          case 7: // ES_INDEX_NAME
            return ES_INDEX_NAME;
          case 8: // ES_TYPE_NAME
            return ES_TYPE_NAME;
          case 9: // NUM_MAPPERS
            return NUM_MAPPERS;
          case 10: // WHERE
            return WHERE;
          case 11: // QUEUE_NAME
            return QUEUE_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CONNECT, new org.apache.thrift.meta_data.FieldMetaData("connect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TABLE, new org.apache.thrift.meta_data.FieldMetaData("table", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ES_IP_AND_PORT, new org.apache.thrift.meta_data.FieldMetaData("esIpAndPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ES_CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("esClusterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ES_INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("esIndexName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ES_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("esTypeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM_MAPPERS, new org.apache.thrift.meta_data.FieldMetaData("numMappers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.WHERE, new org.apache.thrift.meta_data.FieldMetaData("where", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sqlServerToEs_args.class, metaDataMap);
    }

    public sqlServerToEs_args() {
    }

    public sqlServerToEs_args(
      java.lang.String connect,
      java.lang.String table,
      java.lang.String esIpAndPort,
      java.lang.String esClusterName,
      java.lang.String esIndexName,
      java.lang.String esTypeName,
      java.lang.String numMappers,
      java.lang.String where,
      java.lang.String queueName)
    {
      this();
      this.connect = connect;
      this.table = table;
      this.esIpAndPort = esIpAndPort;
      this.esClusterName = esClusterName;
      this.esIndexName = esIndexName;
      this.esTypeName = esTypeName;
      this.numMappers = numMappers;
      this.where = where;
      this.queueName = queueName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sqlServerToEs_args(sqlServerToEs_args other) {
      if (other.isSetConnect()) {
        this.connect = other.connect;
      }
      if (other.isSetTable()) {
        this.table = other.table;
      }
      if (other.isSetEsIpAndPort()) {
        this.esIpAndPort = other.esIpAndPort;
      }
      if (other.isSetEsClusterName()) {
        this.esClusterName = other.esClusterName;
      }
      if (other.isSetEsIndexName()) {
        this.esIndexName = other.esIndexName;
      }
      if (other.isSetEsTypeName()) {
        this.esTypeName = other.esTypeName;
      }
      if (other.isSetNumMappers()) {
        this.numMappers = other.numMappers;
      }
      if (other.isSetWhere()) {
        this.where = other.where;
      }
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
    }

    public sqlServerToEs_args deepCopy() {
      return new sqlServerToEs_args(this);
    }

    @Override
    public void clear() {
      this.connect = null;
      this.table = null;
      this.esIpAndPort = null;
      this.esClusterName = null;
      this.esIndexName = null;
      this.esTypeName = null;
      this.numMappers = null;
      this.where = null;
      this.queueName = null;
    }

    public java.lang.String getConnect() {
      return this.connect;
    }

    public sqlServerToEs_args setConnect(java.lang.String connect) {
      this.connect = connect;
      return this;
    }

    public void unsetConnect() {
      this.connect = null;
    }

    /** Returns true if field connect is set (has been assigned a value) and false otherwise */
    public boolean isSetConnect() {
      return this.connect != null;
    }

    public void setConnectIsSet(boolean value) {
      if (!value) {
        this.connect = null;
      }
    }

    public java.lang.String getTable() {
      return this.table;
    }

    public sqlServerToEs_args setTable(java.lang.String table) {
      this.table = table;
      return this;
    }

    public void unsetTable() {
      this.table = null;
    }

    /** Returns true if field table is set (has been assigned a value) and false otherwise */
    public boolean isSetTable() {
      return this.table != null;
    }

    public void setTableIsSet(boolean value) {
      if (!value) {
        this.table = null;
      }
    }

    public java.lang.String getEsIpAndPort() {
      return this.esIpAndPort;
    }

    public sqlServerToEs_args setEsIpAndPort(java.lang.String esIpAndPort) {
      this.esIpAndPort = esIpAndPort;
      return this;
    }

    public void unsetEsIpAndPort() {
      this.esIpAndPort = null;
    }

    /** Returns true if field esIpAndPort is set (has been assigned a value) and false otherwise */
    public boolean isSetEsIpAndPort() {
      return this.esIpAndPort != null;
    }

    public void setEsIpAndPortIsSet(boolean value) {
      if (!value) {
        this.esIpAndPort = null;
      }
    }

    public java.lang.String getEsClusterName() {
      return this.esClusterName;
    }

    public sqlServerToEs_args setEsClusterName(java.lang.String esClusterName) {
      this.esClusterName = esClusterName;
      return this;
    }

    public void unsetEsClusterName() {
      this.esClusterName = null;
    }

    /** Returns true if field esClusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetEsClusterName() {
      return this.esClusterName != null;
    }

    public void setEsClusterNameIsSet(boolean value) {
      if (!value) {
        this.esClusterName = null;
      }
    }

    public java.lang.String getEsIndexName() {
      return this.esIndexName;
    }

    public sqlServerToEs_args setEsIndexName(java.lang.String esIndexName) {
      this.esIndexName = esIndexName;
      return this;
    }

    public void unsetEsIndexName() {
      this.esIndexName = null;
    }

    /** Returns true if field esIndexName is set (has been assigned a value) and false otherwise */
    public boolean isSetEsIndexName() {
      return this.esIndexName != null;
    }

    public void setEsIndexNameIsSet(boolean value) {
      if (!value) {
        this.esIndexName = null;
      }
    }

    public java.lang.String getEsTypeName() {
      return this.esTypeName;
    }

    public sqlServerToEs_args setEsTypeName(java.lang.String esTypeName) {
      this.esTypeName = esTypeName;
      return this;
    }

    public void unsetEsTypeName() {
      this.esTypeName = null;
    }

    /** Returns true if field esTypeName is set (has been assigned a value) and false otherwise */
    public boolean isSetEsTypeName() {
      return this.esTypeName != null;
    }

    public void setEsTypeNameIsSet(boolean value) {
      if (!value) {
        this.esTypeName = null;
      }
    }

    public java.lang.String getNumMappers() {
      return this.numMappers;
    }

    public sqlServerToEs_args setNumMappers(java.lang.String numMappers) {
      this.numMappers = numMappers;
      return this;
    }

    public void unsetNumMappers() {
      this.numMappers = null;
    }

    /** Returns true if field numMappers is set (has been assigned a value) and false otherwise */
    public boolean isSetNumMappers() {
      return this.numMappers != null;
    }

    public void setNumMappersIsSet(boolean value) {
      if (!value) {
        this.numMappers = null;
      }
    }

    public java.lang.String getWhere() {
      return this.where;
    }

    public sqlServerToEs_args setWhere(java.lang.String where) {
      this.where = where;
      return this;
    }

    public void unsetWhere() {
      this.where = null;
    }

    /** Returns true if field where is set (has been assigned a value) and false otherwise */
    public boolean isSetWhere() {
      return this.where != null;
    }

    public void setWhereIsSet(boolean value) {
      if (!value) {
        this.where = null;
      }
    }

    public java.lang.String getQueueName() {
      return this.queueName;
    }

    public sqlServerToEs_args setQueueName(java.lang.String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CONNECT:
        if (value == null) {
          unsetConnect();
        } else {
          setConnect((java.lang.String)value);
        }
        break;

      case TABLE:
        if (value == null) {
          unsetTable();
        } else {
          setTable((java.lang.String)value);
        }
        break;

      case ES_IP_AND_PORT:
        if (value == null) {
          unsetEsIpAndPort();
        } else {
          setEsIpAndPort((java.lang.String)value);
        }
        break;

      case ES_CLUSTER_NAME:
        if (value == null) {
          unsetEsClusterName();
        } else {
          setEsClusterName((java.lang.String)value);
        }
        break;

      case ES_INDEX_NAME:
        if (value == null) {
          unsetEsIndexName();
        } else {
          setEsIndexName((java.lang.String)value);
        }
        break;

      case ES_TYPE_NAME:
        if (value == null) {
          unsetEsTypeName();
        } else {
          setEsTypeName((java.lang.String)value);
        }
        break;

      case NUM_MAPPERS:
        if (value == null) {
          unsetNumMappers();
        } else {
          setNumMappers((java.lang.String)value);
        }
        break;

      case WHERE:
        if (value == null) {
          unsetWhere();
        } else {
          setWhere((java.lang.String)value);
        }
        break;

      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CONNECT:
        return getConnect();

      case TABLE:
        return getTable();

      case ES_IP_AND_PORT:
        return getEsIpAndPort();

      case ES_CLUSTER_NAME:
        return getEsClusterName();

      case ES_INDEX_NAME:
        return getEsIndexName();

      case ES_TYPE_NAME:
        return getEsTypeName();

      case NUM_MAPPERS:
        return getNumMappers();

      case WHERE:
        return getWhere();

      case QUEUE_NAME:
        return getQueueName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CONNECT:
        return isSetConnect();
      case TABLE:
        return isSetTable();
      case ES_IP_AND_PORT:
        return isSetEsIpAndPort();
      case ES_CLUSTER_NAME:
        return isSetEsClusterName();
      case ES_INDEX_NAME:
        return isSetEsIndexName();
      case ES_TYPE_NAME:
        return isSetEsTypeName();
      case NUM_MAPPERS:
        return isSetNumMappers();
      case WHERE:
        return isSetWhere();
      case QUEUE_NAME:
        return isSetQueueName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sqlServerToEs_args)
        return this.equals((sqlServerToEs_args)that);
      return false;
    }

    public boolean equals(sqlServerToEs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_connect = true && this.isSetConnect();
      boolean that_present_connect = true && that.isSetConnect();
      if (this_present_connect || that_present_connect) {
        if (!(this_present_connect && that_present_connect))
          return false;
        if (!this.connect.equals(that.connect))
          return false;
      }

      boolean this_present_table = true && this.isSetTable();
      boolean that_present_table = true && that.isSetTable();
      if (this_present_table || that_present_table) {
        if (!(this_present_table && that_present_table))
          return false;
        if (!this.table.equals(that.table))
          return false;
      }

      boolean this_present_esIpAndPort = true && this.isSetEsIpAndPort();
      boolean that_present_esIpAndPort = true && that.isSetEsIpAndPort();
      if (this_present_esIpAndPort || that_present_esIpAndPort) {
        if (!(this_present_esIpAndPort && that_present_esIpAndPort))
          return false;
        if (!this.esIpAndPort.equals(that.esIpAndPort))
          return false;
      }

      boolean this_present_esClusterName = true && this.isSetEsClusterName();
      boolean that_present_esClusterName = true && that.isSetEsClusterName();
      if (this_present_esClusterName || that_present_esClusterName) {
        if (!(this_present_esClusterName && that_present_esClusterName))
          return false;
        if (!this.esClusterName.equals(that.esClusterName))
          return false;
      }

      boolean this_present_esIndexName = true && this.isSetEsIndexName();
      boolean that_present_esIndexName = true && that.isSetEsIndexName();
      if (this_present_esIndexName || that_present_esIndexName) {
        if (!(this_present_esIndexName && that_present_esIndexName))
          return false;
        if (!this.esIndexName.equals(that.esIndexName))
          return false;
      }

      boolean this_present_esTypeName = true && this.isSetEsTypeName();
      boolean that_present_esTypeName = true && that.isSetEsTypeName();
      if (this_present_esTypeName || that_present_esTypeName) {
        if (!(this_present_esTypeName && that_present_esTypeName))
          return false;
        if (!this.esTypeName.equals(that.esTypeName))
          return false;
      }

      boolean this_present_numMappers = true && this.isSetNumMappers();
      boolean that_present_numMappers = true && that.isSetNumMappers();
      if (this_present_numMappers || that_present_numMappers) {
        if (!(this_present_numMappers && that_present_numMappers))
          return false;
        if (!this.numMappers.equals(that.numMappers))
          return false;
      }

      boolean this_present_where = true && this.isSetWhere();
      boolean that_present_where = true && that.isSetWhere();
      if (this_present_where || that_present_where) {
        if (!(this_present_where && that_present_where))
          return false;
        if (!this.where.equals(that.where))
          return false;
      }

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetConnect()) ? 131071 : 524287);
      if (isSetConnect())
        hashCode = hashCode * 8191 + connect.hashCode();

      hashCode = hashCode * 8191 + ((isSetTable()) ? 131071 : 524287);
      if (isSetTable())
        hashCode = hashCode * 8191 + table.hashCode();

      hashCode = hashCode * 8191 + ((isSetEsIpAndPort()) ? 131071 : 524287);
      if (isSetEsIpAndPort())
        hashCode = hashCode * 8191 + esIpAndPort.hashCode();

      hashCode = hashCode * 8191 + ((isSetEsClusterName()) ? 131071 : 524287);
      if (isSetEsClusterName())
        hashCode = hashCode * 8191 + esClusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetEsIndexName()) ? 131071 : 524287);
      if (isSetEsIndexName())
        hashCode = hashCode * 8191 + esIndexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetEsTypeName()) ? 131071 : 524287);
      if (isSetEsTypeName())
        hashCode = hashCode * 8191 + esTypeName.hashCode();

      hashCode = hashCode * 8191 + ((isSetNumMappers()) ? 131071 : 524287);
      if (isSetNumMappers())
        hashCode = hashCode * 8191 + numMappers.hashCode();

      hashCode = hashCode * 8191 + ((isSetWhere()) ? 131071 : 524287);
      if (isSetWhere())
        hashCode = hashCode * 8191 + where.hashCode();

      hashCode = hashCode * 8191 + ((isSetQueueName()) ? 131071 : 524287);
      if (isSetQueueName())
        hashCode = hashCode * 8191 + queueName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sqlServerToEs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetConnect()).compareTo(other.isSetConnect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConnect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.connect, other.connect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTable()).compareTo(other.isSetTable());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTable()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.table, other.table);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEsIpAndPort()).compareTo(other.isSetEsIpAndPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEsIpAndPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esIpAndPort, other.esIpAndPort);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEsClusterName()).compareTo(other.isSetEsClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEsClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esClusterName, other.esClusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEsIndexName()).compareTo(other.isSetEsIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEsIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esIndexName, other.esIndexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEsTypeName()).compareTo(other.isSetEsTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEsTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.esTypeName, other.esTypeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumMappers()).compareTo(other.isSetNumMappers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumMappers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numMappers, other.numMappers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetWhere()).compareTo(other.isSetWhere());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWhere()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.where, other.where);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQueueName()).compareTo(other.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, other.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sqlServerToEs_args(");
      boolean first = true;

      sb.append("connect:");
      if (this.connect == null) {
        sb.append("null");
      } else {
        sb.append(this.connect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("table:");
      if (this.table == null) {
        sb.append("null");
      } else {
        sb.append(this.table);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("esIpAndPort:");
      if (this.esIpAndPort == null) {
        sb.append("null");
      } else {
        sb.append(this.esIpAndPort);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("esClusterName:");
      if (this.esClusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.esClusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("esIndexName:");
      if (this.esIndexName == null) {
        sb.append("null");
      } else {
        sb.append(this.esIndexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("esTypeName:");
      if (this.esTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.esTypeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numMappers:");
      if (this.numMappers == null) {
        sb.append("null");
      } else {
        sb.append(this.numMappers);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("where:");
      if (this.where == null) {
        sb.append("null");
      } else {
        sb.append(this.where);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sqlServerToEs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sqlServerToEs_argsStandardScheme getScheme() {
        return new sqlServerToEs_argsStandardScheme();
      }
    }

    private static class sqlServerToEs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sqlServerToEs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sqlServerToEs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CONNECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.connect = iprot.readString();
                struct.setConnectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TABLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.table = iprot.readString();
                struct.setTableIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // ES_IP_AND_PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.esIpAndPort = iprot.readString();
                struct.setEsIpAndPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ES_CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.esClusterName = iprot.readString();
                struct.setEsClusterNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ES_INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.esIndexName = iprot.readString();
                struct.setEsIndexNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // ES_TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.esTypeName = iprot.readString();
                struct.setEsTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // NUM_MAPPERS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.numMappers = iprot.readString();
                struct.setNumMappersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // WHERE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.where = iprot.readString();
                struct.setWhereIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sqlServerToEs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.connect != null) {
          oprot.writeFieldBegin(CONNECT_FIELD_DESC);
          oprot.writeString(struct.connect);
          oprot.writeFieldEnd();
        }
        if (struct.table != null) {
          oprot.writeFieldBegin(TABLE_FIELD_DESC);
          oprot.writeString(struct.table);
          oprot.writeFieldEnd();
        }
        if (struct.esIpAndPort != null) {
          oprot.writeFieldBegin(ES_IP_AND_PORT_FIELD_DESC);
          oprot.writeString(struct.esIpAndPort);
          oprot.writeFieldEnd();
        }
        if (struct.esClusterName != null) {
          oprot.writeFieldBegin(ES_CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.esClusterName);
          oprot.writeFieldEnd();
        }
        if (struct.esIndexName != null) {
          oprot.writeFieldBegin(ES_INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.esIndexName);
          oprot.writeFieldEnd();
        }
        if (struct.esTypeName != null) {
          oprot.writeFieldBegin(ES_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.esTypeName);
          oprot.writeFieldEnd();
        }
        if (struct.numMappers != null) {
          oprot.writeFieldBegin(NUM_MAPPERS_FIELD_DESC);
          oprot.writeString(struct.numMappers);
          oprot.writeFieldEnd();
        }
        if (struct.where != null) {
          oprot.writeFieldBegin(WHERE_FIELD_DESC);
          oprot.writeString(struct.where);
          oprot.writeFieldEnd();
        }
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sqlServerToEs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sqlServerToEs_argsTupleScheme getScheme() {
        return new sqlServerToEs_argsTupleScheme();
      }
    }

    private static class sqlServerToEs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sqlServerToEs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sqlServerToEs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetConnect()) {
          optionals.set(0);
        }
        if (struct.isSetTable()) {
          optionals.set(1);
        }
        if (struct.isSetEsIpAndPort()) {
          optionals.set(2);
        }
        if (struct.isSetEsClusterName()) {
          optionals.set(3);
        }
        if (struct.isSetEsIndexName()) {
          optionals.set(4);
        }
        if (struct.isSetEsTypeName()) {
          optionals.set(5);
        }
        if (struct.isSetNumMappers()) {
          optionals.set(6);
        }
        if (struct.isSetWhere()) {
          optionals.set(7);
        }
        if (struct.isSetQueueName()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetConnect()) {
          oprot.writeString(struct.connect);
        }
        if (struct.isSetTable()) {
          oprot.writeString(struct.table);
        }
        if (struct.isSetEsIpAndPort()) {
          oprot.writeString(struct.esIpAndPort);
        }
        if (struct.isSetEsClusterName()) {
          oprot.writeString(struct.esClusterName);
        }
        if (struct.isSetEsIndexName()) {
          oprot.writeString(struct.esIndexName);
        }
        if (struct.isSetEsTypeName()) {
          oprot.writeString(struct.esTypeName);
        }
        if (struct.isSetNumMappers()) {
          oprot.writeString(struct.numMappers);
        }
        if (struct.isSetWhere()) {
          oprot.writeString(struct.where);
        }
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sqlServerToEs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.connect = iprot.readString();
          struct.setConnectIsSet(true);
        }
        if (incoming.get(1)) {
          struct.table = iprot.readString();
          struct.setTableIsSet(true);
        }
        if (incoming.get(2)) {
          struct.esIpAndPort = iprot.readString();
          struct.setEsIpAndPortIsSet(true);
        }
        if (incoming.get(3)) {
          struct.esClusterName = iprot.readString();
          struct.setEsClusterNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.esIndexName = iprot.readString();
          struct.setEsIndexNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.esTypeName = iprot.readString();
          struct.setEsTypeNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.numMappers = iprot.readString();
          struct.setNumMappersIsSet(true);
        }
        if (incoming.get(7)) {
          struct.where = iprot.readString();
          struct.setWhereIsSet(true);
        }
        if (incoming.get(8)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sqlServerToEs_result implements org.apache.thrift.TBase<sqlServerToEs_result, sqlServerToEs_result._Fields>, java.io.Serializable, Cloneable, Comparable<sqlServerToEs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sqlServerToEs_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sqlServerToEs_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sqlServerToEs_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sqlServerToEs_result.class, metaDataMap);
    }

    public sqlServerToEs_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sqlServerToEs_result(sqlServerToEs_result other) {
    }

    public sqlServerToEs_result deepCopy() {
      return new sqlServerToEs_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sqlServerToEs_result)
        return this.equals((sqlServerToEs_result)that);
      return false;
    }

    public boolean equals(sqlServerToEs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(sqlServerToEs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sqlServerToEs_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sqlServerToEs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sqlServerToEs_resultStandardScheme getScheme() {
        return new sqlServerToEs_resultStandardScheme();
      }
    }

    private static class sqlServerToEs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sqlServerToEs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sqlServerToEs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sqlServerToEs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sqlServerToEs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sqlServerToEs_resultTupleScheme getScheme() {
        return new sqlServerToEs_resultTupleScheme();
      }
    }

    private static class sqlServerToEs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sqlServerToEs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sqlServerToEs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sqlServerToEs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
