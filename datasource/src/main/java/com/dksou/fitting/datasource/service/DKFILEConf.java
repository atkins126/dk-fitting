/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dksou.fitting.datasource.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-06-21")
public class DKFILEConf implements org.apache.thrift.TBase<DKFILEConf, DKFILEConf._Fields>, java.io.Serializable, Cloneable, Comparable<DKFILEConf> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DKFILEConf");

  private static final org.apache.thrift.protocol.TField KRB5__CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("KRB5_CONF", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRINCIPAL_FIELD_DESC = new org.apache.thrift.protocol.TField("PRINCIPAL", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField KEYTAB_FIELD_DESC = new org.apache.thrift.protocol.TField("KEYTAB", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DKFILEConfStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DKFILEConfTupleSchemeFactory();

  public java.lang.String KRB5_CONF; // optional
  public java.lang.String PRINCIPAL; // optional
  public java.lang.String KEYTAB; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    KRB5__CONF((short)1, "KRB5_CONF"),
    PRINCIPAL((short)2, "PRINCIPAL"),
    KEYTAB((short)3, "KEYTAB");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // KRB5__CONF
          return KRB5__CONF;
        case 2: // PRINCIPAL
          return PRINCIPAL;
        case 3: // KEYTAB
          return KEYTAB;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.KRB5__CONF,_Fields.PRINCIPAL,_Fields.KEYTAB};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.KRB5__CONF, new org.apache.thrift.meta_data.FieldMetaData("KRB5_CONF", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRINCIPAL, new org.apache.thrift.meta_data.FieldMetaData("PRINCIPAL", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEYTAB, new org.apache.thrift.meta_data.FieldMetaData("KEYTAB", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DKFILEConf.class, metaDataMap);
  }

  public DKFILEConf() {
    this.KRB5_CONF = "";

    this.PRINCIPAL = "";

    this.KEYTAB = "";

  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DKFILEConf(DKFILEConf other) {
    if (other.isSetKRB5_CONF()) {
      this.KRB5_CONF = other.KRB5_CONF;
    }
    if (other.isSetPRINCIPAL()) {
      this.PRINCIPAL = other.PRINCIPAL;
    }
    if (other.isSetKEYTAB()) {
      this.KEYTAB = other.KEYTAB;
    }
  }

  public DKFILEConf deepCopy() {
    return new DKFILEConf(this);
  }

  @Override
  public void clear() {
    this.KRB5_CONF = "";

    this.PRINCIPAL = "";

    this.KEYTAB = "";

  }

  public java.lang.String getKRB5_CONF() {
    return this.KRB5_CONF;
  }

  public DKFILEConf setKRB5_CONF(java.lang.String KRB5_CONF) {
    this.KRB5_CONF = KRB5_CONF;
    return this;
  }

  public void unsetKRB5_CONF() {
    this.KRB5_CONF = null;
  }

  /** Returns true if field KRB5_CONF is set (has been assigned a value) and false otherwise */
  public boolean isSetKRB5_CONF() {
    return this.KRB5_CONF != null;
  }

  public void setKRB5_CONFIsSet(boolean value) {
    if (!value) {
      this.KRB5_CONF = null;
    }
  }

  public java.lang.String getPRINCIPAL() {
    return this.PRINCIPAL;
  }

  public DKFILEConf setPRINCIPAL(java.lang.String PRINCIPAL) {
    this.PRINCIPAL = PRINCIPAL;
    return this;
  }

  public void unsetPRINCIPAL() {
    this.PRINCIPAL = null;
  }

  /** Returns true if field PRINCIPAL is set (has been assigned a value) and false otherwise */
  public boolean isSetPRINCIPAL() {
    return this.PRINCIPAL != null;
  }

  public void setPRINCIPALIsSet(boolean value) {
    if (!value) {
      this.PRINCIPAL = null;
    }
  }

  public java.lang.String getKEYTAB() {
    return this.KEYTAB;
  }

  public DKFILEConf setKEYTAB(java.lang.String KEYTAB) {
    this.KEYTAB = KEYTAB;
    return this;
  }

  public void unsetKEYTAB() {
    this.KEYTAB = null;
  }

  /** Returns true if field KEYTAB is set (has been assigned a value) and false otherwise */
  public boolean isSetKEYTAB() {
    return this.KEYTAB != null;
  }

  public void setKEYTABIsSet(boolean value) {
    if (!value) {
      this.KEYTAB = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case KRB5__CONF:
      if (value == null) {
        unsetKRB5_CONF();
      } else {
        setKRB5_CONF((java.lang.String)value);
      }
      break;

    case PRINCIPAL:
      if (value == null) {
        unsetPRINCIPAL();
      } else {
        setPRINCIPAL((java.lang.String)value);
      }
      break;

    case KEYTAB:
      if (value == null) {
        unsetKEYTAB();
      } else {
        setKEYTAB((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case KRB5__CONF:
      return getKRB5_CONF();

    case PRINCIPAL:
      return getPRINCIPAL();

    case KEYTAB:
      return getKEYTAB();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case KRB5__CONF:
      return isSetKRB5_CONF();
    case PRINCIPAL:
      return isSetPRINCIPAL();
    case KEYTAB:
      return isSetKEYTAB();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof DKFILEConf)
      return this.equals((DKFILEConf)that);
    return false;
  }

  public boolean equals(DKFILEConf that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_KRB5_CONF = true && this.isSetKRB5_CONF();
    boolean that_present_KRB5_CONF = true && that.isSetKRB5_CONF();
    if (this_present_KRB5_CONF || that_present_KRB5_CONF) {
      if (!(this_present_KRB5_CONF && that_present_KRB5_CONF))
        return false;
      if (!this.KRB5_CONF.equals(that.KRB5_CONF))
        return false;
    }

    boolean this_present_PRINCIPAL = true && this.isSetPRINCIPAL();
    boolean that_present_PRINCIPAL = true && that.isSetPRINCIPAL();
    if (this_present_PRINCIPAL || that_present_PRINCIPAL) {
      if (!(this_present_PRINCIPAL && that_present_PRINCIPAL))
        return false;
      if (!this.PRINCIPAL.equals(that.PRINCIPAL))
        return false;
    }

    boolean this_present_KEYTAB = true && this.isSetKEYTAB();
    boolean that_present_KEYTAB = true && that.isSetKEYTAB();
    if (this_present_KEYTAB || that_present_KEYTAB) {
      if (!(this_present_KEYTAB && that_present_KEYTAB))
        return false;
      if (!this.KEYTAB.equals(that.KEYTAB))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetKRB5_CONF()) ? 131071 : 524287);
    if (isSetKRB5_CONF())
      hashCode = hashCode * 8191 + KRB5_CONF.hashCode();

    hashCode = hashCode * 8191 + ((isSetPRINCIPAL()) ? 131071 : 524287);
    if (isSetPRINCIPAL())
      hashCode = hashCode * 8191 + PRINCIPAL.hashCode();

    hashCode = hashCode * 8191 + ((isSetKEYTAB()) ? 131071 : 524287);
    if (isSetKEYTAB())
      hashCode = hashCode * 8191 + KEYTAB.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(DKFILEConf other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetKRB5_CONF()).compareTo(other.isSetKRB5_CONF());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKRB5_CONF()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KRB5_CONF, other.KRB5_CONF);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPRINCIPAL()).compareTo(other.isSetPRINCIPAL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPRINCIPAL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.PRINCIPAL, other.PRINCIPAL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKEYTAB()).compareTo(other.isSetKEYTAB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKEYTAB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.KEYTAB, other.KEYTAB);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("DKFILEConf(");
    boolean first = true;

    if (isSetKRB5_CONF()) {
      sb.append("KRB5_CONF:");
      if (this.KRB5_CONF == null) {
        sb.append("null");
      } else {
        sb.append(this.KRB5_CONF);
      }
      first = false;
    }
    if (isSetPRINCIPAL()) {
      if (!first) sb.append(", ");
      sb.append("PRINCIPAL:");
      if (this.PRINCIPAL == null) {
        sb.append("null");
      } else {
        sb.append(this.PRINCIPAL);
      }
      first = false;
    }
    if (isSetKEYTAB()) {
      if (!first) sb.append(", ");
      sb.append("KEYTAB:");
      if (this.KEYTAB == null) {
        sb.append("null");
      } else {
        sb.append(this.KEYTAB);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DKFILEConfStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DKFILEConfStandardScheme getScheme() {
      return new DKFILEConfStandardScheme();
    }
  }

  private static class DKFILEConfStandardScheme extends org.apache.thrift.scheme.StandardScheme<DKFILEConf> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DKFILEConf struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // KRB5__CONF
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.KRB5_CONF = iprot.readString();
              struct.setKRB5_CONFIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRINCIPAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.PRINCIPAL = iprot.readString();
              struct.setPRINCIPALIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEYTAB
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.KEYTAB = iprot.readString();
              struct.setKEYTABIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DKFILEConf struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.KRB5_CONF != null) {
        if (struct.isSetKRB5_CONF()) {
          oprot.writeFieldBegin(KRB5__CONF_FIELD_DESC);
          oprot.writeString(struct.KRB5_CONF);
          oprot.writeFieldEnd();
        }
      }
      if (struct.PRINCIPAL != null) {
        if (struct.isSetPRINCIPAL()) {
          oprot.writeFieldBegin(PRINCIPAL_FIELD_DESC);
          oprot.writeString(struct.PRINCIPAL);
          oprot.writeFieldEnd();
        }
      }
      if (struct.KEYTAB != null) {
        if (struct.isSetKEYTAB()) {
          oprot.writeFieldBegin(KEYTAB_FIELD_DESC);
          oprot.writeString(struct.KEYTAB);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DKFILEConfTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DKFILEConfTupleScheme getScheme() {
      return new DKFILEConfTupleScheme();
    }
  }

  private static class DKFILEConfTupleScheme extends org.apache.thrift.scheme.TupleScheme<DKFILEConf> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DKFILEConf struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetKRB5_CONF()) {
        optionals.set(0);
      }
      if (struct.isSetPRINCIPAL()) {
        optionals.set(1);
      }
      if (struct.isSetKEYTAB()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetKRB5_CONF()) {
        oprot.writeString(struct.KRB5_CONF);
      }
      if (struct.isSetPRINCIPAL()) {
        oprot.writeString(struct.PRINCIPAL);
      }
      if (struct.isSetKEYTAB()) {
        oprot.writeString(struct.KEYTAB);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DKFILEConf struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.KRB5_CONF = iprot.readString();
        struct.setKRB5_CONFIsSet(true);
      }
      if (incoming.get(1)) {
        struct.PRINCIPAL = iprot.readString();
        struct.setPRINCIPALIsSet(true);
      }
      if (incoming.get(2)) {
        struct.KEYTAB = iprot.readString();
        struct.setKEYTABIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

