/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dksou.fitting.datasource.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-06-21")
public class DKFileInput {

  public interface Iface {

    /**
     * @param fileName   文件名
     * @param fileData   文件内容
     * @param dirName    输出的hdfs路径（不包括文件名）
     * @param dkFileConf dkFile服务的配置项：参考说明文档
     * @return
     * @throws TException
     * 
     * @param fileName
     * @param fileData
     * @param dirName
     * @param dkFileConf
     */
    public ResultEntity fileToHdfsByBinary(java.lang.String fileName, java.nio.ByteBuffer fileData, java.lang.String dirName, DKFILEConf dkFileConf) throws org.apache.thrift.TException;

    /**
     * @param filePath   单个文件的绝对路径（包含文件名）
     * @param dirName    输出的hdfs路径（不包含文件名）
     * @param fileLength 文件长度限制（K为单位。）
     * @param dkFileConf dkFile服务的配置项：参考说明文档
     * @return
     * @throws TException
     * 
     * @param filePath
     * @param dirName
     * @param fileLength
     * @param dkFileConf
     */
    public ResultEntity fileToHdfs(java.lang.String filePath, java.lang.String dirName, int fileLength, DKFILEConf dkFileConf) throws org.apache.thrift.TException;

    /**
     * @param filePath   多文件上传，参数为文件的父路径
     * @param dirName    输出到hdfs上的路径
     * @param fileLength 文件长度限制（K为单位。）
     * @param dkFileConf dkFile服务的配置项：参考说明文档
     * @return
     * @throws TException
     * 
     * @param filePath
     * @param dirName
     * @param fileLength
     * @param dkFileConf
     */
    public ResultEntity filesToHdfs(java.lang.String filePath, java.lang.String dirName, int fileLength, DKFILEConf dkFileConf) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void fileToHdfsByBinary(java.lang.String fileName, java.nio.ByteBuffer fileData, java.lang.String dirName, DKFILEConf dkFileConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException;

    public void fileToHdfs(java.lang.String filePath, java.lang.String dirName, int fileLength, DKFILEConf dkFileConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException;

    public void filesToHdfs(java.lang.String filePath, java.lang.String dirName, int fileLength, DKFILEConf dkFileConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ResultEntity fileToHdfsByBinary(java.lang.String fileName, java.nio.ByteBuffer fileData, java.lang.String dirName, DKFILEConf dkFileConf) throws org.apache.thrift.TException
    {
      send_fileToHdfsByBinary(fileName, fileData, dirName, dkFileConf);
      return recv_fileToHdfsByBinary();
    }

    public void send_fileToHdfsByBinary(java.lang.String fileName, java.nio.ByteBuffer fileData, java.lang.String dirName, DKFILEConf dkFileConf) throws org.apache.thrift.TException
    {
      fileToHdfsByBinary_args args = new fileToHdfsByBinary_args();
      args.setFileName(fileName);
      args.setFileData(fileData);
      args.setDirName(dirName);
      args.setDkFileConf(dkFileConf);
      sendBase("fileToHdfsByBinary", args);
    }

    public ResultEntity recv_fileToHdfsByBinary() throws org.apache.thrift.TException
    {
      fileToHdfsByBinary_result result = new fileToHdfsByBinary_result();
      receiveBase(result, "fileToHdfsByBinary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fileToHdfsByBinary failed: unknown result");
    }

    public ResultEntity fileToHdfs(java.lang.String filePath, java.lang.String dirName, int fileLength, DKFILEConf dkFileConf) throws org.apache.thrift.TException
    {
      send_fileToHdfs(filePath, dirName, fileLength, dkFileConf);
      return recv_fileToHdfs();
    }

    public void send_fileToHdfs(java.lang.String filePath, java.lang.String dirName, int fileLength, DKFILEConf dkFileConf) throws org.apache.thrift.TException
    {
      fileToHdfs_args args = new fileToHdfs_args();
      args.setFilePath(filePath);
      args.setDirName(dirName);
      args.setFileLength(fileLength);
      args.setDkFileConf(dkFileConf);
      sendBase("fileToHdfs", args);
    }

    public ResultEntity recv_fileToHdfs() throws org.apache.thrift.TException
    {
      fileToHdfs_result result = new fileToHdfs_result();
      receiveBase(result, "fileToHdfs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fileToHdfs failed: unknown result");
    }

    public ResultEntity filesToHdfs(java.lang.String filePath, java.lang.String dirName, int fileLength, DKFILEConf dkFileConf) throws org.apache.thrift.TException
    {
      send_filesToHdfs(filePath, dirName, fileLength, dkFileConf);
      return recv_filesToHdfs();
    }

    public void send_filesToHdfs(java.lang.String filePath, java.lang.String dirName, int fileLength, DKFILEConf dkFileConf) throws org.apache.thrift.TException
    {
      filesToHdfs_args args = new filesToHdfs_args();
      args.setFilePath(filePath);
      args.setDirName(dirName);
      args.setFileLength(fileLength);
      args.setDkFileConf(dkFileConf);
      sendBase("filesToHdfs", args);
    }

    public ResultEntity recv_filesToHdfs() throws org.apache.thrift.TException
    {
      filesToHdfs_result result = new filesToHdfs_result();
      receiveBase(result, "filesToHdfs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "filesToHdfs failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void fileToHdfsByBinary(java.lang.String fileName, java.nio.ByteBuffer fileData, java.lang.String dirName, DKFILEConf dkFileConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fileToHdfsByBinary_call method_call = new fileToHdfsByBinary_call(fileName, fileData, dirName, dkFileConf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fileToHdfsByBinary_call extends org.apache.thrift.async.TAsyncMethodCall<ResultEntity> {
      private java.lang.String fileName;
      private java.nio.ByteBuffer fileData;
      private java.lang.String dirName;
      private DKFILEConf dkFileConf;
      public fileToHdfsByBinary_call(java.lang.String fileName, java.nio.ByteBuffer fileData, java.lang.String dirName, DKFILEConf dkFileConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileName = fileName;
        this.fileData = fileData;
        this.dirName = dirName;
        this.dkFileConf = dkFileConf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fileToHdfsByBinary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fileToHdfsByBinary_args args = new fileToHdfsByBinary_args();
        args.setFileName(fileName);
        args.setFileData(fileData);
        args.setDirName(dirName);
        args.setDkFileConf(dkFileConf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultEntity getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fileToHdfsByBinary();
      }
    }

    public void fileToHdfs(java.lang.String filePath, java.lang.String dirName, int fileLength, DKFILEConf dkFileConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fileToHdfs_call method_call = new fileToHdfs_call(filePath, dirName, fileLength, dkFileConf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fileToHdfs_call extends org.apache.thrift.async.TAsyncMethodCall<ResultEntity> {
      private java.lang.String filePath;
      private java.lang.String dirName;
      private int fileLength;
      private DKFILEConf dkFileConf;
      public fileToHdfs_call(java.lang.String filePath, java.lang.String dirName, int fileLength, DKFILEConf dkFileConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filePath = filePath;
        this.dirName = dirName;
        this.fileLength = fileLength;
        this.dkFileConf = dkFileConf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fileToHdfs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fileToHdfs_args args = new fileToHdfs_args();
        args.setFilePath(filePath);
        args.setDirName(dirName);
        args.setFileLength(fileLength);
        args.setDkFileConf(dkFileConf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultEntity getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fileToHdfs();
      }
    }

    public void filesToHdfs(java.lang.String filePath, java.lang.String dirName, int fileLength, DKFILEConf dkFileConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      filesToHdfs_call method_call = new filesToHdfs_call(filePath, dirName, fileLength, dkFileConf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class filesToHdfs_call extends org.apache.thrift.async.TAsyncMethodCall<ResultEntity> {
      private java.lang.String filePath;
      private java.lang.String dirName;
      private int fileLength;
      private DKFILEConf dkFileConf;
      public filesToHdfs_call(java.lang.String filePath, java.lang.String dirName, int fileLength, DKFILEConf dkFileConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filePath = filePath;
        this.dirName = dirName;
        this.fileLength = fileLength;
        this.dkFileConf = dkFileConf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("filesToHdfs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        filesToHdfs_args args = new filesToHdfs_args();
        args.setFilePath(filePath);
        args.setDirName(dirName);
        args.setFileLength(fileLength);
        args.setDkFileConf(dkFileConf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultEntity getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_filesToHdfs();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("fileToHdfsByBinary", new fileToHdfsByBinary());
      processMap.put("fileToHdfs", new fileToHdfs());
      processMap.put("filesToHdfs", new filesToHdfs());
      return processMap;
    }

    public static class fileToHdfsByBinary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fileToHdfsByBinary_args> {
      public fileToHdfsByBinary() {
        super("fileToHdfsByBinary");
      }

      public fileToHdfsByBinary_args getEmptyArgsInstance() {
        return new fileToHdfsByBinary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public fileToHdfsByBinary_result getResult(I iface, fileToHdfsByBinary_args args) throws org.apache.thrift.TException {
        fileToHdfsByBinary_result result = new fileToHdfsByBinary_result();
        result.success = iface.fileToHdfsByBinary(args.fileName, args.fileData, args.dirName, args.dkFileConf);
        return result;
      }
    }

    public static class fileToHdfs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fileToHdfs_args> {
      public fileToHdfs() {
        super("fileToHdfs");
      }

      public fileToHdfs_args getEmptyArgsInstance() {
        return new fileToHdfs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public fileToHdfs_result getResult(I iface, fileToHdfs_args args) throws org.apache.thrift.TException {
        fileToHdfs_result result = new fileToHdfs_result();
        result.success = iface.fileToHdfs(args.filePath, args.dirName, args.fileLength, args.dkFileConf);
        return result;
      }
    }

    public static class filesToHdfs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, filesToHdfs_args> {
      public filesToHdfs() {
        super("filesToHdfs");
      }

      public filesToHdfs_args getEmptyArgsInstance() {
        return new filesToHdfs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public filesToHdfs_result getResult(I iface, filesToHdfs_args args) throws org.apache.thrift.TException {
        filesToHdfs_result result = new filesToHdfs_result();
        result.success = iface.filesToHdfs(args.filePath, args.dirName, args.fileLength, args.dkFileConf);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("fileToHdfsByBinary", new fileToHdfsByBinary());
      processMap.put("fileToHdfs", new fileToHdfs());
      processMap.put("filesToHdfs", new filesToHdfs());
      return processMap;
    }

    public static class fileToHdfsByBinary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fileToHdfsByBinary_args, ResultEntity> {
      public fileToHdfsByBinary() {
        super("fileToHdfsByBinary");
      }

      public fileToHdfsByBinary_args getEmptyArgsInstance() {
        return new fileToHdfsByBinary_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ResultEntity> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ResultEntity>() { 
          public void onComplete(ResultEntity o) {
            fileToHdfsByBinary_result result = new fileToHdfsByBinary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fileToHdfsByBinary_result result = new fileToHdfsByBinary_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fileToHdfsByBinary_args args, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
        iface.fileToHdfsByBinary(args.fileName, args.fileData, args.dirName, args.dkFileConf,resultHandler);
      }
    }

    public static class fileToHdfs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fileToHdfs_args, ResultEntity> {
      public fileToHdfs() {
        super("fileToHdfs");
      }

      public fileToHdfs_args getEmptyArgsInstance() {
        return new fileToHdfs_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ResultEntity> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ResultEntity>() { 
          public void onComplete(ResultEntity o) {
            fileToHdfs_result result = new fileToHdfs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fileToHdfs_result result = new fileToHdfs_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fileToHdfs_args args, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
        iface.fileToHdfs(args.filePath, args.dirName, args.fileLength, args.dkFileConf,resultHandler);
      }
    }

    public static class filesToHdfs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, filesToHdfs_args, ResultEntity> {
      public filesToHdfs() {
        super("filesToHdfs");
      }

      public filesToHdfs_args getEmptyArgsInstance() {
        return new filesToHdfs_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ResultEntity> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ResultEntity>() { 
          public void onComplete(ResultEntity o) {
            filesToHdfs_result result = new filesToHdfs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            filesToHdfs_result result = new filesToHdfs_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, filesToHdfs_args args, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
        iface.filesToHdfs(args.filePath, args.dirName, args.fileLength, args.dkFileConf,resultHandler);
      }
    }

  }

  public static class fileToHdfsByBinary_args implements org.apache.thrift.TBase<fileToHdfsByBinary_args, fileToHdfsByBinary_args._Fields>, java.io.Serializable, Cloneable, Comparable<fileToHdfsByBinary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fileToHdfsByBinary_args");

    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("fileData", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dirName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DK_FILE_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkFileConf", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fileToHdfsByBinary_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fileToHdfsByBinary_argsTupleSchemeFactory();

    public java.lang.String fileName; // required
    public java.nio.ByteBuffer fileData; // required
    public java.lang.String dirName; // required
    public DKFILEConf dkFileConf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_NAME((short)1, "fileName"),
      FILE_DATA((short)2, "fileData"),
      DIR_NAME((short)3, "dirName"),
      DK_FILE_CONF((short)4, "dkFileConf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_NAME
            return FILE_NAME;
          case 2: // FILE_DATA
            return FILE_DATA;
          case 3: // DIR_NAME
            return DIR_NAME;
          case 4: // DK_FILE_CONF
            return DK_FILE_CONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_DATA, new org.apache.thrift.meta_data.FieldMetaData("fileData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("dirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DK_FILE_CONF, new org.apache.thrift.meta_data.FieldMetaData("dkFileConf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKFILEConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fileToHdfsByBinary_args.class, metaDataMap);
    }

    public fileToHdfsByBinary_args() {
    }

    public fileToHdfsByBinary_args(
      java.lang.String fileName,
      java.nio.ByteBuffer fileData,
      java.lang.String dirName,
      DKFILEConf dkFileConf)
    {
      this();
      this.fileName = fileName;
      this.fileData = org.apache.thrift.TBaseHelper.copyBinary(fileData);
      this.dirName = dirName;
      this.dkFileConf = dkFileConf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fileToHdfsByBinary_args(fileToHdfsByBinary_args other) {
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetFileData()) {
        this.fileData = org.apache.thrift.TBaseHelper.copyBinary(other.fileData);
      }
      if (other.isSetDirName()) {
        this.dirName = other.dirName;
      }
      if (other.isSetDkFileConf()) {
        this.dkFileConf = new DKFILEConf(other.dkFileConf);
      }
    }

    public fileToHdfsByBinary_args deepCopy() {
      return new fileToHdfsByBinary_args(this);
    }

    @Override
    public void clear() {
      this.fileName = null;
      this.fileData = null;
      this.dirName = null;
      this.dkFileConf = null;
    }

    public java.lang.String getFileName() {
      return this.fileName;
    }

    public fileToHdfsByBinary_args setFileName(java.lang.String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public byte[] getFileData() {
      setFileData(org.apache.thrift.TBaseHelper.rightSize(fileData));
      return fileData == null ? null : fileData.array();
    }

    public java.nio.ByteBuffer bufferForFileData() {
      return org.apache.thrift.TBaseHelper.copyBinary(fileData);
    }

    public fileToHdfsByBinary_args setFileData(byte[] fileData) {
      this.fileData = fileData == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(fileData.clone());
      return this;
    }

    public fileToHdfsByBinary_args setFileData(java.nio.ByteBuffer fileData) {
      this.fileData = org.apache.thrift.TBaseHelper.copyBinary(fileData);
      return this;
    }

    public void unsetFileData() {
      this.fileData = null;
    }

    /** Returns true if field fileData is set (has been assigned a value) and false otherwise */
    public boolean isSetFileData() {
      return this.fileData != null;
    }

    public void setFileDataIsSet(boolean value) {
      if (!value) {
        this.fileData = null;
      }
    }

    public java.lang.String getDirName() {
      return this.dirName;
    }

    public fileToHdfsByBinary_args setDirName(java.lang.String dirName) {
      this.dirName = dirName;
      return this;
    }

    public void unsetDirName() {
      this.dirName = null;
    }

    /** Returns true if field dirName is set (has been assigned a value) and false otherwise */
    public boolean isSetDirName() {
      return this.dirName != null;
    }

    public void setDirNameIsSet(boolean value) {
      if (!value) {
        this.dirName = null;
      }
    }

    public DKFILEConf getDkFileConf() {
      return this.dkFileConf;
    }

    public fileToHdfsByBinary_args setDkFileConf(DKFILEConf dkFileConf) {
      this.dkFileConf = dkFileConf;
      return this;
    }

    public void unsetDkFileConf() {
      this.dkFileConf = null;
    }

    /** Returns true if field dkFileConf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkFileConf() {
      return this.dkFileConf != null;
    }

    public void setDkFileConfIsSet(boolean value) {
      if (!value) {
        this.dkFileConf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((java.lang.String)value);
        }
        break;

      case FILE_DATA:
        if (value == null) {
          unsetFileData();
        } else {
          if (value instanceof byte[]) {
            setFileData((byte[])value);
          } else {
            setFileData((java.nio.ByteBuffer)value);
          }
        }
        break;

      case DIR_NAME:
        if (value == null) {
          unsetDirName();
        } else {
          setDirName((java.lang.String)value);
        }
        break;

      case DK_FILE_CONF:
        if (value == null) {
          unsetDkFileConf();
        } else {
          setDkFileConf((DKFILEConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_NAME:
        return getFileName();

      case FILE_DATA:
        return getFileData();

      case DIR_NAME:
        return getDirName();

      case DK_FILE_CONF:
        return getDkFileConf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE_NAME:
        return isSetFileName();
      case FILE_DATA:
        return isSetFileData();
      case DIR_NAME:
        return isSetDirName();
      case DK_FILE_CONF:
        return isSetDkFileConf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fileToHdfsByBinary_args)
        return this.equals((fileToHdfsByBinary_args)that);
      return false;
    }

    public boolean equals(fileToHdfsByBinary_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_fileData = true && this.isSetFileData();
      boolean that_present_fileData = true && that.isSetFileData();
      if (this_present_fileData || that_present_fileData) {
        if (!(this_present_fileData && that_present_fileData))
          return false;
        if (!this.fileData.equals(that.fileData))
          return false;
      }

      boolean this_present_dirName = true && this.isSetDirName();
      boolean that_present_dirName = true && that.isSetDirName();
      if (this_present_dirName || that_present_dirName) {
        if (!(this_present_dirName && that_present_dirName))
          return false;
        if (!this.dirName.equals(that.dirName))
          return false;
      }

      boolean this_present_dkFileConf = true && this.isSetDkFileConf();
      boolean that_present_dkFileConf = true && that.isSetDkFileConf();
      if (this_present_dkFileConf || that_present_dkFileConf) {
        if (!(this_present_dkFileConf && that_present_dkFileConf))
          return false;
        if (!this.dkFileConf.equals(that.dkFileConf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
      if (isSetFileName())
        hashCode = hashCode * 8191 + fileName.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileData()) ? 131071 : 524287);
      if (isSetFileData())
        hashCode = hashCode * 8191 + fileData.hashCode();

      hashCode = hashCode * 8191 + ((isSetDirName()) ? 131071 : 524287);
      if (isSetDirName())
        hashCode = hashCode * 8191 + dirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkFileConf()) ? 131071 : 524287);
      if (isSetDkFileConf())
        hashCode = hashCode * 8191 + dkFileConf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fileToHdfsByBinary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileData()).compareTo(other.isSetFileData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileData, other.fileData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDirName()).compareTo(other.isSetDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dirName, other.dirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkFileConf()).compareTo(other.isSetDkFileConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkFileConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkFileConf, other.dkFileConf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fileToHdfsByBinary_args(");
      boolean first = true;

      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileData:");
      if (this.fileData == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.fileData, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dirName:");
      if (this.dirName == null) {
        sb.append("null");
      } else {
        sb.append(this.dirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkFileConf:");
      if (this.dkFileConf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkFileConf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkFileConf != null) {
        dkFileConf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fileToHdfsByBinary_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fileToHdfsByBinary_argsStandardScheme getScheme() {
        return new fileToHdfsByBinary_argsStandardScheme();
      }
    }

    private static class fileToHdfsByBinary_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fileToHdfsByBinary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fileToHdfsByBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileData = iprot.readBinary();
                struct.setFileDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dirName = iprot.readString();
                struct.setDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DK_FILE_CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkFileConf = new DKFILEConf();
                struct.dkFileConf.read(iprot);
                struct.setDkFileConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fileToHdfsByBinary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.fileData != null) {
          oprot.writeFieldBegin(FILE_DATA_FIELD_DESC);
          oprot.writeBinary(struct.fileData);
          oprot.writeFieldEnd();
        }
        if (struct.dirName != null) {
          oprot.writeFieldBegin(DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.dirName);
          oprot.writeFieldEnd();
        }
        if (struct.dkFileConf != null) {
          oprot.writeFieldBegin(DK_FILE_CONF_FIELD_DESC);
          struct.dkFileConf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fileToHdfsByBinary_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fileToHdfsByBinary_argsTupleScheme getScheme() {
        return new fileToHdfsByBinary_argsTupleScheme();
      }
    }

    private static class fileToHdfsByBinary_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fileToHdfsByBinary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fileToHdfsByBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFileName()) {
          optionals.set(0);
        }
        if (struct.isSetFileData()) {
          optionals.set(1);
        }
        if (struct.isSetDirName()) {
          optionals.set(2);
        }
        if (struct.isSetDkFileConf()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetFileData()) {
          oprot.writeBinary(struct.fileData);
        }
        if (struct.isSetDirName()) {
          oprot.writeString(struct.dirName);
        }
        if (struct.isSetDkFileConf()) {
          struct.dkFileConf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fileToHdfsByBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileData = iprot.readBinary();
          struct.setFileDataIsSet(true);
        }
        if (incoming.get(2)) {
          struct.dirName = iprot.readString();
          struct.setDirNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dkFileConf = new DKFILEConf();
          struct.dkFileConf.read(iprot);
          struct.setDkFileConfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fileToHdfsByBinary_result implements org.apache.thrift.TBase<fileToHdfsByBinary_result, fileToHdfsByBinary_result._Fields>, java.io.Serializable, Cloneable, Comparable<fileToHdfsByBinary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fileToHdfsByBinary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fileToHdfsByBinary_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fileToHdfsByBinary_resultTupleSchemeFactory();

    public ResultEntity success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fileToHdfsByBinary_result.class, metaDataMap);
    }

    public fileToHdfsByBinary_result() {
    }

    public fileToHdfsByBinary_result(
      ResultEntity success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fileToHdfsByBinary_result(fileToHdfsByBinary_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultEntity(other.success);
      }
    }

    public fileToHdfsByBinary_result deepCopy() {
      return new fileToHdfsByBinary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultEntity getSuccess() {
      return this.success;
    }

    public fileToHdfsByBinary_result setSuccess(ResultEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultEntity)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fileToHdfsByBinary_result)
        return this.equals((fileToHdfsByBinary_result)that);
      return false;
    }

    public boolean equals(fileToHdfsByBinary_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fileToHdfsByBinary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fileToHdfsByBinary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fileToHdfsByBinary_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fileToHdfsByBinary_resultStandardScheme getScheme() {
        return new fileToHdfsByBinary_resultStandardScheme();
      }
    }

    private static class fileToHdfsByBinary_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fileToHdfsByBinary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fileToHdfsByBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fileToHdfsByBinary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fileToHdfsByBinary_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fileToHdfsByBinary_resultTupleScheme getScheme() {
        return new fileToHdfsByBinary_resultTupleScheme();
      }
    }

    private static class fileToHdfsByBinary_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fileToHdfsByBinary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fileToHdfsByBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fileToHdfsByBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fileToHdfs_args implements org.apache.thrift.TBase<fileToHdfs_args, fileToHdfs_args._Fields>, java.io.Serializable, Cloneable, Comparable<fileToHdfs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fileToHdfs_args");

    private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dirName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("fileLength", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField DK_FILE_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkFileConf", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fileToHdfs_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fileToHdfs_argsTupleSchemeFactory();

    public java.lang.String filePath; // required
    public java.lang.String dirName; // required
    public int fileLength; // required
    public DKFILEConf dkFileConf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_PATH((short)1, "filePath"),
      DIR_NAME((short)2, "dirName"),
      FILE_LENGTH((short)3, "fileLength"),
      DK_FILE_CONF((short)4, "dkFileConf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_PATH
            return FILE_PATH;
          case 2: // DIR_NAME
            return DIR_NAME;
          case 3: // FILE_LENGTH
            return FILE_LENGTH;
          case 4: // DK_FILE_CONF
            return DK_FILE_CONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILELENGTH_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("dirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("fileLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DK_FILE_CONF, new org.apache.thrift.meta_data.FieldMetaData("dkFileConf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKFILEConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fileToHdfs_args.class, metaDataMap);
    }

    public fileToHdfs_args() {
    }

    public fileToHdfs_args(
      java.lang.String filePath,
      java.lang.String dirName,
      int fileLength,
      DKFILEConf dkFileConf)
    {
      this();
      this.filePath = filePath;
      this.dirName = dirName;
      this.fileLength = fileLength;
      setFileLengthIsSet(true);
      this.dkFileConf = dkFileConf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fileToHdfs_args(fileToHdfs_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFilePath()) {
        this.filePath = other.filePath;
      }
      if (other.isSetDirName()) {
        this.dirName = other.dirName;
      }
      this.fileLength = other.fileLength;
      if (other.isSetDkFileConf()) {
        this.dkFileConf = new DKFILEConf(other.dkFileConf);
      }
    }

    public fileToHdfs_args deepCopy() {
      return new fileToHdfs_args(this);
    }

    @Override
    public void clear() {
      this.filePath = null;
      this.dirName = null;
      setFileLengthIsSet(false);
      this.fileLength = 0;
      this.dkFileConf = null;
    }

    public java.lang.String getFilePath() {
      return this.filePath;
    }

    public fileToHdfs_args setFilePath(java.lang.String filePath) {
      this.filePath = filePath;
      return this;
    }

    public void unsetFilePath() {
      this.filePath = null;
    }

    /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
    public boolean isSetFilePath() {
      return this.filePath != null;
    }

    public void setFilePathIsSet(boolean value) {
      if (!value) {
        this.filePath = null;
      }
    }

    public java.lang.String getDirName() {
      return this.dirName;
    }

    public fileToHdfs_args setDirName(java.lang.String dirName) {
      this.dirName = dirName;
      return this;
    }

    public void unsetDirName() {
      this.dirName = null;
    }

    /** Returns true if field dirName is set (has been assigned a value) and false otherwise */
    public boolean isSetDirName() {
      return this.dirName != null;
    }

    public void setDirNameIsSet(boolean value) {
      if (!value) {
        this.dirName = null;
      }
    }

    public int getFileLength() {
      return this.fileLength;
    }

    public fileToHdfs_args setFileLength(int fileLength) {
      this.fileLength = fileLength;
      setFileLengthIsSet(true);
      return this;
    }

    public void unsetFileLength() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILELENGTH_ISSET_ID);
    }

    /** Returns true if field fileLength is set (has been assigned a value) and false otherwise */
    public boolean isSetFileLength() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILELENGTH_ISSET_ID);
    }

    public void setFileLengthIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILELENGTH_ISSET_ID, value);
    }

    public DKFILEConf getDkFileConf() {
      return this.dkFileConf;
    }

    public fileToHdfs_args setDkFileConf(DKFILEConf dkFileConf) {
      this.dkFileConf = dkFileConf;
      return this;
    }

    public void unsetDkFileConf() {
      this.dkFileConf = null;
    }

    /** Returns true if field dkFileConf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkFileConf() {
      return this.dkFileConf != null;
    }

    public void setDkFileConfIsSet(boolean value) {
      if (!value) {
        this.dkFileConf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FILE_PATH:
        if (value == null) {
          unsetFilePath();
        } else {
          setFilePath((java.lang.String)value);
        }
        break;

      case DIR_NAME:
        if (value == null) {
          unsetDirName();
        } else {
          setDirName((java.lang.String)value);
        }
        break;

      case FILE_LENGTH:
        if (value == null) {
          unsetFileLength();
        } else {
          setFileLength((java.lang.Integer)value);
        }
        break;

      case DK_FILE_CONF:
        if (value == null) {
          unsetDkFileConf();
        } else {
          setDkFileConf((DKFILEConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_PATH:
        return getFilePath();

      case DIR_NAME:
        return getDirName();

      case FILE_LENGTH:
        return getFileLength();

      case DK_FILE_CONF:
        return getDkFileConf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE_PATH:
        return isSetFilePath();
      case DIR_NAME:
        return isSetDirName();
      case FILE_LENGTH:
        return isSetFileLength();
      case DK_FILE_CONF:
        return isSetDkFileConf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fileToHdfs_args)
        return this.equals((fileToHdfs_args)that);
      return false;
    }

    public boolean equals(fileToHdfs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_filePath = true && this.isSetFilePath();
      boolean that_present_filePath = true && that.isSetFilePath();
      if (this_present_filePath || that_present_filePath) {
        if (!(this_present_filePath && that_present_filePath))
          return false;
        if (!this.filePath.equals(that.filePath))
          return false;
      }

      boolean this_present_dirName = true && this.isSetDirName();
      boolean that_present_dirName = true && that.isSetDirName();
      if (this_present_dirName || that_present_dirName) {
        if (!(this_present_dirName && that_present_dirName))
          return false;
        if (!this.dirName.equals(that.dirName))
          return false;
      }

      boolean this_present_fileLength = true;
      boolean that_present_fileLength = true;
      if (this_present_fileLength || that_present_fileLength) {
        if (!(this_present_fileLength && that_present_fileLength))
          return false;
        if (this.fileLength != that.fileLength)
          return false;
      }

      boolean this_present_dkFileConf = true && this.isSetDkFileConf();
      boolean that_present_dkFileConf = true && that.isSetDkFileConf();
      if (this_present_dkFileConf || that_present_dkFileConf) {
        if (!(this_present_dkFileConf && that_present_dkFileConf))
          return false;
        if (!this.dkFileConf.equals(that.dkFileConf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFilePath()) ? 131071 : 524287);
      if (isSetFilePath())
        hashCode = hashCode * 8191 + filePath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDirName()) ? 131071 : 524287);
      if (isSetDirName())
        hashCode = hashCode * 8191 + dirName.hashCode();

      hashCode = hashCode * 8191 + fileLength;

      hashCode = hashCode * 8191 + ((isSetDkFileConf()) ? 131071 : 524287);
      if (isSetDkFileConf())
        hashCode = hashCode * 8191 + dkFileConf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fileToHdfs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFilePath()).compareTo(other.isSetFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDirName()).compareTo(other.isSetDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dirName, other.dirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileLength()).compareTo(other.isSetFileLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileLength, other.fileLength);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkFileConf()).compareTo(other.isSetDkFileConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkFileConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkFileConf, other.dkFileConf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fileToHdfs_args(");
      boolean first = true;

      sb.append("filePath:");
      if (this.filePath == null) {
        sb.append("null");
      } else {
        sb.append(this.filePath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dirName:");
      if (this.dirName == null) {
        sb.append("null");
      } else {
        sb.append(this.dirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileLength:");
      sb.append(this.fileLength);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkFileConf:");
      if (this.dkFileConf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkFileConf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkFileConf != null) {
        dkFileConf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fileToHdfs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fileToHdfs_argsStandardScheme getScheme() {
        return new fileToHdfs_argsStandardScheme();
      }
    }

    private static class fileToHdfs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fileToHdfs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fileToHdfs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filePath = iprot.readString();
                struct.setFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dirName = iprot.readString();
                struct.setDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fileLength = iprot.readI32();
                struct.setFileLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DK_FILE_CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkFileConf = new DKFILEConf();
                struct.dkFileConf.read(iprot);
                struct.setDkFileConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fileToHdfs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filePath != null) {
          oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.filePath);
          oprot.writeFieldEnd();
        }
        if (struct.dirName != null) {
          oprot.writeFieldBegin(DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.dirName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FILE_LENGTH_FIELD_DESC);
        oprot.writeI32(struct.fileLength);
        oprot.writeFieldEnd();
        if (struct.dkFileConf != null) {
          oprot.writeFieldBegin(DK_FILE_CONF_FIELD_DESC);
          struct.dkFileConf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fileToHdfs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fileToHdfs_argsTupleScheme getScheme() {
        return new fileToHdfs_argsTupleScheme();
      }
    }

    private static class fileToHdfs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fileToHdfs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fileToHdfs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFilePath()) {
          optionals.set(0);
        }
        if (struct.isSetDirName()) {
          optionals.set(1);
        }
        if (struct.isSetFileLength()) {
          optionals.set(2);
        }
        if (struct.isSetDkFileConf()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFilePath()) {
          oprot.writeString(struct.filePath);
        }
        if (struct.isSetDirName()) {
          oprot.writeString(struct.dirName);
        }
        if (struct.isSetFileLength()) {
          oprot.writeI32(struct.fileLength);
        }
        if (struct.isSetDkFileConf()) {
          struct.dkFileConf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fileToHdfs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.filePath = iprot.readString();
          struct.setFilePathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dirName = iprot.readString();
          struct.setDirNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fileLength = iprot.readI32();
          struct.setFileLengthIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dkFileConf = new DKFILEConf();
          struct.dkFileConf.read(iprot);
          struct.setDkFileConfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fileToHdfs_result implements org.apache.thrift.TBase<fileToHdfs_result, fileToHdfs_result._Fields>, java.io.Serializable, Cloneable, Comparable<fileToHdfs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fileToHdfs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fileToHdfs_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fileToHdfs_resultTupleSchemeFactory();

    public ResultEntity success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fileToHdfs_result.class, metaDataMap);
    }

    public fileToHdfs_result() {
    }

    public fileToHdfs_result(
      ResultEntity success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fileToHdfs_result(fileToHdfs_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultEntity(other.success);
      }
    }

    public fileToHdfs_result deepCopy() {
      return new fileToHdfs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultEntity getSuccess() {
      return this.success;
    }

    public fileToHdfs_result setSuccess(ResultEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultEntity)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fileToHdfs_result)
        return this.equals((fileToHdfs_result)that);
      return false;
    }

    public boolean equals(fileToHdfs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fileToHdfs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fileToHdfs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fileToHdfs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fileToHdfs_resultStandardScheme getScheme() {
        return new fileToHdfs_resultStandardScheme();
      }
    }

    private static class fileToHdfs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fileToHdfs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fileToHdfs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fileToHdfs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fileToHdfs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fileToHdfs_resultTupleScheme getScheme() {
        return new fileToHdfs_resultTupleScheme();
      }
    }

    private static class fileToHdfs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fileToHdfs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fileToHdfs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fileToHdfs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class filesToHdfs_args implements org.apache.thrift.TBase<filesToHdfs_args, filesToHdfs_args._Fields>, java.io.Serializable, Cloneable, Comparable<filesToHdfs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("filesToHdfs_args");

    private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dirName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("fileLength", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField DK_FILE_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkFileConf", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new filesToHdfs_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new filesToHdfs_argsTupleSchemeFactory();

    public java.lang.String filePath; // required
    public java.lang.String dirName; // required
    public int fileLength; // required
    public DKFILEConf dkFileConf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_PATH((short)1, "filePath"),
      DIR_NAME((short)2, "dirName"),
      FILE_LENGTH((short)3, "fileLength"),
      DK_FILE_CONF((short)4, "dkFileConf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_PATH
            return FILE_PATH;
          case 2: // DIR_NAME
            return DIR_NAME;
          case 3: // FILE_LENGTH
            return FILE_LENGTH;
          case 4: // DK_FILE_CONF
            return DK_FILE_CONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILELENGTH_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("dirName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_LENGTH, new org.apache.thrift.meta_data.FieldMetaData("fileLength", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.DK_FILE_CONF, new org.apache.thrift.meta_data.FieldMetaData("dkFileConf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKFILEConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(filesToHdfs_args.class, metaDataMap);
    }

    public filesToHdfs_args() {
    }

    public filesToHdfs_args(
      java.lang.String filePath,
      java.lang.String dirName,
      int fileLength,
      DKFILEConf dkFileConf)
    {
      this();
      this.filePath = filePath;
      this.dirName = dirName;
      this.fileLength = fileLength;
      setFileLengthIsSet(true);
      this.dkFileConf = dkFileConf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public filesToHdfs_args(filesToHdfs_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFilePath()) {
        this.filePath = other.filePath;
      }
      if (other.isSetDirName()) {
        this.dirName = other.dirName;
      }
      this.fileLength = other.fileLength;
      if (other.isSetDkFileConf()) {
        this.dkFileConf = new DKFILEConf(other.dkFileConf);
      }
    }

    public filesToHdfs_args deepCopy() {
      return new filesToHdfs_args(this);
    }

    @Override
    public void clear() {
      this.filePath = null;
      this.dirName = null;
      setFileLengthIsSet(false);
      this.fileLength = 0;
      this.dkFileConf = null;
    }

    public java.lang.String getFilePath() {
      return this.filePath;
    }

    public filesToHdfs_args setFilePath(java.lang.String filePath) {
      this.filePath = filePath;
      return this;
    }

    public void unsetFilePath() {
      this.filePath = null;
    }

    /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
    public boolean isSetFilePath() {
      return this.filePath != null;
    }

    public void setFilePathIsSet(boolean value) {
      if (!value) {
        this.filePath = null;
      }
    }

    public java.lang.String getDirName() {
      return this.dirName;
    }

    public filesToHdfs_args setDirName(java.lang.String dirName) {
      this.dirName = dirName;
      return this;
    }

    public void unsetDirName() {
      this.dirName = null;
    }

    /** Returns true if field dirName is set (has been assigned a value) and false otherwise */
    public boolean isSetDirName() {
      return this.dirName != null;
    }

    public void setDirNameIsSet(boolean value) {
      if (!value) {
        this.dirName = null;
      }
    }

    public int getFileLength() {
      return this.fileLength;
    }

    public filesToHdfs_args setFileLength(int fileLength) {
      this.fileLength = fileLength;
      setFileLengthIsSet(true);
      return this;
    }

    public void unsetFileLength() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILELENGTH_ISSET_ID);
    }

    /** Returns true if field fileLength is set (has been assigned a value) and false otherwise */
    public boolean isSetFileLength() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILELENGTH_ISSET_ID);
    }

    public void setFileLengthIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILELENGTH_ISSET_ID, value);
    }

    public DKFILEConf getDkFileConf() {
      return this.dkFileConf;
    }

    public filesToHdfs_args setDkFileConf(DKFILEConf dkFileConf) {
      this.dkFileConf = dkFileConf;
      return this;
    }

    public void unsetDkFileConf() {
      this.dkFileConf = null;
    }

    /** Returns true if field dkFileConf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkFileConf() {
      return this.dkFileConf != null;
    }

    public void setDkFileConfIsSet(boolean value) {
      if (!value) {
        this.dkFileConf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case FILE_PATH:
        if (value == null) {
          unsetFilePath();
        } else {
          setFilePath((java.lang.String)value);
        }
        break;

      case DIR_NAME:
        if (value == null) {
          unsetDirName();
        } else {
          setDirName((java.lang.String)value);
        }
        break;

      case FILE_LENGTH:
        if (value == null) {
          unsetFileLength();
        } else {
          setFileLength((java.lang.Integer)value);
        }
        break;

      case DK_FILE_CONF:
        if (value == null) {
          unsetDkFileConf();
        } else {
          setDkFileConf((DKFILEConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FILE_PATH:
        return getFilePath();

      case DIR_NAME:
        return getDirName();

      case FILE_LENGTH:
        return getFileLength();

      case DK_FILE_CONF:
        return getDkFileConf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FILE_PATH:
        return isSetFilePath();
      case DIR_NAME:
        return isSetDirName();
      case FILE_LENGTH:
        return isSetFileLength();
      case DK_FILE_CONF:
        return isSetDkFileConf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof filesToHdfs_args)
        return this.equals((filesToHdfs_args)that);
      return false;
    }

    public boolean equals(filesToHdfs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_filePath = true && this.isSetFilePath();
      boolean that_present_filePath = true && that.isSetFilePath();
      if (this_present_filePath || that_present_filePath) {
        if (!(this_present_filePath && that_present_filePath))
          return false;
        if (!this.filePath.equals(that.filePath))
          return false;
      }

      boolean this_present_dirName = true && this.isSetDirName();
      boolean that_present_dirName = true && that.isSetDirName();
      if (this_present_dirName || that_present_dirName) {
        if (!(this_present_dirName && that_present_dirName))
          return false;
        if (!this.dirName.equals(that.dirName))
          return false;
      }

      boolean this_present_fileLength = true;
      boolean that_present_fileLength = true;
      if (this_present_fileLength || that_present_fileLength) {
        if (!(this_present_fileLength && that_present_fileLength))
          return false;
        if (this.fileLength != that.fileLength)
          return false;
      }

      boolean this_present_dkFileConf = true && this.isSetDkFileConf();
      boolean that_present_dkFileConf = true && that.isSetDkFileConf();
      if (this_present_dkFileConf || that_present_dkFileConf) {
        if (!(this_present_dkFileConf && that_present_dkFileConf))
          return false;
        if (!this.dkFileConf.equals(that.dkFileConf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFilePath()) ? 131071 : 524287);
      if (isSetFilePath())
        hashCode = hashCode * 8191 + filePath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDirName()) ? 131071 : 524287);
      if (isSetDirName())
        hashCode = hashCode * 8191 + dirName.hashCode();

      hashCode = hashCode * 8191 + fileLength;

      hashCode = hashCode * 8191 + ((isSetDkFileConf()) ? 131071 : 524287);
      if (isSetDkFileConf())
        hashCode = hashCode * 8191 + dkFileConf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(filesToHdfs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFilePath()).compareTo(other.isSetFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDirName()).compareTo(other.isSetDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dirName, other.dirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileLength()).compareTo(other.isSetFileLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileLength, other.fileLength);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkFileConf()).compareTo(other.isSetDkFileConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkFileConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkFileConf, other.dkFileConf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("filesToHdfs_args(");
      boolean first = true;

      sb.append("filePath:");
      if (this.filePath == null) {
        sb.append("null");
      } else {
        sb.append(this.filePath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dirName:");
      if (this.dirName == null) {
        sb.append("null");
      } else {
        sb.append(this.dirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileLength:");
      sb.append(this.fileLength);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkFileConf:");
      if (this.dkFileConf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkFileConf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkFileConf != null) {
        dkFileConf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class filesToHdfs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public filesToHdfs_argsStandardScheme getScheme() {
        return new filesToHdfs_argsStandardScheme();
      }
    }

    private static class filesToHdfs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<filesToHdfs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, filesToHdfs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filePath = iprot.readString();
                struct.setFilePathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dirName = iprot.readString();
                struct.setDirNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fileLength = iprot.readI32();
                struct.setFileLengthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DK_FILE_CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkFileConf = new DKFILEConf();
                struct.dkFileConf.read(iprot);
                struct.setDkFileConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, filesToHdfs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filePath != null) {
          oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.filePath);
          oprot.writeFieldEnd();
        }
        if (struct.dirName != null) {
          oprot.writeFieldBegin(DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.dirName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FILE_LENGTH_FIELD_DESC);
        oprot.writeI32(struct.fileLength);
        oprot.writeFieldEnd();
        if (struct.dkFileConf != null) {
          oprot.writeFieldBegin(DK_FILE_CONF_FIELD_DESC);
          struct.dkFileConf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class filesToHdfs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public filesToHdfs_argsTupleScheme getScheme() {
        return new filesToHdfs_argsTupleScheme();
      }
    }

    private static class filesToHdfs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<filesToHdfs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, filesToHdfs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFilePath()) {
          optionals.set(0);
        }
        if (struct.isSetDirName()) {
          optionals.set(1);
        }
        if (struct.isSetFileLength()) {
          optionals.set(2);
        }
        if (struct.isSetDkFileConf()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFilePath()) {
          oprot.writeString(struct.filePath);
        }
        if (struct.isSetDirName()) {
          oprot.writeString(struct.dirName);
        }
        if (struct.isSetFileLength()) {
          oprot.writeI32(struct.fileLength);
        }
        if (struct.isSetDkFileConf()) {
          struct.dkFileConf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, filesToHdfs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.filePath = iprot.readString();
          struct.setFilePathIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dirName = iprot.readString();
          struct.setDirNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.fileLength = iprot.readI32();
          struct.setFileLengthIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dkFileConf = new DKFILEConf();
          struct.dkFileConf.read(iprot);
          struct.setDkFileConfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class filesToHdfs_result implements org.apache.thrift.TBase<filesToHdfs_result, filesToHdfs_result._Fields>, java.io.Serializable, Cloneable, Comparable<filesToHdfs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("filesToHdfs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new filesToHdfs_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new filesToHdfs_resultTupleSchemeFactory();

    public ResultEntity success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(filesToHdfs_result.class, metaDataMap);
    }

    public filesToHdfs_result() {
    }

    public filesToHdfs_result(
      ResultEntity success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public filesToHdfs_result(filesToHdfs_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultEntity(other.success);
      }
    }

    public filesToHdfs_result deepCopy() {
      return new filesToHdfs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultEntity getSuccess() {
      return this.success;
    }

    public filesToHdfs_result setSuccess(ResultEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultEntity)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof filesToHdfs_result)
        return this.equals((filesToHdfs_result)that);
      return false;
    }

    public boolean equals(filesToHdfs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(filesToHdfs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("filesToHdfs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class filesToHdfs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public filesToHdfs_resultStandardScheme getScheme() {
        return new filesToHdfs_resultStandardScheme();
      }
    }

    private static class filesToHdfs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<filesToHdfs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, filesToHdfs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, filesToHdfs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class filesToHdfs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public filesToHdfs_resultTupleScheme getScheme() {
        return new filesToHdfs_resultTupleScheme();
      }
    }

    private static class filesToHdfs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<filesToHdfs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, filesToHdfs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, filesToHdfs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
