/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dksou.fitting.graphx.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-06-20")
public class DKGraphx {

  public interface Iface {

    /**
     * 主要用于计算网页等级(链接多的网页)或者某社区中人物的重要性(关注比较多的人)。
     * @param masterUrl local[*]（spark的一种运行模式）。 或spark://IP:PORT
     * @param inputPath 数据所在路径（用户ID或网址）
     * @param delimiter 分隔符
     * @param dataType 数据类型，num：数值型，str：字符串
     * @param outputPath 结果输出目录
     * @param dkgraphxconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * @throws TException
     * 
     * @param masterUrl
     * @param inputPath
     * @param delimiter
     * @param dataType
     * @param outputPath
     * @param dkgraphxconf
     */
    public void pageRank(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String dataType, java.lang.String outputPath, DKGraphxConf dkgraphxconf) throws org.apache.thrift.TException;

    /**
     * 主要用于社区中的人群分类，可根据人群的类别进行广告推送等。
     * @param masterUrl local[*], 或spark://IP:PORT
     * @param inputPath 数据所在路径
     * @param delimiter 分隔符
     * @param outputPath 结果输出目录
     * @param dkgraphxconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * @throws TException
     * 
     * @param masterUrl
     * @param inputPath
     * @param delimiter
     * @param outputPath
     * @param dkgraphxconf
     */
    public void commDetect(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String outputPath, DKGraphxConf dkgraphxconf) throws org.apache.thrift.TException;

    /**
     * 主要用于发现社区中好友的好友，进行好友推荐。
     * 该方法对内存要求较大，建议每台节点至少64G。
     * 数据仅支持数值型。
     * @param masterUrl spark://IP:PORT --executor-memory=8G --driver-memory=1G
     * 建议executor-memory至少为8G
     * @param inputPath 数据所在路径
     * @param delimiter 分隔符
     * @param outputPath 结果输出目录
     * @param dkgraphxconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * @throws TException
     * 
     * @param masterUrl
     * @param inputPath
     * @param delimiter
     * @param outputPath
     * @param dkgraphxconf
     */
    public void frindsFind(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String outputPath, DKGraphxConf dkgraphxconf) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void pageRank(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String dataType, java.lang.String outputPath, DKGraphxConf dkgraphxconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void commDetect(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String outputPath, DKGraphxConf dkgraphxconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void frindsFind(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String outputPath, DKGraphxConf dkgraphxconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void pageRank(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String dataType, java.lang.String outputPath, DKGraphxConf dkgraphxconf) throws org.apache.thrift.TException
    {
      send_pageRank(masterUrl, inputPath, delimiter, dataType, outputPath, dkgraphxconf);
      recv_pageRank();
    }

    public void send_pageRank(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String dataType, java.lang.String outputPath, DKGraphxConf dkgraphxconf) throws org.apache.thrift.TException
    {
      pageRank_args args = new pageRank_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setDelimiter(delimiter);
      args.setDataType(dataType);
      args.setOutputPath(outputPath);
      args.setDkgraphxconf(dkgraphxconf);
      sendBase("pageRank", args);
    }

    public void recv_pageRank() throws org.apache.thrift.TException
    {
      pageRank_result result = new pageRank_result();
      receiveBase(result, "pageRank");
      return;
    }

    public void commDetect(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String outputPath, DKGraphxConf dkgraphxconf) throws org.apache.thrift.TException
    {
      send_commDetect(masterUrl, inputPath, delimiter, outputPath, dkgraphxconf);
      recv_commDetect();
    }

    public void send_commDetect(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String outputPath, DKGraphxConf dkgraphxconf) throws org.apache.thrift.TException
    {
      commDetect_args args = new commDetect_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setDelimiter(delimiter);
      args.setOutputPath(outputPath);
      args.setDkgraphxconf(dkgraphxconf);
      sendBase("commDetect", args);
    }

    public void recv_commDetect() throws org.apache.thrift.TException
    {
      commDetect_result result = new commDetect_result();
      receiveBase(result, "commDetect");
      return;
    }

    public void frindsFind(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String outputPath, DKGraphxConf dkgraphxconf) throws org.apache.thrift.TException
    {
      send_frindsFind(masterUrl, inputPath, delimiter, outputPath, dkgraphxconf);
      recv_frindsFind();
    }

    public void send_frindsFind(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String outputPath, DKGraphxConf dkgraphxconf) throws org.apache.thrift.TException
    {
      frindsFind_args args = new frindsFind_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setDelimiter(delimiter);
      args.setOutputPath(outputPath);
      args.setDkgraphxconf(dkgraphxconf);
      sendBase("frindsFind", args);
    }

    public void recv_frindsFind() throws org.apache.thrift.TException
    {
      frindsFind_result result = new frindsFind_result();
      receiveBase(result, "frindsFind");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void pageRank(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String dataType, java.lang.String outputPath, DKGraphxConf dkgraphxconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pageRank_call method_call = new pageRank_call(masterUrl, inputPath, delimiter, dataType, outputPath, dkgraphxconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pageRank_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String delimiter;
      private java.lang.String dataType;
      private java.lang.String outputPath;
      private DKGraphxConf dkgraphxconf;
      public pageRank_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String dataType, java.lang.String outputPath, DKGraphxConf dkgraphxconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.delimiter = delimiter;
        this.dataType = dataType;
        this.outputPath = outputPath;
        this.dkgraphxconf = dkgraphxconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pageRank", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pageRank_args args = new pageRank_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setDelimiter(delimiter);
        args.setDataType(dataType);
        args.setOutputPath(outputPath);
        args.setDkgraphxconf(dkgraphxconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void commDetect(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String outputPath, DKGraphxConf dkgraphxconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      commDetect_call method_call = new commDetect_call(masterUrl, inputPath, delimiter, outputPath, dkgraphxconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class commDetect_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String delimiter;
      private java.lang.String outputPath;
      private DKGraphxConf dkgraphxconf;
      public commDetect_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String outputPath, DKGraphxConf dkgraphxconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.delimiter = delimiter;
        this.outputPath = outputPath;
        this.dkgraphxconf = dkgraphxconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("commDetect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        commDetect_args args = new commDetect_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setDelimiter(delimiter);
        args.setOutputPath(outputPath);
        args.setDkgraphxconf(dkgraphxconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void frindsFind(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String outputPath, DKGraphxConf dkgraphxconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      frindsFind_call method_call = new frindsFind_call(masterUrl, inputPath, delimiter, outputPath, dkgraphxconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class frindsFind_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String delimiter;
      private java.lang.String outputPath;
      private DKGraphxConf dkgraphxconf;
      public frindsFind_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String delimiter, java.lang.String outputPath, DKGraphxConf dkgraphxconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.delimiter = delimiter;
        this.outputPath = outputPath;
        this.dkgraphxconf = dkgraphxconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("frindsFind", org.apache.thrift.protocol.TMessageType.CALL, 0));
        frindsFind_args args = new frindsFind_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setDelimiter(delimiter);
        args.setOutputPath(outputPath);
        args.setDkgraphxconf(dkgraphxconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("pageRank", new pageRank());
      processMap.put("commDetect", new commDetect());
      processMap.put("frindsFind", new frindsFind());
      return processMap;
    }

    public static class pageRank<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pageRank_args> {
      public pageRank() {
        super("pageRank");
      }

      public pageRank_args getEmptyArgsInstance() {
        return new pageRank_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public pageRank_result getResult(I iface, pageRank_args args) throws org.apache.thrift.TException {
        pageRank_result result = new pageRank_result();
        iface.pageRank(args.masterUrl, args.inputPath, args.delimiter, args.dataType, args.outputPath, args.dkgraphxconf);
        return result;
      }
    }

    public static class commDetect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, commDetect_args> {
      public commDetect() {
        super("commDetect");
      }

      public commDetect_args getEmptyArgsInstance() {
        return new commDetect_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public commDetect_result getResult(I iface, commDetect_args args) throws org.apache.thrift.TException {
        commDetect_result result = new commDetect_result();
        iface.commDetect(args.masterUrl, args.inputPath, args.delimiter, args.outputPath, args.dkgraphxconf);
        return result;
      }
    }

    public static class frindsFind<I extends Iface> extends org.apache.thrift.ProcessFunction<I, frindsFind_args> {
      public frindsFind() {
        super("frindsFind");
      }

      public frindsFind_args getEmptyArgsInstance() {
        return new frindsFind_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public frindsFind_result getResult(I iface, frindsFind_args args) throws org.apache.thrift.TException {
        frindsFind_result result = new frindsFind_result();
        iface.frindsFind(args.masterUrl, args.inputPath, args.delimiter, args.outputPath, args.dkgraphxconf);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("pageRank", new pageRank());
      processMap.put("commDetect", new commDetect());
      processMap.put("frindsFind", new frindsFind());
      return processMap;
    }

    public static class pageRank<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pageRank_args, Void> {
      public pageRank() {
        super("pageRank");
      }

      public pageRank_args getEmptyArgsInstance() {
        return new pageRank_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            pageRank_result result = new pageRank_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            pageRank_result result = new pageRank_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pageRank_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.pageRank(args.masterUrl, args.inputPath, args.delimiter, args.dataType, args.outputPath, args.dkgraphxconf,resultHandler);
      }
    }

    public static class commDetect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, commDetect_args, Void> {
      public commDetect() {
        super("commDetect");
      }

      public commDetect_args getEmptyArgsInstance() {
        return new commDetect_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            commDetect_result result = new commDetect_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            commDetect_result result = new commDetect_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, commDetect_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.commDetect(args.masterUrl, args.inputPath, args.delimiter, args.outputPath, args.dkgraphxconf,resultHandler);
      }
    }

    public static class frindsFind<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, frindsFind_args, Void> {
      public frindsFind() {
        super("frindsFind");
      }

      public frindsFind_args getEmptyArgsInstance() {
        return new frindsFind_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            frindsFind_result result = new frindsFind_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            frindsFind_result result = new frindsFind_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, frindsFind_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.frindsFind(args.masterUrl, args.inputPath, args.delimiter, args.outputPath, args.dkgraphxconf,resultHandler);
      }
    }

  }

  public static class pageRank_args implements org.apache.thrift.TBase<pageRank_args, pageRank_args._Fields>, java.io.Serializable, Cloneable, Comparable<pageRank_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pageRank_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DELIMITER_FIELD_DESC = new org.apache.thrift.protocol.TField("delimiter", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataType", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField OUTPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outputPath", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField DKGRAPHXCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkgraphxconf", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new pageRank_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new pageRank_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String delimiter; // required
    public java.lang.String dataType; // required
    public java.lang.String outputPath; // required
    public DKGraphxConf dkgraphxconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      DELIMITER((short)3, "delimiter"),
      DATA_TYPE((short)4, "dataType"),
      OUTPUT_PATH((short)5, "outputPath"),
      DKGRAPHXCONF((short)6, "dkgraphxconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // DELIMITER
            return DELIMITER;
          case 4: // DATA_TYPE
            return DATA_TYPE;
          case 5: // OUTPUT_PATH
            return OUTPUT_PATH;
          case 6: // DKGRAPHXCONF
            return DKGRAPHXCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DELIMITER, new org.apache.thrift.meta_data.FieldMetaData("delimiter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dataType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKGRAPHXCONF, new org.apache.thrift.meta_data.FieldMetaData("dkgraphxconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKGraphxConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pageRank_args.class, metaDataMap);
    }

    public pageRank_args() {
    }

    public pageRank_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String delimiter,
      java.lang.String dataType,
      java.lang.String outputPath,
      DKGraphxConf dkgraphxconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.delimiter = delimiter;
      this.dataType = dataType;
      this.outputPath = outputPath;
      this.dkgraphxconf = dkgraphxconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pageRank_args(pageRank_args other) {
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetDelimiter()) {
        this.delimiter = other.delimiter;
      }
      if (other.isSetDataType()) {
        this.dataType = other.dataType;
      }
      if (other.isSetOutputPath()) {
        this.outputPath = other.outputPath;
      }
      if (other.isSetDkgraphxconf()) {
        this.dkgraphxconf = new DKGraphxConf(other.dkgraphxconf);
      }
    }

    public pageRank_args deepCopy() {
      return new pageRank_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.delimiter = null;
      this.dataType = null;
      this.outputPath = null;
      this.dkgraphxconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public pageRank_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public pageRank_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getDelimiter() {
      return this.delimiter;
    }

    public pageRank_args setDelimiter(java.lang.String delimiter) {
      this.delimiter = delimiter;
      return this;
    }

    public void unsetDelimiter() {
      this.delimiter = null;
    }

    /** Returns true if field delimiter is set (has been assigned a value) and false otherwise */
    public boolean isSetDelimiter() {
      return this.delimiter != null;
    }

    public void setDelimiterIsSet(boolean value) {
      if (!value) {
        this.delimiter = null;
      }
    }

    public java.lang.String getDataType() {
      return this.dataType;
    }

    public pageRank_args setDataType(java.lang.String dataType) {
      this.dataType = dataType;
      return this;
    }

    public void unsetDataType() {
      this.dataType = null;
    }

    /** Returns true if field dataType is set (has been assigned a value) and false otherwise */
    public boolean isSetDataType() {
      return this.dataType != null;
    }

    public void setDataTypeIsSet(boolean value) {
      if (!value) {
        this.dataType = null;
      }
    }

    public java.lang.String getOutputPath() {
      return this.outputPath;
    }

    public pageRank_args setOutputPath(java.lang.String outputPath) {
      this.outputPath = outputPath;
      return this;
    }

    public void unsetOutputPath() {
      this.outputPath = null;
    }

    /** Returns true if field outputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputPath() {
      return this.outputPath != null;
    }

    public void setOutputPathIsSet(boolean value) {
      if (!value) {
        this.outputPath = null;
      }
    }

    public DKGraphxConf getDkgraphxconf() {
      return this.dkgraphxconf;
    }

    public pageRank_args setDkgraphxconf(DKGraphxConf dkgraphxconf) {
      this.dkgraphxconf = dkgraphxconf;
      return this;
    }

    public void unsetDkgraphxconf() {
      this.dkgraphxconf = null;
    }

    /** Returns true if field dkgraphxconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkgraphxconf() {
      return this.dkgraphxconf != null;
    }

    public void setDkgraphxconfIsSet(boolean value) {
      if (!value) {
        this.dkgraphxconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case DELIMITER:
        if (value == null) {
          unsetDelimiter();
        } else {
          setDelimiter((java.lang.String)value);
        }
        break;

      case DATA_TYPE:
        if (value == null) {
          unsetDataType();
        } else {
          setDataType((java.lang.String)value);
        }
        break;

      case OUTPUT_PATH:
        if (value == null) {
          unsetOutputPath();
        } else {
          setOutputPath((java.lang.String)value);
        }
        break;

      case DKGRAPHXCONF:
        if (value == null) {
          unsetDkgraphxconf();
        } else {
          setDkgraphxconf((DKGraphxConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case DELIMITER:
        return getDelimiter();

      case DATA_TYPE:
        return getDataType();

      case OUTPUT_PATH:
        return getOutputPath();

      case DKGRAPHXCONF:
        return getDkgraphxconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case DELIMITER:
        return isSetDelimiter();
      case DATA_TYPE:
        return isSetDataType();
      case OUTPUT_PATH:
        return isSetOutputPath();
      case DKGRAPHXCONF:
        return isSetDkgraphxconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof pageRank_args)
        return this.equals((pageRank_args)that);
      return false;
    }

    public boolean equals(pageRank_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_delimiter = true && this.isSetDelimiter();
      boolean that_present_delimiter = true && that.isSetDelimiter();
      if (this_present_delimiter || that_present_delimiter) {
        if (!(this_present_delimiter && that_present_delimiter))
          return false;
        if (!this.delimiter.equals(that.delimiter))
          return false;
      }

      boolean this_present_dataType = true && this.isSetDataType();
      boolean that_present_dataType = true && that.isSetDataType();
      if (this_present_dataType || that_present_dataType) {
        if (!(this_present_dataType && that_present_dataType))
          return false;
        if (!this.dataType.equals(that.dataType))
          return false;
      }

      boolean this_present_outputPath = true && this.isSetOutputPath();
      boolean that_present_outputPath = true && that.isSetOutputPath();
      if (this_present_outputPath || that_present_outputPath) {
        if (!(this_present_outputPath && that_present_outputPath))
          return false;
        if (!this.outputPath.equals(that.outputPath))
          return false;
      }

      boolean this_present_dkgraphxconf = true && this.isSetDkgraphxconf();
      boolean that_present_dkgraphxconf = true && that.isSetDkgraphxconf();
      if (this_present_dkgraphxconf || that_present_dkgraphxconf) {
        if (!(this_present_dkgraphxconf && that_present_dkgraphxconf))
          return false;
        if (!this.dkgraphxconf.equals(that.dkgraphxconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDelimiter()) ? 131071 : 524287);
      if (isSetDelimiter())
        hashCode = hashCode * 8191 + delimiter.hashCode();

      hashCode = hashCode * 8191 + ((isSetDataType()) ? 131071 : 524287);
      if (isSetDataType())
        hashCode = hashCode * 8191 + dataType.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutputPath()) ? 131071 : 524287);
      if (isSetOutputPath())
        hashCode = hashCode * 8191 + outputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkgraphxconf()) ? 131071 : 524287);
      if (isSetDkgraphxconf())
        hashCode = hashCode * 8191 + dkgraphxconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(pageRank_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDelimiter()).compareTo(other.isSetDelimiter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDelimiter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delimiter, other.delimiter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDataType()).compareTo(other.isSetDataType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataType, other.dataType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutputPath()).compareTo(other.isSetOutputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputPath, other.outputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkgraphxconf()).compareTo(other.isSetDkgraphxconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkgraphxconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkgraphxconf, other.dkgraphxconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("pageRank_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("delimiter:");
      if (this.delimiter == null) {
        sb.append("null");
      } else {
        sb.append(this.delimiter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataType:");
      if (this.dataType == null) {
        sb.append("null");
      } else {
        sb.append(this.dataType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputPath:");
      if (this.outputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkgraphxconf:");
      if (this.dkgraphxconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkgraphxconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkgraphxconf != null) {
        dkgraphxconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pageRank_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pageRank_argsStandardScheme getScheme() {
        return new pageRank_argsStandardScheme();
      }
    }

    private static class pageRank_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<pageRank_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pageRank_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DELIMITER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.delimiter = iprot.readString();
                struct.setDelimiterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // DATA_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataType = iprot.readString();
                struct.setDataTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OUTPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputPath = iprot.readString();
                struct.setOutputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DKGRAPHXCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkgraphxconf = new DKGraphxConf();
                struct.dkgraphxconf.read(iprot);
                struct.setDkgraphxconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pageRank_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.delimiter != null) {
          oprot.writeFieldBegin(DELIMITER_FIELD_DESC);
          oprot.writeString(struct.delimiter);
          oprot.writeFieldEnd();
        }
        if (struct.dataType != null) {
          oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
          oprot.writeString(struct.dataType);
          oprot.writeFieldEnd();
        }
        if (struct.outputPath != null) {
          oprot.writeFieldBegin(OUTPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outputPath);
          oprot.writeFieldEnd();
        }
        if (struct.dkgraphxconf != null) {
          oprot.writeFieldBegin(DKGRAPHXCONF_FIELD_DESC);
          struct.dkgraphxconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pageRank_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pageRank_argsTupleScheme getScheme() {
        return new pageRank_argsTupleScheme();
      }
    }

    private static class pageRank_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<pageRank_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pageRank_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetDelimiter()) {
          optionals.set(2);
        }
        if (struct.isSetDataType()) {
          optionals.set(3);
        }
        if (struct.isSetOutputPath()) {
          optionals.set(4);
        }
        if (struct.isSetDkgraphxconf()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetDelimiter()) {
          oprot.writeString(struct.delimiter);
        }
        if (struct.isSetDataType()) {
          oprot.writeString(struct.dataType);
        }
        if (struct.isSetOutputPath()) {
          oprot.writeString(struct.outputPath);
        }
        if (struct.isSetDkgraphxconf()) {
          struct.dkgraphxconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pageRank_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.delimiter = iprot.readString();
          struct.setDelimiterIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dataType = iprot.readString();
          struct.setDataTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.outputPath = iprot.readString();
          struct.setOutputPathIsSet(true);
        }
        if (incoming.get(5)) {
          struct.dkgraphxconf = new DKGraphxConf();
          struct.dkgraphxconf.read(iprot);
          struct.setDkgraphxconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class pageRank_result implements org.apache.thrift.TBase<pageRank_result, pageRank_result._Fields>, java.io.Serializable, Cloneable, Comparable<pageRank_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pageRank_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new pageRank_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new pageRank_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pageRank_result.class, metaDataMap);
    }

    public pageRank_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pageRank_result(pageRank_result other) {
    }

    public pageRank_result deepCopy() {
      return new pageRank_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof pageRank_result)
        return this.equals((pageRank_result)that);
      return false;
    }

    public boolean equals(pageRank_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(pageRank_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("pageRank_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pageRank_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pageRank_resultStandardScheme getScheme() {
        return new pageRank_resultStandardScheme();
      }
    }

    private static class pageRank_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<pageRank_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pageRank_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pageRank_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pageRank_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pageRank_resultTupleScheme getScheme() {
        return new pageRank_resultTupleScheme();
      }
    }

    private static class pageRank_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<pageRank_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pageRank_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pageRank_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class commDetect_args implements org.apache.thrift.TBase<commDetect_args, commDetect_args._Fields>, java.io.Serializable, Cloneable, Comparable<commDetect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commDetect_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DELIMITER_FIELD_DESC = new org.apache.thrift.protocol.TField("delimiter", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outputPath", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DKGRAPHXCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkgraphxconf", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new commDetect_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new commDetect_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String delimiter; // required
    public java.lang.String outputPath; // required
    public DKGraphxConf dkgraphxconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      DELIMITER((short)3, "delimiter"),
      OUTPUT_PATH((short)4, "outputPath"),
      DKGRAPHXCONF((short)6, "dkgraphxconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // DELIMITER
            return DELIMITER;
          case 4: // OUTPUT_PATH
            return OUTPUT_PATH;
          case 6: // DKGRAPHXCONF
            return DKGRAPHXCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DELIMITER, new org.apache.thrift.meta_data.FieldMetaData("delimiter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKGRAPHXCONF, new org.apache.thrift.meta_data.FieldMetaData("dkgraphxconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKGraphxConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commDetect_args.class, metaDataMap);
    }

    public commDetect_args() {
    }

    public commDetect_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String delimiter,
      java.lang.String outputPath,
      DKGraphxConf dkgraphxconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.delimiter = delimiter;
      this.outputPath = outputPath;
      this.dkgraphxconf = dkgraphxconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commDetect_args(commDetect_args other) {
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetDelimiter()) {
        this.delimiter = other.delimiter;
      }
      if (other.isSetOutputPath()) {
        this.outputPath = other.outputPath;
      }
      if (other.isSetDkgraphxconf()) {
        this.dkgraphxconf = new DKGraphxConf(other.dkgraphxconf);
      }
    }

    public commDetect_args deepCopy() {
      return new commDetect_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.delimiter = null;
      this.outputPath = null;
      this.dkgraphxconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public commDetect_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public commDetect_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getDelimiter() {
      return this.delimiter;
    }

    public commDetect_args setDelimiter(java.lang.String delimiter) {
      this.delimiter = delimiter;
      return this;
    }

    public void unsetDelimiter() {
      this.delimiter = null;
    }

    /** Returns true if field delimiter is set (has been assigned a value) and false otherwise */
    public boolean isSetDelimiter() {
      return this.delimiter != null;
    }

    public void setDelimiterIsSet(boolean value) {
      if (!value) {
        this.delimiter = null;
      }
    }

    public java.lang.String getOutputPath() {
      return this.outputPath;
    }

    public commDetect_args setOutputPath(java.lang.String outputPath) {
      this.outputPath = outputPath;
      return this;
    }

    public void unsetOutputPath() {
      this.outputPath = null;
    }

    /** Returns true if field outputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputPath() {
      return this.outputPath != null;
    }

    public void setOutputPathIsSet(boolean value) {
      if (!value) {
        this.outputPath = null;
      }
    }

    public DKGraphxConf getDkgraphxconf() {
      return this.dkgraphxconf;
    }

    public commDetect_args setDkgraphxconf(DKGraphxConf dkgraphxconf) {
      this.dkgraphxconf = dkgraphxconf;
      return this;
    }

    public void unsetDkgraphxconf() {
      this.dkgraphxconf = null;
    }

    /** Returns true if field dkgraphxconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkgraphxconf() {
      return this.dkgraphxconf != null;
    }

    public void setDkgraphxconfIsSet(boolean value) {
      if (!value) {
        this.dkgraphxconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case DELIMITER:
        if (value == null) {
          unsetDelimiter();
        } else {
          setDelimiter((java.lang.String)value);
        }
        break;

      case OUTPUT_PATH:
        if (value == null) {
          unsetOutputPath();
        } else {
          setOutputPath((java.lang.String)value);
        }
        break;

      case DKGRAPHXCONF:
        if (value == null) {
          unsetDkgraphxconf();
        } else {
          setDkgraphxconf((DKGraphxConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case DELIMITER:
        return getDelimiter();

      case OUTPUT_PATH:
        return getOutputPath();

      case DKGRAPHXCONF:
        return getDkgraphxconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case DELIMITER:
        return isSetDelimiter();
      case OUTPUT_PATH:
        return isSetOutputPath();
      case DKGRAPHXCONF:
        return isSetDkgraphxconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof commDetect_args)
        return this.equals((commDetect_args)that);
      return false;
    }

    public boolean equals(commDetect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_delimiter = true && this.isSetDelimiter();
      boolean that_present_delimiter = true && that.isSetDelimiter();
      if (this_present_delimiter || that_present_delimiter) {
        if (!(this_present_delimiter && that_present_delimiter))
          return false;
        if (!this.delimiter.equals(that.delimiter))
          return false;
      }

      boolean this_present_outputPath = true && this.isSetOutputPath();
      boolean that_present_outputPath = true && that.isSetOutputPath();
      if (this_present_outputPath || that_present_outputPath) {
        if (!(this_present_outputPath && that_present_outputPath))
          return false;
        if (!this.outputPath.equals(that.outputPath))
          return false;
      }

      boolean this_present_dkgraphxconf = true && this.isSetDkgraphxconf();
      boolean that_present_dkgraphxconf = true && that.isSetDkgraphxconf();
      if (this_present_dkgraphxconf || that_present_dkgraphxconf) {
        if (!(this_present_dkgraphxconf && that_present_dkgraphxconf))
          return false;
        if (!this.dkgraphxconf.equals(that.dkgraphxconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDelimiter()) ? 131071 : 524287);
      if (isSetDelimiter())
        hashCode = hashCode * 8191 + delimiter.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutputPath()) ? 131071 : 524287);
      if (isSetOutputPath())
        hashCode = hashCode * 8191 + outputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkgraphxconf()) ? 131071 : 524287);
      if (isSetDkgraphxconf())
        hashCode = hashCode * 8191 + dkgraphxconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(commDetect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDelimiter()).compareTo(other.isSetDelimiter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDelimiter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delimiter, other.delimiter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutputPath()).compareTo(other.isSetOutputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputPath, other.outputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkgraphxconf()).compareTo(other.isSetDkgraphxconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkgraphxconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkgraphxconf, other.dkgraphxconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("commDetect_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("delimiter:");
      if (this.delimiter == null) {
        sb.append("null");
      } else {
        sb.append(this.delimiter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputPath:");
      if (this.outputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkgraphxconf:");
      if (this.dkgraphxconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkgraphxconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkgraphxconf != null) {
        dkgraphxconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commDetect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public commDetect_argsStandardScheme getScheme() {
        return new commDetect_argsStandardScheme();
      }
    }

    private static class commDetect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<commDetect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commDetect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DELIMITER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.delimiter = iprot.readString();
                struct.setDelimiterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputPath = iprot.readString();
                struct.setOutputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DKGRAPHXCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkgraphxconf = new DKGraphxConf();
                struct.dkgraphxconf.read(iprot);
                struct.setDkgraphxconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commDetect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.delimiter != null) {
          oprot.writeFieldBegin(DELIMITER_FIELD_DESC);
          oprot.writeString(struct.delimiter);
          oprot.writeFieldEnd();
        }
        if (struct.outputPath != null) {
          oprot.writeFieldBegin(OUTPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outputPath);
          oprot.writeFieldEnd();
        }
        if (struct.dkgraphxconf != null) {
          oprot.writeFieldBegin(DKGRAPHXCONF_FIELD_DESC);
          struct.dkgraphxconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commDetect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public commDetect_argsTupleScheme getScheme() {
        return new commDetect_argsTupleScheme();
      }
    }

    private static class commDetect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<commDetect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commDetect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetDelimiter()) {
          optionals.set(2);
        }
        if (struct.isSetOutputPath()) {
          optionals.set(3);
        }
        if (struct.isSetDkgraphxconf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetDelimiter()) {
          oprot.writeString(struct.delimiter);
        }
        if (struct.isSetOutputPath()) {
          oprot.writeString(struct.outputPath);
        }
        if (struct.isSetDkgraphxconf()) {
          struct.dkgraphxconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commDetect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.delimiter = iprot.readString();
          struct.setDelimiterIsSet(true);
        }
        if (incoming.get(3)) {
          struct.outputPath = iprot.readString();
          struct.setOutputPathIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkgraphxconf = new DKGraphxConf();
          struct.dkgraphxconf.read(iprot);
          struct.setDkgraphxconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class commDetect_result implements org.apache.thrift.TBase<commDetect_result, commDetect_result._Fields>, java.io.Serializable, Cloneable, Comparable<commDetect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commDetect_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new commDetect_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new commDetect_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commDetect_result.class, metaDataMap);
    }

    public commDetect_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public commDetect_result(commDetect_result other) {
    }

    public commDetect_result deepCopy() {
      return new commDetect_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof commDetect_result)
        return this.equals((commDetect_result)that);
      return false;
    }

    public boolean equals(commDetect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(commDetect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("commDetect_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class commDetect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public commDetect_resultStandardScheme getScheme() {
        return new commDetect_resultStandardScheme();
      }
    }

    private static class commDetect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<commDetect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, commDetect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, commDetect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class commDetect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public commDetect_resultTupleScheme getScheme() {
        return new commDetect_resultTupleScheme();
      }
    }

    private static class commDetect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<commDetect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commDetect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commDetect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class frindsFind_args implements org.apache.thrift.TBase<frindsFind_args, frindsFind_args._Fields>, java.io.Serializable, Cloneable, Comparable<frindsFind_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("frindsFind_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DELIMITER_FIELD_DESC = new org.apache.thrift.protocol.TField("delimiter", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outputPath", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DKGRAPHXCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkgraphxconf", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new frindsFind_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new frindsFind_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String delimiter; // required
    public java.lang.String outputPath; // required
    public DKGraphxConf dkgraphxconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      DELIMITER((short)3, "delimiter"),
      OUTPUT_PATH((short)4, "outputPath"),
      DKGRAPHXCONF((short)6, "dkgraphxconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // DELIMITER
            return DELIMITER;
          case 4: // OUTPUT_PATH
            return OUTPUT_PATH;
          case 6: // DKGRAPHXCONF
            return DKGRAPHXCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DELIMITER, new org.apache.thrift.meta_data.FieldMetaData("delimiter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKGRAPHXCONF, new org.apache.thrift.meta_data.FieldMetaData("dkgraphxconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKGraphxConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(frindsFind_args.class, metaDataMap);
    }

    public frindsFind_args() {
    }

    public frindsFind_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String delimiter,
      java.lang.String outputPath,
      DKGraphxConf dkgraphxconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.delimiter = delimiter;
      this.outputPath = outputPath;
      this.dkgraphxconf = dkgraphxconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public frindsFind_args(frindsFind_args other) {
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetDelimiter()) {
        this.delimiter = other.delimiter;
      }
      if (other.isSetOutputPath()) {
        this.outputPath = other.outputPath;
      }
      if (other.isSetDkgraphxconf()) {
        this.dkgraphxconf = new DKGraphxConf(other.dkgraphxconf);
      }
    }

    public frindsFind_args deepCopy() {
      return new frindsFind_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.delimiter = null;
      this.outputPath = null;
      this.dkgraphxconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public frindsFind_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public frindsFind_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getDelimiter() {
      return this.delimiter;
    }

    public frindsFind_args setDelimiter(java.lang.String delimiter) {
      this.delimiter = delimiter;
      return this;
    }

    public void unsetDelimiter() {
      this.delimiter = null;
    }

    /** Returns true if field delimiter is set (has been assigned a value) and false otherwise */
    public boolean isSetDelimiter() {
      return this.delimiter != null;
    }

    public void setDelimiterIsSet(boolean value) {
      if (!value) {
        this.delimiter = null;
      }
    }

    public java.lang.String getOutputPath() {
      return this.outputPath;
    }

    public frindsFind_args setOutputPath(java.lang.String outputPath) {
      this.outputPath = outputPath;
      return this;
    }

    public void unsetOutputPath() {
      this.outputPath = null;
    }

    /** Returns true if field outputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputPath() {
      return this.outputPath != null;
    }

    public void setOutputPathIsSet(boolean value) {
      if (!value) {
        this.outputPath = null;
      }
    }

    public DKGraphxConf getDkgraphxconf() {
      return this.dkgraphxconf;
    }

    public frindsFind_args setDkgraphxconf(DKGraphxConf dkgraphxconf) {
      this.dkgraphxconf = dkgraphxconf;
      return this;
    }

    public void unsetDkgraphxconf() {
      this.dkgraphxconf = null;
    }

    /** Returns true if field dkgraphxconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkgraphxconf() {
      return this.dkgraphxconf != null;
    }

    public void setDkgraphxconfIsSet(boolean value) {
      if (!value) {
        this.dkgraphxconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case DELIMITER:
        if (value == null) {
          unsetDelimiter();
        } else {
          setDelimiter((java.lang.String)value);
        }
        break;

      case OUTPUT_PATH:
        if (value == null) {
          unsetOutputPath();
        } else {
          setOutputPath((java.lang.String)value);
        }
        break;

      case DKGRAPHXCONF:
        if (value == null) {
          unsetDkgraphxconf();
        } else {
          setDkgraphxconf((DKGraphxConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case DELIMITER:
        return getDelimiter();

      case OUTPUT_PATH:
        return getOutputPath();

      case DKGRAPHXCONF:
        return getDkgraphxconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case DELIMITER:
        return isSetDelimiter();
      case OUTPUT_PATH:
        return isSetOutputPath();
      case DKGRAPHXCONF:
        return isSetDkgraphxconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof frindsFind_args)
        return this.equals((frindsFind_args)that);
      return false;
    }

    public boolean equals(frindsFind_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_delimiter = true && this.isSetDelimiter();
      boolean that_present_delimiter = true && that.isSetDelimiter();
      if (this_present_delimiter || that_present_delimiter) {
        if (!(this_present_delimiter && that_present_delimiter))
          return false;
        if (!this.delimiter.equals(that.delimiter))
          return false;
      }

      boolean this_present_outputPath = true && this.isSetOutputPath();
      boolean that_present_outputPath = true && that.isSetOutputPath();
      if (this_present_outputPath || that_present_outputPath) {
        if (!(this_present_outputPath && that_present_outputPath))
          return false;
        if (!this.outputPath.equals(that.outputPath))
          return false;
      }

      boolean this_present_dkgraphxconf = true && this.isSetDkgraphxconf();
      boolean that_present_dkgraphxconf = true && that.isSetDkgraphxconf();
      if (this_present_dkgraphxconf || that_present_dkgraphxconf) {
        if (!(this_present_dkgraphxconf && that_present_dkgraphxconf))
          return false;
        if (!this.dkgraphxconf.equals(that.dkgraphxconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDelimiter()) ? 131071 : 524287);
      if (isSetDelimiter())
        hashCode = hashCode * 8191 + delimiter.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutputPath()) ? 131071 : 524287);
      if (isSetOutputPath())
        hashCode = hashCode * 8191 + outputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkgraphxconf()) ? 131071 : 524287);
      if (isSetDkgraphxconf())
        hashCode = hashCode * 8191 + dkgraphxconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(frindsFind_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDelimiter()).compareTo(other.isSetDelimiter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDelimiter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delimiter, other.delimiter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutputPath()).compareTo(other.isSetOutputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputPath, other.outputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkgraphxconf()).compareTo(other.isSetDkgraphxconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkgraphxconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkgraphxconf, other.dkgraphxconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("frindsFind_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("delimiter:");
      if (this.delimiter == null) {
        sb.append("null");
      } else {
        sb.append(this.delimiter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputPath:");
      if (this.outputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkgraphxconf:");
      if (this.dkgraphxconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkgraphxconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkgraphxconf != null) {
        dkgraphxconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class frindsFind_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public frindsFind_argsStandardScheme getScheme() {
        return new frindsFind_argsStandardScheme();
      }
    }

    private static class frindsFind_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<frindsFind_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, frindsFind_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DELIMITER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.delimiter = iprot.readString();
                struct.setDelimiterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputPath = iprot.readString();
                struct.setOutputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DKGRAPHXCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkgraphxconf = new DKGraphxConf();
                struct.dkgraphxconf.read(iprot);
                struct.setDkgraphxconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, frindsFind_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.delimiter != null) {
          oprot.writeFieldBegin(DELIMITER_FIELD_DESC);
          oprot.writeString(struct.delimiter);
          oprot.writeFieldEnd();
        }
        if (struct.outputPath != null) {
          oprot.writeFieldBegin(OUTPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outputPath);
          oprot.writeFieldEnd();
        }
        if (struct.dkgraphxconf != null) {
          oprot.writeFieldBegin(DKGRAPHXCONF_FIELD_DESC);
          struct.dkgraphxconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class frindsFind_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public frindsFind_argsTupleScheme getScheme() {
        return new frindsFind_argsTupleScheme();
      }
    }

    private static class frindsFind_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<frindsFind_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, frindsFind_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetDelimiter()) {
          optionals.set(2);
        }
        if (struct.isSetOutputPath()) {
          optionals.set(3);
        }
        if (struct.isSetDkgraphxconf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetDelimiter()) {
          oprot.writeString(struct.delimiter);
        }
        if (struct.isSetOutputPath()) {
          oprot.writeString(struct.outputPath);
        }
        if (struct.isSetDkgraphxconf()) {
          struct.dkgraphxconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, frindsFind_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.delimiter = iprot.readString();
          struct.setDelimiterIsSet(true);
        }
        if (incoming.get(3)) {
          struct.outputPath = iprot.readString();
          struct.setOutputPathIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkgraphxconf = new DKGraphxConf();
          struct.dkgraphxconf.read(iprot);
          struct.setDkgraphxconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class frindsFind_result implements org.apache.thrift.TBase<frindsFind_result, frindsFind_result._Fields>, java.io.Serializable, Cloneable, Comparable<frindsFind_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("frindsFind_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new frindsFind_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new frindsFind_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(frindsFind_result.class, metaDataMap);
    }

    public frindsFind_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public frindsFind_result(frindsFind_result other) {
    }

    public frindsFind_result deepCopy() {
      return new frindsFind_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof frindsFind_result)
        return this.equals((frindsFind_result)that);
      return false;
    }

    public boolean equals(frindsFind_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(frindsFind_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("frindsFind_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class frindsFind_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public frindsFind_resultStandardScheme getScheme() {
        return new frindsFind_resultStandardScheme();
      }
    }

    private static class frindsFind_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<frindsFind_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, frindsFind_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, frindsFind_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class frindsFind_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public frindsFind_resultTupleScheme getScheme() {
        return new frindsFind_resultTupleScheme();
      }
    }

    private static class frindsFind_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<frindsFind_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, frindsFind_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, frindsFind_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
