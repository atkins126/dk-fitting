/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dksou.fitting.ml.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-06-20")
public class DKML {

  public interface Iface {

    /**
     * * 构建分类模型
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 训练数据所在路径
     *    * @param modelPath 模型保存路径
     *    * @param numClass 分类数目
     *    * @param dkmlconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param modelPath
     * @param numClass
     * @param dkmlconf
     */
    public void lrModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClass, DKMLConf dkmlconf) throws org.apache.thrift.TException;

    /**
     * * 模型预测
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 训练数据所在路径
     *    * @param modelPath 模型保存路径
     *    * @param outputPath 结果保存路径
     *    * @param conf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param modelPath
     * @param outputPath
     * @param dkmlconf
     */
    public void lrModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException;

    /**
     * * 构建分类模型
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 训练数据所在路径
     *    * @param modelPath 模型保存路径
     *    * @param numClass 分类数目
     *    * @param dkmlconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param modelPath
     * @param numClass
     * @param dkmlconf
     */
    public void rfClassModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClass, DKMLConf dkmlconf) throws org.apache.thrift.TException;

    /**
     * * 构建回归模型
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 训练数据所在路径
     *    * @param modelPath 模型保存路径
     *    * @param dkmlconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param modelPath
     * @param dkmlconf
     */
    public void rfRegresModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf) throws org.apache.thrift.TException;

    /**
     * * 模型预测
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 训练数据所在路径
     *    * @param modelPath 模型保存路径
     *    * @param outputPath 结果保存路径
     *    * @param dkmlconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param modelPath
     * @param outputPath
     * @param dkmlconf
     */
    public void rfModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException;

    /**
     * * 构建分类模型
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 训练数据所在路径
     *    * @param modelPath 模型保存路径
     *    * @param dkmlconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param modelPath
     * @param dkmlconf
     */
    public void svmModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf) throws org.apache.thrift.TException;

    /**
     * * 模型预测
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 训练数据所在路径
     *    * @param modelPath 模型保存路径
     *    * @param outputPath 结果保存路径
     *    * @param dkmlconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param modelPath
     * @param outputPath
     * @param dkmlconf
     */
    public void svmModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException;

    /**
     * * 构建分类模型
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 训练数据所在路径
     *    * @param modelPath 模型保存路径
     *    * @param dkmlconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param modelPath
     * @param dkmlconf
     */
    public void nbModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf) throws org.apache.thrift.TException;

    /**
     * * 模型预测
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 训练数据所在路径
     *    * @param modelPath 模型保存路径
     *    * @param outputPath 预测结果保存路径
     *    * @param dkmlconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param modelPath
     * @param outputPath
     * @param dkmlconf
     */
    public void nbModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException;

    /**
     * * 构建聚类模型
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 训练数据所在路径
     *    * @param modelPath 模型保存路径
     *    * @param numClusters 聚类数目
     *    * @param dkmlconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param modelPath
     * @param numClusters
     * @param dkmlconf
     */
    public void kmModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClusters, DKMLConf dkmlconf) throws org.apache.thrift.TException;

    /**
     * * 聚类模型预测
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 训练数据所在路径
     *    * @param modelPath 模型保存路径
     *    * @param outputPath 预测结果保存路径
     *    * @param dkmlconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param modelPath
     * @param outputPath
     * @param dkmlconf
     */
    public void kmModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException;

    /**
     * * 聚类模型构建
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 训练数据所在路径
     *    * @param modelPath 模型保存路径
     *    * @param numClusters 聚类数目
     *    * @param dkmlconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param modelPath
     * @param numClusters
     * @param dkmlconf
     */
    public void gmModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClusters, DKMLConf dkmlconf) throws org.apache.thrift.TException;

    /**
     * * 模型预测
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 训练数据所在路径
     *    * @param modelPath 模型保存路径
     *    * @param outputPath 预测结果保存路径
     *    * @param dkmlconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param modelPath
     * @param outputPath
     * @param dkmlconf
     */
    public void gmModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException;

    /**
     * * 主要用来对数据降维,去噪
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 训练数据所在路径
     *    * @param outputPath 结果保存路径
     *    * @param k 主成分数目
     *    * @param dkmlconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param outputPath
     * @param k
     * @param dkmlconf
     */
    public void pcaModel(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String outputPath, int k, DKMLConf dkmlconf) throws org.apache.thrift.TException;

    /**
     * * 主要用于挖掘关联规则的频繁项集
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 训练数据所在路径
     *    * @param outputPath 训练结果保存路径
     *    * @param minSupport 最小支持度，默认0.3，相当于占30%，超过此支持度的将被选出
     *    * @param dkmlconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param outputPath
     * @param minSupport
     * @param dkmlconf
     */
    public void fpGrowthModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String outputPath, double minSupport, DKMLConf dkmlconf) throws org.apache.thrift.TException;

    /**
     * * 推荐模型构建
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 训练数据所在路径
     *    * @param modelPath 模型保存路径
     *    * @param rank 特征数目，默认10，用户打分时所考虑的特征角度
     *    * @param numIterations 迭代次数，推荐10-20，默认10
     *    * @param dkmlconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param modelPath
     * @param rank
     * @param numIterations
     * @param dkmlconf
     */
    public void alsModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int rank, int numIterations, DKMLConf dkmlconf) throws org.apache.thrift.TException;

    /**
     * * 给产品推荐用户
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 预测用数据所在路径
     *    * @param modelPath 模型保存路径
     *    * @param outputPath 预测结果保存路径
     *    * @param dkmlconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param modelPath
     * @param outputPath
     * @param dkmlconf
     */
    public void rmUsers(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException;

    /**
     * * 给用户推荐产品
     *    * @param masterUrl local[2], 或spark://IP:PORT
     *    * @param inputPath 预测用数据所在路径
     *    * @param modelPath 模型保存路径
     *    * @param outputPath 预测结果保存路径
     *    * @param dkmlconf 为参数优化,可以使用默认值0表示使用系统默认参数。
     * 
     * @param masterUrl
     * @param inputPath
     * @param modelPath
     * @param outputPath
     * @param dkmlconf
     */
    public void rmpProducts(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void lrModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClass, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void lrModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void rfClassModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClass, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void rfRegresModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void rfModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void svmModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void svmModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void nbModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void nbModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void kmModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClusters, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void kmModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void gmModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClusters, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void gmModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void pcaModel(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String outputPath, int k, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void fpGrowthModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String outputPath, double minSupport, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void alsModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int rank, int numIterations, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void rmUsers(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void rmpProducts(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void lrModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClass, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_lrModelBuild(masterUrl, inputPath, modelPath, numClass, dkmlconf);
      recv_lrModelBuild();
    }

    public void send_lrModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClass, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      lrModelBuild_args args = new lrModelBuild_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setModelPath(modelPath);
      args.setNumClass(numClass);
      args.setDkmlconf(dkmlconf);
      sendBase("lrModelBuild", args);
    }

    public void recv_lrModelBuild() throws org.apache.thrift.TException
    {
      lrModelBuild_result result = new lrModelBuild_result();
      receiveBase(result, "lrModelBuild");
      return;
    }

    public void lrModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_lrModelPredict(masterUrl, inputPath, modelPath, outputPath, dkmlconf);
      recv_lrModelPredict();
    }

    public void send_lrModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      lrModelPredict_args args = new lrModelPredict_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setModelPath(modelPath);
      args.setOutputPath(outputPath);
      args.setDkmlconf(dkmlconf);
      sendBase("lrModelPredict", args);
    }

    public void recv_lrModelPredict() throws org.apache.thrift.TException
    {
      lrModelPredict_result result = new lrModelPredict_result();
      receiveBase(result, "lrModelPredict");
      return;
    }

    public void rfClassModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClass, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_rfClassModelBuild(masterUrl, inputPath, modelPath, numClass, dkmlconf);
      recv_rfClassModelBuild();
    }

    public void send_rfClassModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClass, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      rfClassModelBuild_args args = new rfClassModelBuild_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setModelPath(modelPath);
      args.setNumClass(numClass);
      args.setDkmlconf(dkmlconf);
      sendBase("rfClassModelBuild", args);
    }

    public void recv_rfClassModelBuild() throws org.apache.thrift.TException
    {
      rfClassModelBuild_result result = new rfClassModelBuild_result();
      receiveBase(result, "rfClassModelBuild");
      return;
    }

    public void rfRegresModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_rfRegresModelBuild(masterUrl, inputPath, modelPath, dkmlconf);
      recv_rfRegresModelBuild();
    }

    public void send_rfRegresModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      rfRegresModelBuild_args args = new rfRegresModelBuild_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setModelPath(modelPath);
      args.setDkmlconf(dkmlconf);
      sendBase("rfRegresModelBuild", args);
    }

    public void recv_rfRegresModelBuild() throws org.apache.thrift.TException
    {
      rfRegresModelBuild_result result = new rfRegresModelBuild_result();
      receiveBase(result, "rfRegresModelBuild");
      return;
    }

    public void rfModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_rfModelPredict(masterUrl, inputPath, modelPath, outputPath, dkmlconf);
      recv_rfModelPredict();
    }

    public void send_rfModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      rfModelPredict_args args = new rfModelPredict_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setModelPath(modelPath);
      args.setOutputPath(outputPath);
      args.setDkmlconf(dkmlconf);
      sendBase("rfModelPredict", args);
    }

    public void recv_rfModelPredict() throws org.apache.thrift.TException
    {
      rfModelPredict_result result = new rfModelPredict_result();
      receiveBase(result, "rfModelPredict");
      return;
    }

    public void svmModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_svmModelBuild(masterUrl, inputPath, modelPath, dkmlconf);
      recv_svmModelBuild();
    }

    public void send_svmModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      svmModelBuild_args args = new svmModelBuild_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setModelPath(modelPath);
      args.setDkmlconf(dkmlconf);
      sendBase("svmModelBuild", args);
    }

    public void recv_svmModelBuild() throws org.apache.thrift.TException
    {
      svmModelBuild_result result = new svmModelBuild_result();
      receiveBase(result, "svmModelBuild");
      return;
    }

    public void svmModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_svmModelPredict(masterUrl, inputPath, modelPath, outputPath, dkmlconf);
      recv_svmModelPredict();
    }

    public void send_svmModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      svmModelPredict_args args = new svmModelPredict_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setModelPath(modelPath);
      args.setOutputPath(outputPath);
      args.setDkmlconf(dkmlconf);
      sendBase("svmModelPredict", args);
    }

    public void recv_svmModelPredict() throws org.apache.thrift.TException
    {
      svmModelPredict_result result = new svmModelPredict_result();
      receiveBase(result, "svmModelPredict");
      return;
    }

    public void nbModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_nbModelBuild(masterUrl, inputPath, modelPath, dkmlconf);
      recv_nbModelBuild();
    }

    public void send_nbModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      nbModelBuild_args args = new nbModelBuild_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setModelPath(modelPath);
      args.setDkmlconf(dkmlconf);
      sendBase("nbModelBuild", args);
    }

    public void recv_nbModelBuild() throws org.apache.thrift.TException
    {
      nbModelBuild_result result = new nbModelBuild_result();
      receiveBase(result, "nbModelBuild");
      return;
    }

    public void nbModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_nbModelPredict(masterUrl, inputPath, modelPath, outputPath, dkmlconf);
      recv_nbModelPredict();
    }

    public void send_nbModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      nbModelPredict_args args = new nbModelPredict_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setModelPath(modelPath);
      args.setOutputPath(outputPath);
      args.setDkmlconf(dkmlconf);
      sendBase("nbModelPredict", args);
    }

    public void recv_nbModelPredict() throws org.apache.thrift.TException
    {
      nbModelPredict_result result = new nbModelPredict_result();
      receiveBase(result, "nbModelPredict");
      return;
    }

    public void kmModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClusters, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_kmModelBuild(masterUrl, inputPath, modelPath, numClusters, dkmlconf);
      recv_kmModelBuild();
    }

    public void send_kmModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClusters, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      kmModelBuild_args args = new kmModelBuild_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setModelPath(modelPath);
      args.setNumClusters(numClusters);
      args.setDkmlconf(dkmlconf);
      sendBase("kmModelBuild", args);
    }

    public void recv_kmModelBuild() throws org.apache.thrift.TException
    {
      kmModelBuild_result result = new kmModelBuild_result();
      receiveBase(result, "kmModelBuild");
      return;
    }

    public void kmModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_kmModelPredict(masterUrl, inputPath, modelPath, outputPath, dkmlconf);
      recv_kmModelPredict();
    }

    public void send_kmModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      kmModelPredict_args args = new kmModelPredict_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setModelPath(modelPath);
      args.setOutputPath(outputPath);
      args.setDkmlconf(dkmlconf);
      sendBase("kmModelPredict", args);
    }

    public void recv_kmModelPredict() throws org.apache.thrift.TException
    {
      kmModelPredict_result result = new kmModelPredict_result();
      receiveBase(result, "kmModelPredict");
      return;
    }

    public void gmModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClusters, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_gmModelBuild(masterUrl, inputPath, modelPath, numClusters, dkmlconf);
      recv_gmModelBuild();
    }

    public void send_gmModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClusters, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      gmModelBuild_args args = new gmModelBuild_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setModelPath(modelPath);
      args.setNumClusters(numClusters);
      args.setDkmlconf(dkmlconf);
      sendBase("gmModelBuild", args);
    }

    public void recv_gmModelBuild() throws org.apache.thrift.TException
    {
      gmModelBuild_result result = new gmModelBuild_result();
      receiveBase(result, "gmModelBuild");
      return;
    }

    public void gmModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_gmModelPredict(masterUrl, inputPath, modelPath, outputPath, dkmlconf);
      recv_gmModelPredict();
    }

    public void send_gmModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      gmModelPredict_args args = new gmModelPredict_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setModelPath(modelPath);
      args.setOutputPath(outputPath);
      args.setDkmlconf(dkmlconf);
      sendBase("gmModelPredict", args);
    }

    public void recv_gmModelPredict() throws org.apache.thrift.TException
    {
      gmModelPredict_result result = new gmModelPredict_result();
      receiveBase(result, "gmModelPredict");
      return;
    }

    public void pcaModel(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String outputPath, int k, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_pcaModel(masterUrl, inputPath, outputPath, k, dkmlconf);
      recv_pcaModel();
    }

    public void send_pcaModel(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String outputPath, int k, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      pcaModel_args args = new pcaModel_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setOutputPath(outputPath);
      args.setK(k);
      args.setDkmlconf(dkmlconf);
      sendBase("pcaModel", args);
    }

    public void recv_pcaModel() throws org.apache.thrift.TException
    {
      pcaModel_result result = new pcaModel_result();
      receiveBase(result, "pcaModel");
      return;
    }

    public void fpGrowthModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String outputPath, double minSupport, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_fpGrowthModelBuild(masterUrl, inputPath, outputPath, minSupport, dkmlconf);
      recv_fpGrowthModelBuild();
    }

    public void send_fpGrowthModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String outputPath, double minSupport, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      fpGrowthModelBuild_args args = new fpGrowthModelBuild_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setOutputPath(outputPath);
      args.setMinSupport(minSupport);
      args.setDkmlconf(dkmlconf);
      sendBase("fpGrowthModelBuild", args);
    }

    public void recv_fpGrowthModelBuild() throws org.apache.thrift.TException
    {
      fpGrowthModelBuild_result result = new fpGrowthModelBuild_result();
      receiveBase(result, "fpGrowthModelBuild");
      return;
    }

    public void alsModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int rank, int numIterations, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_alsModelBuild(masterUrl, inputPath, modelPath, rank, numIterations, dkmlconf);
      recv_alsModelBuild();
    }

    public void send_alsModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int rank, int numIterations, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      alsModelBuild_args args = new alsModelBuild_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setModelPath(modelPath);
      args.setRank(rank);
      args.setNumIterations(numIterations);
      args.setDkmlconf(dkmlconf);
      sendBase("alsModelBuild", args);
    }

    public void recv_alsModelBuild() throws org.apache.thrift.TException
    {
      alsModelBuild_result result = new alsModelBuild_result();
      receiveBase(result, "alsModelBuild");
      return;
    }

    public void rmUsers(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_rmUsers(masterUrl, inputPath, modelPath, outputPath, dkmlconf);
      recv_rmUsers();
    }

    public void send_rmUsers(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      rmUsers_args args = new rmUsers_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setModelPath(modelPath);
      args.setOutputPath(outputPath);
      args.setDkmlconf(dkmlconf);
      sendBase("rmUsers", args);
    }

    public void recv_rmUsers() throws org.apache.thrift.TException
    {
      rmUsers_result result = new rmUsers_result();
      receiveBase(result, "rmUsers");
      return;
    }

    public void rmpProducts(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      send_rmpProducts(masterUrl, inputPath, modelPath, outputPath, dkmlconf);
      recv_rmpProducts();
    }

    public void send_rmpProducts(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf) throws org.apache.thrift.TException
    {
      rmpProducts_args args = new rmpProducts_args();
      args.setMasterUrl(masterUrl);
      args.setInputPath(inputPath);
      args.setModelPath(modelPath);
      args.setOutputPath(outputPath);
      args.setDkmlconf(dkmlconf);
      sendBase("rmpProducts", args);
    }

    public void recv_rmpProducts() throws org.apache.thrift.TException
    {
      rmpProducts_result result = new rmpProducts_result();
      receiveBase(result, "rmpProducts");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void lrModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClass, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lrModelBuild_call method_call = new lrModelBuild_call(masterUrl, inputPath, modelPath, numClass, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lrModelBuild_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String modelPath;
      private int numClass;
      private DKMLConf dkmlconf;
      public lrModelBuild_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClass, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.modelPath = modelPath;
        this.numClass = numClass;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lrModelBuild", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lrModelBuild_args args = new lrModelBuild_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setModelPath(modelPath);
        args.setNumClass(numClass);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void lrModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      lrModelPredict_call method_call = new lrModelPredict_call(masterUrl, inputPath, modelPath, outputPath, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class lrModelPredict_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String modelPath;
      private java.lang.String outputPath;
      private DKMLConf dkmlconf;
      public lrModelPredict_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.modelPath = modelPath;
        this.outputPath = outputPath;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("lrModelPredict", org.apache.thrift.protocol.TMessageType.CALL, 0));
        lrModelPredict_args args = new lrModelPredict_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setModelPath(modelPath);
        args.setOutputPath(outputPath);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void rfClassModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClass, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rfClassModelBuild_call method_call = new rfClassModelBuild_call(masterUrl, inputPath, modelPath, numClass, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rfClassModelBuild_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String modelPath;
      private int numClass;
      private DKMLConf dkmlconf;
      public rfClassModelBuild_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClass, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.modelPath = modelPath;
        this.numClass = numClass;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rfClassModelBuild", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rfClassModelBuild_args args = new rfClassModelBuild_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setModelPath(modelPath);
        args.setNumClass(numClass);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void rfRegresModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rfRegresModelBuild_call method_call = new rfRegresModelBuild_call(masterUrl, inputPath, modelPath, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rfRegresModelBuild_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String modelPath;
      private DKMLConf dkmlconf;
      public rfRegresModelBuild_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.modelPath = modelPath;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rfRegresModelBuild", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rfRegresModelBuild_args args = new rfRegresModelBuild_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setModelPath(modelPath);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void rfModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rfModelPredict_call method_call = new rfModelPredict_call(masterUrl, inputPath, modelPath, outputPath, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rfModelPredict_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String modelPath;
      private java.lang.String outputPath;
      private DKMLConf dkmlconf;
      public rfModelPredict_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.modelPath = modelPath;
        this.outputPath = outputPath;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rfModelPredict", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rfModelPredict_args args = new rfModelPredict_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setModelPath(modelPath);
        args.setOutputPath(outputPath);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void svmModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      svmModelBuild_call method_call = new svmModelBuild_call(masterUrl, inputPath, modelPath, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class svmModelBuild_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String modelPath;
      private DKMLConf dkmlconf;
      public svmModelBuild_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.modelPath = modelPath;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("svmModelBuild", org.apache.thrift.protocol.TMessageType.CALL, 0));
        svmModelBuild_args args = new svmModelBuild_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setModelPath(modelPath);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void svmModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      svmModelPredict_call method_call = new svmModelPredict_call(masterUrl, inputPath, modelPath, outputPath, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class svmModelPredict_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String modelPath;
      private java.lang.String outputPath;
      private DKMLConf dkmlconf;
      public svmModelPredict_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.modelPath = modelPath;
        this.outputPath = outputPath;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("svmModelPredict", org.apache.thrift.protocol.TMessageType.CALL, 0));
        svmModelPredict_args args = new svmModelPredict_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setModelPath(modelPath);
        args.setOutputPath(outputPath);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void nbModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      nbModelBuild_call method_call = new nbModelBuild_call(masterUrl, inputPath, modelPath, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class nbModelBuild_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String modelPath;
      private DKMLConf dkmlconf;
      public nbModelBuild_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.modelPath = modelPath;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("nbModelBuild", org.apache.thrift.protocol.TMessageType.CALL, 0));
        nbModelBuild_args args = new nbModelBuild_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setModelPath(modelPath);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void nbModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      nbModelPredict_call method_call = new nbModelPredict_call(masterUrl, inputPath, modelPath, outputPath, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class nbModelPredict_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String modelPath;
      private java.lang.String outputPath;
      private DKMLConf dkmlconf;
      public nbModelPredict_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.modelPath = modelPath;
        this.outputPath = outputPath;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("nbModelPredict", org.apache.thrift.protocol.TMessageType.CALL, 0));
        nbModelPredict_args args = new nbModelPredict_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setModelPath(modelPath);
        args.setOutputPath(outputPath);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void kmModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClusters, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      kmModelBuild_call method_call = new kmModelBuild_call(masterUrl, inputPath, modelPath, numClusters, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class kmModelBuild_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String modelPath;
      private int numClusters;
      private DKMLConf dkmlconf;
      public kmModelBuild_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClusters, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.modelPath = modelPath;
        this.numClusters = numClusters;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("kmModelBuild", org.apache.thrift.protocol.TMessageType.CALL, 0));
        kmModelBuild_args args = new kmModelBuild_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setModelPath(modelPath);
        args.setNumClusters(numClusters);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void kmModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      kmModelPredict_call method_call = new kmModelPredict_call(masterUrl, inputPath, modelPath, outputPath, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class kmModelPredict_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String modelPath;
      private java.lang.String outputPath;
      private DKMLConf dkmlconf;
      public kmModelPredict_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.modelPath = modelPath;
        this.outputPath = outputPath;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("kmModelPredict", org.apache.thrift.protocol.TMessageType.CALL, 0));
        kmModelPredict_args args = new kmModelPredict_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setModelPath(modelPath);
        args.setOutputPath(outputPath);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void gmModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClusters, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      gmModelBuild_call method_call = new gmModelBuild_call(masterUrl, inputPath, modelPath, numClusters, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class gmModelBuild_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String modelPath;
      private int numClusters;
      private DKMLConf dkmlconf;
      public gmModelBuild_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int numClusters, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.modelPath = modelPath;
        this.numClusters = numClusters;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("gmModelBuild", org.apache.thrift.protocol.TMessageType.CALL, 0));
        gmModelBuild_args args = new gmModelBuild_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setModelPath(modelPath);
        args.setNumClusters(numClusters);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void gmModelPredict(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      gmModelPredict_call method_call = new gmModelPredict_call(masterUrl, inputPath, modelPath, outputPath, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class gmModelPredict_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String modelPath;
      private java.lang.String outputPath;
      private DKMLConf dkmlconf;
      public gmModelPredict_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.modelPath = modelPath;
        this.outputPath = outputPath;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("gmModelPredict", org.apache.thrift.protocol.TMessageType.CALL, 0));
        gmModelPredict_args args = new gmModelPredict_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setModelPath(modelPath);
        args.setOutputPath(outputPath);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void pcaModel(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String outputPath, int k, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pcaModel_call method_call = new pcaModel_call(masterUrl, inputPath, outputPath, k, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pcaModel_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String outputPath;
      private int k;
      private DKMLConf dkmlconf;
      public pcaModel_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String outputPath, int k, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.outputPath = outputPath;
        this.k = k;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pcaModel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pcaModel_args args = new pcaModel_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setOutputPath(outputPath);
        args.setK(k);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void fpGrowthModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String outputPath, double minSupport, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fpGrowthModelBuild_call method_call = new fpGrowthModelBuild_call(masterUrl, inputPath, outputPath, minSupport, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fpGrowthModelBuild_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String outputPath;
      private double minSupport;
      private DKMLConf dkmlconf;
      public fpGrowthModelBuild_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String outputPath, double minSupport, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.outputPath = outputPath;
        this.minSupport = minSupport;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fpGrowthModelBuild", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fpGrowthModelBuild_args args = new fpGrowthModelBuild_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setOutputPath(outputPath);
        args.setMinSupport(minSupport);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void alsModelBuild(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int rank, int numIterations, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      alsModelBuild_call method_call = new alsModelBuild_call(masterUrl, inputPath, modelPath, rank, numIterations, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class alsModelBuild_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String modelPath;
      private int rank;
      private int numIterations;
      private DKMLConf dkmlconf;
      public alsModelBuild_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, int rank, int numIterations, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.modelPath = modelPath;
        this.rank = rank;
        this.numIterations = numIterations;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("alsModelBuild", org.apache.thrift.protocol.TMessageType.CALL, 0));
        alsModelBuild_args args = new alsModelBuild_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setModelPath(modelPath);
        args.setRank(rank);
        args.setNumIterations(numIterations);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void rmUsers(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rmUsers_call method_call = new rmUsers_call(masterUrl, inputPath, modelPath, outputPath, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rmUsers_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String modelPath;
      private java.lang.String outputPath;
      private DKMLConf dkmlconf;
      public rmUsers_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.modelPath = modelPath;
        this.outputPath = outputPath;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rmUsers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rmUsers_args args = new rmUsers_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setModelPath(modelPath);
        args.setOutputPath(outputPath);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void rmpProducts(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rmpProducts_call method_call = new rmpProducts_call(masterUrl, inputPath, modelPath, outputPath, dkmlconf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rmpProducts_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String masterUrl;
      private java.lang.String inputPath;
      private java.lang.String modelPath;
      private java.lang.String outputPath;
      private DKMLConf dkmlconf;
      public rmpProducts_call(java.lang.String masterUrl, java.lang.String inputPath, java.lang.String modelPath, java.lang.String outputPath, DKMLConf dkmlconf, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.masterUrl = masterUrl;
        this.inputPath = inputPath;
        this.modelPath = modelPath;
        this.outputPath = outputPath;
        this.dkmlconf = dkmlconf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rmpProducts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rmpProducts_args args = new rmpProducts_args();
        args.setMasterUrl(masterUrl);
        args.setInputPath(inputPath);
        args.setModelPath(modelPath);
        args.setOutputPath(outputPath);
        args.setDkmlconf(dkmlconf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("lrModelBuild", new lrModelBuild());
      processMap.put("lrModelPredict", new lrModelPredict());
      processMap.put("rfClassModelBuild", new rfClassModelBuild());
      processMap.put("rfRegresModelBuild", new rfRegresModelBuild());
      processMap.put("rfModelPredict", new rfModelPredict());
      processMap.put("svmModelBuild", new svmModelBuild());
      processMap.put("svmModelPredict", new svmModelPredict());
      processMap.put("nbModelBuild", new nbModelBuild());
      processMap.put("nbModelPredict", new nbModelPredict());
      processMap.put("kmModelBuild", new kmModelBuild());
      processMap.put("kmModelPredict", new kmModelPredict());
      processMap.put("gmModelBuild", new gmModelBuild());
      processMap.put("gmModelPredict", new gmModelPredict());
      processMap.put("pcaModel", new pcaModel());
      processMap.put("fpGrowthModelBuild", new fpGrowthModelBuild());
      processMap.put("alsModelBuild", new alsModelBuild());
      processMap.put("rmUsers", new rmUsers());
      processMap.put("rmpProducts", new rmpProducts());
      return processMap;
    }

    public static class lrModelBuild<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lrModelBuild_args> {
      public lrModelBuild() {
        super("lrModelBuild");
      }

      public lrModelBuild_args getEmptyArgsInstance() {
        return new lrModelBuild_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public lrModelBuild_result getResult(I iface, lrModelBuild_args args) throws org.apache.thrift.TException {
        lrModelBuild_result result = new lrModelBuild_result();
        iface.lrModelBuild(args.masterUrl, args.inputPath, args.modelPath, args.numClass, args.dkmlconf);
        return result;
      }
    }

    public static class lrModelPredict<I extends Iface> extends org.apache.thrift.ProcessFunction<I, lrModelPredict_args> {
      public lrModelPredict() {
        super("lrModelPredict");
      }

      public lrModelPredict_args getEmptyArgsInstance() {
        return new lrModelPredict_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public lrModelPredict_result getResult(I iface, lrModelPredict_args args) throws org.apache.thrift.TException {
        lrModelPredict_result result = new lrModelPredict_result();
        iface.lrModelPredict(args.masterUrl, args.inputPath, args.modelPath, args.outputPath, args.dkmlconf);
        return result;
      }
    }

    public static class rfClassModelBuild<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rfClassModelBuild_args> {
      public rfClassModelBuild() {
        super("rfClassModelBuild");
      }

      public rfClassModelBuild_args getEmptyArgsInstance() {
        return new rfClassModelBuild_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public rfClassModelBuild_result getResult(I iface, rfClassModelBuild_args args) throws org.apache.thrift.TException {
        rfClassModelBuild_result result = new rfClassModelBuild_result();
        iface.rfClassModelBuild(args.masterUrl, args.inputPath, args.modelPath, args.numClass, args.dkmlconf);
        return result;
      }
    }

    public static class rfRegresModelBuild<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rfRegresModelBuild_args> {
      public rfRegresModelBuild() {
        super("rfRegresModelBuild");
      }

      public rfRegresModelBuild_args getEmptyArgsInstance() {
        return new rfRegresModelBuild_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public rfRegresModelBuild_result getResult(I iface, rfRegresModelBuild_args args) throws org.apache.thrift.TException {
        rfRegresModelBuild_result result = new rfRegresModelBuild_result();
        iface.rfRegresModelBuild(args.masterUrl, args.inputPath, args.modelPath, args.dkmlconf);
        return result;
      }
    }

    public static class rfModelPredict<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rfModelPredict_args> {
      public rfModelPredict() {
        super("rfModelPredict");
      }

      public rfModelPredict_args getEmptyArgsInstance() {
        return new rfModelPredict_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public rfModelPredict_result getResult(I iface, rfModelPredict_args args) throws org.apache.thrift.TException {
        rfModelPredict_result result = new rfModelPredict_result();
        iface.rfModelPredict(args.masterUrl, args.inputPath, args.modelPath, args.outputPath, args.dkmlconf);
        return result;
      }
    }

    public static class svmModelBuild<I extends Iface> extends org.apache.thrift.ProcessFunction<I, svmModelBuild_args> {
      public svmModelBuild() {
        super("svmModelBuild");
      }

      public svmModelBuild_args getEmptyArgsInstance() {
        return new svmModelBuild_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public svmModelBuild_result getResult(I iface, svmModelBuild_args args) throws org.apache.thrift.TException {
        svmModelBuild_result result = new svmModelBuild_result();
        iface.svmModelBuild(args.masterUrl, args.inputPath, args.modelPath, args.dkmlconf);
        return result;
      }
    }

    public static class svmModelPredict<I extends Iface> extends org.apache.thrift.ProcessFunction<I, svmModelPredict_args> {
      public svmModelPredict() {
        super("svmModelPredict");
      }

      public svmModelPredict_args getEmptyArgsInstance() {
        return new svmModelPredict_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public svmModelPredict_result getResult(I iface, svmModelPredict_args args) throws org.apache.thrift.TException {
        svmModelPredict_result result = new svmModelPredict_result();
        iface.svmModelPredict(args.masterUrl, args.inputPath, args.modelPath, args.outputPath, args.dkmlconf);
        return result;
      }
    }

    public static class nbModelBuild<I extends Iface> extends org.apache.thrift.ProcessFunction<I, nbModelBuild_args> {
      public nbModelBuild() {
        super("nbModelBuild");
      }

      public nbModelBuild_args getEmptyArgsInstance() {
        return new nbModelBuild_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public nbModelBuild_result getResult(I iface, nbModelBuild_args args) throws org.apache.thrift.TException {
        nbModelBuild_result result = new nbModelBuild_result();
        iface.nbModelBuild(args.masterUrl, args.inputPath, args.modelPath, args.dkmlconf);
        return result;
      }
    }

    public static class nbModelPredict<I extends Iface> extends org.apache.thrift.ProcessFunction<I, nbModelPredict_args> {
      public nbModelPredict() {
        super("nbModelPredict");
      }

      public nbModelPredict_args getEmptyArgsInstance() {
        return new nbModelPredict_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public nbModelPredict_result getResult(I iface, nbModelPredict_args args) throws org.apache.thrift.TException {
        nbModelPredict_result result = new nbModelPredict_result();
        iface.nbModelPredict(args.masterUrl, args.inputPath, args.modelPath, args.outputPath, args.dkmlconf);
        return result;
      }
    }

    public static class kmModelBuild<I extends Iface> extends org.apache.thrift.ProcessFunction<I, kmModelBuild_args> {
      public kmModelBuild() {
        super("kmModelBuild");
      }

      public kmModelBuild_args getEmptyArgsInstance() {
        return new kmModelBuild_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public kmModelBuild_result getResult(I iface, kmModelBuild_args args) throws org.apache.thrift.TException {
        kmModelBuild_result result = new kmModelBuild_result();
        iface.kmModelBuild(args.masterUrl, args.inputPath, args.modelPath, args.numClusters, args.dkmlconf);
        return result;
      }
    }

    public static class kmModelPredict<I extends Iface> extends org.apache.thrift.ProcessFunction<I, kmModelPredict_args> {
      public kmModelPredict() {
        super("kmModelPredict");
      }

      public kmModelPredict_args getEmptyArgsInstance() {
        return new kmModelPredict_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public kmModelPredict_result getResult(I iface, kmModelPredict_args args) throws org.apache.thrift.TException {
        kmModelPredict_result result = new kmModelPredict_result();
        iface.kmModelPredict(args.masterUrl, args.inputPath, args.modelPath, args.outputPath, args.dkmlconf);
        return result;
      }
    }

    public static class gmModelBuild<I extends Iface> extends org.apache.thrift.ProcessFunction<I, gmModelBuild_args> {
      public gmModelBuild() {
        super("gmModelBuild");
      }

      public gmModelBuild_args getEmptyArgsInstance() {
        return new gmModelBuild_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public gmModelBuild_result getResult(I iface, gmModelBuild_args args) throws org.apache.thrift.TException {
        gmModelBuild_result result = new gmModelBuild_result();
        iface.gmModelBuild(args.masterUrl, args.inputPath, args.modelPath, args.numClusters, args.dkmlconf);
        return result;
      }
    }

    public static class gmModelPredict<I extends Iface> extends org.apache.thrift.ProcessFunction<I, gmModelPredict_args> {
      public gmModelPredict() {
        super("gmModelPredict");
      }

      public gmModelPredict_args getEmptyArgsInstance() {
        return new gmModelPredict_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public gmModelPredict_result getResult(I iface, gmModelPredict_args args) throws org.apache.thrift.TException {
        gmModelPredict_result result = new gmModelPredict_result();
        iface.gmModelPredict(args.masterUrl, args.inputPath, args.modelPath, args.outputPath, args.dkmlconf);
        return result;
      }
    }

    public static class pcaModel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pcaModel_args> {
      public pcaModel() {
        super("pcaModel");
      }

      public pcaModel_args getEmptyArgsInstance() {
        return new pcaModel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public pcaModel_result getResult(I iface, pcaModel_args args) throws org.apache.thrift.TException {
        pcaModel_result result = new pcaModel_result();
        iface.pcaModel(args.masterUrl, args.inputPath, args.outputPath, args.k, args.dkmlconf);
        return result;
      }
    }

    public static class fpGrowthModelBuild<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fpGrowthModelBuild_args> {
      public fpGrowthModelBuild() {
        super("fpGrowthModelBuild");
      }

      public fpGrowthModelBuild_args getEmptyArgsInstance() {
        return new fpGrowthModelBuild_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public fpGrowthModelBuild_result getResult(I iface, fpGrowthModelBuild_args args) throws org.apache.thrift.TException {
        fpGrowthModelBuild_result result = new fpGrowthModelBuild_result();
        iface.fpGrowthModelBuild(args.masterUrl, args.inputPath, args.outputPath, args.minSupport, args.dkmlconf);
        return result;
      }
    }

    public static class alsModelBuild<I extends Iface> extends org.apache.thrift.ProcessFunction<I, alsModelBuild_args> {
      public alsModelBuild() {
        super("alsModelBuild");
      }

      public alsModelBuild_args getEmptyArgsInstance() {
        return new alsModelBuild_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public alsModelBuild_result getResult(I iface, alsModelBuild_args args) throws org.apache.thrift.TException {
        alsModelBuild_result result = new alsModelBuild_result();
        iface.alsModelBuild(args.masterUrl, args.inputPath, args.modelPath, args.rank, args.numIterations, args.dkmlconf);
        return result;
      }
    }

    public static class rmUsers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rmUsers_args> {
      public rmUsers() {
        super("rmUsers");
      }

      public rmUsers_args getEmptyArgsInstance() {
        return new rmUsers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public rmUsers_result getResult(I iface, rmUsers_args args) throws org.apache.thrift.TException {
        rmUsers_result result = new rmUsers_result();
        iface.rmUsers(args.masterUrl, args.inputPath, args.modelPath, args.outputPath, args.dkmlconf);
        return result;
      }
    }

    public static class rmpProducts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rmpProducts_args> {
      public rmpProducts() {
        super("rmpProducts");
      }

      public rmpProducts_args getEmptyArgsInstance() {
        return new rmpProducts_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public rmpProducts_result getResult(I iface, rmpProducts_args args) throws org.apache.thrift.TException {
        rmpProducts_result result = new rmpProducts_result();
        iface.rmpProducts(args.masterUrl, args.inputPath, args.modelPath, args.outputPath, args.dkmlconf);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("lrModelBuild", new lrModelBuild());
      processMap.put("lrModelPredict", new lrModelPredict());
      processMap.put("rfClassModelBuild", new rfClassModelBuild());
      processMap.put("rfRegresModelBuild", new rfRegresModelBuild());
      processMap.put("rfModelPredict", new rfModelPredict());
      processMap.put("svmModelBuild", new svmModelBuild());
      processMap.put("svmModelPredict", new svmModelPredict());
      processMap.put("nbModelBuild", new nbModelBuild());
      processMap.put("nbModelPredict", new nbModelPredict());
      processMap.put("kmModelBuild", new kmModelBuild());
      processMap.put("kmModelPredict", new kmModelPredict());
      processMap.put("gmModelBuild", new gmModelBuild());
      processMap.put("gmModelPredict", new gmModelPredict());
      processMap.put("pcaModel", new pcaModel());
      processMap.put("fpGrowthModelBuild", new fpGrowthModelBuild());
      processMap.put("alsModelBuild", new alsModelBuild());
      processMap.put("rmUsers", new rmUsers());
      processMap.put("rmpProducts", new rmpProducts());
      return processMap;
    }

    public static class lrModelBuild<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lrModelBuild_args, Void> {
      public lrModelBuild() {
        super("lrModelBuild");
      }

      public lrModelBuild_args getEmptyArgsInstance() {
        return new lrModelBuild_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            lrModelBuild_result result = new lrModelBuild_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            lrModelBuild_result result = new lrModelBuild_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lrModelBuild_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.lrModelBuild(args.masterUrl, args.inputPath, args.modelPath, args.numClass, args.dkmlconf,resultHandler);
      }
    }

    public static class lrModelPredict<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, lrModelPredict_args, Void> {
      public lrModelPredict() {
        super("lrModelPredict");
      }

      public lrModelPredict_args getEmptyArgsInstance() {
        return new lrModelPredict_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            lrModelPredict_result result = new lrModelPredict_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            lrModelPredict_result result = new lrModelPredict_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, lrModelPredict_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.lrModelPredict(args.masterUrl, args.inputPath, args.modelPath, args.outputPath, args.dkmlconf,resultHandler);
      }
    }

    public static class rfClassModelBuild<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rfClassModelBuild_args, Void> {
      public rfClassModelBuild() {
        super("rfClassModelBuild");
      }

      public rfClassModelBuild_args getEmptyArgsInstance() {
        return new rfClassModelBuild_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            rfClassModelBuild_result result = new rfClassModelBuild_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            rfClassModelBuild_result result = new rfClassModelBuild_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rfClassModelBuild_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.rfClassModelBuild(args.masterUrl, args.inputPath, args.modelPath, args.numClass, args.dkmlconf,resultHandler);
      }
    }

    public static class rfRegresModelBuild<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rfRegresModelBuild_args, Void> {
      public rfRegresModelBuild() {
        super("rfRegresModelBuild");
      }

      public rfRegresModelBuild_args getEmptyArgsInstance() {
        return new rfRegresModelBuild_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            rfRegresModelBuild_result result = new rfRegresModelBuild_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            rfRegresModelBuild_result result = new rfRegresModelBuild_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rfRegresModelBuild_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.rfRegresModelBuild(args.masterUrl, args.inputPath, args.modelPath, args.dkmlconf,resultHandler);
      }
    }

    public static class rfModelPredict<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rfModelPredict_args, Void> {
      public rfModelPredict() {
        super("rfModelPredict");
      }

      public rfModelPredict_args getEmptyArgsInstance() {
        return new rfModelPredict_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            rfModelPredict_result result = new rfModelPredict_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            rfModelPredict_result result = new rfModelPredict_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rfModelPredict_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.rfModelPredict(args.masterUrl, args.inputPath, args.modelPath, args.outputPath, args.dkmlconf,resultHandler);
      }
    }

    public static class svmModelBuild<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, svmModelBuild_args, Void> {
      public svmModelBuild() {
        super("svmModelBuild");
      }

      public svmModelBuild_args getEmptyArgsInstance() {
        return new svmModelBuild_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            svmModelBuild_result result = new svmModelBuild_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            svmModelBuild_result result = new svmModelBuild_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, svmModelBuild_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.svmModelBuild(args.masterUrl, args.inputPath, args.modelPath, args.dkmlconf,resultHandler);
      }
    }

    public static class svmModelPredict<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, svmModelPredict_args, Void> {
      public svmModelPredict() {
        super("svmModelPredict");
      }

      public svmModelPredict_args getEmptyArgsInstance() {
        return new svmModelPredict_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            svmModelPredict_result result = new svmModelPredict_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            svmModelPredict_result result = new svmModelPredict_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, svmModelPredict_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.svmModelPredict(args.masterUrl, args.inputPath, args.modelPath, args.outputPath, args.dkmlconf,resultHandler);
      }
    }

    public static class nbModelBuild<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, nbModelBuild_args, Void> {
      public nbModelBuild() {
        super("nbModelBuild");
      }

      public nbModelBuild_args getEmptyArgsInstance() {
        return new nbModelBuild_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            nbModelBuild_result result = new nbModelBuild_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            nbModelBuild_result result = new nbModelBuild_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, nbModelBuild_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.nbModelBuild(args.masterUrl, args.inputPath, args.modelPath, args.dkmlconf,resultHandler);
      }
    }

    public static class nbModelPredict<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, nbModelPredict_args, Void> {
      public nbModelPredict() {
        super("nbModelPredict");
      }

      public nbModelPredict_args getEmptyArgsInstance() {
        return new nbModelPredict_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            nbModelPredict_result result = new nbModelPredict_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            nbModelPredict_result result = new nbModelPredict_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, nbModelPredict_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.nbModelPredict(args.masterUrl, args.inputPath, args.modelPath, args.outputPath, args.dkmlconf,resultHandler);
      }
    }

    public static class kmModelBuild<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, kmModelBuild_args, Void> {
      public kmModelBuild() {
        super("kmModelBuild");
      }

      public kmModelBuild_args getEmptyArgsInstance() {
        return new kmModelBuild_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            kmModelBuild_result result = new kmModelBuild_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            kmModelBuild_result result = new kmModelBuild_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, kmModelBuild_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.kmModelBuild(args.masterUrl, args.inputPath, args.modelPath, args.numClusters, args.dkmlconf,resultHandler);
      }
    }

    public static class kmModelPredict<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, kmModelPredict_args, Void> {
      public kmModelPredict() {
        super("kmModelPredict");
      }

      public kmModelPredict_args getEmptyArgsInstance() {
        return new kmModelPredict_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            kmModelPredict_result result = new kmModelPredict_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            kmModelPredict_result result = new kmModelPredict_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, kmModelPredict_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.kmModelPredict(args.masterUrl, args.inputPath, args.modelPath, args.outputPath, args.dkmlconf,resultHandler);
      }
    }

    public static class gmModelBuild<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, gmModelBuild_args, Void> {
      public gmModelBuild() {
        super("gmModelBuild");
      }

      public gmModelBuild_args getEmptyArgsInstance() {
        return new gmModelBuild_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            gmModelBuild_result result = new gmModelBuild_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            gmModelBuild_result result = new gmModelBuild_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, gmModelBuild_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.gmModelBuild(args.masterUrl, args.inputPath, args.modelPath, args.numClusters, args.dkmlconf,resultHandler);
      }
    }

    public static class gmModelPredict<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, gmModelPredict_args, Void> {
      public gmModelPredict() {
        super("gmModelPredict");
      }

      public gmModelPredict_args getEmptyArgsInstance() {
        return new gmModelPredict_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            gmModelPredict_result result = new gmModelPredict_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            gmModelPredict_result result = new gmModelPredict_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, gmModelPredict_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.gmModelPredict(args.masterUrl, args.inputPath, args.modelPath, args.outputPath, args.dkmlconf,resultHandler);
      }
    }

    public static class pcaModel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pcaModel_args, Void> {
      public pcaModel() {
        super("pcaModel");
      }

      public pcaModel_args getEmptyArgsInstance() {
        return new pcaModel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            pcaModel_result result = new pcaModel_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            pcaModel_result result = new pcaModel_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pcaModel_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.pcaModel(args.masterUrl, args.inputPath, args.outputPath, args.k, args.dkmlconf,resultHandler);
      }
    }

    public static class fpGrowthModelBuild<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fpGrowthModelBuild_args, Void> {
      public fpGrowthModelBuild() {
        super("fpGrowthModelBuild");
      }

      public fpGrowthModelBuild_args getEmptyArgsInstance() {
        return new fpGrowthModelBuild_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            fpGrowthModelBuild_result result = new fpGrowthModelBuild_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fpGrowthModelBuild_result result = new fpGrowthModelBuild_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fpGrowthModelBuild_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.fpGrowthModelBuild(args.masterUrl, args.inputPath, args.outputPath, args.minSupport, args.dkmlconf,resultHandler);
      }
    }

    public static class alsModelBuild<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, alsModelBuild_args, Void> {
      public alsModelBuild() {
        super("alsModelBuild");
      }

      public alsModelBuild_args getEmptyArgsInstance() {
        return new alsModelBuild_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            alsModelBuild_result result = new alsModelBuild_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            alsModelBuild_result result = new alsModelBuild_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, alsModelBuild_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.alsModelBuild(args.masterUrl, args.inputPath, args.modelPath, args.rank, args.numIterations, args.dkmlconf,resultHandler);
      }
    }

    public static class rmUsers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rmUsers_args, Void> {
      public rmUsers() {
        super("rmUsers");
      }

      public rmUsers_args getEmptyArgsInstance() {
        return new rmUsers_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            rmUsers_result result = new rmUsers_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            rmUsers_result result = new rmUsers_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rmUsers_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.rmUsers(args.masterUrl, args.inputPath, args.modelPath, args.outputPath, args.dkmlconf,resultHandler);
      }
    }

    public static class rmpProducts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rmpProducts_args, Void> {
      public rmpProducts() {
        super("rmpProducts");
      }

      public rmpProducts_args getEmptyArgsInstance() {
        return new rmpProducts_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            rmpProducts_result result = new rmpProducts_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            rmpProducts_result result = new rmpProducts_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rmpProducts_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.rmpProducts(args.masterUrl, args.inputPath, args.modelPath, args.outputPath, args.dkmlconf,resultHandler);
      }
    }

  }

  public static class lrModelBuild_args implements org.apache.thrift.TBase<lrModelBuild_args, lrModelBuild_args._Fields>, java.io.Serializable, Cloneable, Comparable<lrModelBuild_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lrModelBuild_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODEL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("modelPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField NUM_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("numClass", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lrModelBuild_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lrModelBuild_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String modelPath; // required
    public int numClass; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      MODEL_PATH((short)3, "modelPath"),
      NUM_CLASS((short)4, "numClass"),
      DKMLCONF((short)5, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // MODEL_PATH
            return MODEL_PATH;
          case 4: // NUM_CLASS
            return NUM_CLASS;
          case 5: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMCLASS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODEL_PATH, new org.apache.thrift.meta_data.FieldMetaData("modelPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM_CLASS, new org.apache.thrift.meta_data.FieldMetaData("numClass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lrModelBuild_args.class, metaDataMap);
    }

    public lrModelBuild_args() {
    }

    public lrModelBuild_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String modelPath,
      int numClass,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.modelPath = modelPath;
      this.numClass = numClass;
      setNumClassIsSet(true);
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lrModelBuild_args(lrModelBuild_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetModelPath()) {
        this.modelPath = other.modelPath;
      }
      this.numClass = other.numClass;
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public lrModelBuild_args deepCopy() {
      return new lrModelBuild_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.modelPath = null;
      setNumClassIsSet(false);
      this.numClass = 0;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public lrModelBuild_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public lrModelBuild_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getModelPath() {
      return this.modelPath;
    }

    public lrModelBuild_args setModelPath(java.lang.String modelPath) {
      this.modelPath = modelPath;
      return this;
    }

    public void unsetModelPath() {
      this.modelPath = null;
    }

    /** Returns true if field modelPath is set (has been assigned a value) and false otherwise */
    public boolean isSetModelPath() {
      return this.modelPath != null;
    }

    public void setModelPathIsSet(boolean value) {
      if (!value) {
        this.modelPath = null;
      }
    }

    public int getNumClass() {
      return this.numClass;
    }

    public lrModelBuild_args setNumClass(int numClass) {
      this.numClass = numClass;
      setNumClassIsSet(true);
      return this;
    }

    public void unsetNumClass() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMCLASS_ISSET_ID);
    }

    /** Returns true if field numClass is set (has been assigned a value) and false otherwise */
    public boolean isSetNumClass() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMCLASS_ISSET_ID);
    }

    public void setNumClassIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMCLASS_ISSET_ID, value);
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public lrModelBuild_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case MODEL_PATH:
        if (value == null) {
          unsetModelPath();
        } else {
          setModelPath((java.lang.String)value);
        }
        break;

      case NUM_CLASS:
        if (value == null) {
          unsetNumClass();
        } else {
          setNumClass((java.lang.Integer)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case MODEL_PATH:
        return getModelPath();

      case NUM_CLASS:
        return getNumClass();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case MODEL_PATH:
        return isSetModelPath();
      case NUM_CLASS:
        return isSetNumClass();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lrModelBuild_args)
        return this.equals((lrModelBuild_args)that);
      return false;
    }

    public boolean equals(lrModelBuild_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_modelPath = true && this.isSetModelPath();
      boolean that_present_modelPath = true && that.isSetModelPath();
      if (this_present_modelPath || that_present_modelPath) {
        if (!(this_present_modelPath && that_present_modelPath))
          return false;
        if (!this.modelPath.equals(that.modelPath))
          return false;
      }

      boolean this_present_numClass = true;
      boolean that_present_numClass = true;
      if (this_present_numClass || that_present_numClass) {
        if (!(this_present_numClass && that_present_numClass))
          return false;
        if (this.numClass != that.numClass)
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetModelPath()) ? 131071 : 524287);
      if (isSetModelPath())
        hashCode = hashCode * 8191 + modelPath.hashCode();

      hashCode = hashCode * 8191 + numClass;

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(lrModelBuild_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModelPath()).compareTo(other.isSetModelPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelPath, other.modelPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumClass()).compareTo(other.isSetNumClass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumClass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numClass, other.numClass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lrModelBuild_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelPath:");
      if (this.modelPath == null) {
        sb.append("null");
      } else {
        sb.append(this.modelPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numClass:");
      sb.append(this.numClass);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lrModelBuild_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lrModelBuild_argsStandardScheme getScheme() {
        return new lrModelBuild_argsStandardScheme();
      }
    }

    private static class lrModelBuild_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<lrModelBuild_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lrModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODEL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelPath = iprot.readString();
                struct.setModelPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NUM_CLASS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numClass = iprot.readI32();
                struct.setNumClassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lrModelBuild_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.modelPath != null) {
          oprot.writeFieldBegin(MODEL_PATH_FIELD_DESC);
          oprot.writeString(struct.modelPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_CLASS_FIELD_DESC);
        oprot.writeI32(struct.numClass);
        oprot.writeFieldEnd();
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lrModelBuild_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lrModelBuild_argsTupleScheme getScheme() {
        return new lrModelBuild_argsTupleScheme();
      }
    }

    private static class lrModelBuild_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<lrModelBuild_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lrModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetModelPath()) {
          optionals.set(2);
        }
        if (struct.isSetNumClass()) {
          optionals.set(3);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetModelPath()) {
          oprot.writeString(struct.modelPath);
        }
        if (struct.isSetNumClass()) {
          oprot.writeI32(struct.numClass);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lrModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modelPath = iprot.readString();
          struct.setModelPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.numClass = iprot.readI32();
          struct.setNumClassIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lrModelBuild_result implements org.apache.thrift.TBase<lrModelBuild_result, lrModelBuild_result._Fields>, java.io.Serializable, Cloneable, Comparable<lrModelBuild_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lrModelBuild_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lrModelBuild_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lrModelBuild_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lrModelBuild_result.class, metaDataMap);
    }

    public lrModelBuild_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lrModelBuild_result(lrModelBuild_result other) {
    }

    public lrModelBuild_result deepCopy() {
      return new lrModelBuild_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lrModelBuild_result)
        return this.equals((lrModelBuild_result)that);
      return false;
    }

    public boolean equals(lrModelBuild_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(lrModelBuild_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lrModelBuild_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lrModelBuild_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lrModelBuild_resultStandardScheme getScheme() {
        return new lrModelBuild_resultStandardScheme();
      }
    }

    private static class lrModelBuild_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<lrModelBuild_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lrModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lrModelBuild_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lrModelBuild_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lrModelBuild_resultTupleScheme getScheme() {
        return new lrModelBuild_resultTupleScheme();
      }
    }

    private static class lrModelBuild_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<lrModelBuild_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lrModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lrModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lrModelPredict_args implements org.apache.thrift.TBase<lrModelPredict_args, lrModelPredict_args._Fields>, java.io.Serializable, Cloneable, Comparable<lrModelPredict_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lrModelPredict_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODEL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("modelPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outputPath", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lrModelPredict_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lrModelPredict_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String modelPath; // required
    public java.lang.String outputPath; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      MODEL_PATH((short)3, "modelPath"),
      OUTPUT_PATH((short)4, "outputPath"),
      DKMLCONF((short)5, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // MODEL_PATH
            return MODEL_PATH;
          case 4: // OUTPUT_PATH
            return OUTPUT_PATH;
          case 5: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODEL_PATH, new org.apache.thrift.meta_data.FieldMetaData("modelPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lrModelPredict_args.class, metaDataMap);
    }

    public lrModelPredict_args() {
    }

    public lrModelPredict_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String modelPath,
      java.lang.String outputPath,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.modelPath = modelPath;
      this.outputPath = outputPath;
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lrModelPredict_args(lrModelPredict_args other) {
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetModelPath()) {
        this.modelPath = other.modelPath;
      }
      if (other.isSetOutputPath()) {
        this.outputPath = other.outputPath;
      }
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public lrModelPredict_args deepCopy() {
      return new lrModelPredict_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.modelPath = null;
      this.outputPath = null;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public lrModelPredict_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public lrModelPredict_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getModelPath() {
      return this.modelPath;
    }

    public lrModelPredict_args setModelPath(java.lang.String modelPath) {
      this.modelPath = modelPath;
      return this;
    }

    public void unsetModelPath() {
      this.modelPath = null;
    }

    /** Returns true if field modelPath is set (has been assigned a value) and false otherwise */
    public boolean isSetModelPath() {
      return this.modelPath != null;
    }

    public void setModelPathIsSet(boolean value) {
      if (!value) {
        this.modelPath = null;
      }
    }

    public java.lang.String getOutputPath() {
      return this.outputPath;
    }

    public lrModelPredict_args setOutputPath(java.lang.String outputPath) {
      this.outputPath = outputPath;
      return this;
    }

    public void unsetOutputPath() {
      this.outputPath = null;
    }

    /** Returns true if field outputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputPath() {
      return this.outputPath != null;
    }

    public void setOutputPathIsSet(boolean value) {
      if (!value) {
        this.outputPath = null;
      }
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public lrModelPredict_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case MODEL_PATH:
        if (value == null) {
          unsetModelPath();
        } else {
          setModelPath((java.lang.String)value);
        }
        break;

      case OUTPUT_PATH:
        if (value == null) {
          unsetOutputPath();
        } else {
          setOutputPath((java.lang.String)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case MODEL_PATH:
        return getModelPath();

      case OUTPUT_PATH:
        return getOutputPath();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case MODEL_PATH:
        return isSetModelPath();
      case OUTPUT_PATH:
        return isSetOutputPath();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lrModelPredict_args)
        return this.equals((lrModelPredict_args)that);
      return false;
    }

    public boolean equals(lrModelPredict_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_modelPath = true && this.isSetModelPath();
      boolean that_present_modelPath = true && that.isSetModelPath();
      if (this_present_modelPath || that_present_modelPath) {
        if (!(this_present_modelPath && that_present_modelPath))
          return false;
        if (!this.modelPath.equals(that.modelPath))
          return false;
      }

      boolean this_present_outputPath = true && this.isSetOutputPath();
      boolean that_present_outputPath = true && that.isSetOutputPath();
      if (this_present_outputPath || that_present_outputPath) {
        if (!(this_present_outputPath && that_present_outputPath))
          return false;
        if (!this.outputPath.equals(that.outputPath))
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetModelPath()) ? 131071 : 524287);
      if (isSetModelPath())
        hashCode = hashCode * 8191 + modelPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutputPath()) ? 131071 : 524287);
      if (isSetOutputPath())
        hashCode = hashCode * 8191 + outputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(lrModelPredict_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModelPath()).compareTo(other.isSetModelPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelPath, other.modelPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutputPath()).compareTo(other.isSetOutputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputPath, other.outputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lrModelPredict_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelPath:");
      if (this.modelPath == null) {
        sb.append("null");
      } else {
        sb.append(this.modelPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputPath:");
      if (this.outputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lrModelPredict_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lrModelPredict_argsStandardScheme getScheme() {
        return new lrModelPredict_argsStandardScheme();
      }
    }

    private static class lrModelPredict_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<lrModelPredict_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lrModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODEL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelPath = iprot.readString();
                struct.setModelPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputPath = iprot.readString();
                struct.setOutputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lrModelPredict_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.modelPath != null) {
          oprot.writeFieldBegin(MODEL_PATH_FIELD_DESC);
          oprot.writeString(struct.modelPath);
          oprot.writeFieldEnd();
        }
        if (struct.outputPath != null) {
          oprot.writeFieldBegin(OUTPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outputPath);
          oprot.writeFieldEnd();
        }
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lrModelPredict_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lrModelPredict_argsTupleScheme getScheme() {
        return new lrModelPredict_argsTupleScheme();
      }
    }

    private static class lrModelPredict_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<lrModelPredict_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lrModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetModelPath()) {
          optionals.set(2);
        }
        if (struct.isSetOutputPath()) {
          optionals.set(3);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetModelPath()) {
          oprot.writeString(struct.modelPath);
        }
        if (struct.isSetOutputPath()) {
          oprot.writeString(struct.outputPath);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lrModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modelPath = iprot.readString();
          struct.setModelPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.outputPath = iprot.readString();
          struct.setOutputPathIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class lrModelPredict_result implements org.apache.thrift.TBase<lrModelPredict_result, lrModelPredict_result._Fields>, java.io.Serializable, Cloneable, Comparable<lrModelPredict_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("lrModelPredict_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new lrModelPredict_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new lrModelPredict_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(lrModelPredict_result.class, metaDataMap);
    }

    public lrModelPredict_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public lrModelPredict_result(lrModelPredict_result other) {
    }

    public lrModelPredict_result deepCopy() {
      return new lrModelPredict_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof lrModelPredict_result)
        return this.equals((lrModelPredict_result)that);
      return false;
    }

    public boolean equals(lrModelPredict_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(lrModelPredict_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("lrModelPredict_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class lrModelPredict_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lrModelPredict_resultStandardScheme getScheme() {
        return new lrModelPredict_resultStandardScheme();
      }
    }

    private static class lrModelPredict_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<lrModelPredict_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, lrModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, lrModelPredict_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class lrModelPredict_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public lrModelPredict_resultTupleScheme getScheme() {
        return new lrModelPredict_resultTupleScheme();
      }
    }

    private static class lrModelPredict_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<lrModelPredict_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, lrModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, lrModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rfClassModelBuild_args implements org.apache.thrift.TBase<rfClassModelBuild_args, rfClassModelBuild_args._Fields>, java.io.Serializable, Cloneable, Comparable<rfClassModelBuild_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rfClassModelBuild_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODEL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("modelPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField NUM_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("numClass", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rfClassModelBuild_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rfClassModelBuild_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String modelPath; // required
    public int numClass; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      MODEL_PATH((short)3, "modelPath"),
      NUM_CLASS((short)4, "numClass"),
      DKMLCONF((short)5, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // MODEL_PATH
            return MODEL_PATH;
          case 4: // NUM_CLASS
            return NUM_CLASS;
          case 5: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMCLASS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODEL_PATH, new org.apache.thrift.meta_data.FieldMetaData("modelPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM_CLASS, new org.apache.thrift.meta_data.FieldMetaData("numClass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rfClassModelBuild_args.class, metaDataMap);
    }

    public rfClassModelBuild_args() {
    }

    public rfClassModelBuild_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String modelPath,
      int numClass,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.modelPath = modelPath;
      this.numClass = numClass;
      setNumClassIsSet(true);
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rfClassModelBuild_args(rfClassModelBuild_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetModelPath()) {
        this.modelPath = other.modelPath;
      }
      this.numClass = other.numClass;
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public rfClassModelBuild_args deepCopy() {
      return new rfClassModelBuild_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.modelPath = null;
      setNumClassIsSet(false);
      this.numClass = 0;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public rfClassModelBuild_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public rfClassModelBuild_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getModelPath() {
      return this.modelPath;
    }

    public rfClassModelBuild_args setModelPath(java.lang.String modelPath) {
      this.modelPath = modelPath;
      return this;
    }

    public void unsetModelPath() {
      this.modelPath = null;
    }

    /** Returns true if field modelPath is set (has been assigned a value) and false otherwise */
    public boolean isSetModelPath() {
      return this.modelPath != null;
    }

    public void setModelPathIsSet(boolean value) {
      if (!value) {
        this.modelPath = null;
      }
    }

    public int getNumClass() {
      return this.numClass;
    }

    public rfClassModelBuild_args setNumClass(int numClass) {
      this.numClass = numClass;
      setNumClassIsSet(true);
      return this;
    }

    public void unsetNumClass() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMCLASS_ISSET_ID);
    }

    /** Returns true if field numClass is set (has been assigned a value) and false otherwise */
    public boolean isSetNumClass() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMCLASS_ISSET_ID);
    }

    public void setNumClassIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMCLASS_ISSET_ID, value);
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public rfClassModelBuild_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case MODEL_PATH:
        if (value == null) {
          unsetModelPath();
        } else {
          setModelPath((java.lang.String)value);
        }
        break;

      case NUM_CLASS:
        if (value == null) {
          unsetNumClass();
        } else {
          setNumClass((java.lang.Integer)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case MODEL_PATH:
        return getModelPath();

      case NUM_CLASS:
        return getNumClass();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case MODEL_PATH:
        return isSetModelPath();
      case NUM_CLASS:
        return isSetNumClass();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rfClassModelBuild_args)
        return this.equals((rfClassModelBuild_args)that);
      return false;
    }

    public boolean equals(rfClassModelBuild_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_modelPath = true && this.isSetModelPath();
      boolean that_present_modelPath = true && that.isSetModelPath();
      if (this_present_modelPath || that_present_modelPath) {
        if (!(this_present_modelPath && that_present_modelPath))
          return false;
        if (!this.modelPath.equals(that.modelPath))
          return false;
      }

      boolean this_present_numClass = true;
      boolean that_present_numClass = true;
      if (this_present_numClass || that_present_numClass) {
        if (!(this_present_numClass && that_present_numClass))
          return false;
        if (this.numClass != that.numClass)
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetModelPath()) ? 131071 : 524287);
      if (isSetModelPath())
        hashCode = hashCode * 8191 + modelPath.hashCode();

      hashCode = hashCode * 8191 + numClass;

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(rfClassModelBuild_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModelPath()).compareTo(other.isSetModelPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelPath, other.modelPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumClass()).compareTo(other.isSetNumClass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumClass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numClass, other.numClass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rfClassModelBuild_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelPath:");
      if (this.modelPath == null) {
        sb.append("null");
      } else {
        sb.append(this.modelPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numClass:");
      sb.append(this.numClass);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rfClassModelBuild_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rfClassModelBuild_argsStandardScheme getScheme() {
        return new rfClassModelBuild_argsStandardScheme();
      }
    }

    private static class rfClassModelBuild_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<rfClassModelBuild_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rfClassModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODEL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelPath = iprot.readString();
                struct.setModelPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NUM_CLASS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numClass = iprot.readI32();
                struct.setNumClassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rfClassModelBuild_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.modelPath != null) {
          oprot.writeFieldBegin(MODEL_PATH_FIELD_DESC);
          oprot.writeString(struct.modelPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_CLASS_FIELD_DESC);
        oprot.writeI32(struct.numClass);
        oprot.writeFieldEnd();
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rfClassModelBuild_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rfClassModelBuild_argsTupleScheme getScheme() {
        return new rfClassModelBuild_argsTupleScheme();
      }
    }

    private static class rfClassModelBuild_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<rfClassModelBuild_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rfClassModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetModelPath()) {
          optionals.set(2);
        }
        if (struct.isSetNumClass()) {
          optionals.set(3);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetModelPath()) {
          oprot.writeString(struct.modelPath);
        }
        if (struct.isSetNumClass()) {
          oprot.writeI32(struct.numClass);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rfClassModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modelPath = iprot.readString();
          struct.setModelPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.numClass = iprot.readI32();
          struct.setNumClassIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rfClassModelBuild_result implements org.apache.thrift.TBase<rfClassModelBuild_result, rfClassModelBuild_result._Fields>, java.io.Serializable, Cloneable, Comparable<rfClassModelBuild_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rfClassModelBuild_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rfClassModelBuild_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rfClassModelBuild_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rfClassModelBuild_result.class, metaDataMap);
    }

    public rfClassModelBuild_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rfClassModelBuild_result(rfClassModelBuild_result other) {
    }

    public rfClassModelBuild_result deepCopy() {
      return new rfClassModelBuild_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rfClassModelBuild_result)
        return this.equals((rfClassModelBuild_result)that);
      return false;
    }

    public boolean equals(rfClassModelBuild_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(rfClassModelBuild_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rfClassModelBuild_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rfClassModelBuild_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rfClassModelBuild_resultStandardScheme getScheme() {
        return new rfClassModelBuild_resultStandardScheme();
      }
    }

    private static class rfClassModelBuild_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<rfClassModelBuild_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rfClassModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rfClassModelBuild_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rfClassModelBuild_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rfClassModelBuild_resultTupleScheme getScheme() {
        return new rfClassModelBuild_resultTupleScheme();
      }
    }

    private static class rfClassModelBuild_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<rfClassModelBuild_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rfClassModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rfClassModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rfRegresModelBuild_args implements org.apache.thrift.TBase<rfRegresModelBuild_args, rfRegresModelBuild_args._Fields>, java.io.Serializable, Cloneable, Comparable<rfRegresModelBuild_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rfRegresModelBuild_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODEL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("modelPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rfRegresModelBuild_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rfRegresModelBuild_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String modelPath; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      MODEL_PATH((short)3, "modelPath"),
      DKMLCONF((short)5, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // MODEL_PATH
            return MODEL_PATH;
          case 5: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODEL_PATH, new org.apache.thrift.meta_data.FieldMetaData("modelPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rfRegresModelBuild_args.class, metaDataMap);
    }

    public rfRegresModelBuild_args() {
    }

    public rfRegresModelBuild_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String modelPath,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.modelPath = modelPath;
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rfRegresModelBuild_args(rfRegresModelBuild_args other) {
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetModelPath()) {
        this.modelPath = other.modelPath;
      }
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public rfRegresModelBuild_args deepCopy() {
      return new rfRegresModelBuild_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.modelPath = null;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public rfRegresModelBuild_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public rfRegresModelBuild_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getModelPath() {
      return this.modelPath;
    }

    public rfRegresModelBuild_args setModelPath(java.lang.String modelPath) {
      this.modelPath = modelPath;
      return this;
    }

    public void unsetModelPath() {
      this.modelPath = null;
    }

    /** Returns true if field modelPath is set (has been assigned a value) and false otherwise */
    public boolean isSetModelPath() {
      return this.modelPath != null;
    }

    public void setModelPathIsSet(boolean value) {
      if (!value) {
        this.modelPath = null;
      }
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public rfRegresModelBuild_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case MODEL_PATH:
        if (value == null) {
          unsetModelPath();
        } else {
          setModelPath((java.lang.String)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case MODEL_PATH:
        return getModelPath();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case MODEL_PATH:
        return isSetModelPath();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rfRegresModelBuild_args)
        return this.equals((rfRegresModelBuild_args)that);
      return false;
    }

    public boolean equals(rfRegresModelBuild_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_modelPath = true && this.isSetModelPath();
      boolean that_present_modelPath = true && that.isSetModelPath();
      if (this_present_modelPath || that_present_modelPath) {
        if (!(this_present_modelPath && that_present_modelPath))
          return false;
        if (!this.modelPath.equals(that.modelPath))
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetModelPath()) ? 131071 : 524287);
      if (isSetModelPath())
        hashCode = hashCode * 8191 + modelPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(rfRegresModelBuild_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModelPath()).compareTo(other.isSetModelPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelPath, other.modelPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rfRegresModelBuild_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelPath:");
      if (this.modelPath == null) {
        sb.append("null");
      } else {
        sb.append(this.modelPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rfRegresModelBuild_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rfRegresModelBuild_argsStandardScheme getScheme() {
        return new rfRegresModelBuild_argsStandardScheme();
      }
    }

    private static class rfRegresModelBuild_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<rfRegresModelBuild_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rfRegresModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODEL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelPath = iprot.readString();
                struct.setModelPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rfRegresModelBuild_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.modelPath != null) {
          oprot.writeFieldBegin(MODEL_PATH_FIELD_DESC);
          oprot.writeString(struct.modelPath);
          oprot.writeFieldEnd();
        }
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rfRegresModelBuild_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rfRegresModelBuild_argsTupleScheme getScheme() {
        return new rfRegresModelBuild_argsTupleScheme();
      }
    }

    private static class rfRegresModelBuild_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<rfRegresModelBuild_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rfRegresModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetModelPath()) {
          optionals.set(2);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetModelPath()) {
          oprot.writeString(struct.modelPath);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rfRegresModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modelPath = iprot.readString();
          struct.setModelPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rfRegresModelBuild_result implements org.apache.thrift.TBase<rfRegresModelBuild_result, rfRegresModelBuild_result._Fields>, java.io.Serializable, Cloneable, Comparable<rfRegresModelBuild_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rfRegresModelBuild_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rfRegresModelBuild_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rfRegresModelBuild_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rfRegresModelBuild_result.class, metaDataMap);
    }

    public rfRegresModelBuild_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rfRegresModelBuild_result(rfRegresModelBuild_result other) {
    }

    public rfRegresModelBuild_result deepCopy() {
      return new rfRegresModelBuild_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rfRegresModelBuild_result)
        return this.equals((rfRegresModelBuild_result)that);
      return false;
    }

    public boolean equals(rfRegresModelBuild_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(rfRegresModelBuild_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rfRegresModelBuild_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rfRegresModelBuild_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rfRegresModelBuild_resultStandardScheme getScheme() {
        return new rfRegresModelBuild_resultStandardScheme();
      }
    }

    private static class rfRegresModelBuild_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<rfRegresModelBuild_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rfRegresModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rfRegresModelBuild_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rfRegresModelBuild_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rfRegresModelBuild_resultTupleScheme getScheme() {
        return new rfRegresModelBuild_resultTupleScheme();
      }
    }

    private static class rfRegresModelBuild_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<rfRegresModelBuild_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rfRegresModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rfRegresModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rfModelPredict_args implements org.apache.thrift.TBase<rfModelPredict_args, rfModelPredict_args._Fields>, java.io.Serializable, Cloneable, Comparable<rfModelPredict_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rfModelPredict_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODEL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("modelPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outputPath", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rfModelPredict_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rfModelPredict_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String modelPath; // required
    public java.lang.String outputPath; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      MODEL_PATH((short)3, "modelPath"),
      OUTPUT_PATH((short)4, "outputPath"),
      DKMLCONF((short)5, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // MODEL_PATH
            return MODEL_PATH;
          case 4: // OUTPUT_PATH
            return OUTPUT_PATH;
          case 5: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODEL_PATH, new org.apache.thrift.meta_data.FieldMetaData("modelPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rfModelPredict_args.class, metaDataMap);
    }

    public rfModelPredict_args() {
    }

    public rfModelPredict_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String modelPath,
      java.lang.String outputPath,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.modelPath = modelPath;
      this.outputPath = outputPath;
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rfModelPredict_args(rfModelPredict_args other) {
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetModelPath()) {
        this.modelPath = other.modelPath;
      }
      if (other.isSetOutputPath()) {
        this.outputPath = other.outputPath;
      }
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public rfModelPredict_args deepCopy() {
      return new rfModelPredict_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.modelPath = null;
      this.outputPath = null;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public rfModelPredict_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public rfModelPredict_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getModelPath() {
      return this.modelPath;
    }

    public rfModelPredict_args setModelPath(java.lang.String modelPath) {
      this.modelPath = modelPath;
      return this;
    }

    public void unsetModelPath() {
      this.modelPath = null;
    }

    /** Returns true if field modelPath is set (has been assigned a value) and false otherwise */
    public boolean isSetModelPath() {
      return this.modelPath != null;
    }

    public void setModelPathIsSet(boolean value) {
      if (!value) {
        this.modelPath = null;
      }
    }

    public java.lang.String getOutputPath() {
      return this.outputPath;
    }

    public rfModelPredict_args setOutputPath(java.lang.String outputPath) {
      this.outputPath = outputPath;
      return this;
    }

    public void unsetOutputPath() {
      this.outputPath = null;
    }

    /** Returns true if field outputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputPath() {
      return this.outputPath != null;
    }

    public void setOutputPathIsSet(boolean value) {
      if (!value) {
        this.outputPath = null;
      }
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public rfModelPredict_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case MODEL_PATH:
        if (value == null) {
          unsetModelPath();
        } else {
          setModelPath((java.lang.String)value);
        }
        break;

      case OUTPUT_PATH:
        if (value == null) {
          unsetOutputPath();
        } else {
          setOutputPath((java.lang.String)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case MODEL_PATH:
        return getModelPath();

      case OUTPUT_PATH:
        return getOutputPath();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case MODEL_PATH:
        return isSetModelPath();
      case OUTPUT_PATH:
        return isSetOutputPath();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rfModelPredict_args)
        return this.equals((rfModelPredict_args)that);
      return false;
    }

    public boolean equals(rfModelPredict_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_modelPath = true && this.isSetModelPath();
      boolean that_present_modelPath = true && that.isSetModelPath();
      if (this_present_modelPath || that_present_modelPath) {
        if (!(this_present_modelPath && that_present_modelPath))
          return false;
        if (!this.modelPath.equals(that.modelPath))
          return false;
      }

      boolean this_present_outputPath = true && this.isSetOutputPath();
      boolean that_present_outputPath = true && that.isSetOutputPath();
      if (this_present_outputPath || that_present_outputPath) {
        if (!(this_present_outputPath && that_present_outputPath))
          return false;
        if (!this.outputPath.equals(that.outputPath))
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetModelPath()) ? 131071 : 524287);
      if (isSetModelPath())
        hashCode = hashCode * 8191 + modelPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutputPath()) ? 131071 : 524287);
      if (isSetOutputPath())
        hashCode = hashCode * 8191 + outputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(rfModelPredict_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModelPath()).compareTo(other.isSetModelPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelPath, other.modelPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutputPath()).compareTo(other.isSetOutputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputPath, other.outputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rfModelPredict_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelPath:");
      if (this.modelPath == null) {
        sb.append("null");
      } else {
        sb.append(this.modelPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputPath:");
      if (this.outputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rfModelPredict_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rfModelPredict_argsStandardScheme getScheme() {
        return new rfModelPredict_argsStandardScheme();
      }
    }

    private static class rfModelPredict_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<rfModelPredict_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rfModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODEL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelPath = iprot.readString();
                struct.setModelPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputPath = iprot.readString();
                struct.setOutputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rfModelPredict_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.modelPath != null) {
          oprot.writeFieldBegin(MODEL_PATH_FIELD_DESC);
          oprot.writeString(struct.modelPath);
          oprot.writeFieldEnd();
        }
        if (struct.outputPath != null) {
          oprot.writeFieldBegin(OUTPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outputPath);
          oprot.writeFieldEnd();
        }
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rfModelPredict_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rfModelPredict_argsTupleScheme getScheme() {
        return new rfModelPredict_argsTupleScheme();
      }
    }

    private static class rfModelPredict_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<rfModelPredict_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rfModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetModelPath()) {
          optionals.set(2);
        }
        if (struct.isSetOutputPath()) {
          optionals.set(3);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetModelPath()) {
          oprot.writeString(struct.modelPath);
        }
        if (struct.isSetOutputPath()) {
          oprot.writeString(struct.outputPath);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rfModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modelPath = iprot.readString();
          struct.setModelPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.outputPath = iprot.readString();
          struct.setOutputPathIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rfModelPredict_result implements org.apache.thrift.TBase<rfModelPredict_result, rfModelPredict_result._Fields>, java.io.Serializable, Cloneable, Comparable<rfModelPredict_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rfModelPredict_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rfModelPredict_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rfModelPredict_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rfModelPredict_result.class, metaDataMap);
    }

    public rfModelPredict_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rfModelPredict_result(rfModelPredict_result other) {
    }

    public rfModelPredict_result deepCopy() {
      return new rfModelPredict_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rfModelPredict_result)
        return this.equals((rfModelPredict_result)that);
      return false;
    }

    public boolean equals(rfModelPredict_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(rfModelPredict_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rfModelPredict_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rfModelPredict_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rfModelPredict_resultStandardScheme getScheme() {
        return new rfModelPredict_resultStandardScheme();
      }
    }

    private static class rfModelPredict_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<rfModelPredict_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rfModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rfModelPredict_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rfModelPredict_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rfModelPredict_resultTupleScheme getScheme() {
        return new rfModelPredict_resultTupleScheme();
      }
    }

    private static class rfModelPredict_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<rfModelPredict_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rfModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rfModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class svmModelBuild_args implements org.apache.thrift.TBase<svmModelBuild_args, svmModelBuild_args._Fields>, java.io.Serializable, Cloneable, Comparable<svmModelBuild_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("svmModelBuild_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODEL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("modelPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new svmModelBuild_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new svmModelBuild_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String modelPath; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      MODEL_PATH((short)3, "modelPath"),
      DKMLCONF((short)5, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // MODEL_PATH
            return MODEL_PATH;
          case 5: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODEL_PATH, new org.apache.thrift.meta_data.FieldMetaData("modelPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(svmModelBuild_args.class, metaDataMap);
    }

    public svmModelBuild_args() {
    }

    public svmModelBuild_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String modelPath,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.modelPath = modelPath;
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public svmModelBuild_args(svmModelBuild_args other) {
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetModelPath()) {
        this.modelPath = other.modelPath;
      }
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public svmModelBuild_args deepCopy() {
      return new svmModelBuild_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.modelPath = null;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public svmModelBuild_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public svmModelBuild_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getModelPath() {
      return this.modelPath;
    }

    public svmModelBuild_args setModelPath(java.lang.String modelPath) {
      this.modelPath = modelPath;
      return this;
    }

    public void unsetModelPath() {
      this.modelPath = null;
    }

    /** Returns true if field modelPath is set (has been assigned a value) and false otherwise */
    public boolean isSetModelPath() {
      return this.modelPath != null;
    }

    public void setModelPathIsSet(boolean value) {
      if (!value) {
        this.modelPath = null;
      }
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public svmModelBuild_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case MODEL_PATH:
        if (value == null) {
          unsetModelPath();
        } else {
          setModelPath((java.lang.String)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case MODEL_PATH:
        return getModelPath();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case MODEL_PATH:
        return isSetModelPath();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof svmModelBuild_args)
        return this.equals((svmModelBuild_args)that);
      return false;
    }

    public boolean equals(svmModelBuild_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_modelPath = true && this.isSetModelPath();
      boolean that_present_modelPath = true && that.isSetModelPath();
      if (this_present_modelPath || that_present_modelPath) {
        if (!(this_present_modelPath && that_present_modelPath))
          return false;
        if (!this.modelPath.equals(that.modelPath))
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetModelPath()) ? 131071 : 524287);
      if (isSetModelPath())
        hashCode = hashCode * 8191 + modelPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(svmModelBuild_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModelPath()).compareTo(other.isSetModelPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelPath, other.modelPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("svmModelBuild_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelPath:");
      if (this.modelPath == null) {
        sb.append("null");
      } else {
        sb.append(this.modelPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class svmModelBuild_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public svmModelBuild_argsStandardScheme getScheme() {
        return new svmModelBuild_argsStandardScheme();
      }
    }

    private static class svmModelBuild_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<svmModelBuild_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, svmModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODEL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelPath = iprot.readString();
                struct.setModelPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, svmModelBuild_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.modelPath != null) {
          oprot.writeFieldBegin(MODEL_PATH_FIELD_DESC);
          oprot.writeString(struct.modelPath);
          oprot.writeFieldEnd();
        }
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class svmModelBuild_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public svmModelBuild_argsTupleScheme getScheme() {
        return new svmModelBuild_argsTupleScheme();
      }
    }

    private static class svmModelBuild_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<svmModelBuild_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, svmModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetModelPath()) {
          optionals.set(2);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetModelPath()) {
          oprot.writeString(struct.modelPath);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, svmModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modelPath = iprot.readString();
          struct.setModelPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class svmModelBuild_result implements org.apache.thrift.TBase<svmModelBuild_result, svmModelBuild_result._Fields>, java.io.Serializable, Cloneable, Comparable<svmModelBuild_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("svmModelBuild_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new svmModelBuild_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new svmModelBuild_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(svmModelBuild_result.class, metaDataMap);
    }

    public svmModelBuild_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public svmModelBuild_result(svmModelBuild_result other) {
    }

    public svmModelBuild_result deepCopy() {
      return new svmModelBuild_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof svmModelBuild_result)
        return this.equals((svmModelBuild_result)that);
      return false;
    }

    public boolean equals(svmModelBuild_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(svmModelBuild_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("svmModelBuild_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class svmModelBuild_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public svmModelBuild_resultStandardScheme getScheme() {
        return new svmModelBuild_resultStandardScheme();
      }
    }

    private static class svmModelBuild_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<svmModelBuild_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, svmModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, svmModelBuild_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class svmModelBuild_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public svmModelBuild_resultTupleScheme getScheme() {
        return new svmModelBuild_resultTupleScheme();
      }
    }

    private static class svmModelBuild_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<svmModelBuild_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, svmModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, svmModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class svmModelPredict_args implements org.apache.thrift.TBase<svmModelPredict_args, svmModelPredict_args._Fields>, java.io.Serializable, Cloneable, Comparable<svmModelPredict_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("svmModelPredict_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODEL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("modelPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outputPath", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new svmModelPredict_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new svmModelPredict_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String modelPath; // required
    public java.lang.String outputPath; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      MODEL_PATH((short)3, "modelPath"),
      OUTPUT_PATH((short)4, "outputPath"),
      DKMLCONF((short)5, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // MODEL_PATH
            return MODEL_PATH;
          case 4: // OUTPUT_PATH
            return OUTPUT_PATH;
          case 5: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODEL_PATH, new org.apache.thrift.meta_data.FieldMetaData("modelPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(svmModelPredict_args.class, metaDataMap);
    }

    public svmModelPredict_args() {
    }

    public svmModelPredict_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String modelPath,
      java.lang.String outputPath,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.modelPath = modelPath;
      this.outputPath = outputPath;
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public svmModelPredict_args(svmModelPredict_args other) {
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetModelPath()) {
        this.modelPath = other.modelPath;
      }
      if (other.isSetOutputPath()) {
        this.outputPath = other.outputPath;
      }
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public svmModelPredict_args deepCopy() {
      return new svmModelPredict_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.modelPath = null;
      this.outputPath = null;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public svmModelPredict_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public svmModelPredict_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getModelPath() {
      return this.modelPath;
    }

    public svmModelPredict_args setModelPath(java.lang.String modelPath) {
      this.modelPath = modelPath;
      return this;
    }

    public void unsetModelPath() {
      this.modelPath = null;
    }

    /** Returns true if field modelPath is set (has been assigned a value) and false otherwise */
    public boolean isSetModelPath() {
      return this.modelPath != null;
    }

    public void setModelPathIsSet(boolean value) {
      if (!value) {
        this.modelPath = null;
      }
    }

    public java.lang.String getOutputPath() {
      return this.outputPath;
    }

    public svmModelPredict_args setOutputPath(java.lang.String outputPath) {
      this.outputPath = outputPath;
      return this;
    }

    public void unsetOutputPath() {
      this.outputPath = null;
    }

    /** Returns true if field outputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputPath() {
      return this.outputPath != null;
    }

    public void setOutputPathIsSet(boolean value) {
      if (!value) {
        this.outputPath = null;
      }
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public svmModelPredict_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case MODEL_PATH:
        if (value == null) {
          unsetModelPath();
        } else {
          setModelPath((java.lang.String)value);
        }
        break;

      case OUTPUT_PATH:
        if (value == null) {
          unsetOutputPath();
        } else {
          setOutputPath((java.lang.String)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case MODEL_PATH:
        return getModelPath();

      case OUTPUT_PATH:
        return getOutputPath();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case MODEL_PATH:
        return isSetModelPath();
      case OUTPUT_PATH:
        return isSetOutputPath();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof svmModelPredict_args)
        return this.equals((svmModelPredict_args)that);
      return false;
    }

    public boolean equals(svmModelPredict_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_modelPath = true && this.isSetModelPath();
      boolean that_present_modelPath = true && that.isSetModelPath();
      if (this_present_modelPath || that_present_modelPath) {
        if (!(this_present_modelPath && that_present_modelPath))
          return false;
        if (!this.modelPath.equals(that.modelPath))
          return false;
      }

      boolean this_present_outputPath = true && this.isSetOutputPath();
      boolean that_present_outputPath = true && that.isSetOutputPath();
      if (this_present_outputPath || that_present_outputPath) {
        if (!(this_present_outputPath && that_present_outputPath))
          return false;
        if (!this.outputPath.equals(that.outputPath))
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetModelPath()) ? 131071 : 524287);
      if (isSetModelPath())
        hashCode = hashCode * 8191 + modelPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutputPath()) ? 131071 : 524287);
      if (isSetOutputPath())
        hashCode = hashCode * 8191 + outputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(svmModelPredict_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModelPath()).compareTo(other.isSetModelPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelPath, other.modelPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutputPath()).compareTo(other.isSetOutputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputPath, other.outputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("svmModelPredict_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelPath:");
      if (this.modelPath == null) {
        sb.append("null");
      } else {
        sb.append(this.modelPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputPath:");
      if (this.outputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class svmModelPredict_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public svmModelPredict_argsStandardScheme getScheme() {
        return new svmModelPredict_argsStandardScheme();
      }
    }

    private static class svmModelPredict_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<svmModelPredict_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, svmModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODEL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelPath = iprot.readString();
                struct.setModelPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputPath = iprot.readString();
                struct.setOutputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, svmModelPredict_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.modelPath != null) {
          oprot.writeFieldBegin(MODEL_PATH_FIELD_DESC);
          oprot.writeString(struct.modelPath);
          oprot.writeFieldEnd();
        }
        if (struct.outputPath != null) {
          oprot.writeFieldBegin(OUTPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outputPath);
          oprot.writeFieldEnd();
        }
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class svmModelPredict_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public svmModelPredict_argsTupleScheme getScheme() {
        return new svmModelPredict_argsTupleScheme();
      }
    }

    private static class svmModelPredict_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<svmModelPredict_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, svmModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetModelPath()) {
          optionals.set(2);
        }
        if (struct.isSetOutputPath()) {
          optionals.set(3);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetModelPath()) {
          oprot.writeString(struct.modelPath);
        }
        if (struct.isSetOutputPath()) {
          oprot.writeString(struct.outputPath);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, svmModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modelPath = iprot.readString();
          struct.setModelPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.outputPath = iprot.readString();
          struct.setOutputPathIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class svmModelPredict_result implements org.apache.thrift.TBase<svmModelPredict_result, svmModelPredict_result._Fields>, java.io.Serializable, Cloneable, Comparable<svmModelPredict_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("svmModelPredict_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new svmModelPredict_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new svmModelPredict_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(svmModelPredict_result.class, metaDataMap);
    }

    public svmModelPredict_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public svmModelPredict_result(svmModelPredict_result other) {
    }

    public svmModelPredict_result deepCopy() {
      return new svmModelPredict_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof svmModelPredict_result)
        return this.equals((svmModelPredict_result)that);
      return false;
    }

    public boolean equals(svmModelPredict_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(svmModelPredict_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("svmModelPredict_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class svmModelPredict_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public svmModelPredict_resultStandardScheme getScheme() {
        return new svmModelPredict_resultStandardScheme();
      }
    }

    private static class svmModelPredict_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<svmModelPredict_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, svmModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, svmModelPredict_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class svmModelPredict_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public svmModelPredict_resultTupleScheme getScheme() {
        return new svmModelPredict_resultTupleScheme();
      }
    }

    private static class svmModelPredict_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<svmModelPredict_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, svmModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, svmModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class nbModelBuild_args implements org.apache.thrift.TBase<nbModelBuild_args, nbModelBuild_args._Fields>, java.io.Serializable, Cloneable, Comparable<nbModelBuild_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("nbModelBuild_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODEL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("modelPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new nbModelBuild_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new nbModelBuild_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String modelPath; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      MODEL_PATH((short)3, "modelPath"),
      DKMLCONF((short)5, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // MODEL_PATH
            return MODEL_PATH;
          case 5: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODEL_PATH, new org.apache.thrift.meta_data.FieldMetaData("modelPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(nbModelBuild_args.class, metaDataMap);
    }

    public nbModelBuild_args() {
    }

    public nbModelBuild_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String modelPath,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.modelPath = modelPath;
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public nbModelBuild_args(nbModelBuild_args other) {
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetModelPath()) {
        this.modelPath = other.modelPath;
      }
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public nbModelBuild_args deepCopy() {
      return new nbModelBuild_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.modelPath = null;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public nbModelBuild_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public nbModelBuild_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getModelPath() {
      return this.modelPath;
    }

    public nbModelBuild_args setModelPath(java.lang.String modelPath) {
      this.modelPath = modelPath;
      return this;
    }

    public void unsetModelPath() {
      this.modelPath = null;
    }

    /** Returns true if field modelPath is set (has been assigned a value) and false otherwise */
    public boolean isSetModelPath() {
      return this.modelPath != null;
    }

    public void setModelPathIsSet(boolean value) {
      if (!value) {
        this.modelPath = null;
      }
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public nbModelBuild_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case MODEL_PATH:
        if (value == null) {
          unsetModelPath();
        } else {
          setModelPath((java.lang.String)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case MODEL_PATH:
        return getModelPath();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case MODEL_PATH:
        return isSetModelPath();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof nbModelBuild_args)
        return this.equals((nbModelBuild_args)that);
      return false;
    }

    public boolean equals(nbModelBuild_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_modelPath = true && this.isSetModelPath();
      boolean that_present_modelPath = true && that.isSetModelPath();
      if (this_present_modelPath || that_present_modelPath) {
        if (!(this_present_modelPath && that_present_modelPath))
          return false;
        if (!this.modelPath.equals(that.modelPath))
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetModelPath()) ? 131071 : 524287);
      if (isSetModelPath())
        hashCode = hashCode * 8191 + modelPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(nbModelBuild_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModelPath()).compareTo(other.isSetModelPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelPath, other.modelPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("nbModelBuild_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelPath:");
      if (this.modelPath == null) {
        sb.append("null");
      } else {
        sb.append(this.modelPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class nbModelBuild_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public nbModelBuild_argsStandardScheme getScheme() {
        return new nbModelBuild_argsStandardScheme();
      }
    }

    private static class nbModelBuild_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<nbModelBuild_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, nbModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODEL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelPath = iprot.readString();
                struct.setModelPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, nbModelBuild_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.modelPath != null) {
          oprot.writeFieldBegin(MODEL_PATH_FIELD_DESC);
          oprot.writeString(struct.modelPath);
          oprot.writeFieldEnd();
        }
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class nbModelBuild_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public nbModelBuild_argsTupleScheme getScheme() {
        return new nbModelBuild_argsTupleScheme();
      }
    }

    private static class nbModelBuild_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<nbModelBuild_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, nbModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetModelPath()) {
          optionals.set(2);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetModelPath()) {
          oprot.writeString(struct.modelPath);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, nbModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modelPath = iprot.readString();
          struct.setModelPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class nbModelBuild_result implements org.apache.thrift.TBase<nbModelBuild_result, nbModelBuild_result._Fields>, java.io.Serializable, Cloneable, Comparable<nbModelBuild_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("nbModelBuild_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new nbModelBuild_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new nbModelBuild_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(nbModelBuild_result.class, metaDataMap);
    }

    public nbModelBuild_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public nbModelBuild_result(nbModelBuild_result other) {
    }

    public nbModelBuild_result deepCopy() {
      return new nbModelBuild_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof nbModelBuild_result)
        return this.equals((nbModelBuild_result)that);
      return false;
    }

    public boolean equals(nbModelBuild_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(nbModelBuild_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("nbModelBuild_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class nbModelBuild_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public nbModelBuild_resultStandardScheme getScheme() {
        return new nbModelBuild_resultStandardScheme();
      }
    }

    private static class nbModelBuild_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<nbModelBuild_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, nbModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, nbModelBuild_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class nbModelBuild_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public nbModelBuild_resultTupleScheme getScheme() {
        return new nbModelBuild_resultTupleScheme();
      }
    }

    private static class nbModelBuild_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<nbModelBuild_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, nbModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, nbModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class nbModelPredict_args implements org.apache.thrift.TBase<nbModelPredict_args, nbModelPredict_args._Fields>, java.io.Serializable, Cloneable, Comparable<nbModelPredict_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("nbModelPredict_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODEL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("modelPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outputPath", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new nbModelPredict_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new nbModelPredict_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String modelPath; // required
    public java.lang.String outputPath; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      MODEL_PATH((short)3, "modelPath"),
      OUTPUT_PATH((short)4, "outputPath"),
      DKMLCONF((short)5, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // MODEL_PATH
            return MODEL_PATH;
          case 4: // OUTPUT_PATH
            return OUTPUT_PATH;
          case 5: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODEL_PATH, new org.apache.thrift.meta_data.FieldMetaData("modelPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(nbModelPredict_args.class, metaDataMap);
    }

    public nbModelPredict_args() {
    }

    public nbModelPredict_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String modelPath,
      java.lang.String outputPath,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.modelPath = modelPath;
      this.outputPath = outputPath;
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public nbModelPredict_args(nbModelPredict_args other) {
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetModelPath()) {
        this.modelPath = other.modelPath;
      }
      if (other.isSetOutputPath()) {
        this.outputPath = other.outputPath;
      }
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public nbModelPredict_args deepCopy() {
      return new nbModelPredict_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.modelPath = null;
      this.outputPath = null;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public nbModelPredict_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public nbModelPredict_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getModelPath() {
      return this.modelPath;
    }

    public nbModelPredict_args setModelPath(java.lang.String modelPath) {
      this.modelPath = modelPath;
      return this;
    }

    public void unsetModelPath() {
      this.modelPath = null;
    }

    /** Returns true if field modelPath is set (has been assigned a value) and false otherwise */
    public boolean isSetModelPath() {
      return this.modelPath != null;
    }

    public void setModelPathIsSet(boolean value) {
      if (!value) {
        this.modelPath = null;
      }
    }

    public java.lang.String getOutputPath() {
      return this.outputPath;
    }

    public nbModelPredict_args setOutputPath(java.lang.String outputPath) {
      this.outputPath = outputPath;
      return this;
    }

    public void unsetOutputPath() {
      this.outputPath = null;
    }

    /** Returns true if field outputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputPath() {
      return this.outputPath != null;
    }

    public void setOutputPathIsSet(boolean value) {
      if (!value) {
        this.outputPath = null;
      }
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public nbModelPredict_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case MODEL_PATH:
        if (value == null) {
          unsetModelPath();
        } else {
          setModelPath((java.lang.String)value);
        }
        break;

      case OUTPUT_PATH:
        if (value == null) {
          unsetOutputPath();
        } else {
          setOutputPath((java.lang.String)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case MODEL_PATH:
        return getModelPath();

      case OUTPUT_PATH:
        return getOutputPath();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case MODEL_PATH:
        return isSetModelPath();
      case OUTPUT_PATH:
        return isSetOutputPath();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof nbModelPredict_args)
        return this.equals((nbModelPredict_args)that);
      return false;
    }

    public boolean equals(nbModelPredict_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_modelPath = true && this.isSetModelPath();
      boolean that_present_modelPath = true && that.isSetModelPath();
      if (this_present_modelPath || that_present_modelPath) {
        if (!(this_present_modelPath && that_present_modelPath))
          return false;
        if (!this.modelPath.equals(that.modelPath))
          return false;
      }

      boolean this_present_outputPath = true && this.isSetOutputPath();
      boolean that_present_outputPath = true && that.isSetOutputPath();
      if (this_present_outputPath || that_present_outputPath) {
        if (!(this_present_outputPath && that_present_outputPath))
          return false;
        if (!this.outputPath.equals(that.outputPath))
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetModelPath()) ? 131071 : 524287);
      if (isSetModelPath())
        hashCode = hashCode * 8191 + modelPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutputPath()) ? 131071 : 524287);
      if (isSetOutputPath())
        hashCode = hashCode * 8191 + outputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(nbModelPredict_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModelPath()).compareTo(other.isSetModelPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelPath, other.modelPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutputPath()).compareTo(other.isSetOutputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputPath, other.outputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("nbModelPredict_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelPath:");
      if (this.modelPath == null) {
        sb.append("null");
      } else {
        sb.append(this.modelPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputPath:");
      if (this.outputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class nbModelPredict_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public nbModelPredict_argsStandardScheme getScheme() {
        return new nbModelPredict_argsStandardScheme();
      }
    }

    private static class nbModelPredict_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<nbModelPredict_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, nbModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODEL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelPath = iprot.readString();
                struct.setModelPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputPath = iprot.readString();
                struct.setOutputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, nbModelPredict_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.modelPath != null) {
          oprot.writeFieldBegin(MODEL_PATH_FIELD_DESC);
          oprot.writeString(struct.modelPath);
          oprot.writeFieldEnd();
        }
        if (struct.outputPath != null) {
          oprot.writeFieldBegin(OUTPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outputPath);
          oprot.writeFieldEnd();
        }
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class nbModelPredict_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public nbModelPredict_argsTupleScheme getScheme() {
        return new nbModelPredict_argsTupleScheme();
      }
    }

    private static class nbModelPredict_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<nbModelPredict_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, nbModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetModelPath()) {
          optionals.set(2);
        }
        if (struct.isSetOutputPath()) {
          optionals.set(3);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetModelPath()) {
          oprot.writeString(struct.modelPath);
        }
        if (struct.isSetOutputPath()) {
          oprot.writeString(struct.outputPath);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, nbModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modelPath = iprot.readString();
          struct.setModelPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.outputPath = iprot.readString();
          struct.setOutputPathIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class nbModelPredict_result implements org.apache.thrift.TBase<nbModelPredict_result, nbModelPredict_result._Fields>, java.io.Serializable, Cloneable, Comparable<nbModelPredict_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("nbModelPredict_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new nbModelPredict_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new nbModelPredict_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(nbModelPredict_result.class, metaDataMap);
    }

    public nbModelPredict_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public nbModelPredict_result(nbModelPredict_result other) {
    }

    public nbModelPredict_result deepCopy() {
      return new nbModelPredict_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof nbModelPredict_result)
        return this.equals((nbModelPredict_result)that);
      return false;
    }

    public boolean equals(nbModelPredict_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(nbModelPredict_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("nbModelPredict_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class nbModelPredict_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public nbModelPredict_resultStandardScheme getScheme() {
        return new nbModelPredict_resultStandardScheme();
      }
    }

    private static class nbModelPredict_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<nbModelPredict_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, nbModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, nbModelPredict_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class nbModelPredict_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public nbModelPredict_resultTupleScheme getScheme() {
        return new nbModelPredict_resultTupleScheme();
      }
    }

    private static class nbModelPredict_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<nbModelPredict_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, nbModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, nbModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class kmModelBuild_args implements org.apache.thrift.TBase<kmModelBuild_args, kmModelBuild_args._Fields>, java.io.Serializable, Cloneable, Comparable<kmModelBuild_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("kmModelBuild_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODEL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("modelPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField NUM_CLUSTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numClusters", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new kmModelBuild_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new kmModelBuild_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String modelPath; // required
    public int numClusters; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      MODEL_PATH((short)3, "modelPath"),
      NUM_CLUSTERS((short)4, "numClusters"),
      DKMLCONF((short)5, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // MODEL_PATH
            return MODEL_PATH;
          case 4: // NUM_CLUSTERS
            return NUM_CLUSTERS;
          case 5: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMCLUSTERS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODEL_PATH, new org.apache.thrift.meta_data.FieldMetaData("modelPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM_CLUSTERS, new org.apache.thrift.meta_data.FieldMetaData("numClusters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(kmModelBuild_args.class, metaDataMap);
    }

    public kmModelBuild_args() {
    }

    public kmModelBuild_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String modelPath,
      int numClusters,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.modelPath = modelPath;
      this.numClusters = numClusters;
      setNumClustersIsSet(true);
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public kmModelBuild_args(kmModelBuild_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetModelPath()) {
        this.modelPath = other.modelPath;
      }
      this.numClusters = other.numClusters;
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public kmModelBuild_args deepCopy() {
      return new kmModelBuild_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.modelPath = null;
      setNumClustersIsSet(false);
      this.numClusters = 0;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public kmModelBuild_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public kmModelBuild_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getModelPath() {
      return this.modelPath;
    }

    public kmModelBuild_args setModelPath(java.lang.String modelPath) {
      this.modelPath = modelPath;
      return this;
    }

    public void unsetModelPath() {
      this.modelPath = null;
    }

    /** Returns true if field modelPath is set (has been assigned a value) and false otherwise */
    public boolean isSetModelPath() {
      return this.modelPath != null;
    }

    public void setModelPathIsSet(boolean value) {
      if (!value) {
        this.modelPath = null;
      }
    }

    public int getNumClusters() {
      return this.numClusters;
    }

    public kmModelBuild_args setNumClusters(int numClusters) {
      this.numClusters = numClusters;
      setNumClustersIsSet(true);
      return this;
    }

    public void unsetNumClusters() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMCLUSTERS_ISSET_ID);
    }

    /** Returns true if field numClusters is set (has been assigned a value) and false otherwise */
    public boolean isSetNumClusters() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMCLUSTERS_ISSET_ID);
    }

    public void setNumClustersIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMCLUSTERS_ISSET_ID, value);
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public kmModelBuild_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case MODEL_PATH:
        if (value == null) {
          unsetModelPath();
        } else {
          setModelPath((java.lang.String)value);
        }
        break;

      case NUM_CLUSTERS:
        if (value == null) {
          unsetNumClusters();
        } else {
          setNumClusters((java.lang.Integer)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case MODEL_PATH:
        return getModelPath();

      case NUM_CLUSTERS:
        return getNumClusters();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case MODEL_PATH:
        return isSetModelPath();
      case NUM_CLUSTERS:
        return isSetNumClusters();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof kmModelBuild_args)
        return this.equals((kmModelBuild_args)that);
      return false;
    }

    public boolean equals(kmModelBuild_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_modelPath = true && this.isSetModelPath();
      boolean that_present_modelPath = true && that.isSetModelPath();
      if (this_present_modelPath || that_present_modelPath) {
        if (!(this_present_modelPath && that_present_modelPath))
          return false;
        if (!this.modelPath.equals(that.modelPath))
          return false;
      }

      boolean this_present_numClusters = true;
      boolean that_present_numClusters = true;
      if (this_present_numClusters || that_present_numClusters) {
        if (!(this_present_numClusters && that_present_numClusters))
          return false;
        if (this.numClusters != that.numClusters)
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetModelPath()) ? 131071 : 524287);
      if (isSetModelPath())
        hashCode = hashCode * 8191 + modelPath.hashCode();

      hashCode = hashCode * 8191 + numClusters;

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(kmModelBuild_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModelPath()).compareTo(other.isSetModelPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelPath, other.modelPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumClusters()).compareTo(other.isSetNumClusters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumClusters()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numClusters, other.numClusters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("kmModelBuild_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelPath:");
      if (this.modelPath == null) {
        sb.append("null");
      } else {
        sb.append(this.modelPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numClusters:");
      sb.append(this.numClusters);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class kmModelBuild_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public kmModelBuild_argsStandardScheme getScheme() {
        return new kmModelBuild_argsStandardScheme();
      }
    }

    private static class kmModelBuild_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<kmModelBuild_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, kmModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODEL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelPath = iprot.readString();
                struct.setModelPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NUM_CLUSTERS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numClusters = iprot.readI32();
                struct.setNumClustersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, kmModelBuild_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.modelPath != null) {
          oprot.writeFieldBegin(MODEL_PATH_FIELD_DESC);
          oprot.writeString(struct.modelPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_CLUSTERS_FIELD_DESC);
        oprot.writeI32(struct.numClusters);
        oprot.writeFieldEnd();
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class kmModelBuild_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public kmModelBuild_argsTupleScheme getScheme() {
        return new kmModelBuild_argsTupleScheme();
      }
    }

    private static class kmModelBuild_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<kmModelBuild_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, kmModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetModelPath()) {
          optionals.set(2);
        }
        if (struct.isSetNumClusters()) {
          optionals.set(3);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetModelPath()) {
          oprot.writeString(struct.modelPath);
        }
        if (struct.isSetNumClusters()) {
          oprot.writeI32(struct.numClusters);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, kmModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modelPath = iprot.readString();
          struct.setModelPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.numClusters = iprot.readI32();
          struct.setNumClustersIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class kmModelBuild_result implements org.apache.thrift.TBase<kmModelBuild_result, kmModelBuild_result._Fields>, java.io.Serializable, Cloneable, Comparable<kmModelBuild_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("kmModelBuild_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new kmModelBuild_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new kmModelBuild_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(kmModelBuild_result.class, metaDataMap);
    }

    public kmModelBuild_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public kmModelBuild_result(kmModelBuild_result other) {
    }

    public kmModelBuild_result deepCopy() {
      return new kmModelBuild_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof kmModelBuild_result)
        return this.equals((kmModelBuild_result)that);
      return false;
    }

    public boolean equals(kmModelBuild_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(kmModelBuild_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("kmModelBuild_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class kmModelBuild_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public kmModelBuild_resultStandardScheme getScheme() {
        return new kmModelBuild_resultStandardScheme();
      }
    }

    private static class kmModelBuild_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<kmModelBuild_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, kmModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, kmModelBuild_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class kmModelBuild_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public kmModelBuild_resultTupleScheme getScheme() {
        return new kmModelBuild_resultTupleScheme();
      }
    }

    private static class kmModelBuild_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<kmModelBuild_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, kmModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, kmModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class kmModelPredict_args implements org.apache.thrift.TBase<kmModelPredict_args, kmModelPredict_args._Fields>, java.io.Serializable, Cloneable, Comparable<kmModelPredict_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("kmModelPredict_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODEL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("modelPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outputPath", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new kmModelPredict_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new kmModelPredict_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String modelPath; // required
    public java.lang.String outputPath; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      MODEL_PATH((short)3, "modelPath"),
      OUTPUT_PATH((short)4, "outputPath"),
      DKMLCONF((short)5, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // MODEL_PATH
            return MODEL_PATH;
          case 4: // OUTPUT_PATH
            return OUTPUT_PATH;
          case 5: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODEL_PATH, new org.apache.thrift.meta_data.FieldMetaData("modelPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(kmModelPredict_args.class, metaDataMap);
    }

    public kmModelPredict_args() {
    }

    public kmModelPredict_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String modelPath,
      java.lang.String outputPath,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.modelPath = modelPath;
      this.outputPath = outputPath;
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public kmModelPredict_args(kmModelPredict_args other) {
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetModelPath()) {
        this.modelPath = other.modelPath;
      }
      if (other.isSetOutputPath()) {
        this.outputPath = other.outputPath;
      }
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public kmModelPredict_args deepCopy() {
      return new kmModelPredict_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.modelPath = null;
      this.outputPath = null;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public kmModelPredict_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public kmModelPredict_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getModelPath() {
      return this.modelPath;
    }

    public kmModelPredict_args setModelPath(java.lang.String modelPath) {
      this.modelPath = modelPath;
      return this;
    }

    public void unsetModelPath() {
      this.modelPath = null;
    }

    /** Returns true if field modelPath is set (has been assigned a value) and false otherwise */
    public boolean isSetModelPath() {
      return this.modelPath != null;
    }

    public void setModelPathIsSet(boolean value) {
      if (!value) {
        this.modelPath = null;
      }
    }

    public java.lang.String getOutputPath() {
      return this.outputPath;
    }

    public kmModelPredict_args setOutputPath(java.lang.String outputPath) {
      this.outputPath = outputPath;
      return this;
    }

    public void unsetOutputPath() {
      this.outputPath = null;
    }

    /** Returns true if field outputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputPath() {
      return this.outputPath != null;
    }

    public void setOutputPathIsSet(boolean value) {
      if (!value) {
        this.outputPath = null;
      }
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public kmModelPredict_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case MODEL_PATH:
        if (value == null) {
          unsetModelPath();
        } else {
          setModelPath((java.lang.String)value);
        }
        break;

      case OUTPUT_PATH:
        if (value == null) {
          unsetOutputPath();
        } else {
          setOutputPath((java.lang.String)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case MODEL_PATH:
        return getModelPath();

      case OUTPUT_PATH:
        return getOutputPath();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case MODEL_PATH:
        return isSetModelPath();
      case OUTPUT_PATH:
        return isSetOutputPath();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof kmModelPredict_args)
        return this.equals((kmModelPredict_args)that);
      return false;
    }

    public boolean equals(kmModelPredict_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_modelPath = true && this.isSetModelPath();
      boolean that_present_modelPath = true && that.isSetModelPath();
      if (this_present_modelPath || that_present_modelPath) {
        if (!(this_present_modelPath && that_present_modelPath))
          return false;
        if (!this.modelPath.equals(that.modelPath))
          return false;
      }

      boolean this_present_outputPath = true && this.isSetOutputPath();
      boolean that_present_outputPath = true && that.isSetOutputPath();
      if (this_present_outputPath || that_present_outputPath) {
        if (!(this_present_outputPath && that_present_outputPath))
          return false;
        if (!this.outputPath.equals(that.outputPath))
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetModelPath()) ? 131071 : 524287);
      if (isSetModelPath())
        hashCode = hashCode * 8191 + modelPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutputPath()) ? 131071 : 524287);
      if (isSetOutputPath())
        hashCode = hashCode * 8191 + outputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(kmModelPredict_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModelPath()).compareTo(other.isSetModelPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelPath, other.modelPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutputPath()).compareTo(other.isSetOutputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputPath, other.outputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("kmModelPredict_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelPath:");
      if (this.modelPath == null) {
        sb.append("null");
      } else {
        sb.append(this.modelPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputPath:");
      if (this.outputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class kmModelPredict_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public kmModelPredict_argsStandardScheme getScheme() {
        return new kmModelPredict_argsStandardScheme();
      }
    }

    private static class kmModelPredict_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<kmModelPredict_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, kmModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODEL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelPath = iprot.readString();
                struct.setModelPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputPath = iprot.readString();
                struct.setOutputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, kmModelPredict_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.modelPath != null) {
          oprot.writeFieldBegin(MODEL_PATH_FIELD_DESC);
          oprot.writeString(struct.modelPath);
          oprot.writeFieldEnd();
        }
        if (struct.outputPath != null) {
          oprot.writeFieldBegin(OUTPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outputPath);
          oprot.writeFieldEnd();
        }
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class kmModelPredict_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public kmModelPredict_argsTupleScheme getScheme() {
        return new kmModelPredict_argsTupleScheme();
      }
    }

    private static class kmModelPredict_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<kmModelPredict_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, kmModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetModelPath()) {
          optionals.set(2);
        }
        if (struct.isSetOutputPath()) {
          optionals.set(3);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetModelPath()) {
          oprot.writeString(struct.modelPath);
        }
        if (struct.isSetOutputPath()) {
          oprot.writeString(struct.outputPath);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, kmModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modelPath = iprot.readString();
          struct.setModelPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.outputPath = iprot.readString();
          struct.setOutputPathIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class kmModelPredict_result implements org.apache.thrift.TBase<kmModelPredict_result, kmModelPredict_result._Fields>, java.io.Serializable, Cloneable, Comparable<kmModelPredict_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("kmModelPredict_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new kmModelPredict_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new kmModelPredict_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(kmModelPredict_result.class, metaDataMap);
    }

    public kmModelPredict_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public kmModelPredict_result(kmModelPredict_result other) {
    }

    public kmModelPredict_result deepCopy() {
      return new kmModelPredict_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof kmModelPredict_result)
        return this.equals((kmModelPredict_result)that);
      return false;
    }

    public boolean equals(kmModelPredict_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(kmModelPredict_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("kmModelPredict_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class kmModelPredict_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public kmModelPredict_resultStandardScheme getScheme() {
        return new kmModelPredict_resultStandardScheme();
      }
    }

    private static class kmModelPredict_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<kmModelPredict_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, kmModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, kmModelPredict_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class kmModelPredict_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public kmModelPredict_resultTupleScheme getScheme() {
        return new kmModelPredict_resultTupleScheme();
      }
    }

    private static class kmModelPredict_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<kmModelPredict_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, kmModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, kmModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class gmModelBuild_args implements org.apache.thrift.TBase<gmModelBuild_args, gmModelBuild_args._Fields>, java.io.Serializable, Cloneable, Comparable<gmModelBuild_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gmModelBuild_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODEL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("modelPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField NUM_CLUSTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numClusters", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new gmModelBuild_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new gmModelBuild_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String modelPath; // required
    public int numClusters; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      MODEL_PATH((short)3, "modelPath"),
      NUM_CLUSTERS((short)4, "numClusters"),
      DKMLCONF((short)5, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // MODEL_PATH
            return MODEL_PATH;
          case 4: // NUM_CLUSTERS
            return NUM_CLUSTERS;
          case 5: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMCLUSTERS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODEL_PATH, new org.apache.thrift.meta_data.FieldMetaData("modelPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.NUM_CLUSTERS, new org.apache.thrift.meta_data.FieldMetaData("numClusters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gmModelBuild_args.class, metaDataMap);
    }

    public gmModelBuild_args() {
    }

    public gmModelBuild_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String modelPath,
      int numClusters,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.modelPath = modelPath;
      this.numClusters = numClusters;
      setNumClustersIsSet(true);
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gmModelBuild_args(gmModelBuild_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetModelPath()) {
        this.modelPath = other.modelPath;
      }
      this.numClusters = other.numClusters;
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public gmModelBuild_args deepCopy() {
      return new gmModelBuild_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.modelPath = null;
      setNumClustersIsSet(false);
      this.numClusters = 0;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public gmModelBuild_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public gmModelBuild_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getModelPath() {
      return this.modelPath;
    }

    public gmModelBuild_args setModelPath(java.lang.String modelPath) {
      this.modelPath = modelPath;
      return this;
    }

    public void unsetModelPath() {
      this.modelPath = null;
    }

    /** Returns true if field modelPath is set (has been assigned a value) and false otherwise */
    public boolean isSetModelPath() {
      return this.modelPath != null;
    }

    public void setModelPathIsSet(boolean value) {
      if (!value) {
        this.modelPath = null;
      }
    }

    public int getNumClusters() {
      return this.numClusters;
    }

    public gmModelBuild_args setNumClusters(int numClusters) {
      this.numClusters = numClusters;
      setNumClustersIsSet(true);
      return this;
    }

    public void unsetNumClusters() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMCLUSTERS_ISSET_ID);
    }

    /** Returns true if field numClusters is set (has been assigned a value) and false otherwise */
    public boolean isSetNumClusters() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMCLUSTERS_ISSET_ID);
    }

    public void setNumClustersIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMCLUSTERS_ISSET_ID, value);
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public gmModelBuild_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case MODEL_PATH:
        if (value == null) {
          unsetModelPath();
        } else {
          setModelPath((java.lang.String)value);
        }
        break;

      case NUM_CLUSTERS:
        if (value == null) {
          unsetNumClusters();
        } else {
          setNumClusters((java.lang.Integer)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case MODEL_PATH:
        return getModelPath();

      case NUM_CLUSTERS:
        return getNumClusters();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case MODEL_PATH:
        return isSetModelPath();
      case NUM_CLUSTERS:
        return isSetNumClusters();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof gmModelBuild_args)
        return this.equals((gmModelBuild_args)that);
      return false;
    }

    public boolean equals(gmModelBuild_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_modelPath = true && this.isSetModelPath();
      boolean that_present_modelPath = true && that.isSetModelPath();
      if (this_present_modelPath || that_present_modelPath) {
        if (!(this_present_modelPath && that_present_modelPath))
          return false;
        if (!this.modelPath.equals(that.modelPath))
          return false;
      }

      boolean this_present_numClusters = true;
      boolean that_present_numClusters = true;
      if (this_present_numClusters || that_present_numClusters) {
        if (!(this_present_numClusters && that_present_numClusters))
          return false;
        if (this.numClusters != that.numClusters)
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetModelPath()) ? 131071 : 524287);
      if (isSetModelPath())
        hashCode = hashCode * 8191 + modelPath.hashCode();

      hashCode = hashCode * 8191 + numClusters;

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(gmModelBuild_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModelPath()).compareTo(other.isSetModelPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelPath, other.modelPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumClusters()).compareTo(other.isSetNumClusters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumClusters()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numClusters, other.numClusters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("gmModelBuild_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelPath:");
      if (this.modelPath == null) {
        sb.append("null");
      } else {
        sb.append(this.modelPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("numClusters:");
      sb.append(this.numClusters);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gmModelBuild_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public gmModelBuild_argsStandardScheme getScheme() {
        return new gmModelBuild_argsStandardScheme();
      }
    }

    private static class gmModelBuild_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<gmModelBuild_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gmModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODEL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelPath = iprot.readString();
                struct.setModelPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NUM_CLUSTERS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numClusters = iprot.readI32();
                struct.setNumClustersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gmModelBuild_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.modelPath != null) {
          oprot.writeFieldBegin(MODEL_PATH_FIELD_DESC);
          oprot.writeString(struct.modelPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NUM_CLUSTERS_FIELD_DESC);
        oprot.writeI32(struct.numClusters);
        oprot.writeFieldEnd();
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gmModelBuild_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public gmModelBuild_argsTupleScheme getScheme() {
        return new gmModelBuild_argsTupleScheme();
      }
    }

    private static class gmModelBuild_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<gmModelBuild_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gmModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetModelPath()) {
          optionals.set(2);
        }
        if (struct.isSetNumClusters()) {
          optionals.set(3);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetModelPath()) {
          oprot.writeString(struct.modelPath);
        }
        if (struct.isSetNumClusters()) {
          oprot.writeI32(struct.numClusters);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gmModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modelPath = iprot.readString();
          struct.setModelPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.numClusters = iprot.readI32();
          struct.setNumClustersIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class gmModelBuild_result implements org.apache.thrift.TBase<gmModelBuild_result, gmModelBuild_result._Fields>, java.io.Serializable, Cloneable, Comparable<gmModelBuild_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gmModelBuild_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new gmModelBuild_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new gmModelBuild_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gmModelBuild_result.class, metaDataMap);
    }

    public gmModelBuild_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gmModelBuild_result(gmModelBuild_result other) {
    }

    public gmModelBuild_result deepCopy() {
      return new gmModelBuild_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof gmModelBuild_result)
        return this.equals((gmModelBuild_result)that);
      return false;
    }

    public boolean equals(gmModelBuild_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(gmModelBuild_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("gmModelBuild_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gmModelBuild_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public gmModelBuild_resultStandardScheme getScheme() {
        return new gmModelBuild_resultStandardScheme();
      }
    }

    private static class gmModelBuild_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<gmModelBuild_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gmModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gmModelBuild_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gmModelBuild_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public gmModelBuild_resultTupleScheme getScheme() {
        return new gmModelBuild_resultTupleScheme();
      }
    }

    private static class gmModelBuild_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<gmModelBuild_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gmModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gmModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class gmModelPredict_args implements org.apache.thrift.TBase<gmModelPredict_args, gmModelPredict_args._Fields>, java.io.Serializable, Cloneable, Comparable<gmModelPredict_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gmModelPredict_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODEL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("modelPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outputPath", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new gmModelPredict_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new gmModelPredict_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String modelPath; // required
    public java.lang.String outputPath; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      MODEL_PATH((short)3, "modelPath"),
      OUTPUT_PATH((short)4, "outputPath"),
      DKMLCONF((short)5, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // MODEL_PATH
            return MODEL_PATH;
          case 4: // OUTPUT_PATH
            return OUTPUT_PATH;
          case 5: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODEL_PATH, new org.apache.thrift.meta_data.FieldMetaData("modelPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gmModelPredict_args.class, metaDataMap);
    }

    public gmModelPredict_args() {
    }

    public gmModelPredict_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String modelPath,
      java.lang.String outputPath,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.modelPath = modelPath;
      this.outputPath = outputPath;
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gmModelPredict_args(gmModelPredict_args other) {
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetModelPath()) {
        this.modelPath = other.modelPath;
      }
      if (other.isSetOutputPath()) {
        this.outputPath = other.outputPath;
      }
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public gmModelPredict_args deepCopy() {
      return new gmModelPredict_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.modelPath = null;
      this.outputPath = null;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public gmModelPredict_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public gmModelPredict_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getModelPath() {
      return this.modelPath;
    }

    public gmModelPredict_args setModelPath(java.lang.String modelPath) {
      this.modelPath = modelPath;
      return this;
    }

    public void unsetModelPath() {
      this.modelPath = null;
    }

    /** Returns true if field modelPath is set (has been assigned a value) and false otherwise */
    public boolean isSetModelPath() {
      return this.modelPath != null;
    }

    public void setModelPathIsSet(boolean value) {
      if (!value) {
        this.modelPath = null;
      }
    }

    public java.lang.String getOutputPath() {
      return this.outputPath;
    }

    public gmModelPredict_args setOutputPath(java.lang.String outputPath) {
      this.outputPath = outputPath;
      return this;
    }

    public void unsetOutputPath() {
      this.outputPath = null;
    }

    /** Returns true if field outputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputPath() {
      return this.outputPath != null;
    }

    public void setOutputPathIsSet(boolean value) {
      if (!value) {
        this.outputPath = null;
      }
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public gmModelPredict_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case MODEL_PATH:
        if (value == null) {
          unsetModelPath();
        } else {
          setModelPath((java.lang.String)value);
        }
        break;

      case OUTPUT_PATH:
        if (value == null) {
          unsetOutputPath();
        } else {
          setOutputPath((java.lang.String)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case MODEL_PATH:
        return getModelPath();

      case OUTPUT_PATH:
        return getOutputPath();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case MODEL_PATH:
        return isSetModelPath();
      case OUTPUT_PATH:
        return isSetOutputPath();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof gmModelPredict_args)
        return this.equals((gmModelPredict_args)that);
      return false;
    }

    public boolean equals(gmModelPredict_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_modelPath = true && this.isSetModelPath();
      boolean that_present_modelPath = true && that.isSetModelPath();
      if (this_present_modelPath || that_present_modelPath) {
        if (!(this_present_modelPath && that_present_modelPath))
          return false;
        if (!this.modelPath.equals(that.modelPath))
          return false;
      }

      boolean this_present_outputPath = true && this.isSetOutputPath();
      boolean that_present_outputPath = true && that.isSetOutputPath();
      if (this_present_outputPath || that_present_outputPath) {
        if (!(this_present_outputPath && that_present_outputPath))
          return false;
        if (!this.outputPath.equals(that.outputPath))
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetModelPath()) ? 131071 : 524287);
      if (isSetModelPath())
        hashCode = hashCode * 8191 + modelPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutputPath()) ? 131071 : 524287);
      if (isSetOutputPath())
        hashCode = hashCode * 8191 + outputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(gmModelPredict_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModelPath()).compareTo(other.isSetModelPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelPath, other.modelPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutputPath()).compareTo(other.isSetOutputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputPath, other.outputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("gmModelPredict_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelPath:");
      if (this.modelPath == null) {
        sb.append("null");
      } else {
        sb.append(this.modelPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputPath:");
      if (this.outputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gmModelPredict_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public gmModelPredict_argsStandardScheme getScheme() {
        return new gmModelPredict_argsStandardScheme();
      }
    }

    private static class gmModelPredict_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<gmModelPredict_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gmModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODEL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelPath = iprot.readString();
                struct.setModelPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputPath = iprot.readString();
                struct.setOutputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gmModelPredict_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.modelPath != null) {
          oprot.writeFieldBegin(MODEL_PATH_FIELD_DESC);
          oprot.writeString(struct.modelPath);
          oprot.writeFieldEnd();
        }
        if (struct.outputPath != null) {
          oprot.writeFieldBegin(OUTPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outputPath);
          oprot.writeFieldEnd();
        }
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gmModelPredict_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public gmModelPredict_argsTupleScheme getScheme() {
        return new gmModelPredict_argsTupleScheme();
      }
    }

    private static class gmModelPredict_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<gmModelPredict_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gmModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetModelPath()) {
          optionals.set(2);
        }
        if (struct.isSetOutputPath()) {
          optionals.set(3);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetModelPath()) {
          oprot.writeString(struct.modelPath);
        }
        if (struct.isSetOutputPath()) {
          oprot.writeString(struct.outputPath);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gmModelPredict_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modelPath = iprot.readString();
          struct.setModelPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.outputPath = iprot.readString();
          struct.setOutputPathIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class gmModelPredict_result implements org.apache.thrift.TBase<gmModelPredict_result, gmModelPredict_result._Fields>, java.io.Serializable, Cloneable, Comparable<gmModelPredict_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gmModelPredict_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new gmModelPredict_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new gmModelPredict_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gmModelPredict_result.class, metaDataMap);
    }

    public gmModelPredict_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gmModelPredict_result(gmModelPredict_result other) {
    }

    public gmModelPredict_result deepCopy() {
      return new gmModelPredict_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof gmModelPredict_result)
        return this.equals((gmModelPredict_result)that);
      return false;
    }

    public boolean equals(gmModelPredict_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(gmModelPredict_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("gmModelPredict_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gmModelPredict_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public gmModelPredict_resultStandardScheme getScheme() {
        return new gmModelPredict_resultStandardScheme();
      }
    }

    private static class gmModelPredict_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<gmModelPredict_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gmModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gmModelPredict_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gmModelPredict_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public gmModelPredict_resultTupleScheme getScheme() {
        return new gmModelPredict_resultTupleScheme();
      }
    }

    private static class gmModelPredict_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<gmModelPredict_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gmModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gmModelPredict_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class pcaModel_args implements org.apache.thrift.TBase<pcaModel_args, pcaModel_args._Fields>, java.io.Serializable, Cloneable, Comparable<pcaModel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pcaModel_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUTPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outputPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField K_FIELD_DESC = new org.apache.thrift.protocol.TField("k", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new pcaModel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new pcaModel_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String outputPath; // required
    public int k; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      OUTPUT_PATH((short)3, "outputPath"),
      K((short)4, "k"),
      DKMLCONF((short)5, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // OUTPUT_PATH
            return OUTPUT_PATH;
          case 4: // K
            return K;
          case 5: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __K_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.K, new org.apache.thrift.meta_data.FieldMetaData("k", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pcaModel_args.class, metaDataMap);
    }

    public pcaModel_args() {
    }

    public pcaModel_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String outputPath,
      int k,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.outputPath = outputPath;
      this.k = k;
      setKIsSet(true);
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pcaModel_args(pcaModel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetOutputPath()) {
        this.outputPath = other.outputPath;
      }
      this.k = other.k;
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public pcaModel_args deepCopy() {
      return new pcaModel_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.outputPath = null;
      setKIsSet(false);
      this.k = 0;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public pcaModel_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public pcaModel_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getOutputPath() {
      return this.outputPath;
    }

    public pcaModel_args setOutputPath(java.lang.String outputPath) {
      this.outputPath = outputPath;
      return this;
    }

    public void unsetOutputPath() {
      this.outputPath = null;
    }

    /** Returns true if field outputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputPath() {
      return this.outputPath != null;
    }

    public void setOutputPathIsSet(boolean value) {
      if (!value) {
        this.outputPath = null;
      }
    }

    public int getK() {
      return this.k;
    }

    public pcaModel_args setK(int k) {
      this.k = k;
      setKIsSet(true);
      return this;
    }

    public void unsetK() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __K_ISSET_ID);
    }

    /** Returns true if field k is set (has been assigned a value) and false otherwise */
    public boolean isSetK() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __K_ISSET_ID);
    }

    public void setKIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __K_ISSET_ID, value);
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public pcaModel_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case OUTPUT_PATH:
        if (value == null) {
          unsetOutputPath();
        } else {
          setOutputPath((java.lang.String)value);
        }
        break;

      case K:
        if (value == null) {
          unsetK();
        } else {
          setK((java.lang.Integer)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case OUTPUT_PATH:
        return getOutputPath();

      case K:
        return getK();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case OUTPUT_PATH:
        return isSetOutputPath();
      case K:
        return isSetK();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof pcaModel_args)
        return this.equals((pcaModel_args)that);
      return false;
    }

    public boolean equals(pcaModel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_outputPath = true && this.isSetOutputPath();
      boolean that_present_outputPath = true && that.isSetOutputPath();
      if (this_present_outputPath || that_present_outputPath) {
        if (!(this_present_outputPath && that_present_outputPath))
          return false;
        if (!this.outputPath.equals(that.outputPath))
          return false;
      }

      boolean this_present_k = true;
      boolean that_present_k = true;
      if (this_present_k || that_present_k) {
        if (!(this_present_k && that_present_k))
          return false;
        if (this.k != that.k)
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutputPath()) ? 131071 : 524287);
      if (isSetOutputPath())
        hashCode = hashCode * 8191 + outputPath.hashCode();

      hashCode = hashCode * 8191 + k;

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(pcaModel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutputPath()).compareTo(other.isSetOutputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputPath, other.outputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetK()).compareTo(other.isSetK());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetK()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.k, other.k);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("pcaModel_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputPath:");
      if (this.outputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("k:");
      sb.append(this.k);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pcaModel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pcaModel_argsStandardScheme getScheme() {
        return new pcaModel_argsStandardScheme();
      }
    }

    private static class pcaModel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<pcaModel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pcaModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUTPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputPath = iprot.readString();
                struct.setOutputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // K
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.k = iprot.readI32();
                struct.setKIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pcaModel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.outputPath != null) {
          oprot.writeFieldBegin(OUTPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outputPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(K_FIELD_DESC);
        oprot.writeI32(struct.k);
        oprot.writeFieldEnd();
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pcaModel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pcaModel_argsTupleScheme getScheme() {
        return new pcaModel_argsTupleScheme();
      }
    }

    private static class pcaModel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<pcaModel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pcaModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetOutputPath()) {
          optionals.set(2);
        }
        if (struct.isSetK()) {
          optionals.set(3);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetOutputPath()) {
          oprot.writeString(struct.outputPath);
        }
        if (struct.isSetK()) {
          oprot.writeI32(struct.k);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pcaModel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outputPath = iprot.readString();
          struct.setOutputPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.k = iprot.readI32();
          struct.setKIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class pcaModel_result implements org.apache.thrift.TBase<pcaModel_result, pcaModel_result._Fields>, java.io.Serializable, Cloneable, Comparable<pcaModel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pcaModel_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new pcaModel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new pcaModel_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pcaModel_result.class, metaDataMap);
    }

    public pcaModel_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pcaModel_result(pcaModel_result other) {
    }

    public pcaModel_result deepCopy() {
      return new pcaModel_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof pcaModel_result)
        return this.equals((pcaModel_result)that);
      return false;
    }

    public boolean equals(pcaModel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(pcaModel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("pcaModel_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pcaModel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pcaModel_resultStandardScheme getScheme() {
        return new pcaModel_resultStandardScheme();
      }
    }

    private static class pcaModel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<pcaModel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pcaModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pcaModel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pcaModel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public pcaModel_resultTupleScheme getScheme() {
        return new pcaModel_resultTupleScheme();
      }
    }

    private static class pcaModel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<pcaModel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pcaModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pcaModel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fpGrowthModelBuild_args implements org.apache.thrift.TBase<fpGrowthModelBuild_args, fpGrowthModelBuild_args._Fields>, java.io.Serializable, Cloneable, Comparable<fpGrowthModelBuild_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fpGrowthModelBuild_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUTPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outputPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField MIN_SUPPORT_FIELD_DESC = new org.apache.thrift.protocol.TField("minSupport", org.apache.thrift.protocol.TType.DOUBLE, (short)4);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fpGrowthModelBuild_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fpGrowthModelBuild_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String outputPath; // required
    public double minSupport; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      OUTPUT_PATH((short)3, "outputPath"),
      MIN_SUPPORT((short)4, "minSupport"),
      DKMLCONF((short)5, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // OUTPUT_PATH
            return OUTPUT_PATH;
          case 4: // MIN_SUPPORT
            return MIN_SUPPORT;
          case 5: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MINSUPPORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MIN_SUPPORT, new org.apache.thrift.meta_data.FieldMetaData("minSupport", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fpGrowthModelBuild_args.class, metaDataMap);
    }

    public fpGrowthModelBuild_args() {
    }

    public fpGrowthModelBuild_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String outputPath,
      double minSupport,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.outputPath = outputPath;
      this.minSupport = minSupport;
      setMinSupportIsSet(true);
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fpGrowthModelBuild_args(fpGrowthModelBuild_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetOutputPath()) {
        this.outputPath = other.outputPath;
      }
      this.minSupport = other.minSupport;
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public fpGrowthModelBuild_args deepCopy() {
      return new fpGrowthModelBuild_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.outputPath = null;
      setMinSupportIsSet(false);
      this.minSupport = 0.0;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public fpGrowthModelBuild_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public fpGrowthModelBuild_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getOutputPath() {
      return this.outputPath;
    }

    public fpGrowthModelBuild_args setOutputPath(java.lang.String outputPath) {
      this.outputPath = outputPath;
      return this;
    }

    public void unsetOutputPath() {
      this.outputPath = null;
    }

    /** Returns true if field outputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputPath() {
      return this.outputPath != null;
    }

    public void setOutputPathIsSet(boolean value) {
      if (!value) {
        this.outputPath = null;
      }
    }

    public double getMinSupport() {
      return this.minSupport;
    }

    public fpGrowthModelBuild_args setMinSupport(double minSupport) {
      this.minSupport = minSupport;
      setMinSupportIsSet(true);
      return this;
    }

    public void unsetMinSupport() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINSUPPORT_ISSET_ID);
    }

    /** Returns true if field minSupport is set (has been assigned a value) and false otherwise */
    public boolean isSetMinSupport() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINSUPPORT_ISSET_ID);
    }

    public void setMinSupportIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINSUPPORT_ISSET_ID, value);
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public fpGrowthModelBuild_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case OUTPUT_PATH:
        if (value == null) {
          unsetOutputPath();
        } else {
          setOutputPath((java.lang.String)value);
        }
        break;

      case MIN_SUPPORT:
        if (value == null) {
          unsetMinSupport();
        } else {
          setMinSupport((java.lang.Double)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case OUTPUT_PATH:
        return getOutputPath();

      case MIN_SUPPORT:
        return getMinSupport();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case OUTPUT_PATH:
        return isSetOutputPath();
      case MIN_SUPPORT:
        return isSetMinSupport();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fpGrowthModelBuild_args)
        return this.equals((fpGrowthModelBuild_args)that);
      return false;
    }

    public boolean equals(fpGrowthModelBuild_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_outputPath = true && this.isSetOutputPath();
      boolean that_present_outputPath = true && that.isSetOutputPath();
      if (this_present_outputPath || that_present_outputPath) {
        if (!(this_present_outputPath && that_present_outputPath))
          return false;
        if (!this.outputPath.equals(that.outputPath))
          return false;
      }

      boolean this_present_minSupport = true;
      boolean that_present_minSupport = true;
      if (this_present_minSupport || that_present_minSupport) {
        if (!(this_present_minSupport && that_present_minSupport))
          return false;
        if (this.minSupport != that.minSupport)
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutputPath()) ? 131071 : 524287);
      if (isSetOutputPath())
        hashCode = hashCode * 8191 + outputPath.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(minSupport);

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fpGrowthModelBuild_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutputPath()).compareTo(other.isSetOutputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputPath, other.outputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMinSupport()).compareTo(other.isSetMinSupport());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMinSupport()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minSupport, other.minSupport);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fpGrowthModelBuild_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputPath:");
      if (this.outputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("minSupport:");
      sb.append(this.minSupport);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fpGrowthModelBuild_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fpGrowthModelBuild_argsStandardScheme getScheme() {
        return new fpGrowthModelBuild_argsStandardScheme();
      }
    }

    private static class fpGrowthModelBuild_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fpGrowthModelBuild_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fpGrowthModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUTPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputPath = iprot.readString();
                struct.setOutputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // MIN_SUPPORT
              if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
                struct.minSupport = iprot.readDouble();
                struct.setMinSupportIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fpGrowthModelBuild_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.outputPath != null) {
          oprot.writeFieldBegin(OUTPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outputPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MIN_SUPPORT_FIELD_DESC);
        oprot.writeDouble(struct.minSupport);
        oprot.writeFieldEnd();
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fpGrowthModelBuild_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fpGrowthModelBuild_argsTupleScheme getScheme() {
        return new fpGrowthModelBuild_argsTupleScheme();
      }
    }

    private static class fpGrowthModelBuild_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fpGrowthModelBuild_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fpGrowthModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetOutputPath()) {
          optionals.set(2);
        }
        if (struct.isSetMinSupport()) {
          optionals.set(3);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetOutputPath()) {
          oprot.writeString(struct.outputPath);
        }
        if (struct.isSetMinSupport()) {
          oprot.writeDouble(struct.minSupport);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fpGrowthModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outputPath = iprot.readString();
          struct.setOutputPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.minSupport = iprot.readDouble();
          struct.setMinSupportIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fpGrowthModelBuild_result implements org.apache.thrift.TBase<fpGrowthModelBuild_result, fpGrowthModelBuild_result._Fields>, java.io.Serializable, Cloneable, Comparable<fpGrowthModelBuild_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fpGrowthModelBuild_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fpGrowthModelBuild_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fpGrowthModelBuild_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fpGrowthModelBuild_result.class, metaDataMap);
    }

    public fpGrowthModelBuild_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fpGrowthModelBuild_result(fpGrowthModelBuild_result other) {
    }

    public fpGrowthModelBuild_result deepCopy() {
      return new fpGrowthModelBuild_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fpGrowthModelBuild_result)
        return this.equals((fpGrowthModelBuild_result)that);
      return false;
    }

    public boolean equals(fpGrowthModelBuild_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(fpGrowthModelBuild_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fpGrowthModelBuild_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fpGrowthModelBuild_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fpGrowthModelBuild_resultStandardScheme getScheme() {
        return new fpGrowthModelBuild_resultStandardScheme();
      }
    }

    private static class fpGrowthModelBuild_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fpGrowthModelBuild_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fpGrowthModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fpGrowthModelBuild_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fpGrowthModelBuild_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fpGrowthModelBuild_resultTupleScheme getScheme() {
        return new fpGrowthModelBuild_resultTupleScheme();
      }
    }

    private static class fpGrowthModelBuild_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fpGrowthModelBuild_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fpGrowthModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fpGrowthModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class alsModelBuild_args implements org.apache.thrift.TBase<alsModelBuild_args, alsModelBuild_args._Fields>, java.io.Serializable, Cloneable, Comparable<alsModelBuild_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("alsModelBuild_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODEL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("modelPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField RANK_FIELD_DESC = new org.apache.thrift.protocol.TField("rank", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField NUM_ITERATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("numIterations", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new alsModelBuild_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new alsModelBuild_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String modelPath; // required
    public int rank; // required
    public int numIterations; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      MODEL_PATH((short)3, "modelPath"),
      RANK((short)4, "rank"),
      NUM_ITERATIONS((short)5, "numIterations"),
      DKMLCONF((short)6, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // MODEL_PATH
            return MODEL_PATH;
          case 4: // RANK
            return RANK;
          case 5: // NUM_ITERATIONS
            return NUM_ITERATIONS;
          case 6: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RANK_ISSET_ID = 0;
    private static final int __NUMITERATIONS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODEL_PATH, new org.apache.thrift.meta_data.FieldMetaData("modelPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.RANK, new org.apache.thrift.meta_data.FieldMetaData("rank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.NUM_ITERATIONS, new org.apache.thrift.meta_data.FieldMetaData("numIterations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alsModelBuild_args.class, metaDataMap);
    }

    public alsModelBuild_args() {
    }

    public alsModelBuild_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String modelPath,
      int rank,
      int numIterations,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.modelPath = modelPath;
      this.rank = rank;
      setRankIsSet(true);
      this.numIterations = numIterations;
      setNumIterationsIsSet(true);
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alsModelBuild_args(alsModelBuild_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetModelPath()) {
        this.modelPath = other.modelPath;
      }
      this.rank = other.rank;
      this.numIterations = other.numIterations;
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public alsModelBuild_args deepCopy() {
      return new alsModelBuild_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.modelPath = null;
      setRankIsSet(false);
      this.rank = 0;
      setNumIterationsIsSet(false);
      this.numIterations = 0;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public alsModelBuild_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public alsModelBuild_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getModelPath() {
      return this.modelPath;
    }

    public alsModelBuild_args setModelPath(java.lang.String modelPath) {
      this.modelPath = modelPath;
      return this;
    }

    public void unsetModelPath() {
      this.modelPath = null;
    }

    /** Returns true if field modelPath is set (has been assigned a value) and false otherwise */
    public boolean isSetModelPath() {
      return this.modelPath != null;
    }

    public void setModelPathIsSet(boolean value) {
      if (!value) {
        this.modelPath = null;
      }
    }

    public int getRank() {
      return this.rank;
    }

    public alsModelBuild_args setRank(int rank) {
      this.rank = rank;
      setRankIsSet(true);
      return this;
    }

    public void unsetRank() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RANK_ISSET_ID);
    }

    /** Returns true if field rank is set (has been assigned a value) and false otherwise */
    public boolean isSetRank() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RANK_ISSET_ID);
    }

    public void setRankIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RANK_ISSET_ID, value);
    }

    public int getNumIterations() {
      return this.numIterations;
    }

    public alsModelBuild_args setNumIterations(int numIterations) {
      this.numIterations = numIterations;
      setNumIterationsIsSet(true);
      return this;
    }

    public void unsetNumIterations() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMITERATIONS_ISSET_ID);
    }

    /** Returns true if field numIterations is set (has been assigned a value) and false otherwise */
    public boolean isSetNumIterations() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMITERATIONS_ISSET_ID);
    }

    public void setNumIterationsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMITERATIONS_ISSET_ID, value);
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public alsModelBuild_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case MODEL_PATH:
        if (value == null) {
          unsetModelPath();
        } else {
          setModelPath((java.lang.String)value);
        }
        break;

      case RANK:
        if (value == null) {
          unsetRank();
        } else {
          setRank((java.lang.Integer)value);
        }
        break;

      case NUM_ITERATIONS:
        if (value == null) {
          unsetNumIterations();
        } else {
          setNumIterations((java.lang.Integer)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case MODEL_PATH:
        return getModelPath();

      case RANK:
        return getRank();

      case NUM_ITERATIONS:
        return getNumIterations();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case MODEL_PATH:
        return isSetModelPath();
      case RANK:
        return isSetRank();
      case NUM_ITERATIONS:
        return isSetNumIterations();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof alsModelBuild_args)
        return this.equals((alsModelBuild_args)that);
      return false;
    }

    public boolean equals(alsModelBuild_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_modelPath = true && this.isSetModelPath();
      boolean that_present_modelPath = true && that.isSetModelPath();
      if (this_present_modelPath || that_present_modelPath) {
        if (!(this_present_modelPath && that_present_modelPath))
          return false;
        if (!this.modelPath.equals(that.modelPath))
          return false;
      }

      boolean this_present_rank = true;
      boolean that_present_rank = true;
      if (this_present_rank || that_present_rank) {
        if (!(this_present_rank && that_present_rank))
          return false;
        if (this.rank != that.rank)
          return false;
      }

      boolean this_present_numIterations = true;
      boolean that_present_numIterations = true;
      if (this_present_numIterations || that_present_numIterations) {
        if (!(this_present_numIterations && that_present_numIterations))
          return false;
        if (this.numIterations != that.numIterations)
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetModelPath()) ? 131071 : 524287);
      if (isSetModelPath())
        hashCode = hashCode * 8191 + modelPath.hashCode();

      hashCode = hashCode * 8191 + rank;

      hashCode = hashCode * 8191 + numIterations;

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(alsModelBuild_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModelPath()).compareTo(other.isSetModelPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelPath, other.modelPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRank()).compareTo(other.isSetRank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rank, other.rank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumIterations()).compareTo(other.isSetNumIterations());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumIterations()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numIterations, other.numIterations);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("alsModelBuild_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelPath:");
      if (this.modelPath == null) {
        sb.append("null");
      } else {
        sb.append(this.modelPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rank:");
      sb.append(this.rank);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numIterations:");
      sb.append(this.numIterations);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class alsModelBuild_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public alsModelBuild_argsStandardScheme getScheme() {
        return new alsModelBuild_argsStandardScheme();
      }
    }

    private static class alsModelBuild_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<alsModelBuild_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, alsModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODEL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelPath = iprot.readString();
                struct.setModelPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // RANK
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.rank = iprot.readI32();
                struct.setRankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // NUM_ITERATIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numIterations = iprot.readI32();
                struct.setNumIterationsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, alsModelBuild_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.modelPath != null) {
          oprot.writeFieldBegin(MODEL_PATH_FIELD_DESC);
          oprot.writeString(struct.modelPath);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RANK_FIELD_DESC);
        oprot.writeI32(struct.rank);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_ITERATIONS_FIELD_DESC);
        oprot.writeI32(struct.numIterations);
        oprot.writeFieldEnd();
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class alsModelBuild_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public alsModelBuild_argsTupleScheme getScheme() {
        return new alsModelBuild_argsTupleScheme();
      }
    }

    private static class alsModelBuild_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<alsModelBuild_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, alsModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetModelPath()) {
          optionals.set(2);
        }
        if (struct.isSetRank()) {
          optionals.set(3);
        }
        if (struct.isSetNumIterations()) {
          optionals.set(4);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetModelPath()) {
          oprot.writeString(struct.modelPath);
        }
        if (struct.isSetRank()) {
          oprot.writeI32(struct.rank);
        }
        if (struct.isSetNumIterations()) {
          oprot.writeI32(struct.numIterations);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, alsModelBuild_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modelPath = iprot.readString();
          struct.setModelPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.rank = iprot.readI32();
          struct.setRankIsSet(true);
        }
        if (incoming.get(4)) {
          struct.numIterations = iprot.readI32();
          struct.setNumIterationsIsSet(true);
        }
        if (incoming.get(5)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class alsModelBuild_result implements org.apache.thrift.TBase<alsModelBuild_result, alsModelBuild_result._Fields>, java.io.Serializable, Cloneable, Comparable<alsModelBuild_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("alsModelBuild_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new alsModelBuild_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new alsModelBuild_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(alsModelBuild_result.class, metaDataMap);
    }

    public alsModelBuild_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public alsModelBuild_result(alsModelBuild_result other) {
    }

    public alsModelBuild_result deepCopy() {
      return new alsModelBuild_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof alsModelBuild_result)
        return this.equals((alsModelBuild_result)that);
      return false;
    }

    public boolean equals(alsModelBuild_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(alsModelBuild_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("alsModelBuild_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class alsModelBuild_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public alsModelBuild_resultStandardScheme getScheme() {
        return new alsModelBuild_resultStandardScheme();
      }
    }

    private static class alsModelBuild_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<alsModelBuild_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, alsModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, alsModelBuild_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class alsModelBuild_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public alsModelBuild_resultTupleScheme getScheme() {
        return new alsModelBuild_resultTupleScheme();
      }
    }

    private static class alsModelBuild_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<alsModelBuild_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, alsModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, alsModelBuild_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rmUsers_args implements org.apache.thrift.TBase<rmUsers_args, rmUsers_args._Fields>, java.io.Serializable, Cloneable, Comparable<rmUsers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rmUsers_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODEL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("modelPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outputPath", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rmUsers_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rmUsers_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String modelPath; // required
    public java.lang.String outputPath; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      MODEL_PATH((short)3, "modelPath"),
      OUTPUT_PATH((short)4, "outputPath"),
      DKMLCONF((short)5, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // MODEL_PATH
            return MODEL_PATH;
          case 4: // OUTPUT_PATH
            return OUTPUT_PATH;
          case 5: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODEL_PATH, new org.apache.thrift.meta_data.FieldMetaData("modelPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rmUsers_args.class, metaDataMap);
    }

    public rmUsers_args() {
    }

    public rmUsers_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String modelPath,
      java.lang.String outputPath,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.modelPath = modelPath;
      this.outputPath = outputPath;
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rmUsers_args(rmUsers_args other) {
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetModelPath()) {
        this.modelPath = other.modelPath;
      }
      if (other.isSetOutputPath()) {
        this.outputPath = other.outputPath;
      }
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public rmUsers_args deepCopy() {
      return new rmUsers_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.modelPath = null;
      this.outputPath = null;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public rmUsers_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public rmUsers_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getModelPath() {
      return this.modelPath;
    }

    public rmUsers_args setModelPath(java.lang.String modelPath) {
      this.modelPath = modelPath;
      return this;
    }

    public void unsetModelPath() {
      this.modelPath = null;
    }

    /** Returns true if field modelPath is set (has been assigned a value) and false otherwise */
    public boolean isSetModelPath() {
      return this.modelPath != null;
    }

    public void setModelPathIsSet(boolean value) {
      if (!value) {
        this.modelPath = null;
      }
    }

    public java.lang.String getOutputPath() {
      return this.outputPath;
    }

    public rmUsers_args setOutputPath(java.lang.String outputPath) {
      this.outputPath = outputPath;
      return this;
    }

    public void unsetOutputPath() {
      this.outputPath = null;
    }

    /** Returns true if field outputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputPath() {
      return this.outputPath != null;
    }

    public void setOutputPathIsSet(boolean value) {
      if (!value) {
        this.outputPath = null;
      }
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public rmUsers_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case MODEL_PATH:
        if (value == null) {
          unsetModelPath();
        } else {
          setModelPath((java.lang.String)value);
        }
        break;

      case OUTPUT_PATH:
        if (value == null) {
          unsetOutputPath();
        } else {
          setOutputPath((java.lang.String)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case MODEL_PATH:
        return getModelPath();

      case OUTPUT_PATH:
        return getOutputPath();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case MODEL_PATH:
        return isSetModelPath();
      case OUTPUT_PATH:
        return isSetOutputPath();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rmUsers_args)
        return this.equals((rmUsers_args)that);
      return false;
    }

    public boolean equals(rmUsers_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_modelPath = true && this.isSetModelPath();
      boolean that_present_modelPath = true && that.isSetModelPath();
      if (this_present_modelPath || that_present_modelPath) {
        if (!(this_present_modelPath && that_present_modelPath))
          return false;
        if (!this.modelPath.equals(that.modelPath))
          return false;
      }

      boolean this_present_outputPath = true && this.isSetOutputPath();
      boolean that_present_outputPath = true && that.isSetOutputPath();
      if (this_present_outputPath || that_present_outputPath) {
        if (!(this_present_outputPath && that_present_outputPath))
          return false;
        if (!this.outputPath.equals(that.outputPath))
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetModelPath()) ? 131071 : 524287);
      if (isSetModelPath())
        hashCode = hashCode * 8191 + modelPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutputPath()) ? 131071 : 524287);
      if (isSetOutputPath())
        hashCode = hashCode * 8191 + outputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(rmUsers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModelPath()).compareTo(other.isSetModelPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelPath, other.modelPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutputPath()).compareTo(other.isSetOutputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputPath, other.outputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rmUsers_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelPath:");
      if (this.modelPath == null) {
        sb.append("null");
      } else {
        sb.append(this.modelPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputPath:");
      if (this.outputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rmUsers_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rmUsers_argsStandardScheme getScheme() {
        return new rmUsers_argsStandardScheme();
      }
    }

    private static class rmUsers_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<rmUsers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rmUsers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODEL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelPath = iprot.readString();
                struct.setModelPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputPath = iprot.readString();
                struct.setOutputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rmUsers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.modelPath != null) {
          oprot.writeFieldBegin(MODEL_PATH_FIELD_DESC);
          oprot.writeString(struct.modelPath);
          oprot.writeFieldEnd();
        }
        if (struct.outputPath != null) {
          oprot.writeFieldBegin(OUTPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outputPath);
          oprot.writeFieldEnd();
        }
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rmUsers_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rmUsers_argsTupleScheme getScheme() {
        return new rmUsers_argsTupleScheme();
      }
    }

    private static class rmUsers_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<rmUsers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rmUsers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetModelPath()) {
          optionals.set(2);
        }
        if (struct.isSetOutputPath()) {
          optionals.set(3);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetModelPath()) {
          oprot.writeString(struct.modelPath);
        }
        if (struct.isSetOutputPath()) {
          oprot.writeString(struct.outputPath);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rmUsers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modelPath = iprot.readString();
          struct.setModelPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.outputPath = iprot.readString();
          struct.setOutputPathIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rmUsers_result implements org.apache.thrift.TBase<rmUsers_result, rmUsers_result._Fields>, java.io.Serializable, Cloneable, Comparable<rmUsers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rmUsers_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rmUsers_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rmUsers_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rmUsers_result.class, metaDataMap);
    }

    public rmUsers_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rmUsers_result(rmUsers_result other) {
    }

    public rmUsers_result deepCopy() {
      return new rmUsers_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rmUsers_result)
        return this.equals((rmUsers_result)that);
      return false;
    }

    public boolean equals(rmUsers_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(rmUsers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rmUsers_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rmUsers_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rmUsers_resultStandardScheme getScheme() {
        return new rmUsers_resultStandardScheme();
      }
    }

    private static class rmUsers_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<rmUsers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rmUsers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rmUsers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rmUsers_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rmUsers_resultTupleScheme getScheme() {
        return new rmUsers_resultTupleScheme();
      }
    }

    private static class rmUsers_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<rmUsers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rmUsers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rmUsers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rmpProducts_args implements org.apache.thrift.TBase<rmpProducts_args, rmpProducts_args._Fields>, java.io.Serializable, Cloneable, Comparable<rmpProducts_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rmpProducts_args");

    private static final org.apache.thrift.protocol.TField MASTER_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("masterUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("inputPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MODEL_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("modelPath", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OUTPUT_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("outputPath", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DKMLCONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkmlconf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rmpProducts_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rmpProducts_argsTupleSchemeFactory();

    public java.lang.String masterUrl; // required
    public java.lang.String inputPath; // required
    public java.lang.String modelPath; // required
    public java.lang.String outputPath; // required
    public DKMLConf dkmlconf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MASTER_URL((short)1, "masterUrl"),
      INPUT_PATH((short)2, "inputPath"),
      MODEL_PATH((short)3, "modelPath"),
      OUTPUT_PATH((short)4, "outputPath"),
      DKMLCONF((short)5, "dkmlconf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MASTER_URL
            return MASTER_URL;
          case 2: // INPUT_PATH
            return INPUT_PATH;
          case 3: // MODEL_PATH
            return MODEL_PATH;
          case 4: // OUTPUT_PATH
            return OUTPUT_PATH;
          case 5: // DKMLCONF
            return DKMLCONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MASTER_URL, new org.apache.thrift.meta_data.FieldMetaData("masterUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("inputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MODEL_PATH, new org.apache.thrift.meta_data.FieldMetaData("modelPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTPUT_PATH, new org.apache.thrift.meta_data.FieldMetaData("outputPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DKMLCONF, new org.apache.thrift.meta_data.FieldMetaData("dkmlconf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKMLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rmpProducts_args.class, metaDataMap);
    }

    public rmpProducts_args() {
    }

    public rmpProducts_args(
      java.lang.String masterUrl,
      java.lang.String inputPath,
      java.lang.String modelPath,
      java.lang.String outputPath,
      DKMLConf dkmlconf)
    {
      this();
      this.masterUrl = masterUrl;
      this.inputPath = inputPath;
      this.modelPath = modelPath;
      this.outputPath = outputPath;
      this.dkmlconf = dkmlconf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rmpProducts_args(rmpProducts_args other) {
      if (other.isSetMasterUrl()) {
        this.masterUrl = other.masterUrl;
      }
      if (other.isSetInputPath()) {
        this.inputPath = other.inputPath;
      }
      if (other.isSetModelPath()) {
        this.modelPath = other.modelPath;
      }
      if (other.isSetOutputPath()) {
        this.outputPath = other.outputPath;
      }
      if (other.isSetDkmlconf()) {
        this.dkmlconf = new DKMLConf(other.dkmlconf);
      }
    }

    public rmpProducts_args deepCopy() {
      return new rmpProducts_args(this);
    }

    @Override
    public void clear() {
      this.masterUrl = null;
      this.inputPath = null;
      this.modelPath = null;
      this.outputPath = null;
      this.dkmlconf = null;
    }

    public java.lang.String getMasterUrl() {
      return this.masterUrl;
    }

    public rmpProducts_args setMasterUrl(java.lang.String masterUrl) {
      this.masterUrl = masterUrl;
      return this;
    }

    public void unsetMasterUrl() {
      this.masterUrl = null;
    }

    /** Returns true if field masterUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetMasterUrl() {
      return this.masterUrl != null;
    }

    public void setMasterUrlIsSet(boolean value) {
      if (!value) {
        this.masterUrl = null;
      }
    }

    public java.lang.String getInputPath() {
      return this.inputPath;
    }

    public rmpProducts_args setInputPath(java.lang.String inputPath) {
      this.inputPath = inputPath;
      return this;
    }

    public void unsetInputPath() {
      this.inputPath = null;
    }

    /** Returns true if field inputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetInputPath() {
      return this.inputPath != null;
    }

    public void setInputPathIsSet(boolean value) {
      if (!value) {
        this.inputPath = null;
      }
    }

    public java.lang.String getModelPath() {
      return this.modelPath;
    }

    public rmpProducts_args setModelPath(java.lang.String modelPath) {
      this.modelPath = modelPath;
      return this;
    }

    public void unsetModelPath() {
      this.modelPath = null;
    }

    /** Returns true if field modelPath is set (has been assigned a value) and false otherwise */
    public boolean isSetModelPath() {
      return this.modelPath != null;
    }

    public void setModelPathIsSet(boolean value) {
      if (!value) {
        this.modelPath = null;
      }
    }

    public java.lang.String getOutputPath() {
      return this.outputPath;
    }

    public rmpProducts_args setOutputPath(java.lang.String outputPath) {
      this.outputPath = outputPath;
      return this;
    }

    public void unsetOutputPath() {
      this.outputPath = null;
    }

    /** Returns true if field outputPath is set (has been assigned a value) and false otherwise */
    public boolean isSetOutputPath() {
      return this.outputPath != null;
    }

    public void setOutputPathIsSet(boolean value) {
      if (!value) {
        this.outputPath = null;
      }
    }

    public DKMLConf getDkmlconf() {
      return this.dkmlconf;
    }

    public rmpProducts_args setDkmlconf(DKMLConf dkmlconf) {
      this.dkmlconf = dkmlconf;
      return this;
    }

    public void unsetDkmlconf() {
      this.dkmlconf = null;
    }

    /** Returns true if field dkmlconf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkmlconf() {
      return this.dkmlconf != null;
    }

    public void setDkmlconfIsSet(boolean value) {
      if (!value) {
        this.dkmlconf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MASTER_URL:
        if (value == null) {
          unsetMasterUrl();
        } else {
          setMasterUrl((java.lang.String)value);
        }
        break;

      case INPUT_PATH:
        if (value == null) {
          unsetInputPath();
        } else {
          setInputPath((java.lang.String)value);
        }
        break;

      case MODEL_PATH:
        if (value == null) {
          unsetModelPath();
        } else {
          setModelPath((java.lang.String)value);
        }
        break;

      case OUTPUT_PATH:
        if (value == null) {
          unsetOutputPath();
        } else {
          setOutputPath((java.lang.String)value);
        }
        break;

      case DKMLCONF:
        if (value == null) {
          unsetDkmlconf();
        } else {
          setDkmlconf((DKMLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MASTER_URL:
        return getMasterUrl();

      case INPUT_PATH:
        return getInputPath();

      case MODEL_PATH:
        return getModelPath();

      case OUTPUT_PATH:
        return getOutputPath();

      case DKMLCONF:
        return getDkmlconf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MASTER_URL:
        return isSetMasterUrl();
      case INPUT_PATH:
        return isSetInputPath();
      case MODEL_PATH:
        return isSetModelPath();
      case OUTPUT_PATH:
        return isSetOutputPath();
      case DKMLCONF:
        return isSetDkmlconf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rmpProducts_args)
        return this.equals((rmpProducts_args)that);
      return false;
    }

    public boolean equals(rmpProducts_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_masterUrl = true && this.isSetMasterUrl();
      boolean that_present_masterUrl = true && that.isSetMasterUrl();
      if (this_present_masterUrl || that_present_masterUrl) {
        if (!(this_present_masterUrl && that_present_masterUrl))
          return false;
        if (!this.masterUrl.equals(that.masterUrl))
          return false;
      }

      boolean this_present_inputPath = true && this.isSetInputPath();
      boolean that_present_inputPath = true && that.isSetInputPath();
      if (this_present_inputPath || that_present_inputPath) {
        if (!(this_present_inputPath && that_present_inputPath))
          return false;
        if (!this.inputPath.equals(that.inputPath))
          return false;
      }

      boolean this_present_modelPath = true && this.isSetModelPath();
      boolean that_present_modelPath = true && that.isSetModelPath();
      if (this_present_modelPath || that_present_modelPath) {
        if (!(this_present_modelPath && that_present_modelPath))
          return false;
        if (!this.modelPath.equals(that.modelPath))
          return false;
      }

      boolean this_present_outputPath = true && this.isSetOutputPath();
      boolean that_present_outputPath = true && that.isSetOutputPath();
      if (this_present_outputPath || that_present_outputPath) {
        if (!(this_present_outputPath && that_present_outputPath))
          return false;
        if (!this.outputPath.equals(that.outputPath))
          return false;
      }

      boolean this_present_dkmlconf = true && this.isSetDkmlconf();
      boolean that_present_dkmlconf = true && that.isSetDkmlconf();
      if (this_present_dkmlconf || that_present_dkmlconf) {
        if (!(this_present_dkmlconf && that_present_dkmlconf))
          return false;
        if (!this.dkmlconf.equals(that.dkmlconf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMasterUrl()) ? 131071 : 524287);
      if (isSetMasterUrl())
        hashCode = hashCode * 8191 + masterUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetInputPath()) ? 131071 : 524287);
      if (isSetInputPath())
        hashCode = hashCode * 8191 + inputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetModelPath()) ? 131071 : 524287);
      if (isSetModelPath())
        hashCode = hashCode * 8191 + modelPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetOutputPath()) ? 131071 : 524287);
      if (isSetOutputPath())
        hashCode = hashCode * 8191 + outputPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkmlconf()) ? 131071 : 524287);
      if (isSetDkmlconf())
        hashCode = hashCode * 8191 + dkmlconf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(rmpProducts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMasterUrl()).compareTo(other.isSetMasterUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMasterUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.masterUrl, other.masterUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInputPath()).compareTo(other.isSetInputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inputPath, other.inputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetModelPath()).compareTo(other.isSetModelPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetModelPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.modelPath, other.modelPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutputPath()).compareTo(other.isSetOutputPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutputPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputPath, other.outputPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkmlconf()).compareTo(other.isSetDkmlconf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkmlconf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkmlconf, other.dkmlconf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rmpProducts_args(");
      boolean first = true;

      sb.append("masterUrl:");
      if (this.masterUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.masterUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("inputPath:");
      if (this.inputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.inputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("modelPath:");
      if (this.modelPath == null) {
        sb.append("null");
      } else {
        sb.append(this.modelPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outputPath:");
      if (this.outputPath == null) {
        sb.append("null");
      } else {
        sb.append(this.outputPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkmlconf:");
      if (this.dkmlconf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkmlconf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkmlconf != null) {
        dkmlconf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rmpProducts_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rmpProducts_argsStandardScheme getScheme() {
        return new rmpProducts_argsStandardScheme();
      }
    }

    private static class rmpProducts_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<rmpProducts_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rmpProducts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MASTER_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.masterUrl = iprot.readString();
                struct.setMasterUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.inputPath = iprot.readString();
                struct.setInputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MODEL_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.modelPath = iprot.readString();
                struct.setModelPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OUTPUT_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.outputPath = iprot.readString();
                struct.setOutputPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DKMLCONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkmlconf = new DKMLConf();
                struct.dkmlconf.read(iprot);
                struct.setDkmlconfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rmpProducts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.masterUrl != null) {
          oprot.writeFieldBegin(MASTER_URL_FIELD_DESC);
          oprot.writeString(struct.masterUrl);
          oprot.writeFieldEnd();
        }
        if (struct.inputPath != null) {
          oprot.writeFieldBegin(INPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.inputPath);
          oprot.writeFieldEnd();
        }
        if (struct.modelPath != null) {
          oprot.writeFieldBegin(MODEL_PATH_FIELD_DESC);
          oprot.writeString(struct.modelPath);
          oprot.writeFieldEnd();
        }
        if (struct.outputPath != null) {
          oprot.writeFieldBegin(OUTPUT_PATH_FIELD_DESC);
          oprot.writeString(struct.outputPath);
          oprot.writeFieldEnd();
        }
        if (struct.dkmlconf != null) {
          oprot.writeFieldBegin(DKMLCONF_FIELD_DESC);
          struct.dkmlconf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rmpProducts_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rmpProducts_argsTupleScheme getScheme() {
        return new rmpProducts_argsTupleScheme();
      }
    }

    private static class rmpProducts_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<rmpProducts_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rmpProducts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMasterUrl()) {
          optionals.set(0);
        }
        if (struct.isSetInputPath()) {
          optionals.set(1);
        }
        if (struct.isSetModelPath()) {
          optionals.set(2);
        }
        if (struct.isSetOutputPath()) {
          optionals.set(3);
        }
        if (struct.isSetDkmlconf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetMasterUrl()) {
          oprot.writeString(struct.masterUrl);
        }
        if (struct.isSetInputPath()) {
          oprot.writeString(struct.inputPath);
        }
        if (struct.isSetModelPath()) {
          oprot.writeString(struct.modelPath);
        }
        if (struct.isSetOutputPath()) {
          oprot.writeString(struct.outputPath);
        }
        if (struct.isSetDkmlconf()) {
          struct.dkmlconf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rmpProducts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.masterUrl = iprot.readString();
          struct.setMasterUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.inputPath = iprot.readString();
          struct.setInputPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.modelPath = iprot.readString();
          struct.setModelPathIsSet(true);
        }
        if (incoming.get(3)) {
          struct.outputPath = iprot.readString();
          struct.setOutputPathIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkmlconf = new DKMLConf();
          struct.dkmlconf.read(iprot);
          struct.setDkmlconfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rmpProducts_result implements org.apache.thrift.TBase<rmpProducts_result, rmpProducts_result._Fields>, java.io.Serializable, Cloneable, Comparable<rmpProducts_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rmpProducts_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rmpProducts_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rmpProducts_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rmpProducts_result.class, metaDataMap);
    }

    public rmpProducts_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rmpProducts_result(rmpProducts_result other) {
    }

    public rmpProducts_result deepCopy() {
      return new rmpProducts_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rmpProducts_result)
        return this.equals((rmpProducts_result)that);
      return false;
    }

    public boolean equals(rmpProducts_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(rmpProducts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rmpProducts_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rmpProducts_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rmpProducts_resultStandardScheme getScheme() {
        return new rmpProducts_resultStandardScheme();
      }
    }

    private static class rmpProducts_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<rmpProducts_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rmpProducts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rmpProducts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rmpProducts_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rmpProducts_resultTupleScheme getScheme() {
        return new rmpProducts_resultTupleScheme();
      }
    }

    private static class rmpProducts_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<rmpProducts_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rmpProducts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rmpProducts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
