/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dksou.fitting.search.service;

import com.dksou.fitting.search.SearchIOService.FileData;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-09-05")
public class DKSearchInput {

  public interface Iface {

    /**
     * 获取hdfs中的数据到ES
     *  @param fs hdfs的客户端路径
     *  @param dirName hdfs的目录名称
     *  @param hostIps ES集群的IP
     *  @param clusterName ES集群的名称
     *  @param indexName ES的索引名称
     *  @param TypeName ES的类型名称
     *  @param port ES的连接端口
     *  @param length 设置获取数据的多少，length * 1024
     *
     * @param fs
     * @param dirName
     * @param hostIps
     * @param clusterName
     * @param indexName
     * @param typeName
     * @param port
     * @param length
     */
    public java.lang.String nosql2ES(java.lang.String fs, java.lang.String dirName, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int length) throws org.apache.thrift.TException;

    /**
     * 服务端导入字节流数组
     * @param fileType  文件类型
     * @param filePath  文件路径
     * @param hostIps   ES的IP
     * @param clusterName ES的集群名称
     * @param indexName  ES的索引名称
     * @param typeName  ES的类型名称
     * @param port    连接ES的端口
     * @param length  设置获取数据的多少，length * 1024
     *
     * @param fileType
     * @param filePath
     * @param hostIps
     * @param clusterName
     * @param indexName
     * @param typeName
     * @param port
     * @param length
     */
    public java.lang.String file2ES(int fileType, java.lang.String filePath, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int length) throws org.apache.thrift.TException;

    /**
     * 客户端导入二进制流
     * @param fileName  文件名称
     * @param fileDir  文件目录
     * @param hostIps   ES的IP
     * @param clusterName ES的集群名称
     * @param indexName  ES的索引名称
     * @param typeName  ES的类型名称
     * @param port    连接ES的端口
     * @param fileData  二进制字节流
     *
     * @param fileName
     * @param fileDir
     * @param hostIps
     * @param clusterName
     * @param indexName
     * @param typeName
     * @param port
     * @param fileData
     * @param fileType
     */
    public java.lang.String file2ESByBinary(java.lang.String fileName, java.lang.String fileDir, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, FileData fileData, int fileType) throws org.apache.thrift.TException;

    /**
     * excel数据导入
     * @param fileName  文件名称
     * @param fileDir  文件目录
     * @param hostIps   ES的IP
     * @param clusterName ES的集群名称
     * @param indexName  ES的索引名称
     * @param typeName  ES的类型名称
     * @param port    连接ES的端口
     * @param fileData  二进制字节流
     *
     * @param fileName
     * @param fileDir
     * @param hostIps
     * @param clusterName
     * @param indexName
     * @param typeName
     * @param port
     */
    public java.lang.String file2ESExcel(java.lang.String fileName, java.lang.String fileDir, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void nosql2ES(java.lang.String fs, java.lang.String dirName, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int length, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void file2ES(int fileType, java.lang.String filePath, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int length, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void file2ESByBinary(java.lang.String fileName, java.lang.String fileDir, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, FileData fileData, int fileType, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void file2ESExcel(java.lang.String fileName, java.lang.String fileDir, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String nosql2ES(java.lang.String fs, java.lang.String dirName, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int length) throws org.apache.thrift.TException
    {
      send_nosql2ES(fs, dirName, hostIps, clusterName, indexName, typeName, port, length);
      return recv_nosql2ES();
    }

    public void send_nosql2ES(java.lang.String fs, java.lang.String dirName, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int length) throws org.apache.thrift.TException
    {
      nosql2ES_args args = new nosql2ES_args();
      args.setFs(fs);
      args.setDirName(dirName);
      args.setHostIps(hostIps);
      args.setClusterName(clusterName);
      args.setIndexName(indexName);
      args.setTypeName(typeName);
      args.setPort(port);
      args.setLength(length);
      sendBase("nosql2ES", args);
    }

    public java.lang.String recv_nosql2ES() throws org.apache.thrift.TException
    {
      nosql2ES_result result = new nosql2ES_result();
      receiveBase(result, "nosql2ES");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "nosql2ES failed: unknown result");
    }

    public java.lang.String file2ES(int fileType, java.lang.String filePath, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int length) throws org.apache.thrift.TException
    {
      send_file2ES(fileType, filePath, hostIps, clusterName, indexName, typeName, port, length);
      return recv_file2ES();
    }

    public void send_file2ES(int fileType, java.lang.String filePath, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int length) throws org.apache.thrift.TException
    {
      file2ES_args args = new file2ES_args();
      args.setFileType(fileType);
      args.setFilePath(filePath);
      args.setHostIps(hostIps);
      args.setClusterName(clusterName);
      args.setIndexName(indexName);
      args.setTypeName(typeName);
      args.setPort(port);
      args.setLength(length);
      sendBase("file2ES", args);
    }

    public java.lang.String recv_file2ES() throws org.apache.thrift.TException
    {
      file2ES_result result = new file2ES_result();
      receiveBase(result, "file2ES");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "file2ES failed: unknown result");
    }

    public java.lang.String file2ESByBinary(java.lang.String fileName, java.lang.String fileDir, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, FileData fileData, int fileType) throws org.apache.thrift.TException
    {
      send_file2ESByBinary(fileName, fileDir, hostIps, clusterName, indexName, typeName, port, fileData, fileType);
      return recv_file2ESByBinary();
    }

    public void send_file2ESByBinary(java.lang.String fileName, java.lang.String fileDir, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, FileData fileData, int fileType) throws org.apache.thrift.TException
    {
      file2ESByBinary_args args = new file2ESByBinary_args();
      args.setFileName(fileName);
      args.setFileDir(fileDir);
      args.setHostIps(hostIps);
      args.setClusterName(clusterName);
      args.setIndexName(indexName);
      args.setTypeName(typeName);
      args.setPort(port);
      args.setFileData(fileData);
      args.setFileType(fileType);
      sendBase("file2ESByBinary", args);
    }

    public java.lang.String recv_file2ESByBinary() throws org.apache.thrift.TException
    {
      file2ESByBinary_result result = new file2ESByBinary_result();
      receiveBase(result, "file2ESByBinary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "file2ESByBinary failed: unknown result");
    }

    public java.lang.String file2ESExcel(java.lang.String fileName, java.lang.String fileDir, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port) throws org.apache.thrift.TException
    {
      send_file2ESExcel(fileName, fileDir, hostIps, clusterName, indexName, typeName, port);
      return recv_file2ESExcel();
    }

    public void send_file2ESExcel(java.lang.String fileName, java.lang.String fileDir, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port) throws org.apache.thrift.TException
    {
      file2ESExcel_args args = new file2ESExcel_args();
      args.setFileName(fileName);
      args.setFileDir(fileDir);
      args.setHostIps(hostIps);
      args.setClusterName(clusterName);
      args.setIndexName(indexName);
      args.setTypeName(typeName);
      args.setPort(port);
      sendBase("file2ESExcel", args);
    }

    public java.lang.String recv_file2ESExcel() throws org.apache.thrift.TException
    {
      file2ESExcel_result result = new file2ESExcel_result();
      receiveBase(result, "file2ESExcel");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "file2ESExcel failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void nosql2ES(java.lang.String fs, java.lang.String dirName, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int length, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      nosql2ES_call method_call = new nosql2ES_call(fs, dirName, hostIps, clusterName, indexName, typeName, port, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class nosql2ES_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String fs;
      private java.lang.String dirName;
      private java.lang.String hostIps;
      private java.lang.String clusterName;
      private java.lang.String indexName;
      private java.lang.String typeName;
      private int port;
      private int length;
      public nosql2ES_call(java.lang.String fs, java.lang.String dirName, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int length, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fs = fs;
        this.dirName = dirName;
        this.hostIps = hostIps;
        this.clusterName = clusterName;
        this.indexName = indexName;
        this.typeName = typeName;
        this.port = port;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("nosql2ES", org.apache.thrift.protocol.TMessageType.CALL, 0));
        nosql2ES_args args = new nosql2ES_args();
        args.setFs(fs);
        args.setDirName(dirName);
        args.setHostIps(hostIps);
        args.setClusterName(clusterName);
        args.setIndexName(indexName);
        args.setTypeName(typeName);
        args.setPort(port);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_nosql2ES();
      }
    }

    public void file2ES(int fileType, java.lang.String filePath, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int length, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      file2ES_call method_call = new file2ES_call(fileType, filePath, hostIps, clusterName, indexName, typeName, port, length, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class file2ES_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private int fileType;
      private java.lang.String filePath;
      private java.lang.String hostIps;
      private java.lang.String clusterName;
      private java.lang.String indexName;
      private java.lang.String typeName;
      private int port;
      private int length;
      public file2ES_call(int fileType, java.lang.String filePath, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int length, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileType = fileType;
        this.filePath = filePath;
        this.hostIps = hostIps;
        this.clusterName = clusterName;
        this.indexName = indexName;
        this.typeName = typeName;
        this.port = port;
        this.length = length;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("file2ES", org.apache.thrift.protocol.TMessageType.CALL, 0));
        file2ES_args args = new file2ES_args();
        args.setFileType(fileType);
        args.setFilePath(filePath);
        args.setHostIps(hostIps);
        args.setClusterName(clusterName);
        args.setIndexName(indexName);
        args.setTypeName(typeName);
        args.setPort(port);
        args.setLength(length);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_file2ES();
      }
    }

    public void file2ESByBinary(java.lang.String fileName, java.lang.String fileDir, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, FileData fileData, int fileType, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      file2ESByBinary_call method_call = new file2ESByBinary_call(fileName, fileDir, hostIps, clusterName, indexName, typeName, port, fileData, fileType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class file2ESByBinary_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String fileName;
      private java.lang.String fileDir;
      private java.lang.String hostIps;
      private java.lang.String clusterName;
      private java.lang.String indexName;
      private java.lang.String typeName;
      private int port;
      private FileData fileData;
      private int fileType;
      public file2ESByBinary_call(java.lang.String fileName, java.lang.String fileDir, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, FileData fileData, int fileType, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileName = fileName;
        this.fileDir = fileDir;
        this.hostIps = hostIps;
        this.clusterName = clusterName;
        this.indexName = indexName;
        this.typeName = typeName;
        this.port = port;
        this.fileData = fileData;
        this.fileType = fileType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("file2ESByBinary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        file2ESByBinary_args args = new file2ESByBinary_args();
        args.setFileName(fileName);
        args.setFileDir(fileDir);
        args.setHostIps(hostIps);
        args.setClusterName(clusterName);
        args.setIndexName(indexName);
        args.setTypeName(typeName);
        args.setPort(port);
        args.setFileData(fileData);
        args.setFileType(fileType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_file2ESByBinary();
      }
    }

    public void file2ESExcel(java.lang.String fileName, java.lang.String fileDir, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      file2ESExcel_call method_call = new file2ESExcel_call(fileName, fileDir, hostIps, clusterName, indexName, typeName, port, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class file2ESExcel_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String fileName;
      private java.lang.String fileDir;
      private java.lang.String hostIps;
      private java.lang.String clusterName;
      private java.lang.String indexName;
      private java.lang.String typeName;
      private int port;
      public file2ESExcel_call(java.lang.String fileName, java.lang.String fileDir, java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileName = fileName;
        this.fileDir = fileDir;
        this.hostIps = hostIps;
        this.clusterName = clusterName;
        this.indexName = indexName;
        this.typeName = typeName;
        this.port = port;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("file2ESExcel", org.apache.thrift.protocol.TMessageType.CALL, 0));
        file2ESExcel_args args = new file2ESExcel_args();
        args.setFileName(fileName);
        args.setFileDir(fileDir);
        args.setHostIps(hostIps);
        args.setClusterName(clusterName);
        args.setIndexName(indexName);
        args.setTypeName(typeName);
        args.setPort(port);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_file2ESExcel();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("nosql2ES", new nosql2ES());
      processMap.put("file2ES", new file2ES());
      processMap.put("file2ESByBinary", new file2ESByBinary());
      processMap.put("file2ESExcel", new file2ESExcel());
      return processMap;
    }

    public static class nosql2ES<I extends Iface> extends org.apache.thrift.ProcessFunction<I, nosql2ES_args> {
      public nosql2ES() {
        super("nosql2ES");
      }

      public nosql2ES_args getEmptyArgsInstance() {
        return new nosql2ES_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public nosql2ES_result getResult(I iface, nosql2ES_args args) throws org.apache.thrift.TException {
        nosql2ES_result result = new nosql2ES_result();
        result.success = iface.nosql2ES(args.fs, args.dirName, args.hostIps, args.clusterName, args.indexName, args.typeName, args.port, args.length);
        return result;
      }
    }

    public static class file2ES<I extends Iface> extends org.apache.thrift.ProcessFunction<I, file2ES_args> {
      public file2ES() {
        super("file2ES");
      }

      public file2ES_args getEmptyArgsInstance() {
        return new file2ES_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public file2ES_result getResult(I iface, file2ES_args args) throws org.apache.thrift.TException {
        file2ES_result result = new file2ES_result();
        result.success = iface.file2ES(args.fileType, args.filePath, args.hostIps, args.clusterName, args.indexName, args.typeName, args.port, args.length);
        return result;
      }
    }

    public static class file2ESByBinary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, file2ESByBinary_args> {
      public file2ESByBinary() {
        super("file2ESByBinary");
      }

      public file2ESByBinary_args getEmptyArgsInstance() {
        return new file2ESByBinary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public file2ESByBinary_result getResult(I iface, file2ESByBinary_args args) throws org.apache.thrift.TException {
        file2ESByBinary_result result = new file2ESByBinary_result();
        result.success = iface.file2ESByBinary(args.fileName, args.fileDir, args.hostIps, args.clusterName, args.indexName, args.typeName, args.port, args.fileData, args.fileType);
        return result;
      }
    }

    public static class file2ESExcel<I extends Iface> extends org.apache.thrift.ProcessFunction<I, file2ESExcel_args> {
      public file2ESExcel() {
        super("file2ESExcel");
      }

      public file2ESExcel_args getEmptyArgsInstance() {
        return new file2ESExcel_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public file2ESExcel_result getResult(I iface, file2ESExcel_args args) throws org.apache.thrift.TException {
        file2ESExcel_result result = new file2ESExcel_result();
        result.success = iface.file2ESExcel(args.fileName, args.fileDir, args.hostIps, args.clusterName, args.indexName, args.typeName, args.port);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("nosql2ES", new nosql2ES());
      processMap.put("file2ES", new file2ES());
      processMap.put("file2ESByBinary", new file2ESByBinary());
      processMap.put("file2ESExcel", new file2ESExcel());
      return processMap;
    }

    public static class nosql2ES<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, nosql2ES_args, java.lang.String> {
      public nosql2ES() {
        super("nosql2ES");
      }

      public nosql2ES_args getEmptyArgsInstance() {
        return new nosql2ES_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
          public void onComplete(java.lang.String o) {
            nosql2ES_result result = new nosql2ES_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            nosql2ES_result result = new nosql2ES_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, nosql2ES_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.nosql2ES(args.fs, args.dirName, args.hostIps, args.clusterName, args.indexName, args.typeName, args.port, args.length,resultHandler);
      }
    }

    public static class file2ES<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, file2ES_args, java.lang.String> {
      public file2ES() {
        super("file2ES");
      }

      public file2ES_args getEmptyArgsInstance() {
        return new file2ES_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
          public void onComplete(java.lang.String o) {
            file2ES_result result = new file2ES_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            file2ES_result result = new file2ES_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, file2ES_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.file2ES(args.fileType, args.filePath, args.hostIps, args.clusterName, args.indexName, args.typeName, args.port, args.length,resultHandler);
      }
    }

    public static class file2ESByBinary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, file2ESByBinary_args, java.lang.String> {
      public file2ESByBinary() {
        super("file2ESByBinary");
      }

      public file2ESByBinary_args getEmptyArgsInstance() {
        return new file2ESByBinary_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
          public void onComplete(java.lang.String o) {
            file2ESByBinary_result result = new file2ESByBinary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            file2ESByBinary_result result = new file2ESByBinary_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, file2ESByBinary_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.file2ESByBinary(args.fileName, args.fileDir, args.hostIps, args.clusterName, args.indexName, args.typeName, args.port, args.fileData, args.fileType,resultHandler);
      }
    }

    public static class file2ESExcel<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, file2ESExcel_args, java.lang.String> {
      public file2ESExcel() {
        super("file2ESExcel");
      }

      public file2ESExcel_args getEmptyArgsInstance() {
        return new file2ESExcel_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() {
          public void onComplete(java.lang.String o) {
            file2ESExcel_result result = new file2ESExcel_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            file2ESExcel_result result = new file2ESExcel_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, file2ESExcel_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.file2ESExcel(args.fileName, args.fileDir, args.hostIps, args.clusterName, args.indexName, args.typeName, args.port,resultHandler);
      }
    }

  }

  public static class nosql2ES_args implements org.apache.thrift.TBase<nosql2ES_args, nosql2ES_args._Fields>, java.io.Serializable, Cloneable, Comparable<nosql2ES_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("nosql2ES_args");

    private static final org.apache.thrift.protocol.TField FS_FIELD_DESC = new org.apache.thrift.protocol.TField("fs", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("dirName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField HOST_IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIps", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("indexName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new nosql2ES_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new nosql2ES_argsTupleSchemeFactory();

    public java.lang.String fs; // required
    public java.lang.String dirName; // required
    public java.lang.String hostIps; // required
    public java.lang.String clusterName; // required
    public java.lang.String indexName; // required
    public java.lang.String typeName; // required
    public int port; // required
    public int length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FS((short)1, "fs"),
      DIR_NAME((short)2, "dirName"),
      HOST_IPS((short)3, "hostIps"),
      CLUSTER_NAME((short)4, "clusterName"),
      INDEX_NAME((short)5, "indexName"),
      TYPE_NAME((short)6, "typeName"),
      PORT((short)7, "port"),
      LENGTH((short)8, "length");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FS
            return FS;
          case 2: // DIR_NAME
            return DIR_NAME;
          case 3: // HOST_IPS
            return HOST_IPS;
          case 4: // CLUSTER_NAME
            return CLUSTER_NAME;
          case 5: // INDEX_NAME
            return INDEX_NAME;
          case 6: // TYPE_NAME
            return TYPE_NAME;
          case 7: // PORT
            return PORT;
          case 8: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __LENGTH_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FS, new org.apache.thrift.meta_data.FieldMetaData("fs", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("dirName", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_IPS, new org.apache.thrift.meta_data.FieldMetaData("hostIps", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("clusterName", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("indexName", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(nosql2ES_args.class, metaDataMap);
    }

    public nosql2ES_args() {
    }

    public nosql2ES_args(
            java.lang.String fs,
            java.lang.String dirName,
            java.lang.String hostIps,
            java.lang.String clusterName,
            java.lang.String indexName,
            java.lang.String typeName,
            int port,
            int length)
    {
      this();
      this.fs = fs;
      this.dirName = dirName;
      this.hostIps = hostIps;
      this.clusterName = clusterName;
      this.indexName = indexName;
      this.typeName = typeName;
      this.port = port;
      setPortIsSet(true);
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public nosql2ES_args(nosql2ES_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFs()) {
        this.fs = other.fs;
      }
      if (other.isSetDirName()) {
        this.dirName = other.dirName;
      }
      if (other.isSetHostIps()) {
        this.hostIps = other.hostIps;
      }
      if (other.isSetClusterName()) {
        this.clusterName = other.clusterName;
      }
      if (other.isSetIndexName()) {
        this.indexName = other.indexName;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      this.port = other.port;
      this.length = other.length;
    }

    public nosql2ES_args deepCopy() {
      return new nosql2ES_args(this);
    }

    @Override
    public void clear() {
      this.fs = null;
      this.dirName = null;
      this.hostIps = null;
      this.clusterName = null;
      this.indexName = null;
      this.typeName = null;
      setPortIsSet(false);
      this.port = 0;
      setLengthIsSet(false);
      this.length = 0;
    }

    public java.lang.String getFs() {
      return this.fs;
    }

    public nosql2ES_args setFs(java.lang.String fs) {
      this.fs = fs;
      return this;
    }

    public void unsetFs() {
      this.fs = null;
    }

    /** Returns true if field fs is set (has been assigned a value) and false otherwise */
    public boolean isSetFs() {
      return this.fs != null;
    }

    public void setFsIsSet(boolean value) {
      if (!value) {
        this.fs = null;
      }
    }

    public java.lang.String getDirName() {
      return this.dirName;
    }

    public nosql2ES_args setDirName(java.lang.String dirName) {
      this.dirName = dirName;
      return this;
    }

    public void unsetDirName() {
      this.dirName = null;
    }

    /** Returns true if field dirName is set (has been assigned a value) and false otherwise */
    public boolean isSetDirName() {
      return this.dirName != null;
    }

    public void setDirNameIsSet(boolean value) {
      if (!value) {
        this.dirName = null;
      }
    }

    public java.lang.String getHostIps() {
      return this.hostIps;
    }

    public nosql2ES_args setHostIps(java.lang.String hostIps) {
      this.hostIps = hostIps;
      return this;
    }

    public void unsetHostIps() {
      this.hostIps = null;
    }

    /** Returns true if field hostIps is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIps() {
      return this.hostIps != null;
    }

    public void setHostIpsIsSet(boolean value) {
      if (!value) {
        this.hostIps = null;
      }
    }

    public java.lang.String getClusterName() {
      return this.clusterName;
    }

    public nosql2ES_args setClusterName(java.lang.String clusterName) {
      this.clusterName = clusterName;
      return this;
    }

    public void unsetClusterName() {
      this.clusterName = null;
    }

    /** Returns true if field clusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterName() {
      return this.clusterName != null;
    }

    public void setClusterNameIsSet(boolean value) {
      if (!value) {
        this.clusterName = null;
      }
    }

    public java.lang.String getIndexName() {
      return this.indexName;
    }

    public nosql2ES_args setIndexName(java.lang.String indexName) {
      this.indexName = indexName;
      return this;
    }

    public void unsetIndexName() {
      this.indexName = null;
    }

    /** Returns true if field indexName is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexName() {
      return this.indexName != null;
    }

    public void setIndexNameIsSet(boolean value) {
      if (!value) {
        this.indexName = null;
      }
    }

    public java.lang.String getTypeName() {
      return this.typeName;
    }

    public nosql2ES_args setTypeName(java.lang.String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public nosql2ES_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public int getLength() {
      return this.length;
    }

    public nosql2ES_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case FS:
          if (value == null) {
            unsetFs();
          } else {
            setFs((java.lang.String)value);
          }
          break;

        case DIR_NAME:
          if (value == null) {
            unsetDirName();
          } else {
            setDirName((java.lang.String)value);
          }
          break;

        case HOST_IPS:
          if (value == null) {
            unsetHostIps();
          } else {
            setHostIps((java.lang.String)value);
          }
          break;

        case CLUSTER_NAME:
          if (value == null) {
            unsetClusterName();
          } else {
            setClusterName((java.lang.String)value);
          }
          break;

        case INDEX_NAME:
          if (value == null) {
            unsetIndexName();
          } else {
            setIndexName((java.lang.String)value);
          }
          break;

        case TYPE_NAME:
          if (value == null) {
            unsetTypeName();
          } else {
            setTypeName((java.lang.String)value);
          }
          break;

        case PORT:
          if (value == null) {
            unsetPort();
          } else {
            setPort((java.lang.Integer)value);
          }
          break;

        case LENGTH:
          if (value == null) {
            unsetLength();
          } else {
            setLength((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case FS:
          return getFs();

        case DIR_NAME:
          return getDirName();

        case HOST_IPS:
          return getHostIps();

        case CLUSTER_NAME:
          return getClusterName();

        case INDEX_NAME:
          return getIndexName();

        case TYPE_NAME:
          return getTypeName();

        case PORT:
          return getPort();

        case LENGTH:
          return getLength();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case FS:
          return isSetFs();
        case DIR_NAME:
          return isSetDirName();
        case HOST_IPS:
          return isSetHostIps();
        case CLUSTER_NAME:
          return isSetClusterName();
        case INDEX_NAME:
          return isSetIndexName();
        case TYPE_NAME:
          return isSetTypeName();
        case PORT:
          return isSetPort();
        case LENGTH:
          return isSetLength();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof nosql2ES_args)
        return this.equals((nosql2ES_args)that);
      return false;
    }

    public boolean equals(nosql2ES_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fs = true && this.isSetFs();
      boolean that_present_fs = true && that.isSetFs();
      if (this_present_fs || that_present_fs) {
        if (!(this_present_fs && that_present_fs))
          return false;
        if (!this.fs.equals(that.fs))
          return false;
      }

      boolean this_present_dirName = true && this.isSetDirName();
      boolean that_present_dirName = true && that.isSetDirName();
      if (this_present_dirName || that_present_dirName) {
        if (!(this_present_dirName && that_present_dirName))
          return false;
        if (!this.dirName.equals(that.dirName))
          return false;
      }

      boolean this_present_hostIps = true && this.isSetHostIps();
      boolean that_present_hostIps = true && that.isSetHostIps();
      if (this_present_hostIps || that_present_hostIps) {
        if (!(this_present_hostIps && that_present_hostIps))
          return false;
        if (!this.hostIps.equals(that.hostIps))
          return false;
      }

      boolean this_present_clusterName = true && this.isSetClusterName();
      boolean that_present_clusterName = true && that.isSetClusterName();
      if (this_present_clusterName || that_present_clusterName) {
        if (!(this_present_clusterName && that_present_clusterName))
          return false;
        if (!this.clusterName.equals(that.clusterName))
          return false;
      }

      boolean this_present_indexName = true && this.isSetIndexName();
      boolean that_present_indexName = true && that.isSetIndexName();
      if (this_present_indexName || that_present_indexName) {
        if (!(this_present_indexName && that_present_indexName))
          return false;
        if (!this.indexName.equals(that.indexName))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFs()) ? 131071 : 524287);
      if (isSetFs())
        hashCode = hashCode * 8191 + fs.hashCode();

      hashCode = hashCode * 8191 + ((isSetDirName()) ? 131071 : 524287);
      if (isSetDirName())
        hashCode = hashCode * 8191 + dirName.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostIps()) ? 131071 : 524287);
      if (isSetHostIps())
        hashCode = hashCode * 8191 + hostIps.hashCode();

      hashCode = hashCode * 8191 + ((isSetClusterName()) ? 131071 : 524287);
      if (isSetClusterName())
        hashCode = hashCode * 8191 + clusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIndexName()) ? 131071 : 524287);
      if (isSetIndexName())
        hashCode = hashCode * 8191 + indexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypeName()) ? 131071 : 524287);
      if (isSetTypeName())
        hashCode = hashCode * 8191 + typeName.hashCode();

      hashCode = hashCode * 8191 + port;

      hashCode = hashCode * 8191 + length;

      return hashCode;
    }

    @Override
    public int compareTo(nosql2ES_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFs()).compareTo(other.isSetFs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fs, other.fs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDirName()).compareTo(other.isSetDirName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDirName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dirName, other.dirName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHostIps()).compareTo(other.isSetHostIps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIps, other.hostIps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClusterName()).compareTo(other.isSetClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterName, other.clusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIndexName()).compareTo(other.isSetIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexName, other.indexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("nosql2ES_args(");
      boolean first = true;

      sb.append("fs:");
      if (this.fs == null) {
        sb.append("null");
      } else {
        sb.append(this.fs);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dirName:");
      if (this.dirName == null) {
        sb.append("null");
      } else {
        sb.append(this.dirName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostIps:");
      if (this.hostIps == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIps);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clusterName:");
      if (this.clusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexName:");
      if (this.indexName == null) {
        sb.append("null");
      } else {
        sb.append(this.indexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class nosql2ES_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public nosql2ES_argsStandardScheme getScheme() {
        return new nosql2ES_argsStandardScheme();
      }
    }

    private static class nosql2ES_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<nosql2ES_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, nosql2ES_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // FS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fs = iprot.readString();
                struct.setFsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DIR_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dirName = iprot.readString();
                struct.setDirNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HOST_IPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIps = iprot.readString();
                struct.setHostIpsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterName = iprot.readString();
                struct.setClusterNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.indexName = iprot.readString();
                struct.setIndexNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.length = iprot.readI32();
                struct.setLengthIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, nosql2ES_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fs != null) {
          oprot.writeFieldBegin(FS_FIELD_DESC);
          oprot.writeString(struct.fs);
          oprot.writeFieldEnd();
        }
        if (struct.dirName != null) {
          oprot.writeFieldBegin(DIR_NAME_FIELD_DESC);
          oprot.writeString(struct.dirName);
          oprot.writeFieldEnd();
        }
        if (struct.hostIps != null) {
          oprot.writeFieldBegin(HOST_IPS_FIELD_DESC);
          oprot.writeString(struct.hostIps);
          oprot.writeFieldEnd();
        }
        if (struct.clusterName != null) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.clusterName);
          oprot.writeFieldEnd();
        }
        if (struct.indexName != null) {
          oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.indexName);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class nosql2ES_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public nosql2ES_argsTupleScheme getScheme() {
        return new nosql2ES_argsTupleScheme();
      }
    }

    private static class nosql2ES_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<nosql2ES_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, nosql2ES_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFs()) {
          optionals.set(0);
        }
        if (struct.isSetDirName()) {
          optionals.set(1);
        }
        if (struct.isSetHostIps()) {
          optionals.set(2);
        }
        if (struct.isSetClusterName()) {
          optionals.set(3);
        }
        if (struct.isSetIndexName()) {
          optionals.set(4);
        }
        if (struct.isSetTypeName()) {
          optionals.set(5);
        }
        if (struct.isSetPort()) {
          optionals.set(6);
        }
        if (struct.isSetLength()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetFs()) {
          oprot.writeString(struct.fs);
        }
        if (struct.isSetDirName()) {
          oprot.writeString(struct.dirName);
        }
        if (struct.isSetHostIps()) {
          oprot.writeString(struct.hostIps);
        }
        if (struct.isSetClusterName()) {
          oprot.writeString(struct.clusterName);
        }
        if (struct.isSetIndexName()) {
          oprot.writeString(struct.indexName);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetLength()) {
          oprot.writeI32(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, nosql2ES_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.fs = iprot.readString();
          struct.setFsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dirName = iprot.readString();
          struct.setDirNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hostIps = iprot.readString();
          struct.setHostIpsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.clusterName = iprot.readString();
          struct.setClusterNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.indexName = iprot.readString();
          struct.setIndexNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(7)) {
          struct.length = iprot.readI32();
          struct.setLengthIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class nosql2ES_result implements org.apache.thrift.TBase<nosql2ES_result, nosql2ES_result._Fields>, java.io.Serializable, Cloneable, Comparable<nosql2ES_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("nosql2ES_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new nosql2ES_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new nosql2ES_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(nosql2ES_result.class, metaDataMap);
    }

    public nosql2ES_result() {
    }

    public nosql2ES_result(
            java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public nosql2ES_result(nosql2ES_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public nosql2ES_result deepCopy() {
      return new nosql2ES_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public nosql2ES_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((java.lang.String)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof nosql2ES_result)
        return this.equals((nosql2ES_result)that);
      return false;
    }

    public boolean equals(nosql2ES_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(nosql2ES_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("nosql2ES_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class nosql2ES_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public nosql2ES_resultStandardScheme getScheme() {
        return new nosql2ES_resultStandardScheme();
      }
    }

    private static class nosql2ES_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<nosql2ES_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, nosql2ES_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, nosql2ES_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class nosql2ES_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public nosql2ES_resultTupleScheme getScheme() {
        return new nosql2ES_resultTupleScheme();
      }
    }

    private static class nosql2ES_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<nosql2ES_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, nosql2ES_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, nosql2ES_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class file2ES_args implements org.apache.thrift.TBase<file2ES_args, file2ES_args._Fields>, java.io.Serializable, Cloneable, Comparable<file2ES_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("file2ES_args");

    private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("filePath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField HOST_IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIps", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("indexName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField LENGTH_FIELD_DESC = new org.apache.thrift.protocol.TField("length", org.apache.thrift.protocol.TType.I32, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new file2ES_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new file2ES_argsTupleSchemeFactory();

    public int fileType; // required
    public java.lang.String filePath; // required
    public java.lang.String hostIps; // required
    public java.lang.String clusterName; // required
    public java.lang.String indexName; // required
    public java.lang.String typeName; // required
    public int port; // required
    public int length; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_TYPE((short)1, "fileType"),
      FILE_PATH((short)2, "filePath"),
      HOST_IPS((short)3, "hostIps"),
      CLUSTER_NAME((short)4, "clusterName"),
      INDEX_NAME((short)5, "indexName"),
      TYPE_NAME((short)6, "typeName"),
      PORT((short)7, "port"),
      LENGTH((short)8, "length");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_TYPE
            return FILE_TYPE;
          case 2: // FILE_PATH
            return FILE_PATH;
          case 3: // HOST_IPS
            return HOST_IPS;
          case 4: // CLUSTER_NAME
            return CLUSTER_NAME;
          case 5: // INDEX_NAME
            return INDEX_NAME;
          case 6: // TYPE_NAME
            return TYPE_NAME;
          case 7: // PORT
            return PORT;
          case 8: // LENGTH
            return LENGTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FILETYPE_ISSET_ID = 0;
    private static final int __PORT_ISSET_ID = 1;
    private static final int __LENGTH_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.FILE_PATH, new org.apache.thrift.meta_data.FieldMetaData("filePath", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_IPS, new org.apache.thrift.meta_data.FieldMetaData("hostIps", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("clusterName", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("indexName", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.LENGTH, new org.apache.thrift.meta_data.FieldMetaData("length", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(file2ES_args.class, metaDataMap);
    }

    public file2ES_args() {
    }

    public file2ES_args(
            int fileType,
            java.lang.String filePath,
            java.lang.String hostIps,
            java.lang.String clusterName,
            java.lang.String indexName,
            java.lang.String typeName,
            int port,
            int length)
    {
      this();
      this.fileType = fileType;
      setFileTypeIsSet(true);
      this.filePath = filePath;
      this.hostIps = hostIps;
      this.clusterName = clusterName;
      this.indexName = indexName;
      this.typeName = typeName;
      this.port = port;
      setPortIsSet(true);
      this.length = length;
      setLengthIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public file2ES_args(file2ES_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.fileType = other.fileType;
      if (other.isSetFilePath()) {
        this.filePath = other.filePath;
      }
      if (other.isSetHostIps()) {
        this.hostIps = other.hostIps;
      }
      if (other.isSetClusterName()) {
        this.clusterName = other.clusterName;
      }
      if (other.isSetIndexName()) {
        this.indexName = other.indexName;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      this.port = other.port;
      this.length = other.length;
    }

    public file2ES_args deepCopy() {
      return new file2ES_args(this);
    }

    @Override
    public void clear() {
      setFileTypeIsSet(false);
      this.fileType = 0;
      this.filePath = null;
      this.hostIps = null;
      this.clusterName = null;
      this.indexName = null;
      this.typeName = null;
      setPortIsSet(false);
      this.port = 0;
      setLengthIsSet(false);
      this.length = 0;
    }

    public int getFileType() {
      return this.fileType;
    }

    public file2ES_args setFileType(int fileType) {
      this.fileType = fileType;
      setFileTypeIsSet(true);
      return this;
    }

    public void unsetFileType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILETYPE_ISSET_ID);
    }

    /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
    public boolean isSetFileType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILETYPE_ISSET_ID);
    }

    public void setFileTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILETYPE_ISSET_ID, value);
    }

    public java.lang.String getFilePath() {
      return this.filePath;
    }

    public file2ES_args setFilePath(java.lang.String filePath) {
      this.filePath = filePath;
      return this;
    }

    public void unsetFilePath() {
      this.filePath = null;
    }

    /** Returns true if field filePath is set (has been assigned a value) and false otherwise */
    public boolean isSetFilePath() {
      return this.filePath != null;
    }

    public void setFilePathIsSet(boolean value) {
      if (!value) {
        this.filePath = null;
      }
    }

    public java.lang.String getHostIps() {
      return this.hostIps;
    }

    public file2ES_args setHostIps(java.lang.String hostIps) {
      this.hostIps = hostIps;
      return this;
    }

    public void unsetHostIps() {
      this.hostIps = null;
    }

    /** Returns true if field hostIps is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIps() {
      return this.hostIps != null;
    }

    public void setHostIpsIsSet(boolean value) {
      if (!value) {
        this.hostIps = null;
      }
    }

    public java.lang.String getClusterName() {
      return this.clusterName;
    }

    public file2ES_args setClusterName(java.lang.String clusterName) {
      this.clusterName = clusterName;
      return this;
    }

    public void unsetClusterName() {
      this.clusterName = null;
    }

    /** Returns true if field clusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterName() {
      return this.clusterName != null;
    }

    public void setClusterNameIsSet(boolean value) {
      if (!value) {
        this.clusterName = null;
      }
    }

    public java.lang.String getIndexName() {
      return this.indexName;
    }

    public file2ES_args setIndexName(java.lang.String indexName) {
      this.indexName = indexName;
      return this;
    }

    public void unsetIndexName() {
      this.indexName = null;
    }

    /** Returns true if field indexName is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexName() {
      return this.indexName != null;
    }

    public void setIndexNameIsSet(boolean value) {
      if (!value) {
        this.indexName = null;
      }
    }

    public java.lang.String getTypeName() {
      return this.typeName;
    }

    public file2ES_args setTypeName(java.lang.String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public file2ES_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public int getLength() {
      return this.length;
    }

    public file2ES_args setLength(int length) {
      this.length = length;
      setLengthIsSet(true);
      return this;
    }

    public void unsetLength() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    /** Returns true if field length is set (has been assigned a value) and false otherwise */
    public boolean isSetLength() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LENGTH_ISSET_ID);
    }

    public void setLengthIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LENGTH_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case FILE_TYPE:
          if (value == null) {
            unsetFileType();
          } else {
            setFileType((java.lang.Integer)value);
          }
          break;

        case FILE_PATH:
          if (value == null) {
            unsetFilePath();
          } else {
            setFilePath((java.lang.String)value);
          }
          break;

        case HOST_IPS:
          if (value == null) {
            unsetHostIps();
          } else {
            setHostIps((java.lang.String)value);
          }
          break;

        case CLUSTER_NAME:
          if (value == null) {
            unsetClusterName();
          } else {
            setClusterName((java.lang.String)value);
          }
          break;

        case INDEX_NAME:
          if (value == null) {
            unsetIndexName();
          } else {
            setIndexName((java.lang.String)value);
          }
          break;

        case TYPE_NAME:
          if (value == null) {
            unsetTypeName();
          } else {
            setTypeName((java.lang.String)value);
          }
          break;

        case PORT:
          if (value == null) {
            unsetPort();
          } else {
            setPort((java.lang.Integer)value);
          }
          break;

        case LENGTH:
          if (value == null) {
            unsetLength();
          } else {
            setLength((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case FILE_TYPE:
          return getFileType();

        case FILE_PATH:
          return getFilePath();

        case HOST_IPS:
          return getHostIps();

        case CLUSTER_NAME:
          return getClusterName();

        case INDEX_NAME:
          return getIndexName();

        case TYPE_NAME:
          return getTypeName();

        case PORT:
          return getPort();

        case LENGTH:
          return getLength();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case FILE_TYPE:
          return isSetFileType();
        case FILE_PATH:
          return isSetFilePath();
        case HOST_IPS:
          return isSetHostIps();
        case CLUSTER_NAME:
          return isSetClusterName();
        case INDEX_NAME:
          return isSetIndexName();
        case TYPE_NAME:
          return isSetTypeName();
        case PORT:
          return isSetPort();
        case LENGTH:
          return isSetLength();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof file2ES_args)
        return this.equals((file2ES_args)that);
      return false;
    }

    public boolean equals(file2ES_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fileType = true;
      boolean that_present_fileType = true;
      if (this_present_fileType || that_present_fileType) {
        if (!(this_present_fileType && that_present_fileType))
          return false;
        if (this.fileType != that.fileType)
          return false;
      }

      boolean this_present_filePath = true && this.isSetFilePath();
      boolean that_present_filePath = true && that.isSetFilePath();
      if (this_present_filePath || that_present_filePath) {
        if (!(this_present_filePath && that_present_filePath))
          return false;
        if (!this.filePath.equals(that.filePath))
          return false;
      }

      boolean this_present_hostIps = true && this.isSetHostIps();
      boolean that_present_hostIps = true && that.isSetHostIps();
      if (this_present_hostIps || that_present_hostIps) {
        if (!(this_present_hostIps && that_present_hostIps))
          return false;
        if (!this.hostIps.equals(that.hostIps))
          return false;
      }

      boolean this_present_clusterName = true && this.isSetClusterName();
      boolean that_present_clusterName = true && that.isSetClusterName();
      if (this_present_clusterName || that_present_clusterName) {
        if (!(this_present_clusterName && that_present_clusterName))
          return false;
        if (!this.clusterName.equals(that.clusterName))
          return false;
      }

      boolean this_present_indexName = true && this.isSetIndexName();
      boolean that_present_indexName = true && that.isSetIndexName();
      if (this_present_indexName || that_present_indexName) {
        if (!(this_present_indexName && that_present_indexName))
          return false;
        if (!this.indexName.equals(that.indexName))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + fileType;

      hashCode = hashCode * 8191 + ((isSetFilePath()) ? 131071 : 524287);
      if (isSetFilePath())
        hashCode = hashCode * 8191 + filePath.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostIps()) ? 131071 : 524287);
      if (isSetHostIps())
        hashCode = hashCode * 8191 + hostIps.hashCode();

      hashCode = hashCode * 8191 + ((isSetClusterName()) ? 131071 : 524287);
      if (isSetClusterName())
        hashCode = hashCode * 8191 + clusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIndexName()) ? 131071 : 524287);
      if (isSetIndexName())
        hashCode = hashCode * 8191 + indexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypeName()) ? 131071 : 524287);
      if (isSetTypeName())
        hashCode = hashCode * 8191 + typeName.hashCode();

      hashCode = hashCode * 8191 + port;

      hashCode = hashCode * 8191 + length;

      return hashCode;
    }

    @Override
    public int compareTo(file2ES_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFileType()).compareTo(other.isSetFileType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFilePath()).compareTo(other.isSetFilePath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilePath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filePath, other.filePath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHostIps()).compareTo(other.isSetHostIps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIps, other.hostIps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClusterName()).compareTo(other.isSetClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterName, other.clusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIndexName()).compareTo(other.isSetIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexName, other.indexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLength()).compareTo(other.isSetLength());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLength()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.length, other.length);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("file2ES_args(");
      boolean first = true;

      sb.append("fileType:");
      sb.append(this.fileType);
      first = false;
      if (!first) sb.append(", ");
      sb.append("filePath:");
      if (this.filePath == null) {
        sb.append("null");
      } else {
        sb.append(this.filePath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostIps:");
      if (this.hostIps == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIps);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clusterName:");
      if (this.clusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexName:");
      if (this.indexName == null) {
        sb.append("null");
      } else {
        sb.append(this.indexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class file2ES_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public file2ES_argsStandardScheme getScheme() {
        return new file2ES_argsStandardScheme();
      }
    }

    private static class file2ES_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<file2ES_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, file2ES_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fileType = iprot.readI32();
                struct.setFileTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filePath = iprot.readString();
                struct.setFilePathIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HOST_IPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIps = iprot.readString();
                struct.setHostIpsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterName = iprot.readString();
                struct.setClusterNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.indexName = iprot.readString();
                struct.setIndexNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // LENGTH
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.length = iprot.readI32();
                struct.setLengthIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, file2ES_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.fileType);
        oprot.writeFieldEnd();
        if (struct.filePath != null) {
          oprot.writeFieldBegin(FILE_PATH_FIELD_DESC);
          oprot.writeString(struct.filePath);
          oprot.writeFieldEnd();
        }
        if (struct.hostIps != null) {
          oprot.writeFieldBegin(HOST_IPS_FIELD_DESC);
          oprot.writeString(struct.hostIps);
          oprot.writeFieldEnd();
        }
        if (struct.clusterName != null) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.clusterName);
          oprot.writeFieldEnd();
        }
        if (struct.indexName != null) {
          oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.indexName);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(LENGTH_FIELD_DESC);
        oprot.writeI32(struct.length);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class file2ES_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public file2ES_argsTupleScheme getScheme() {
        return new file2ES_argsTupleScheme();
      }
    }

    private static class file2ES_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<file2ES_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, file2ES_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFileType()) {
          optionals.set(0);
        }
        if (struct.isSetFilePath()) {
          optionals.set(1);
        }
        if (struct.isSetHostIps()) {
          optionals.set(2);
        }
        if (struct.isSetClusterName()) {
          optionals.set(3);
        }
        if (struct.isSetIndexName()) {
          optionals.set(4);
        }
        if (struct.isSetTypeName()) {
          optionals.set(5);
        }
        if (struct.isSetPort()) {
          optionals.set(6);
        }
        if (struct.isSetLength()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetFileType()) {
          oprot.writeI32(struct.fileType);
        }
        if (struct.isSetFilePath()) {
          oprot.writeString(struct.filePath);
        }
        if (struct.isSetHostIps()) {
          oprot.writeString(struct.hostIps);
        }
        if (struct.isSetClusterName()) {
          oprot.writeString(struct.clusterName);
        }
        if (struct.isSetIndexName()) {
          oprot.writeString(struct.indexName);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetLength()) {
          oprot.writeI32(struct.length);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, file2ES_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.fileType = iprot.readI32();
          struct.setFileTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.filePath = iprot.readString();
          struct.setFilePathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hostIps = iprot.readString();
          struct.setHostIpsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.clusterName = iprot.readString();
          struct.setClusterNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.indexName = iprot.readString();
          struct.setIndexNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(7)) {
          struct.length = iprot.readI32();
          struct.setLengthIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class file2ES_result implements org.apache.thrift.TBase<file2ES_result, file2ES_result._Fields>, java.io.Serializable, Cloneable, Comparable<file2ES_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("file2ES_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new file2ES_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new file2ES_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(file2ES_result.class, metaDataMap);
    }

    public file2ES_result() {
    }

    public file2ES_result(
            java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public file2ES_result(file2ES_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public file2ES_result deepCopy() {
      return new file2ES_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public file2ES_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((java.lang.String)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof file2ES_result)
        return this.equals((file2ES_result)that);
      return false;
    }

    public boolean equals(file2ES_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(file2ES_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("file2ES_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class file2ES_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public file2ES_resultStandardScheme getScheme() {
        return new file2ES_resultStandardScheme();
      }
    }

    private static class file2ES_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<file2ES_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, file2ES_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, file2ES_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class file2ES_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public file2ES_resultTupleScheme getScheme() {
        return new file2ES_resultTupleScheme();
      }
    }

    private static class file2ES_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<file2ES_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, file2ES_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, file2ES_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class file2ESByBinary_args implements org.apache.thrift.TBase<file2ESByBinary_args, file2ESByBinary_args._Fields>, java.io.Serializable, Cloneable, Comparable<file2ESByBinary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("file2ESByBinary_args");

    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("fileDir", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField HOST_IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIps", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("indexName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField FILE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("fileData", org.apache.thrift.protocol.TType.STRUCT, (short)8);
    private static final org.apache.thrift.protocol.TField FILE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileType", org.apache.thrift.protocol.TType.I32, (short)9);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new file2ESByBinary_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new file2ESByBinary_argsTupleSchemeFactory();

    public java.lang.String fileName; // required
    public java.lang.String fileDir; // required
    public java.lang.String hostIps; // required
    public java.lang.String clusterName; // required
    public java.lang.String indexName; // required
    public java.lang.String typeName; // required
    public int port; // required
    public FileData fileData; // required
    public int fileType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_NAME((short)1, "fileName"),
      FILE_DIR((short)2, "fileDir"),
      HOST_IPS((short)3, "hostIps"),
      CLUSTER_NAME((short)4, "clusterName"),
      INDEX_NAME((short)5, "indexName"),
      TYPE_NAME((short)6, "typeName"),
      PORT((short)7, "port"),
      FILE_DATA((short)8, "fileData"),
      FILE_TYPE((short)9, "fileType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_NAME
            return FILE_NAME;
          case 2: // FILE_DIR
            return FILE_DIR;
          case 3: // HOST_IPS
            return HOST_IPS;
          case 4: // CLUSTER_NAME
            return CLUSTER_NAME;
          case 5: // INDEX_NAME
            return INDEX_NAME;
          case 6: // TYPE_NAME
            return TYPE_NAME;
          case 7: // PORT
            return PORT;
          case 8: // FILE_DATA
            return FILE_DATA;
          case 9: // FILE_TYPE
            return FILE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __FILETYPE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_DIR, new org.apache.thrift.meta_data.FieldMetaData("fileDir", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_IPS, new org.apache.thrift.meta_data.FieldMetaData("hostIps", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("clusterName", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("indexName", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.FILE_DATA, new org.apache.thrift.meta_data.FieldMetaData("fileData", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileData.class)));
      tmpMap.put(_Fields.FILE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("fileType", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(file2ESByBinary_args.class, metaDataMap);
    }

    public file2ESByBinary_args() {
    }

    public file2ESByBinary_args(
            java.lang.String fileName,
            java.lang.String fileDir,
            java.lang.String hostIps,
            java.lang.String clusterName,
            java.lang.String indexName,
            java.lang.String typeName,
            int port,
            FileData fileData,
            int fileType)
    {
      this();
      this.fileName = fileName;
      this.fileDir = fileDir;
      this.hostIps = hostIps;
      this.clusterName = clusterName;
      this.indexName = indexName;
      this.typeName = typeName;
      this.port = port;
      setPortIsSet(true);
      this.fileData = fileData;
      this.fileType = fileType;
      setFileTypeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public file2ESByBinary_args(file2ESByBinary_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetFileDir()) {
        this.fileDir = other.fileDir;
      }
      if (other.isSetHostIps()) {
        this.hostIps = other.hostIps;
      }
      if (other.isSetClusterName()) {
        this.clusterName = other.clusterName;
      }
      if (other.isSetIndexName()) {
        this.indexName = other.indexName;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      this.port = other.port;
      if (other.isSetFileData()) {
        this.fileData = new FileData(other.fileData);
      }
      this.fileType = other.fileType;
    }

    public file2ESByBinary_args deepCopy() {
      return new file2ESByBinary_args(this);
    }

    @Override
    public void clear() {
      this.fileName = null;
      this.fileDir = null;
      this.hostIps = null;
      this.clusterName = null;
      this.indexName = null;
      this.typeName = null;
      setPortIsSet(false);
      this.port = 0;
      this.fileData = null;
      setFileTypeIsSet(false);
      this.fileType = 0;
    }

    public java.lang.String getFileName() {
      return this.fileName;
    }

    public file2ESByBinary_args setFileName(java.lang.String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public java.lang.String getFileDir() {
      return this.fileDir;
    }

    public file2ESByBinary_args setFileDir(java.lang.String fileDir) {
      this.fileDir = fileDir;
      return this;
    }

    public void unsetFileDir() {
      this.fileDir = null;
    }

    /** Returns true if field fileDir is set (has been assigned a value) and false otherwise */
    public boolean isSetFileDir() {
      return this.fileDir != null;
    }

    public void setFileDirIsSet(boolean value) {
      if (!value) {
        this.fileDir = null;
      }
    }

    public java.lang.String getHostIps() {
      return this.hostIps;
    }

    public file2ESByBinary_args setHostIps(java.lang.String hostIps) {
      this.hostIps = hostIps;
      return this;
    }

    public void unsetHostIps() {
      this.hostIps = null;
    }

    /** Returns true if field hostIps is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIps() {
      return this.hostIps != null;
    }

    public void setHostIpsIsSet(boolean value) {
      if (!value) {
        this.hostIps = null;
      }
    }

    public java.lang.String getClusterName() {
      return this.clusterName;
    }

    public file2ESByBinary_args setClusterName(java.lang.String clusterName) {
      this.clusterName = clusterName;
      return this;
    }

    public void unsetClusterName() {
      this.clusterName = null;
    }

    /** Returns true if field clusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterName() {
      return this.clusterName != null;
    }

    public void setClusterNameIsSet(boolean value) {
      if (!value) {
        this.clusterName = null;
      }
    }

    public java.lang.String getIndexName() {
      return this.indexName;
    }

    public file2ESByBinary_args setIndexName(java.lang.String indexName) {
      this.indexName = indexName;
      return this;
    }

    public void unsetIndexName() {
      this.indexName = null;
    }

    /** Returns true if field indexName is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexName() {
      return this.indexName != null;
    }

    public void setIndexNameIsSet(boolean value) {
      if (!value) {
        this.indexName = null;
      }
    }

    public java.lang.String getTypeName() {
      return this.typeName;
    }

    public file2ESByBinary_args setTypeName(java.lang.String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public file2ESByBinary_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public FileData getFileData() {
      return this.fileData;
    }

    public file2ESByBinary_args setFileData(FileData fileData) {
      this.fileData = fileData;
      return this;
    }

    public void unsetFileData() {
      this.fileData = null;
    }

    /** Returns true if field fileData is set (has been assigned a value) and false otherwise */
    public boolean isSetFileData() {
      return this.fileData != null;
    }

    public void setFileDataIsSet(boolean value) {
      if (!value) {
        this.fileData = null;
      }
    }

    public int getFileType() {
      return this.fileType;
    }

    public file2ESByBinary_args setFileType(int fileType) {
      this.fileType = fileType;
      setFileTypeIsSet(true);
      return this;
    }

    public void unsetFileType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILETYPE_ISSET_ID);
    }

    /** Returns true if field fileType is set (has been assigned a value) and false otherwise */
    public boolean isSetFileType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILETYPE_ISSET_ID);
    }

    public void setFileTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILETYPE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case FILE_NAME:
          if (value == null) {
            unsetFileName();
          } else {
            setFileName((java.lang.String)value);
          }
          break;

        case FILE_DIR:
          if (value == null) {
            unsetFileDir();
          } else {
            setFileDir((java.lang.String)value);
          }
          break;

        case HOST_IPS:
          if (value == null) {
            unsetHostIps();
          } else {
            setHostIps((java.lang.String)value);
          }
          break;

        case CLUSTER_NAME:
          if (value == null) {
            unsetClusterName();
          } else {
            setClusterName((java.lang.String)value);
          }
          break;

        case INDEX_NAME:
          if (value == null) {
            unsetIndexName();
          } else {
            setIndexName((java.lang.String)value);
          }
          break;

        case TYPE_NAME:
          if (value == null) {
            unsetTypeName();
          } else {
            setTypeName((java.lang.String)value);
          }
          break;

        case PORT:
          if (value == null) {
            unsetPort();
          } else {
            setPort((java.lang.Integer)value);
          }
          break;

        case FILE_DATA:
          if (value == null) {
            unsetFileData();
          } else {
            setFileData((FileData)value);
          }
          break;

        case FILE_TYPE:
          if (value == null) {
            unsetFileType();
          } else {
            setFileType((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case FILE_NAME:
          return getFileName();

        case FILE_DIR:
          return getFileDir();

        case HOST_IPS:
          return getHostIps();

        case CLUSTER_NAME:
          return getClusterName();

        case INDEX_NAME:
          return getIndexName();

        case TYPE_NAME:
          return getTypeName();

        case PORT:
          return getPort();

        case FILE_DATA:
          return getFileData();

        case FILE_TYPE:
          return getFileType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case FILE_NAME:
          return isSetFileName();
        case FILE_DIR:
          return isSetFileDir();
        case HOST_IPS:
          return isSetHostIps();
        case CLUSTER_NAME:
          return isSetClusterName();
        case INDEX_NAME:
          return isSetIndexName();
        case TYPE_NAME:
          return isSetTypeName();
        case PORT:
          return isSetPort();
        case FILE_DATA:
          return isSetFileData();
        case FILE_TYPE:
          return isSetFileType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof file2ESByBinary_args)
        return this.equals((file2ESByBinary_args)that);
      return false;
    }

    public boolean equals(file2ESByBinary_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_fileDir = true && this.isSetFileDir();
      boolean that_present_fileDir = true && that.isSetFileDir();
      if (this_present_fileDir || that_present_fileDir) {
        if (!(this_present_fileDir && that_present_fileDir))
          return false;
        if (!this.fileDir.equals(that.fileDir))
          return false;
      }

      boolean this_present_hostIps = true && this.isSetHostIps();
      boolean that_present_hostIps = true && that.isSetHostIps();
      if (this_present_hostIps || that_present_hostIps) {
        if (!(this_present_hostIps && that_present_hostIps))
          return false;
        if (!this.hostIps.equals(that.hostIps))
          return false;
      }

      boolean this_present_clusterName = true && this.isSetClusterName();
      boolean that_present_clusterName = true && that.isSetClusterName();
      if (this_present_clusterName || that_present_clusterName) {
        if (!(this_present_clusterName && that_present_clusterName))
          return false;
        if (!this.clusterName.equals(that.clusterName))
          return false;
      }

      boolean this_present_indexName = true && this.isSetIndexName();
      boolean that_present_indexName = true && that.isSetIndexName();
      if (this_present_indexName || that_present_indexName) {
        if (!(this_present_indexName && that_present_indexName))
          return false;
        if (!this.indexName.equals(that.indexName))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_fileData = true && this.isSetFileData();
      boolean that_present_fileData = true && that.isSetFileData();
      if (this_present_fileData || that_present_fileData) {
        if (!(this_present_fileData && that_present_fileData))
          return false;
        if (!this.fileData.equals(that.fileData))
          return false;
      }

      boolean this_present_fileType = true;
      boolean that_present_fileType = true;
      if (this_present_fileType || that_present_fileType) {
        if (!(this_present_fileType && that_present_fileType))
          return false;
        if (this.fileType != that.fileType)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
      if (isSetFileName())
        hashCode = hashCode * 8191 + fileName.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileDir()) ? 131071 : 524287);
      if (isSetFileDir())
        hashCode = hashCode * 8191 + fileDir.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostIps()) ? 131071 : 524287);
      if (isSetHostIps())
        hashCode = hashCode * 8191 + hostIps.hashCode();

      hashCode = hashCode * 8191 + ((isSetClusterName()) ? 131071 : 524287);
      if (isSetClusterName())
        hashCode = hashCode * 8191 + clusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIndexName()) ? 131071 : 524287);
      if (isSetIndexName())
        hashCode = hashCode * 8191 + indexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypeName()) ? 131071 : 524287);
      if (isSetTypeName())
        hashCode = hashCode * 8191 + typeName.hashCode();

      hashCode = hashCode * 8191 + port;

      hashCode = hashCode * 8191 + ((isSetFileData()) ? 131071 : 524287);
      if (isSetFileData())
        hashCode = hashCode * 8191 + fileData.hashCode();

      hashCode = hashCode * 8191 + fileType;

      return hashCode;
    }

    @Override
    public int compareTo(file2ESByBinary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileDir()).compareTo(other.isSetFileDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileDir, other.fileDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHostIps()).compareTo(other.isSetHostIps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIps, other.hostIps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClusterName()).compareTo(other.isSetClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterName, other.clusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIndexName()).compareTo(other.isSetIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexName, other.indexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileData()).compareTo(other.isSetFileData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileData, other.fileData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileType()).compareTo(other.isSetFileType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileType, other.fileType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("file2ESByBinary_args(");
      boolean first = true;

      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileDir:");
      if (this.fileDir == null) {
        sb.append("null");
      } else {
        sb.append(this.fileDir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostIps:");
      if (this.hostIps == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIps);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clusterName:");
      if (this.clusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexName:");
      if (this.indexName == null) {
        sb.append("null");
      } else {
        sb.append(this.indexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileData:");
      if (this.fileData == null) {
        sb.append("null");
      } else {
        sb.append(this.fileData);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileType:");
      sb.append(this.fileType);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (fileData != null) {
        fileData.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class file2ESByBinary_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public file2ESByBinary_argsStandardScheme getScheme() {
        return new file2ESByBinary_argsStandardScheme();
      }
    }

    private static class file2ESByBinary_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<file2ESByBinary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, file2ESByBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileDir = iprot.readString();
                struct.setFileDirIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HOST_IPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIps = iprot.readString();
                struct.setHostIpsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterName = iprot.readString();
                struct.setClusterNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.indexName = iprot.readString();
                struct.setIndexNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // FILE_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fileData = new FileData();
                struct.fileData.read(iprot);
                struct.setFileDataIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // FILE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.fileType = iprot.readI32();
                struct.setFileTypeIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, file2ESByBinary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.fileDir != null) {
          oprot.writeFieldBegin(FILE_DIR_FIELD_DESC);
          oprot.writeString(struct.fileDir);
          oprot.writeFieldEnd();
        }
        if (struct.hostIps != null) {
          oprot.writeFieldBegin(HOST_IPS_FIELD_DESC);
          oprot.writeString(struct.hostIps);
          oprot.writeFieldEnd();
        }
        if (struct.clusterName != null) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.clusterName);
          oprot.writeFieldEnd();
        }
        if (struct.indexName != null) {
          oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.indexName);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        if (struct.fileData != null) {
          oprot.writeFieldBegin(FILE_DATA_FIELD_DESC);
          struct.fileData.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(FILE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.fileType);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class file2ESByBinary_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public file2ESByBinary_argsTupleScheme getScheme() {
        return new file2ESByBinary_argsTupleScheme();
      }
    }

    private static class file2ESByBinary_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<file2ESByBinary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, file2ESByBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFileName()) {
          optionals.set(0);
        }
        if (struct.isSetFileDir()) {
          optionals.set(1);
        }
        if (struct.isSetHostIps()) {
          optionals.set(2);
        }
        if (struct.isSetClusterName()) {
          optionals.set(3);
        }
        if (struct.isSetIndexName()) {
          optionals.set(4);
        }
        if (struct.isSetTypeName()) {
          optionals.set(5);
        }
        if (struct.isSetPort()) {
          optionals.set(6);
        }
        if (struct.isSetFileData()) {
          optionals.set(7);
        }
        if (struct.isSetFileType()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetFileDir()) {
          oprot.writeString(struct.fileDir);
        }
        if (struct.isSetHostIps()) {
          oprot.writeString(struct.hostIps);
        }
        if (struct.isSetClusterName()) {
          oprot.writeString(struct.clusterName);
        }
        if (struct.isSetIndexName()) {
          oprot.writeString(struct.indexName);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetFileData()) {
          struct.fileData.write(oprot);
        }
        if (struct.isSetFileType()) {
          oprot.writeI32(struct.fileType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, file2ESByBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileDir = iprot.readString();
          struct.setFileDirIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hostIps = iprot.readString();
          struct.setHostIpsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.clusterName = iprot.readString();
          struct.setClusterNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.indexName = iprot.readString();
          struct.setIndexNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(7)) {
          struct.fileData = new FileData();
          struct.fileData.read(iprot);
          struct.setFileDataIsSet(true);
        }
        if (incoming.get(8)) {
          struct.fileType = iprot.readI32();
          struct.setFileTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class file2ESByBinary_result implements org.apache.thrift.TBase<file2ESByBinary_result, file2ESByBinary_result._Fields>, java.io.Serializable, Cloneable, Comparable<file2ESByBinary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("file2ESByBinary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new file2ESByBinary_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new file2ESByBinary_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(file2ESByBinary_result.class, metaDataMap);
    }

    public file2ESByBinary_result() {
    }

    public file2ESByBinary_result(
            java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public file2ESByBinary_result(file2ESByBinary_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public file2ESByBinary_result deepCopy() {
      return new file2ESByBinary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public file2ESByBinary_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((java.lang.String)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof file2ESByBinary_result)
        return this.equals((file2ESByBinary_result)that);
      return false;
    }

    public boolean equals(file2ESByBinary_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(file2ESByBinary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("file2ESByBinary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class file2ESByBinary_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public file2ESByBinary_resultStandardScheme getScheme() {
        return new file2ESByBinary_resultStandardScheme();
      }
    }

    private static class file2ESByBinary_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<file2ESByBinary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, file2ESByBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, file2ESByBinary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class file2ESByBinary_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public file2ESByBinary_resultTupleScheme getScheme() {
        return new file2ESByBinary_resultTupleScheme();
      }
    }

    private static class file2ESByBinary_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<file2ESByBinary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, file2ESByBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, file2ESByBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class file2ESExcel_args implements org.apache.thrift.TBase<file2ESExcel_args, file2ESExcel_args._Fields>, java.io.Serializable, Cloneable, Comparable<file2ESExcel_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("file2ESExcel_args");

    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("fileDir", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField HOST_IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIps", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("indexName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new file2ESExcel_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new file2ESExcel_argsTupleSchemeFactory();

    public java.lang.String fileName; // required
    public java.lang.String fileDir; // required
    public java.lang.String hostIps; // required
    public java.lang.String clusterName; // required
    public java.lang.String indexName; // required
    public java.lang.String typeName; // required
    public int port; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILE_NAME((short)1, "fileName"),
      FILE_DIR((short)2, "fileDir"),
      HOST_IPS((short)3, "hostIps"),
      CLUSTER_NAME((short)4, "clusterName"),
      INDEX_NAME((short)5, "indexName"),
      TYPE_NAME((short)6, "typeName"),
      PORT((short)7, "port");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILE_NAME
            return FILE_NAME;
          case 2: // FILE_DIR
            return FILE_DIR;
          case 3: // HOST_IPS
            return HOST_IPS;
          case 4: // CLUSTER_NAME
            return CLUSTER_NAME;
          case 5: // INDEX_NAME
            return INDEX_NAME;
          case 6: // TYPE_NAME
            return TYPE_NAME;
          case 7: // PORT
            return PORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_DIR, new org.apache.thrift.meta_data.FieldMetaData("fileDir", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HOST_IPS, new org.apache.thrift.meta_data.FieldMetaData("hostIps", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("clusterName", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("indexName", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(file2ESExcel_args.class, metaDataMap);
    }

    public file2ESExcel_args() {
    }

    public file2ESExcel_args(
            java.lang.String fileName,
            java.lang.String fileDir,
            java.lang.String hostIps,
            java.lang.String clusterName,
            java.lang.String indexName,
            java.lang.String typeName,
            int port)
    {
      this();
      this.fileName = fileName;
      this.fileDir = fileDir;
      this.hostIps = hostIps;
      this.clusterName = clusterName;
      this.indexName = indexName;
      this.typeName = typeName;
      this.port = port;
      setPortIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public file2ESExcel_args(file2ESExcel_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetFileDir()) {
        this.fileDir = other.fileDir;
      }
      if (other.isSetHostIps()) {
        this.hostIps = other.hostIps;
      }
      if (other.isSetClusterName()) {
        this.clusterName = other.clusterName;
      }
      if (other.isSetIndexName()) {
        this.indexName = other.indexName;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      this.port = other.port;
    }

    public file2ESExcel_args deepCopy() {
      return new file2ESExcel_args(this);
    }

    @Override
    public void clear() {
      this.fileName = null;
      this.fileDir = null;
      this.hostIps = null;
      this.clusterName = null;
      this.indexName = null;
      this.typeName = null;
      setPortIsSet(false);
      this.port = 0;
    }

    public java.lang.String getFileName() {
      return this.fileName;
    }

    public file2ESExcel_args setFileName(java.lang.String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    public java.lang.String getFileDir() {
      return this.fileDir;
    }

    public file2ESExcel_args setFileDir(java.lang.String fileDir) {
      this.fileDir = fileDir;
      return this;
    }

    public void unsetFileDir() {
      this.fileDir = null;
    }

    /** Returns true if field fileDir is set (has been assigned a value) and false otherwise */
    public boolean isSetFileDir() {
      return this.fileDir != null;
    }

    public void setFileDirIsSet(boolean value) {
      if (!value) {
        this.fileDir = null;
      }
    }

    public java.lang.String getHostIps() {
      return this.hostIps;
    }

    public file2ESExcel_args setHostIps(java.lang.String hostIps) {
      this.hostIps = hostIps;
      return this;
    }

    public void unsetHostIps() {
      this.hostIps = null;
    }

    /** Returns true if field hostIps is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIps() {
      return this.hostIps != null;
    }

    public void setHostIpsIsSet(boolean value) {
      if (!value) {
        this.hostIps = null;
      }
    }

    public java.lang.String getClusterName() {
      return this.clusterName;
    }

    public file2ESExcel_args setClusterName(java.lang.String clusterName) {
      this.clusterName = clusterName;
      return this;
    }

    public void unsetClusterName() {
      this.clusterName = null;
    }

    /** Returns true if field clusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterName() {
      return this.clusterName != null;
    }

    public void setClusterNameIsSet(boolean value) {
      if (!value) {
        this.clusterName = null;
      }
    }

    public java.lang.String getIndexName() {
      return this.indexName;
    }

    public file2ESExcel_args setIndexName(java.lang.String indexName) {
      this.indexName = indexName;
      return this;
    }

    public void unsetIndexName() {
      this.indexName = null;
    }

    /** Returns true if field indexName is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexName() {
      return this.indexName != null;
    }

    public void setIndexNameIsSet(boolean value) {
      if (!value) {
        this.indexName = null;
      }
    }

    public java.lang.String getTypeName() {
      return this.typeName;
    }

    public file2ESExcel_args setTypeName(java.lang.String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public file2ESExcel_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case FILE_NAME:
          if (value == null) {
            unsetFileName();
          } else {
            setFileName((java.lang.String)value);
          }
          break;

        case FILE_DIR:
          if (value == null) {
            unsetFileDir();
          } else {
            setFileDir((java.lang.String)value);
          }
          break;

        case HOST_IPS:
          if (value == null) {
            unsetHostIps();
          } else {
            setHostIps((java.lang.String)value);
          }
          break;

        case CLUSTER_NAME:
          if (value == null) {
            unsetClusterName();
          } else {
            setClusterName((java.lang.String)value);
          }
          break;

        case INDEX_NAME:
          if (value == null) {
            unsetIndexName();
          } else {
            setIndexName((java.lang.String)value);
          }
          break;

        case TYPE_NAME:
          if (value == null) {
            unsetTypeName();
          } else {
            setTypeName((java.lang.String)value);
          }
          break;

        case PORT:
          if (value == null) {
            unsetPort();
          } else {
            setPort((java.lang.Integer)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case FILE_NAME:
          return getFileName();

        case FILE_DIR:
          return getFileDir();

        case HOST_IPS:
          return getHostIps();

        case CLUSTER_NAME:
          return getClusterName();

        case INDEX_NAME:
          return getIndexName();

        case TYPE_NAME:
          return getTypeName();

        case PORT:
          return getPort();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case FILE_NAME:
          return isSetFileName();
        case FILE_DIR:
          return isSetFileDir();
        case HOST_IPS:
          return isSetHostIps();
        case CLUSTER_NAME:
          return isSetClusterName();
        case INDEX_NAME:
          return isSetIndexName();
        case TYPE_NAME:
          return isSetTypeName();
        case PORT:
          return isSetPort();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof file2ESExcel_args)
        return this.equals((file2ESExcel_args)that);
      return false;
    }

    public boolean equals(file2ESExcel_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_fileDir = true && this.isSetFileDir();
      boolean that_present_fileDir = true && that.isSetFileDir();
      if (this_present_fileDir || that_present_fileDir) {
        if (!(this_present_fileDir && that_present_fileDir))
          return false;
        if (!this.fileDir.equals(that.fileDir))
          return false;
      }

      boolean this_present_hostIps = true && this.isSetHostIps();
      boolean that_present_hostIps = true && that.isSetHostIps();
      if (this_present_hostIps || that_present_hostIps) {
        if (!(this_present_hostIps && that_present_hostIps))
          return false;
        if (!this.hostIps.equals(that.hostIps))
          return false;
      }

      boolean this_present_clusterName = true && this.isSetClusterName();
      boolean that_present_clusterName = true && that.isSetClusterName();
      if (this_present_clusterName || that_present_clusterName) {
        if (!(this_present_clusterName && that_present_clusterName))
          return false;
        if (!this.clusterName.equals(that.clusterName))
          return false;
      }

      boolean this_present_indexName = true && this.isSetIndexName();
      boolean that_present_indexName = true && that.isSetIndexName();
      if (this_present_indexName || that_present_indexName) {
        if (!(this_present_indexName && that_present_indexName))
          return false;
        if (!this.indexName.equals(that.indexName))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
      if (isSetFileName())
        hashCode = hashCode * 8191 + fileName.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileDir()) ? 131071 : 524287);
      if (isSetFileDir())
        hashCode = hashCode * 8191 + fileDir.hashCode();

      hashCode = hashCode * 8191 + ((isSetHostIps()) ? 131071 : 524287);
      if (isSetHostIps())
        hashCode = hashCode * 8191 + hostIps.hashCode();

      hashCode = hashCode * 8191 + ((isSetClusterName()) ? 131071 : 524287);
      if (isSetClusterName())
        hashCode = hashCode * 8191 + clusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIndexName()) ? 131071 : 524287);
      if (isSetIndexName())
        hashCode = hashCode * 8191 + indexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypeName()) ? 131071 : 524287);
      if (isSetTypeName())
        hashCode = hashCode * 8191 + typeName.hashCode();

      hashCode = hashCode * 8191 + port;

      return hashCode;
    }

    @Override
    public int compareTo(file2ESExcel_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileDir()).compareTo(other.isSetFileDir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileDir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileDir, other.fileDir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetHostIps()).compareTo(other.isSetHostIps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIps, other.hostIps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClusterName()).compareTo(other.isSetClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterName, other.clusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIndexName()).compareTo(other.isSetIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexName, other.indexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("file2ESExcel_args(");
      boolean first = true;

      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileDir:");
      if (this.fileDir == null) {
        sb.append("null");
      } else {
        sb.append(this.fileDir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostIps:");
      if (this.hostIps == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIps);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clusterName:");
      if (this.clusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexName:");
      if (this.indexName == null) {
        sb.append("null");
      } else {
        sb.append(this.indexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class file2ESExcel_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public file2ESExcel_argsStandardScheme getScheme() {
        return new file2ESExcel_argsStandardScheme();
      }
    }

    private static class file2ESExcel_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<file2ESExcel_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, file2ESExcel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 1: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileDir = iprot.readString();
                struct.setFileDirIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HOST_IPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIps = iprot.readString();
                struct.setHostIpsIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterName = iprot.readString();
                struct.setClusterNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.indexName = iprot.readString();
                struct.setIndexNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, file2ESExcel_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.fileDir != null) {
          oprot.writeFieldBegin(FILE_DIR_FIELD_DESC);
          oprot.writeString(struct.fileDir);
          oprot.writeFieldEnd();
        }
        if (struct.hostIps != null) {
          oprot.writeFieldBegin(HOST_IPS_FIELD_DESC);
          oprot.writeString(struct.hostIps);
          oprot.writeFieldEnd();
        }
        if (struct.clusterName != null) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.clusterName);
          oprot.writeFieldEnd();
        }
        if (struct.indexName != null) {
          oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.indexName);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class file2ESExcel_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public file2ESExcel_argsTupleScheme getScheme() {
        return new file2ESExcel_argsTupleScheme();
      }
    }

    private static class file2ESExcel_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<file2ESExcel_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, file2ESExcel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFileName()) {
          optionals.set(0);
        }
        if (struct.isSetFileDir()) {
          optionals.set(1);
        }
        if (struct.isSetHostIps()) {
          optionals.set(2);
        }
        if (struct.isSetClusterName()) {
          optionals.set(3);
        }
        if (struct.isSetIndexName()) {
          optionals.set(4);
        }
        if (struct.isSetTypeName()) {
          optionals.set(5);
        }
        if (struct.isSetPort()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetFileDir()) {
          oprot.writeString(struct.fileDir);
        }
        if (struct.isSetHostIps()) {
          oprot.writeString(struct.hostIps);
        }
        if (struct.isSetClusterName()) {
          oprot.writeString(struct.clusterName);
        }
        if (struct.isSetIndexName()) {
          oprot.writeString(struct.indexName);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, file2ESExcel_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileDir = iprot.readString();
          struct.setFileDirIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hostIps = iprot.readString();
          struct.setHostIpsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.clusterName = iprot.readString();
          struct.setClusterNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.indexName = iprot.readString();
          struct.setIndexNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class file2ESExcel_result implements org.apache.thrift.TBase<file2ESExcel_result, file2ESExcel_result._Fields>, java.io.Serializable, Cloneable, Comparable<file2ESExcel_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("file2ESExcel_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new file2ESExcel_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new file2ESExcel_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(file2ESExcel_result.class, metaDataMap);
    }

    public file2ESExcel_result() {
    }

    public file2ESExcel_result(
            java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public file2ESExcel_result(file2ESExcel_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public file2ESExcel_result deepCopy() {
      return new file2ESExcel_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public file2ESExcel_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
        case SUCCESS:
          if (value == null) {
            unsetSuccess();
          } else {
            setSuccess((java.lang.String)value);
          }
          break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
        case SUCCESS:
          return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
        case SUCCESS:
          return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof file2ESExcel_result)
        return this.equals((file2ESExcel_result)that);
      return false;
    }

    public boolean equals(file2ESExcel_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(file2ESExcel_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("file2ESExcel_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class file2ESExcel_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public file2ESExcel_resultStandardScheme getScheme() {
        return new file2ESExcel_resultStandardScheme();
      }
    }

    private static class file2ESExcel_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<file2ESExcel_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, file2ESExcel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else {
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, file2ESExcel_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class file2ESExcel_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public file2ESExcel_resultTupleScheme getScheme() {
        return new file2ESExcel_resultTupleScheme();
      }
    }

    private static class file2ESExcel_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<file2ESExcel_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, file2ESExcel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, file2ESExcel_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
