/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dksou.fitting.search.SearchIOService;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-07")
public class DKSearchOutput {

  public interface Iface {

    /**
     * *获取ES数据总和
     *    * @param hostIps ES的ip地址
     *    * @param clusterName ES的集群名称
     *    * @param indexName ES的索引名称
     *    * @param typeName ES的类型名称
     *    * @param port ES的端口号
     * 
     * @param hostIps
     * @param clusterName
     * @param indexName
     * @param typeName
     * @param port
     */
    public long getESSum(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port) throws org.apache.thrift.TException;

    /**
     * 导出ES数据.txt类型
     * @param hostIps ES的ip地址
     * @param clusterName ES的集群名称
     * @param indexName ES的索引名称
     * @param typeName ES的类型名称
     * @param port ES的端口号
     * @param start 从哪儿开始
     * @param size 到哪儿结束
     * 
     * @param hostIps
     * @param clusterName
     * @param indexName
     * @param typeName
     * @param port
     * @param start
     * @param size
     */
    public java.lang.String ES2Txt(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size) throws org.apache.thrift.TException;

    /**
     * 导出ES数据 .xls类型
     * @param hostIps ES的ip地址
     * @param clusterName ES的集群名称
     * @param indexName ES的索引名称
     * @param typeName ES的类型名称
     * @param port ES的端口号
     * @param  start 从哪儿开始
     * @param size 到哪儿结束
     * 
     * @param hostIps
     * @param clusterName
     * @param indexName
     * @param typeName
     * @param port
     * @param start
     * @param size
     */
    public java.lang.String ES2XLS(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getESSum(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    public void ES2Txt(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void ES2XLS(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public long getESSum(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port) throws org.apache.thrift.TException
    {
      send_getESSum(hostIps, clusterName, indexName, typeName, port);
      return recv_getESSum();
    }

    public void send_getESSum(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port) throws org.apache.thrift.TException
    {
      getESSum_args args = new getESSum_args();
      args.setHostIps(hostIps);
      args.setClusterName(clusterName);
      args.setIndexName(indexName);
      args.setTypeName(typeName);
      args.setPort(port);
      sendBase("getESSum", args);
    }

    public long recv_getESSum() throws org.apache.thrift.TException
    {
      getESSum_result result = new getESSum_result();
      receiveBase(result, "getESSum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getESSum failed: unknown result");
    }

    public java.lang.String ES2Txt(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size) throws org.apache.thrift.TException
    {
      send_ES2Txt(hostIps, clusterName, indexName, typeName, port, start, size);
      return recv_ES2Txt();
    }

    public void send_ES2Txt(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size) throws org.apache.thrift.TException
    {
      ES2Txt_args args = new ES2Txt_args();
      args.setHostIps(hostIps);
      args.setClusterName(clusterName);
      args.setIndexName(indexName);
      args.setTypeName(typeName);
      args.setPort(port);
      args.setStart(start);
      args.setSize(size);
      sendBase("ES2Txt", args);
    }

    public java.lang.String recv_ES2Txt() throws org.apache.thrift.TException
    {
      ES2Txt_result result = new ES2Txt_result();
      receiveBase(result, "ES2Txt");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ES2Txt failed: unknown result");
    }

    public java.lang.String ES2XLS(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size) throws org.apache.thrift.TException
    {
      send_ES2XLS(hostIps, clusterName, indexName, typeName, port, start, size);
      return recv_ES2XLS();
    }

    public void send_ES2XLS(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size) throws org.apache.thrift.TException
    {
      ES2XLS_args args = new ES2XLS_args();
      args.setHostIps(hostIps);
      args.setClusterName(clusterName);
      args.setIndexName(indexName);
      args.setTypeName(typeName);
      args.setPort(port);
      args.setStart(start);
      args.setSize(size);
      sendBase("ES2XLS", args);
    }

    public java.lang.String recv_ES2XLS() throws org.apache.thrift.TException
    {
      ES2XLS_result result = new ES2XLS_result();
      receiveBase(result, "ES2XLS");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ES2XLS failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getESSum(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getESSum_call method_call = new getESSum_call(hostIps, clusterName, indexName, typeName, port, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getESSum_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private java.lang.String hostIps;
      private java.lang.String clusterName;
      private java.lang.String indexName;
      private java.lang.String typeName;
      private int port;
      public getESSum_call(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostIps = hostIps;
        this.clusterName = clusterName;
        this.indexName = indexName;
        this.typeName = typeName;
        this.port = port;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getESSum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getESSum_args args = new getESSum_args();
        args.setHostIps(hostIps);
        args.setClusterName(clusterName);
        args.setIndexName(indexName);
        args.setTypeName(typeName);
        args.setPort(port);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getESSum();
      }
    }

    public void ES2Txt(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ES2Txt_call method_call = new ES2Txt_call(hostIps, clusterName, indexName, typeName, port, start, size, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ES2Txt_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String hostIps;
      private java.lang.String clusterName;
      private java.lang.String indexName;
      private java.lang.String typeName;
      private int port;
      private int start;
      private int size;
      public ES2Txt_call(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostIps = hostIps;
        this.clusterName = clusterName;
        this.indexName = indexName;
        this.typeName = typeName;
        this.port = port;
        this.start = start;
        this.size = size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ES2Txt", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ES2Txt_args args = new ES2Txt_args();
        args.setHostIps(hostIps);
        args.setClusterName(clusterName);
        args.setIndexName(indexName);
        args.setTypeName(typeName);
        args.setPort(port);
        args.setStart(start);
        args.setSize(size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ES2Txt();
      }
    }

    public void ES2XLS(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ES2XLS_call method_call = new ES2XLS_call(hostIps, clusterName, indexName, typeName, port, start, size, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ES2XLS_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String hostIps;
      private java.lang.String clusterName;
      private java.lang.String indexName;
      private java.lang.String typeName;
      private int port;
      private int start;
      private int size;
      public ES2XLS_call(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostIps = hostIps;
        this.clusterName = clusterName;
        this.indexName = indexName;
        this.typeName = typeName;
        this.port = port;
        this.start = start;
        this.size = size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ES2XLS", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ES2XLS_args args = new ES2XLS_args();
        args.setHostIps(hostIps);
        args.setClusterName(clusterName);
        args.setIndexName(indexName);
        args.setTypeName(typeName);
        args.setPort(port);
        args.setStart(start);
        args.setSize(size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ES2XLS();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getESSum", new getESSum());
      processMap.put("ES2Txt", new ES2Txt());
      processMap.put("ES2XLS", new ES2XLS());
      return processMap;
    }

    public static class getESSum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getESSum_args> {
      public getESSum() {
        super("getESSum");
      }

      public getESSum_args getEmptyArgsInstance() {
        return new getESSum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getESSum_result getResult(I iface, getESSum_args args) throws org.apache.thrift.TException {
        getESSum_result result = new getESSum_result();
        result.success = iface.getESSum(args.hostIps, args.clusterName, args.indexName, args.typeName, args.port);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class ES2Txt<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ES2Txt_args> {
      public ES2Txt() {
        super("ES2Txt");
      }

      public ES2Txt_args getEmptyArgsInstance() {
        return new ES2Txt_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ES2Txt_result getResult(I iface, ES2Txt_args args) throws org.apache.thrift.TException {
        ES2Txt_result result = new ES2Txt_result();
        result.success = iface.ES2Txt(args.hostIps, args.clusterName, args.indexName, args.typeName, args.port, args.start, args.size);
        return result;
      }
    }

    public static class ES2XLS<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ES2XLS_args> {
      public ES2XLS() {
        super("ES2XLS");
      }

      public ES2XLS_args getEmptyArgsInstance() {
        return new ES2XLS_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ES2XLS_result getResult(I iface, ES2XLS_args args) throws org.apache.thrift.TException {
        ES2XLS_result result = new ES2XLS_result();
        result.success = iface.ES2XLS(args.hostIps, args.clusterName, args.indexName, args.typeName, args.port, args.start, args.size);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getESSum", new getESSum());
      processMap.put("ES2Txt", new ES2Txt());
      processMap.put("ES2XLS", new ES2XLS());
      return processMap;
    }

    public static class getESSum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getESSum_args, java.lang.Long> {
      public getESSum() {
        super("getESSum");
      }

      public getESSum_args getEmptyArgsInstance() {
        return new getESSum_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            getESSum_result result = new getESSum_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getESSum_result result = new getESSum_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getESSum_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.getESSum(args.hostIps, args.clusterName, args.indexName, args.typeName, args.port,resultHandler);
      }
    }

    public static class ES2Txt<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ES2Txt_args, java.lang.String> {
      public ES2Txt() {
        super("ES2Txt");
      }

      public ES2Txt_args getEmptyArgsInstance() {
        return new ES2Txt_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            ES2Txt_result result = new ES2Txt_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ES2Txt_result result = new ES2Txt_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ES2Txt_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.ES2Txt(args.hostIps, args.clusterName, args.indexName, args.typeName, args.port, args.start, args.size,resultHandler);
      }
    }

    public static class ES2XLS<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ES2XLS_args, java.lang.String> {
      public ES2XLS() {
        super("ES2XLS");
      }

      public ES2XLS_args getEmptyArgsInstance() {
        return new ES2XLS_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            ES2XLS_result result = new ES2XLS_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ES2XLS_result result = new ES2XLS_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ES2XLS_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.ES2XLS(args.hostIps, args.clusterName, args.indexName, args.typeName, args.port, args.start, args.size,resultHandler);
      }
    }

  }

  public static class getESSum_args implements org.apache.thrift.TBase<getESSum_args, getESSum_args._Fields>, java.io.Serializable, Cloneable, Comparable<getESSum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getESSum_args");

    private static final org.apache.thrift.protocol.TField HOST_IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIps", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("indexName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getESSum_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getESSum_argsTupleSchemeFactory();

    public java.lang.String hostIps; // required
    public java.lang.String clusterName; // required
    public java.lang.String indexName; // required
    public java.lang.String typeName; // required
    public int port; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_IPS((short)1, "hostIps"),
      CLUSTER_NAME((short)2, "clusterName"),
      INDEX_NAME((short)3, "indexName"),
      TYPE_NAME((short)4, "typeName"),
      PORT((short)5, "port");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_IPS
            return HOST_IPS;
          case 2: // CLUSTER_NAME
            return CLUSTER_NAME;
          case 3: // INDEX_NAME
            return INDEX_NAME;
          case 4: // TYPE_NAME
            return TYPE_NAME;
          case 5: // PORT
            return PORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_IPS, new org.apache.thrift.meta_data.FieldMetaData("hostIps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("clusterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("indexName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getESSum_args.class, metaDataMap);
    }

    public getESSum_args() {
    }

    public getESSum_args(
      java.lang.String hostIps,
      java.lang.String clusterName,
      java.lang.String indexName,
      java.lang.String typeName,
      int port)
    {
      this();
      this.hostIps = hostIps;
      this.clusterName = clusterName;
      this.indexName = indexName;
      this.typeName = typeName;
      this.port = port;
      setPortIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getESSum_args(getESSum_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHostIps()) {
        this.hostIps = other.hostIps;
      }
      if (other.isSetClusterName()) {
        this.clusterName = other.clusterName;
      }
      if (other.isSetIndexName()) {
        this.indexName = other.indexName;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      this.port = other.port;
    }

    public getESSum_args deepCopy() {
      return new getESSum_args(this);
    }

    @Override
    public void clear() {
      this.hostIps = null;
      this.clusterName = null;
      this.indexName = null;
      this.typeName = null;
      setPortIsSet(false);
      this.port = 0;
    }

    public java.lang.String getHostIps() {
      return this.hostIps;
    }

    public getESSum_args setHostIps(java.lang.String hostIps) {
      this.hostIps = hostIps;
      return this;
    }

    public void unsetHostIps() {
      this.hostIps = null;
    }

    /** Returns true if field hostIps is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIps() {
      return this.hostIps != null;
    }

    public void setHostIpsIsSet(boolean value) {
      if (!value) {
        this.hostIps = null;
      }
    }

    public java.lang.String getClusterName() {
      return this.clusterName;
    }

    public getESSum_args setClusterName(java.lang.String clusterName) {
      this.clusterName = clusterName;
      return this;
    }

    public void unsetClusterName() {
      this.clusterName = null;
    }

    /** Returns true if field clusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterName() {
      return this.clusterName != null;
    }

    public void setClusterNameIsSet(boolean value) {
      if (!value) {
        this.clusterName = null;
      }
    }

    public java.lang.String getIndexName() {
      return this.indexName;
    }

    public getESSum_args setIndexName(java.lang.String indexName) {
      this.indexName = indexName;
      return this;
    }

    public void unsetIndexName() {
      this.indexName = null;
    }

    /** Returns true if field indexName is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexName() {
      return this.indexName != null;
    }

    public void setIndexNameIsSet(boolean value) {
      if (!value) {
        this.indexName = null;
      }
    }

    public java.lang.String getTypeName() {
      return this.typeName;
    }

    public getESSum_args setTypeName(java.lang.String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public getESSum_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOST_IPS:
        if (value == null) {
          unsetHostIps();
        } else {
          setHostIps((java.lang.String)value);
        }
        break;

      case CLUSTER_NAME:
        if (value == null) {
          unsetClusterName();
        } else {
          setClusterName((java.lang.String)value);
        }
        break;

      case INDEX_NAME:
        if (value == null) {
          unsetIndexName();
        } else {
          setIndexName((java.lang.String)value);
        }
        break;

      case TYPE_NAME:
        if (value == null) {
          unsetTypeName();
        } else {
          setTypeName((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_IPS:
        return getHostIps();

      case CLUSTER_NAME:
        return getClusterName();

      case INDEX_NAME:
        return getIndexName();

      case TYPE_NAME:
        return getTypeName();

      case PORT:
        return getPort();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST_IPS:
        return isSetHostIps();
      case CLUSTER_NAME:
        return isSetClusterName();
      case INDEX_NAME:
        return isSetIndexName();
      case TYPE_NAME:
        return isSetTypeName();
      case PORT:
        return isSetPort();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getESSum_args)
        return this.equals((getESSum_args)that);
      return false;
    }

    public boolean equals(getESSum_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hostIps = true && this.isSetHostIps();
      boolean that_present_hostIps = true && that.isSetHostIps();
      if (this_present_hostIps || that_present_hostIps) {
        if (!(this_present_hostIps && that_present_hostIps))
          return false;
        if (!this.hostIps.equals(that.hostIps))
          return false;
      }

      boolean this_present_clusterName = true && this.isSetClusterName();
      boolean that_present_clusterName = true && that.isSetClusterName();
      if (this_present_clusterName || that_present_clusterName) {
        if (!(this_present_clusterName && that_present_clusterName))
          return false;
        if (!this.clusterName.equals(that.clusterName))
          return false;
      }

      boolean this_present_indexName = true && this.isSetIndexName();
      boolean that_present_indexName = true && that.isSetIndexName();
      if (this_present_indexName || that_present_indexName) {
        if (!(this_present_indexName && that_present_indexName))
          return false;
        if (!this.indexName.equals(that.indexName))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHostIps()) ? 131071 : 524287);
      if (isSetHostIps())
        hashCode = hashCode * 8191 + hostIps.hashCode();

      hashCode = hashCode * 8191 + ((isSetClusterName()) ? 131071 : 524287);
      if (isSetClusterName())
        hashCode = hashCode * 8191 + clusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIndexName()) ? 131071 : 524287);
      if (isSetIndexName())
        hashCode = hashCode * 8191 + indexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypeName()) ? 131071 : 524287);
      if (isSetTypeName())
        hashCode = hashCode * 8191 + typeName.hashCode();

      hashCode = hashCode * 8191 + port;

      return hashCode;
    }

    @Override
    public int compareTo(getESSum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHostIps()).compareTo(other.isSetHostIps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIps, other.hostIps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClusterName()).compareTo(other.isSetClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterName, other.clusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIndexName()).compareTo(other.isSetIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexName, other.indexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getESSum_args(");
      boolean first = true;

      sb.append("hostIps:");
      if (this.hostIps == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIps);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clusterName:");
      if (this.clusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexName:");
      if (this.indexName == null) {
        sb.append("null");
      } else {
        sb.append(this.indexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getESSum_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getESSum_argsStandardScheme getScheme() {
        return new getESSum_argsStandardScheme();
      }
    }

    private static class getESSum_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getESSum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getESSum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_IPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIps = iprot.readString();
                struct.setHostIpsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterName = iprot.readString();
                struct.setClusterNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.indexName = iprot.readString();
                struct.setIndexNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getESSum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostIps != null) {
          oprot.writeFieldBegin(HOST_IPS_FIELD_DESC);
          oprot.writeString(struct.hostIps);
          oprot.writeFieldEnd();
        }
        if (struct.clusterName != null) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.clusterName);
          oprot.writeFieldEnd();
        }
        if (struct.indexName != null) {
          oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.indexName);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getESSum_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getESSum_argsTupleScheme getScheme() {
        return new getESSum_argsTupleScheme();
      }
    }

    private static class getESSum_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getESSum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getESSum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHostIps()) {
          optionals.set(0);
        }
        if (struct.isSetClusterName()) {
          optionals.set(1);
        }
        if (struct.isSetIndexName()) {
          optionals.set(2);
        }
        if (struct.isSetTypeName()) {
          optionals.set(3);
        }
        if (struct.isSetPort()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetHostIps()) {
          oprot.writeString(struct.hostIps);
        }
        if (struct.isSetClusterName()) {
          oprot.writeString(struct.clusterName);
        }
        if (struct.isSetIndexName()) {
          oprot.writeString(struct.indexName);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getESSum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.hostIps = iprot.readString();
          struct.setHostIpsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clusterName = iprot.readString();
          struct.setClusterNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.indexName = iprot.readString();
          struct.setIndexNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getESSum_result implements org.apache.thrift.TBase<getESSum_result, getESSum_result._Fields>, java.io.Serializable, Cloneable, Comparable<getESSum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getESSum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getESSum_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getESSum_resultTupleSchemeFactory();

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getESSum_result.class, metaDataMap);
    }

    public getESSum_result() {
    }

    public getESSum_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getESSum_result(getESSum_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getESSum_result deepCopy() {
      return new getESSum_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getESSum_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getESSum_result)
        return this.equals((getESSum_result)that);
      return false;
    }

    public boolean equals(getESSum_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      return hashCode;
    }

    @Override
    public int compareTo(getESSum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getESSum_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getESSum_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getESSum_resultStandardScheme getScheme() {
        return new getESSum_resultStandardScheme();
      }
    }

    private static class getESSum_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getESSum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getESSum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getESSum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getESSum_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getESSum_resultTupleScheme getScheme() {
        return new getESSum_resultTupleScheme();
      }
    }

    private static class getESSum_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getESSum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getESSum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getESSum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ES2Txt_args implements org.apache.thrift.TBase<ES2Txt_args, ES2Txt_args._Fields>, java.io.Serializable, Cloneable, Comparable<ES2Txt_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ES2Txt_args");

    private static final org.apache.thrift.protocol.TField HOST_IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIps", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("indexName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ES2Txt_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ES2Txt_argsTupleSchemeFactory();

    public java.lang.String hostIps; // required
    public java.lang.String clusterName; // required
    public java.lang.String indexName; // required
    public java.lang.String typeName; // required
    public int port; // required
    public int start; // required
    public int size; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_IPS((short)1, "hostIps"),
      CLUSTER_NAME((short)2, "clusterName"),
      INDEX_NAME((short)3, "indexName"),
      TYPE_NAME((short)4, "typeName"),
      PORT((short)5, "port"),
      START((short)6, "start"),
      SIZE((short)7, "size");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_IPS
            return HOST_IPS;
          case 2: // CLUSTER_NAME
            return CLUSTER_NAME;
          case 3: // INDEX_NAME
            return INDEX_NAME;
          case 4: // TYPE_NAME
            return TYPE_NAME;
          case 5: // PORT
            return PORT;
          case 6: // START
            return START;
          case 7: // SIZE
            return SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __SIZE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_IPS, new org.apache.thrift.meta_data.FieldMetaData("hostIps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("clusterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("indexName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ES2Txt_args.class, metaDataMap);
    }

    public ES2Txt_args() {
    }

    public ES2Txt_args(
      java.lang.String hostIps,
      java.lang.String clusterName,
      java.lang.String indexName,
      java.lang.String typeName,
      int port,
      int start,
      int size)
    {
      this();
      this.hostIps = hostIps;
      this.clusterName = clusterName;
      this.indexName = indexName;
      this.typeName = typeName;
      this.port = port;
      setPortIsSet(true);
      this.start = start;
      setStartIsSet(true);
      this.size = size;
      setSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ES2Txt_args(ES2Txt_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHostIps()) {
        this.hostIps = other.hostIps;
      }
      if (other.isSetClusterName()) {
        this.clusterName = other.clusterName;
      }
      if (other.isSetIndexName()) {
        this.indexName = other.indexName;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      this.port = other.port;
      this.start = other.start;
      this.size = other.size;
    }

    public ES2Txt_args deepCopy() {
      return new ES2Txt_args(this);
    }

    @Override
    public void clear() {
      this.hostIps = null;
      this.clusterName = null;
      this.indexName = null;
      this.typeName = null;
      setPortIsSet(false);
      this.port = 0;
      setStartIsSet(false);
      this.start = 0;
      setSizeIsSet(false);
      this.size = 0;
    }

    public java.lang.String getHostIps() {
      return this.hostIps;
    }

    public ES2Txt_args setHostIps(java.lang.String hostIps) {
      this.hostIps = hostIps;
      return this;
    }

    public void unsetHostIps() {
      this.hostIps = null;
    }

    /** Returns true if field hostIps is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIps() {
      return this.hostIps != null;
    }

    public void setHostIpsIsSet(boolean value) {
      if (!value) {
        this.hostIps = null;
      }
    }

    public java.lang.String getClusterName() {
      return this.clusterName;
    }

    public ES2Txt_args setClusterName(java.lang.String clusterName) {
      this.clusterName = clusterName;
      return this;
    }

    public void unsetClusterName() {
      this.clusterName = null;
    }

    /** Returns true if field clusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterName() {
      return this.clusterName != null;
    }

    public void setClusterNameIsSet(boolean value) {
      if (!value) {
        this.clusterName = null;
      }
    }

    public java.lang.String getIndexName() {
      return this.indexName;
    }

    public ES2Txt_args setIndexName(java.lang.String indexName) {
      this.indexName = indexName;
      return this;
    }

    public void unsetIndexName() {
      this.indexName = null;
    }

    /** Returns true if field indexName is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexName() {
      return this.indexName != null;
    }

    public void setIndexNameIsSet(boolean value) {
      if (!value) {
        this.indexName = null;
      }
    }

    public java.lang.String getTypeName() {
      return this.typeName;
    }

    public ES2Txt_args setTypeName(java.lang.String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public ES2Txt_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public int getStart() {
      return this.start;
    }

    public ES2Txt_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getSize() {
      return this.size;
    }

    public ES2Txt_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOST_IPS:
        if (value == null) {
          unsetHostIps();
        } else {
          setHostIps((java.lang.String)value);
        }
        break;

      case CLUSTER_NAME:
        if (value == null) {
          unsetClusterName();
        } else {
          setClusterName((java.lang.String)value);
        }
        break;

      case INDEX_NAME:
        if (value == null) {
          unsetIndexName();
        } else {
          setIndexName((java.lang.String)value);
        }
        break;

      case TYPE_NAME:
        if (value == null) {
          unsetTypeName();
        } else {
          setTypeName((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.Integer)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((java.lang.Integer)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_IPS:
        return getHostIps();

      case CLUSTER_NAME:
        return getClusterName();

      case INDEX_NAME:
        return getIndexName();

      case TYPE_NAME:
        return getTypeName();

      case PORT:
        return getPort();

      case START:
        return getStart();

      case SIZE:
        return getSize();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST_IPS:
        return isSetHostIps();
      case CLUSTER_NAME:
        return isSetClusterName();
      case INDEX_NAME:
        return isSetIndexName();
      case TYPE_NAME:
        return isSetTypeName();
      case PORT:
        return isSetPort();
      case START:
        return isSetStart();
      case SIZE:
        return isSetSize();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ES2Txt_args)
        return this.equals((ES2Txt_args)that);
      return false;
    }

    public boolean equals(ES2Txt_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hostIps = true && this.isSetHostIps();
      boolean that_present_hostIps = true && that.isSetHostIps();
      if (this_present_hostIps || that_present_hostIps) {
        if (!(this_present_hostIps && that_present_hostIps))
          return false;
        if (!this.hostIps.equals(that.hostIps))
          return false;
      }

      boolean this_present_clusterName = true && this.isSetClusterName();
      boolean that_present_clusterName = true && that.isSetClusterName();
      if (this_present_clusterName || that_present_clusterName) {
        if (!(this_present_clusterName && that_present_clusterName))
          return false;
        if (!this.clusterName.equals(that.clusterName))
          return false;
      }

      boolean this_present_indexName = true && this.isSetIndexName();
      boolean that_present_indexName = true && that.isSetIndexName();
      if (this_present_indexName || that_present_indexName) {
        if (!(this_present_indexName && that_present_indexName))
          return false;
        if (!this.indexName.equals(that.indexName))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHostIps()) ? 131071 : 524287);
      if (isSetHostIps())
        hashCode = hashCode * 8191 + hostIps.hashCode();

      hashCode = hashCode * 8191 + ((isSetClusterName()) ? 131071 : 524287);
      if (isSetClusterName())
        hashCode = hashCode * 8191 + clusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIndexName()) ? 131071 : 524287);
      if (isSetIndexName())
        hashCode = hashCode * 8191 + indexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypeName()) ? 131071 : 524287);
      if (isSetTypeName())
        hashCode = hashCode * 8191 + typeName.hashCode();

      hashCode = hashCode * 8191 + port;

      hashCode = hashCode * 8191 + start;

      hashCode = hashCode * 8191 + size;

      return hashCode;
    }

    @Override
    public int compareTo(ES2Txt_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHostIps()).compareTo(other.isSetHostIps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIps, other.hostIps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClusterName()).compareTo(other.isSetClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterName, other.clusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIndexName()).compareTo(other.isSetIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexName, other.indexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ES2Txt_args(");
      boolean first = true;

      sb.append("hostIps:");
      if (this.hostIps == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIps);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clusterName:");
      if (this.clusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexName:");
      if (this.indexName == null) {
        sb.append("null");
      } else {
        sb.append(this.indexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ES2Txt_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ES2Txt_argsStandardScheme getScheme() {
        return new ES2Txt_argsStandardScheme();
      }
    }

    private static class ES2Txt_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ES2Txt_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ES2Txt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_IPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIps = iprot.readString();
                struct.setHostIpsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterName = iprot.readString();
                struct.setClusterNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.indexName = iprot.readString();
                struct.setIndexNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.size = iprot.readI32();
                struct.setSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ES2Txt_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostIps != null) {
          oprot.writeFieldBegin(HOST_IPS_FIELD_DESC);
          oprot.writeString(struct.hostIps);
          oprot.writeFieldEnd();
        }
        if (struct.clusterName != null) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.clusterName);
          oprot.writeFieldEnd();
        }
        if (struct.indexName != null) {
          oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.indexName);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeI32(struct.size);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ES2Txt_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ES2Txt_argsTupleScheme getScheme() {
        return new ES2Txt_argsTupleScheme();
      }
    }

    private static class ES2Txt_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ES2Txt_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ES2Txt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHostIps()) {
          optionals.set(0);
        }
        if (struct.isSetClusterName()) {
          optionals.set(1);
        }
        if (struct.isSetIndexName()) {
          optionals.set(2);
        }
        if (struct.isSetTypeName()) {
          optionals.set(3);
        }
        if (struct.isSetPort()) {
          optionals.set(4);
        }
        if (struct.isSetStart()) {
          optionals.set(5);
        }
        if (struct.isSetSize()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetHostIps()) {
          oprot.writeString(struct.hostIps);
        }
        if (struct.isSetClusterName()) {
          oprot.writeString(struct.clusterName);
        }
        if (struct.isSetIndexName()) {
          oprot.writeString(struct.indexName);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetSize()) {
          oprot.writeI32(struct.size);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ES2Txt_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.hostIps = iprot.readString();
          struct.setHostIpsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clusterName = iprot.readString();
          struct.setClusterNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.indexName = iprot.readString();
          struct.setIndexNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(5)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(6)) {
          struct.size = iprot.readI32();
          struct.setSizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ES2Txt_result implements org.apache.thrift.TBase<ES2Txt_result, ES2Txt_result._Fields>, java.io.Serializable, Cloneable, Comparable<ES2Txt_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ES2Txt_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ES2Txt_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ES2Txt_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ES2Txt_result.class, metaDataMap);
    }

    public ES2Txt_result() {
    }

    public ES2Txt_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ES2Txt_result(ES2Txt_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public ES2Txt_result deepCopy() {
      return new ES2Txt_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public ES2Txt_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ES2Txt_result)
        return this.equals((ES2Txt_result)that);
      return false;
    }

    public boolean equals(ES2Txt_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ES2Txt_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ES2Txt_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ES2Txt_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ES2Txt_resultStandardScheme getScheme() {
        return new ES2Txt_resultStandardScheme();
      }
    }

    private static class ES2Txt_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ES2Txt_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ES2Txt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ES2Txt_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ES2Txt_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ES2Txt_resultTupleScheme getScheme() {
        return new ES2Txt_resultTupleScheme();
      }
    }

    private static class ES2Txt_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ES2Txt_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ES2Txt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ES2Txt_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ES2XLS_args implements org.apache.thrift.TBase<ES2XLS_args, ES2XLS_args._Fields>, java.io.Serializable, Cloneable, Comparable<ES2XLS_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ES2XLS_args");

    private static final org.apache.thrift.protocol.TField HOST_IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIps", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("indexName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ES2XLS_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ES2XLS_argsTupleSchemeFactory();

    public java.lang.String hostIps; // required
    public java.lang.String clusterName; // required
    public java.lang.String indexName; // required
    public java.lang.String typeName; // required
    public int port; // required
    public int start; // required
    public int size; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_IPS((short)1, "hostIps"),
      CLUSTER_NAME((short)2, "clusterName"),
      INDEX_NAME((short)3, "indexName"),
      TYPE_NAME((short)4, "typeName"),
      PORT((short)5, "port"),
      START((short)6, "start"),
      SIZE((short)7, "size");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_IPS
            return HOST_IPS;
          case 2: // CLUSTER_NAME
            return CLUSTER_NAME;
          case 3: // INDEX_NAME
            return INDEX_NAME;
          case 4: // TYPE_NAME
            return TYPE_NAME;
          case 5: // PORT
            return PORT;
          case 6: // START
            return START;
          case 7: // SIZE
            return SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __SIZE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_IPS, new org.apache.thrift.meta_data.FieldMetaData("hostIps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("clusterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("indexName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ES2XLS_args.class, metaDataMap);
    }

    public ES2XLS_args() {
    }

    public ES2XLS_args(
      java.lang.String hostIps,
      java.lang.String clusterName,
      java.lang.String indexName,
      java.lang.String typeName,
      int port,
      int start,
      int size)
    {
      this();
      this.hostIps = hostIps;
      this.clusterName = clusterName;
      this.indexName = indexName;
      this.typeName = typeName;
      this.port = port;
      setPortIsSet(true);
      this.start = start;
      setStartIsSet(true);
      this.size = size;
      setSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ES2XLS_args(ES2XLS_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHostIps()) {
        this.hostIps = other.hostIps;
      }
      if (other.isSetClusterName()) {
        this.clusterName = other.clusterName;
      }
      if (other.isSetIndexName()) {
        this.indexName = other.indexName;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      this.port = other.port;
      this.start = other.start;
      this.size = other.size;
    }

    public ES2XLS_args deepCopy() {
      return new ES2XLS_args(this);
    }

    @Override
    public void clear() {
      this.hostIps = null;
      this.clusterName = null;
      this.indexName = null;
      this.typeName = null;
      setPortIsSet(false);
      this.port = 0;
      setStartIsSet(false);
      this.start = 0;
      setSizeIsSet(false);
      this.size = 0;
    }

    public java.lang.String getHostIps() {
      return this.hostIps;
    }

    public ES2XLS_args setHostIps(java.lang.String hostIps) {
      this.hostIps = hostIps;
      return this;
    }

    public void unsetHostIps() {
      this.hostIps = null;
    }

    /** Returns true if field hostIps is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIps() {
      return this.hostIps != null;
    }

    public void setHostIpsIsSet(boolean value) {
      if (!value) {
        this.hostIps = null;
      }
    }

    public java.lang.String getClusterName() {
      return this.clusterName;
    }

    public ES2XLS_args setClusterName(java.lang.String clusterName) {
      this.clusterName = clusterName;
      return this;
    }

    public void unsetClusterName() {
      this.clusterName = null;
    }

    /** Returns true if field clusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterName() {
      return this.clusterName != null;
    }

    public void setClusterNameIsSet(boolean value) {
      if (!value) {
        this.clusterName = null;
      }
    }

    public java.lang.String getIndexName() {
      return this.indexName;
    }

    public ES2XLS_args setIndexName(java.lang.String indexName) {
      this.indexName = indexName;
      return this;
    }

    public void unsetIndexName() {
      this.indexName = null;
    }

    /** Returns true if field indexName is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexName() {
      return this.indexName != null;
    }

    public void setIndexNameIsSet(boolean value) {
      if (!value) {
        this.indexName = null;
      }
    }

    public java.lang.String getTypeName() {
      return this.typeName;
    }

    public ES2XLS_args setTypeName(java.lang.String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public ES2XLS_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public int getStart() {
      return this.start;
    }

    public ES2XLS_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getSize() {
      return this.size;
    }

    public ES2XLS_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOST_IPS:
        if (value == null) {
          unsetHostIps();
        } else {
          setHostIps((java.lang.String)value);
        }
        break;

      case CLUSTER_NAME:
        if (value == null) {
          unsetClusterName();
        } else {
          setClusterName((java.lang.String)value);
        }
        break;

      case INDEX_NAME:
        if (value == null) {
          unsetIndexName();
        } else {
          setIndexName((java.lang.String)value);
        }
        break;

      case TYPE_NAME:
        if (value == null) {
          unsetTypeName();
        } else {
          setTypeName((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.Integer)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((java.lang.Integer)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_IPS:
        return getHostIps();

      case CLUSTER_NAME:
        return getClusterName();

      case INDEX_NAME:
        return getIndexName();

      case TYPE_NAME:
        return getTypeName();

      case PORT:
        return getPort();

      case START:
        return getStart();

      case SIZE:
        return getSize();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST_IPS:
        return isSetHostIps();
      case CLUSTER_NAME:
        return isSetClusterName();
      case INDEX_NAME:
        return isSetIndexName();
      case TYPE_NAME:
        return isSetTypeName();
      case PORT:
        return isSetPort();
      case START:
        return isSetStart();
      case SIZE:
        return isSetSize();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ES2XLS_args)
        return this.equals((ES2XLS_args)that);
      return false;
    }

    public boolean equals(ES2XLS_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hostIps = true && this.isSetHostIps();
      boolean that_present_hostIps = true && that.isSetHostIps();
      if (this_present_hostIps || that_present_hostIps) {
        if (!(this_present_hostIps && that_present_hostIps))
          return false;
        if (!this.hostIps.equals(that.hostIps))
          return false;
      }

      boolean this_present_clusterName = true && this.isSetClusterName();
      boolean that_present_clusterName = true && that.isSetClusterName();
      if (this_present_clusterName || that_present_clusterName) {
        if (!(this_present_clusterName && that_present_clusterName))
          return false;
        if (!this.clusterName.equals(that.clusterName))
          return false;
      }

      boolean this_present_indexName = true && this.isSetIndexName();
      boolean that_present_indexName = true && that.isSetIndexName();
      if (this_present_indexName || that_present_indexName) {
        if (!(this_present_indexName && that_present_indexName))
          return false;
        if (!this.indexName.equals(that.indexName))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHostIps()) ? 131071 : 524287);
      if (isSetHostIps())
        hashCode = hashCode * 8191 + hostIps.hashCode();

      hashCode = hashCode * 8191 + ((isSetClusterName()) ? 131071 : 524287);
      if (isSetClusterName())
        hashCode = hashCode * 8191 + clusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIndexName()) ? 131071 : 524287);
      if (isSetIndexName())
        hashCode = hashCode * 8191 + indexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypeName()) ? 131071 : 524287);
      if (isSetTypeName())
        hashCode = hashCode * 8191 + typeName.hashCode();

      hashCode = hashCode * 8191 + port;

      hashCode = hashCode * 8191 + start;

      hashCode = hashCode * 8191 + size;

      return hashCode;
    }

    @Override
    public int compareTo(ES2XLS_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHostIps()).compareTo(other.isSetHostIps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIps, other.hostIps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClusterName()).compareTo(other.isSetClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterName, other.clusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIndexName()).compareTo(other.isSetIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexName, other.indexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ES2XLS_args(");
      boolean first = true;

      sb.append("hostIps:");
      if (this.hostIps == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIps);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clusterName:");
      if (this.clusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexName:");
      if (this.indexName == null) {
        sb.append("null");
      } else {
        sb.append(this.indexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ES2XLS_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ES2XLS_argsStandardScheme getScheme() {
        return new ES2XLS_argsStandardScheme();
      }
    }

    private static class ES2XLS_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ES2XLS_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ES2XLS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_IPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIps = iprot.readString();
                struct.setHostIpsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterName = iprot.readString();
                struct.setClusterNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.indexName = iprot.readString();
                struct.setIndexNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.size = iprot.readI32();
                struct.setSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ES2XLS_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostIps != null) {
          oprot.writeFieldBegin(HOST_IPS_FIELD_DESC);
          oprot.writeString(struct.hostIps);
          oprot.writeFieldEnd();
        }
        if (struct.clusterName != null) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.clusterName);
          oprot.writeFieldEnd();
        }
        if (struct.indexName != null) {
          oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.indexName);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeI32(struct.size);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ES2XLS_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ES2XLS_argsTupleScheme getScheme() {
        return new ES2XLS_argsTupleScheme();
      }
    }

    private static class ES2XLS_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ES2XLS_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ES2XLS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHostIps()) {
          optionals.set(0);
        }
        if (struct.isSetClusterName()) {
          optionals.set(1);
        }
        if (struct.isSetIndexName()) {
          optionals.set(2);
        }
        if (struct.isSetTypeName()) {
          optionals.set(3);
        }
        if (struct.isSetPort()) {
          optionals.set(4);
        }
        if (struct.isSetStart()) {
          optionals.set(5);
        }
        if (struct.isSetSize()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetHostIps()) {
          oprot.writeString(struct.hostIps);
        }
        if (struct.isSetClusterName()) {
          oprot.writeString(struct.clusterName);
        }
        if (struct.isSetIndexName()) {
          oprot.writeString(struct.indexName);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetSize()) {
          oprot.writeI32(struct.size);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ES2XLS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.hostIps = iprot.readString();
          struct.setHostIpsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clusterName = iprot.readString();
          struct.setClusterNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.indexName = iprot.readString();
          struct.setIndexNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(5)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(6)) {
          struct.size = iprot.readI32();
          struct.setSizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ES2XLS_result implements org.apache.thrift.TBase<ES2XLS_result, ES2XLS_result._Fields>, java.io.Serializable, Cloneable, Comparable<ES2XLS_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ES2XLS_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ES2XLS_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ES2XLS_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ES2XLS_result.class, metaDataMap);
    }

    public ES2XLS_result() {
    }

    public ES2XLS_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ES2XLS_result(ES2XLS_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public ES2XLS_result deepCopy() {
      return new ES2XLS_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public ES2XLS_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ES2XLS_result)
        return this.equals((ES2XLS_result)that);
      return false;
    }

    public boolean equals(ES2XLS_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ES2XLS_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ES2XLS_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ES2XLS_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ES2XLS_resultStandardScheme getScheme() {
        return new ES2XLS_resultStandardScheme();
      }
    }

    private static class ES2XLS_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ES2XLS_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ES2XLS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ES2XLS_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ES2XLS_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ES2XLS_resultTupleScheme getScheme() {
        return new ES2XLS_resultTupleScheme();
      }
    }

    private static class ES2XLS_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ES2XLS_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ES2XLS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ES2XLS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
