/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dksou.fitting.search.SearchService;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-08-24")
public class SearchService {

  public interface Iface {

    /**
     * 条件查询
     *  @param hostIps ES集群的IP
     *  @param clusterName ES集群的名称
     *  @param indexName ES的索引名称
     *  @param TypeName ES的类型名称
     *  @param port ES的连接端口
     *  @param start 记录偏移 , null-默认为0
     *  @param size 记录数 , null-默认为10
     *  sentence 查询字段
     * 
     * @param hostIps
     * @param clusterName
     * @param indexName
     * @param typeName
     * @param port
     * @param start
     * @param size
     * @param sentence
     */
    public java.util.Map<java.lang.String,java.lang.String> ConditionalQuery(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String sentence) throws org.apache.thrift.TException;

    /**
     * 模糊查询，通配符查询
     *  @param hostIps ES集群的IP
     *  @param clusterName ES集群的名称
     *  @param indexName ES的索引名称
     *  @param TypeName ES的类型名称
     *  @param port ES的连接端口
     *  @param start 记录偏移 , null-默认为0
     *  @param size 记录数 , null-默认为10
     *  sentence 查询字段
     *  field 字段名
     * 
     * @param hostIps
     * @param clusterName
     * @param indexName
     * @param typeName
     * @param port
     * @param start
     * @param size
     * @param sentence
     * @param field
     */
    public java.util.Map<java.lang.String,java.lang.String> FuzzyQuery(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String sentence, java.lang.String field) throws org.apache.thrift.TException;

    /**
     * 过滤查询
     * @param hostIps ES集群的IP
     * @param clusterName ES集群的名称
     * @param indexName ES的索引名称
     * @param TypeName ES的类型名称
     * @param port ES的连接端口
     * @param start 记录偏移 , null-默认为0
     * @param size 记录数 , null-默认为10
     * field 查询字段
     * gte 过滤条件(大于等于)
     * lte 过滤条件(小于等于)
     * 
     * @param hostIps
     * @param clusterName
     * @param indexName
     * @param typeName
     * @param port
     * @param start
     * @param size
     * @param field
     * @param gte
     * @param lte
     */
    public java.util.Map<java.lang.String,java.lang.String> FileterQuery(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String field, java.lang.String gte, java.lang.String lte) throws org.apache.thrift.TException;

    /**
     * * 聚合查询
     *  * @param hostIp 要连接搜索主机的ip地址
     *  * @param port 搜索引擎的端口号(默认9300)
     *  * @param clusterName 集群名称
     *  * @param indexName 搜索引擎的索引名称（自定义）
     *  * @param typeName 搜索引擎的索引类型名称（自定义）
     *  * @param aggFdName 需要聚合的字段
     *  * @param aggType 聚合的类型,格式DKSearch.TYPE,如求平均数时传入DKSearch.AVG
     *  *
     * 
     * @param hostIp
     * @param port
     * @param clusterName
     * @param indexName
     * @param typeName
     * @param aggFdName
     * @param aggType
     */
    public java.util.Map<java.lang.String,java.lang.String> StatsAggregation(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName, java.lang.String aggType) throws org.apache.thrift.TException;

    /**
     * * 在搜索中添加聚合
     *  * @param hostIp 要连接搜索主机的ip地址
     *  * @param port 搜索引擎的端口号(默认9300)
     *  * @param clusterName 集群名称
     *  * @param indexName 搜索引擎的索引名称（自定义）
     *  * @param typeName 搜索引擎的索引类型名称（自定义）
     *  * @param aggFdName 需要聚合的字段
     *  * @param aggType 聚合的类型,格式DKSearch.TYPE,如求平均数时传入DKSearch.AVG
     *  *
     * 
     * @param hostIp
     * @param port
     * @param clusterName
     * @param indexName
     * @param typeName
     * @param aggFdName
     * @param aggType
     */
    public java.util.Map<java.lang.String,java.lang.String> PercentilesAggregation(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName, java.lang.String aggType) throws org.apache.thrift.TException;

    /**
     * * 根据字段值项分组聚合
     *  * @param hostIp 要连接搜索主机的ip地址
     *  * @param port 搜索引擎的端口号(默认9300)
     *  * @param clusterName 集群名称
     *  * @param indexName 搜索引擎的索引名称（自定义）
     *  * @param typeName 搜索引擎的索引类型名称（自定义）
     *  * @param aggFdName 需要聚合的字段
     *  * @param aggType 聚合的类型,格式DKSearch.TYPE,如求平均数时传入DKSearch.AVG
     *  *
     * 
     * @param hostIp
     * @param port
     * @param clusterName
     * @param indexName
     * @param typeName
     * @param aggFdName
     */
    public java.util.Map<java.lang.String,java.lang.String> TermsAggregation(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName) throws org.apache.thrift.TException;

    /**
     * * 多条件组合与查询
     *  * @param hostIp 要连接搜索主机的ip地址
     *  * @param port 搜索引擎的端口号(默认9300)
     *  * @param clusterName 集群名称
     *  * @param indexName 搜索引擎的索引名称（自定义）
     *  * @param typeName 搜索引擎的索引类型名称（自定义）
     *  * @param filed 字段名
     *  * @param filedName 查询短语
     *  *
     * 
     * @param hostIp
     * @param port
     * @param clusterName
     * @param indexName
     * @param typeName
     * @param filed
     * @param filedName
     * @param start
     * @param size
     */
    public java.util.Map<java.lang.String,java.lang.String> MustSearch(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String filed, java.lang.String filedName, int start, int size) throws org.apache.thrift.TException;

    /**
     * * 多条件或查询
     *  * @param hostIp 要连接搜索主机的ip地址
     *  * @param port 搜索引擎的端口号(默认9300)
     *  * @param clusterName 集群名称
     *  * @param indexName 搜索引擎的索引名称（自定义）
     *  * @param typeName 搜索引擎的索引类型名称（自定义）
     *  * @param field 字段名
     *  * @param filedName 查询短语
     *  *
     * 
     * @param hostIp
     * @param port
     * @param clusterName
     * @param indexName
     * @param typeName
     * @param filed
     * @param filedName
     * @param start
     * @param size
     */
    public java.util.Map<java.lang.String,java.lang.String> ShouldSearch(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String filed, java.lang.String filedName, int start, int size) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ConditionalQuery(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String sentence, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void FuzzyQuery(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String sentence, java.lang.String field, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void FileterQuery(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String field, java.lang.String gte, java.lang.String lte, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void StatsAggregation(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName, java.lang.String aggType, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void PercentilesAggregation(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName, java.lang.String aggType, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void TermsAggregation(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void MustSearch(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String filed, java.lang.String filedName, int start, int size, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void ShouldSearch(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String filed, java.lang.String filedName, int start, int size, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.util.Map<java.lang.String,java.lang.String> ConditionalQuery(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String sentence) throws org.apache.thrift.TException
    {
      send_ConditionalQuery(hostIps, clusterName, indexName, typeName, port, start, size, sentence);
      return recv_ConditionalQuery();
    }

    public void send_ConditionalQuery(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String sentence) throws org.apache.thrift.TException
    {
      ConditionalQuery_args args = new ConditionalQuery_args();
      args.setHostIps(hostIps);
      args.setClusterName(clusterName);
      args.setIndexName(indexName);
      args.setTypeName(typeName);
      args.setPort(port);
      args.setStart(start);
      args.setSize(size);
      args.setSentence(sentence);
      sendBase("ConditionalQuery", args);
    }

    public java.util.Map<java.lang.String,java.lang.String> recv_ConditionalQuery() throws org.apache.thrift.TException
    {
      ConditionalQuery_result result = new ConditionalQuery_result();
      receiveBase(result, "ConditionalQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ConditionalQuery failed: unknown result");
    }

    public java.util.Map<java.lang.String,java.lang.String> FuzzyQuery(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String sentence, java.lang.String field) throws org.apache.thrift.TException
    {
      send_FuzzyQuery(hostIps, clusterName, indexName, typeName, port, start, size, sentence, field);
      return recv_FuzzyQuery();
    }

    public void send_FuzzyQuery(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String sentence, java.lang.String field) throws org.apache.thrift.TException
    {
      FuzzyQuery_args args = new FuzzyQuery_args();
      args.setHostIps(hostIps);
      args.setClusterName(clusterName);
      args.setIndexName(indexName);
      args.setTypeName(typeName);
      args.setPort(port);
      args.setStart(start);
      args.setSize(size);
      args.setSentence(sentence);
      args.setField(field);
      sendBase("FuzzyQuery", args);
    }

    public java.util.Map<java.lang.String,java.lang.String> recv_FuzzyQuery() throws org.apache.thrift.TException
    {
      FuzzyQuery_result result = new FuzzyQuery_result();
      receiveBase(result, "FuzzyQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "FuzzyQuery failed: unknown result");
    }

    public java.util.Map<java.lang.String,java.lang.String> FileterQuery(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String field, java.lang.String gte, java.lang.String lte) throws org.apache.thrift.TException
    {
      send_FileterQuery(hostIps, clusterName, indexName, typeName, port, start, size, field, gte, lte);
      return recv_FileterQuery();
    }

    public void send_FileterQuery(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String field, java.lang.String gte, java.lang.String lte) throws org.apache.thrift.TException
    {
      FileterQuery_args args = new FileterQuery_args();
      args.setHostIps(hostIps);
      args.setClusterName(clusterName);
      args.setIndexName(indexName);
      args.setTypeName(typeName);
      args.setPort(port);
      args.setStart(start);
      args.setSize(size);
      args.setField(field);
      args.setGte(gte);
      args.setLte(lte);
      sendBase("FileterQuery", args);
    }

    public java.util.Map<java.lang.String,java.lang.String> recv_FileterQuery() throws org.apache.thrift.TException
    {
      FileterQuery_result result = new FileterQuery_result();
      receiveBase(result, "FileterQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "FileterQuery failed: unknown result");
    }

    public java.util.Map<java.lang.String,java.lang.String> StatsAggregation(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName, java.lang.String aggType) throws org.apache.thrift.TException
    {
      send_StatsAggregation(hostIp, port, clusterName, indexName, typeName, aggFdName, aggType);
      return recv_StatsAggregation();
    }

    public void send_StatsAggregation(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName, java.lang.String aggType) throws org.apache.thrift.TException
    {
      StatsAggregation_args args = new StatsAggregation_args();
      args.setHostIp(hostIp);
      args.setPort(port);
      args.setClusterName(clusterName);
      args.setIndexName(indexName);
      args.setTypeName(typeName);
      args.setAggFdName(aggFdName);
      args.setAggType(aggType);
      sendBase("StatsAggregation", args);
    }

    public java.util.Map<java.lang.String,java.lang.String> recv_StatsAggregation() throws org.apache.thrift.TException
    {
      StatsAggregation_result result = new StatsAggregation_result();
      receiveBase(result, "StatsAggregation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "StatsAggregation failed: unknown result");
    }

    public java.util.Map<java.lang.String,java.lang.String> PercentilesAggregation(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName, java.lang.String aggType) throws org.apache.thrift.TException
    {
      send_PercentilesAggregation(hostIp, port, clusterName, indexName, typeName, aggFdName, aggType);
      return recv_PercentilesAggregation();
    }

    public void send_PercentilesAggregation(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName, java.lang.String aggType) throws org.apache.thrift.TException
    {
      PercentilesAggregation_args args = new PercentilesAggregation_args();
      args.setHostIp(hostIp);
      args.setPort(port);
      args.setClusterName(clusterName);
      args.setIndexName(indexName);
      args.setTypeName(typeName);
      args.setAggFdName(aggFdName);
      args.setAggType(aggType);
      sendBase("PercentilesAggregation", args);
    }

    public java.util.Map<java.lang.String,java.lang.String> recv_PercentilesAggregation() throws org.apache.thrift.TException
    {
      PercentilesAggregation_result result = new PercentilesAggregation_result();
      receiveBase(result, "PercentilesAggregation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "PercentilesAggregation failed: unknown result");
    }

    public java.util.Map<java.lang.String,java.lang.String> TermsAggregation(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName) throws org.apache.thrift.TException
    {
      send_TermsAggregation(hostIp, port, clusterName, indexName, typeName, aggFdName);
      return recv_TermsAggregation();
    }

    public void send_TermsAggregation(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName) throws org.apache.thrift.TException
    {
      TermsAggregation_args args = new TermsAggregation_args();
      args.setHostIp(hostIp);
      args.setPort(port);
      args.setClusterName(clusterName);
      args.setIndexName(indexName);
      args.setTypeName(typeName);
      args.setAggFdName(aggFdName);
      sendBase("TermsAggregation", args);
    }

    public java.util.Map<java.lang.String,java.lang.String> recv_TermsAggregation() throws org.apache.thrift.TException
    {
      TermsAggregation_result result = new TermsAggregation_result();
      receiveBase(result, "TermsAggregation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "TermsAggregation failed: unknown result");
    }

    public java.util.Map<java.lang.String,java.lang.String> MustSearch(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String filed, java.lang.String filedName, int start, int size) throws org.apache.thrift.TException
    {
      send_MustSearch(hostIp, port, clusterName, indexName, typeName, filed, filedName, start, size);
      return recv_MustSearch();
    }

    public void send_MustSearch(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String filed, java.lang.String filedName, int start, int size) throws org.apache.thrift.TException
    {
      MustSearch_args args = new MustSearch_args();
      args.setHostIp(hostIp);
      args.setPort(port);
      args.setClusterName(clusterName);
      args.setIndexName(indexName);
      args.setTypeName(typeName);
      args.setFiled(filed);
      args.setFiledName(filedName);
      args.setStart(start);
      args.setSize(size);
      sendBase("MustSearch", args);
    }

    public java.util.Map<java.lang.String,java.lang.String> recv_MustSearch() throws org.apache.thrift.TException
    {
      MustSearch_result result = new MustSearch_result();
      receiveBase(result, "MustSearch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "MustSearch failed: unknown result");
    }

    public java.util.Map<java.lang.String,java.lang.String> ShouldSearch(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String filed, java.lang.String filedName, int start, int size) throws org.apache.thrift.TException
    {
      send_ShouldSearch(hostIp, port, clusterName, indexName, typeName, filed, filedName, start, size);
      return recv_ShouldSearch();
    }

    public void send_ShouldSearch(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String filed, java.lang.String filedName, int start, int size) throws org.apache.thrift.TException
    {
      ShouldSearch_args args = new ShouldSearch_args();
      args.setHostIp(hostIp);
      args.setPort(port);
      args.setClusterName(clusterName);
      args.setIndexName(indexName);
      args.setTypeName(typeName);
      args.setFiled(filed);
      args.setFiledName(filedName);
      args.setStart(start);
      args.setSize(size);
      sendBase("ShouldSearch", args);
    }

    public java.util.Map<java.lang.String,java.lang.String> recv_ShouldSearch() throws org.apache.thrift.TException
    {
      ShouldSearch_result result = new ShouldSearch_result();
      receiveBase(result, "ShouldSearch");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ShouldSearch failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ConditionalQuery(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String sentence, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ConditionalQuery_call method_call = new ConditionalQuery_call(hostIps, clusterName, indexName, typeName, port, start, size, sentence, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ConditionalQuery_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.String>> {
      private java.lang.String hostIps;
      private java.lang.String clusterName;
      private java.lang.String indexName;
      private java.lang.String typeName;
      private int port;
      private int start;
      private int size;
      private java.lang.String sentence;
      public ConditionalQuery_call(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String sentence, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostIps = hostIps;
        this.clusterName = clusterName;
        this.indexName = indexName;
        this.typeName = typeName;
        this.port = port;
        this.start = start;
        this.size = size;
        this.sentence = sentence;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ConditionalQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ConditionalQuery_args args = new ConditionalQuery_args();
        args.setHostIps(hostIps);
        args.setClusterName(clusterName);
        args.setIndexName(indexName);
        args.setTypeName(typeName);
        args.setPort(port);
        args.setStart(start);
        args.setSize(size);
        args.setSentence(sentence);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ConditionalQuery();
      }
    }

    public void FuzzyQuery(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String sentence, java.lang.String field, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      FuzzyQuery_call method_call = new FuzzyQuery_call(hostIps, clusterName, indexName, typeName, port, start, size, sentence, field, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class FuzzyQuery_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.String>> {
      private java.lang.String hostIps;
      private java.lang.String clusterName;
      private java.lang.String indexName;
      private java.lang.String typeName;
      private int port;
      private int start;
      private int size;
      private java.lang.String sentence;
      private java.lang.String field;
      public FuzzyQuery_call(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String sentence, java.lang.String field, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostIps = hostIps;
        this.clusterName = clusterName;
        this.indexName = indexName;
        this.typeName = typeName;
        this.port = port;
        this.start = start;
        this.size = size;
        this.sentence = sentence;
        this.field = field;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("FuzzyQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        FuzzyQuery_args args = new FuzzyQuery_args();
        args.setHostIps(hostIps);
        args.setClusterName(clusterName);
        args.setIndexName(indexName);
        args.setTypeName(typeName);
        args.setPort(port);
        args.setStart(start);
        args.setSize(size);
        args.setSentence(sentence);
        args.setField(field);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_FuzzyQuery();
      }
    }

    public void FileterQuery(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String field, java.lang.String gte, java.lang.String lte, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      FileterQuery_call method_call = new FileterQuery_call(hostIps, clusterName, indexName, typeName, port, start, size, field, gte, lte, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class FileterQuery_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.String>> {
      private java.lang.String hostIps;
      private java.lang.String clusterName;
      private java.lang.String indexName;
      private java.lang.String typeName;
      private int port;
      private int start;
      private int size;
      private java.lang.String field;
      private java.lang.String gte;
      private java.lang.String lte;
      public FileterQuery_call(java.lang.String hostIps, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, int port, int start, int size, java.lang.String field, java.lang.String gte, java.lang.String lte, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostIps = hostIps;
        this.clusterName = clusterName;
        this.indexName = indexName;
        this.typeName = typeName;
        this.port = port;
        this.start = start;
        this.size = size;
        this.field = field;
        this.gte = gte;
        this.lte = lte;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("FileterQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        FileterQuery_args args = new FileterQuery_args();
        args.setHostIps(hostIps);
        args.setClusterName(clusterName);
        args.setIndexName(indexName);
        args.setTypeName(typeName);
        args.setPort(port);
        args.setStart(start);
        args.setSize(size);
        args.setField(field);
        args.setGte(gte);
        args.setLte(lte);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_FileterQuery();
      }
    }

    public void StatsAggregation(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName, java.lang.String aggType, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      StatsAggregation_call method_call = new StatsAggregation_call(hostIp, port, clusterName, indexName, typeName, aggFdName, aggType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class StatsAggregation_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.String>> {
      private java.lang.String hostIp;
      private int port;
      private java.lang.String clusterName;
      private java.lang.String indexName;
      private java.lang.String typeName;
      private java.lang.String aggFdName;
      private java.lang.String aggType;
      public StatsAggregation_call(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName, java.lang.String aggType, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostIp = hostIp;
        this.port = port;
        this.clusterName = clusterName;
        this.indexName = indexName;
        this.typeName = typeName;
        this.aggFdName = aggFdName;
        this.aggType = aggType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("StatsAggregation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        StatsAggregation_args args = new StatsAggregation_args();
        args.setHostIp(hostIp);
        args.setPort(port);
        args.setClusterName(clusterName);
        args.setIndexName(indexName);
        args.setTypeName(typeName);
        args.setAggFdName(aggFdName);
        args.setAggType(aggType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_StatsAggregation();
      }
    }

    public void PercentilesAggregation(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName, java.lang.String aggType, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      PercentilesAggregation_call method_call = new PercentilesAggregation_call(hostIp, port, clusterName, indexName, typeName, aggFdName, aggType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class PercentilesAggregation_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.String>> {
      private java.lang.String hostIp;
      private int port;
      private java.lang.String clusterName;
      private java.lang.String indexName;
      private java.lang.String typeName;
      private java.lang.String aggFdName;
      private java.lang.String aggType;
      public PercentilesAggregation_call(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName, java.lang.String aggType, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostIp = hostIp;
        this.port = port;
        this.clusterName = clusterName;
        this.indexName = indexName;
        this.typeName = typeName;
        this.aggFdName = aggFdName;
        this.aggType = aggType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("PercentilesAggregation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        PercentilesAggregation_args args = new PercentilesAggregation_args();
        args.setHostIp(hostIp);
        args.setPort(port);
        args.setClusterName(clusterName);
        args.setIndexName(indexName);
        args.setTypeName(typeName);
        args.setAggFdName(aggFdName);
        args.setAggType(aggType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_PercentilesAggregation();
      }
    }

    public void TermsAggregation(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      TermsAggregation_call method_call = new TermsAggregation_call(hostIp, port, clusterName, indexName, typeName, aggFdName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class TermsAggregation_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.String>> {
      private java.lang.String hostIp;
      private int port;
      private java.lang.String clusterName;
      private java.lang.String indexName;
      private java.lang.String typeName;
      private java.lang.String aggFdName;
      public TermsAggregation_call(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String aggFdName, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostIp = hostIp;
        this.port = port;
        this.clusterName = clusterName;
        this.indexName = indexName;
        this.typeName = typeName;
        this.aggFdName = aggFdName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("TermsAggregation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        TermsAggregation_args args = new TermsAggregation_args();
        args.setHostIp(hostIp);
        args.setPort(port);
        args.setClusterName(clusterName);
        args.setIndexName(indexName);
        args.setTypeName(typeName);
        args.setAggFdName(aggFdName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_TermsAggregation();
      }
    }

    public void MustSearch(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String filed, java.lang.String filedName, int start, int size, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MustSearch_call method_call = new MustSearch_call(hostIp, port, clusterName, indexName, typeName, filed, filedName, start, size, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MustSearch_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.String>> {
      private java.lang.String hostIp;
      private int port;
      private java.lang.String clusterName;
      private java.lang.String indexName;
      private java.lang.String typeName;
      private java.lang.String filed;
      private java.lang.String filedName;
      private int start;
      private int size;
      public MustSearch_call(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String filed, java.lang.String filedName, int start, int size, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostIp = hostIp;
        this.port = port;
        this.clusterName = clusterName;
        this.indexName = indexName;
        this.typeName = typeName;
        this.filed = filed;
        this.filedName = filedName;
        this.start = start;
        this.size = size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MustSearch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        MustSearch_args args = new MustSearch_args();
        args.setHostIp(hostIp);
        args.setPort(port);
        args.setClusterName(clusterName);
        args.setIndexName(indexName);
        args.setTypeName(typeName);
        args.setFiled(filed);
        args.setFiledName(filedName);
        args.setStart(start);
        args.setSize(size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_MustSearch();
      }
    }

    public void ShouldSearch(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String filed, java.lang.String filedName, int start, int size, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ShouldSearch_call method_call = new ShouldSearch_call(hostIp, port, clusterName, indexName, typeName, filed, filedName, start, size, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ShouldSearch_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.String>> {
      private java.lang.String hostIp;
      private int port;
      private java.lang.String clusterName;
      private java.lang.String indexName;
      private java.lang.String typeName;
      private java.lang.String filed;
      private java.lang.String filedName;
      private int start;
      private int size;
      public ShouldSearch_call(java.lang.String hostIp, int port, java.lang.String clusterName, java.lang.String indexName, java.lang.String typeName, java.lang.String filed, java.lang.String filedName, int start, int size, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostIp = hostIp;
        this.port = port;
        this.clusterName = clusterName;
        this.indexName = indexName;
        this.typeName = typeName;
        this.filed = filed;
        this.filedName = filedName;
        this.start = start;
        this.size = size;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ShouldSearch", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ShouldSearch_args args = new ShouldSearch_args();
        args.setHostIp(hostIp);
        args.setPort(port);
        args.setClusterName(clusterName);
        args.setIndexName(indexName);
        args.setTypeName(typeName);
        args.setFiled(filed);
        args.setFiledName(filedName);
        args.setStart(start);
        args.setSize(size);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ShouldSearch();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ConditionalQuery", new ConditionalQuery());
      processMap.put("FuzzyQuery", new FuzzyQuery());
      processMap.put("FileterQuery", new FileterQuery());
      processMap.put("StatsAggregation", new StatsAggregation());
      processMap.put("PercentilesAggregation", new PercentilesAggregation());
      processMap.put("TermsAggregation", new TermsAggregation());
      processMap.put("MustSearch", new MustSearch());
      processMap.put("ShouldSearch", new ShouldSearch());
      return processMap;
    }

    public static class ConditionalQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ConditionalQuery_args> {
      public ConditionalQuery() {
        super("ConditionalQuery");
      }

      public ConditionalQuery_args getEmptyArgsInstance() {
        return new ConditionalQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ConditionalQuery_result getResult(I iface, ConditionalQuery_args args) throws org.apache.thrift.TException {
        ConditionalQuery_result result = new ConditionalQuery_result();
        result.success = iface.ConditionalQuery(args.hostIps, args.clusterName, args.indexName, args.typeName, args.port, args.start, args.size, args.sentence);
        return result;
      }
    }

    public static class FuzzyQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, FuzzyQuery_args> {
      public FuzzyQuery() {
        super("FuzzyQuery");
      }

      public FuzzyQuery_args getEmptyArgsInstance() {
        return new FuzzyQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public FuzzyQuery_result getResult(I iface, FuzzyQuery_args args) throws org.apache.thrift.TException {
        FuzzyQuery_result result = new FuzzyQuery_result();
        result.success = iface.FuzzyQuery(args.hostIps, args.clusterName, args.indexName, args.typeName, args.port, args.start, args.size, args.sentence, args.field);
        return result;
      }
    }

    public static class FileterQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, FileterQuery_args> {
      public FileterQuery() {
        super("FileterQuery");
      }

      public FileterQuery_args getEmptyArgsInstance() {
        return new FileterQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public FileterQuery_result getResult(I iface, FileterQuery_args args) throws org.apache.thrift.TException {
        FileterQuery_result result = new FileterQuery_result();
        result.success = iface.FileterQuery(args.hostIps, args.clusterName, args.indexName, args.typeName, args.port, args.start, args.size, args.field, args.gte, args.lte);
        return result;
      }
    }

    public static class StatsAggregation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, StatsAggregation_args> {
      public StatsAggregation() {
        super("StatsAggregation");
      }

      public StatsAggregation_args getEmptyArgsInstance() {
        return new StatsAggregation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public StatsAggregation_result getResult(I iface, StatsAggregation_args args) throws org.apache.thrift.TException {
        StatsAggregation_result result = new StatsAggregation_result();
        result.success = iface.StatsAggregation(args.hostIp, args.port, args.clusterName, args.indexName, args.typeName, args.aggFdName, args.aggType);
        return result;
      }
    }

    public static class PercentilesAggregation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, PercentilesAggregation_args> {
      public PercentilesAggregation() {
        super("PercentilesAggregation");
      }

      public PercentilesAggregation_args getEmptyArgsInstance() {
        return new PercentilesAggregation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public PercentilesAggregation_result getResult(I iface, PercentilesAggregation_args args) throws org.apache.thrift.TException {
        PercentilesAggregation_result result = new PercentilesAggregation_result();
        result.success = iface.PercentilesAggregation(args.hostIp, args.port, args.clusterName, args.indexName, args.typeName, args.aggFdName, args.aggType);
        return result;
      }
    }

    public static class TermsAggregation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, TermsAggregation_args> {
      public TermsAggregation() {
        super("TermsAggregation");
      }

      public TermsAggregation_args getEmptyArgsInstance() {
        return new TermsAggregation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public TermsAggregation_result getResult(I iface, TermsAggregation_args args) throws org.apache.thrift.TException {
        TermsAggregation_result result = new TermsAggregation_result();
        result.success = iface.TermsAggregation(args.hostIp, args.port, args.clusterName, args.indexName, args.typeName, args.aggFdName);
        return result;
      }
    }

    public static class MustSearch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MustSearch_args> {
      public MustSearch() {
        super("MustSearch");
      }

      public MustSearch_args getEmptyArgsInstance() {
        return new MustSearch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public MustSearch_result getResult(I iface, MustSearch_args args) throws org.apache.thrift.TException {
        MustSearch_result result = new MustSearch_result();
        result.success = iface.MustSearch(args.hostIp, args.port, args.clusterName, args.indexName, args.typeName, args.filed, args.filedName, args.start, args.size);
        return result;
      }
    }

    public static class ShouldSearch<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ShouldSearch_args> {
      public ShouldSearch() {
        super("ShouldSearch");
      }

      public ShouldSearch_args getEmptyArgsInstance() {
        return new ShouldSearch_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public ShouldSearch_result getResult(I iface, ShouldSearch_args args) throws org.apache.thrift.TException {
        ShouldSearch_result result = new ShouldSearch_result();
        result.success = iface.ShouldSearch(args.hostIp, args.port, args.clusterName, args.indexName, args.typeName, args.filed, args.filedName, args.start, args.size);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ConditionalQuery", new ConditionalQuery());
      processMap.put("FuzzyQuery", new FuzzyQuery());
      processMap.put("FileterQuery", new FileterQuery());
      processMap.put("StatsAggregation", new StatsAggregation());
      processMap.put("PercentilesAggregation", new PercentilesAggregation());
      processMap.put("TermsAggregation", new TermsAggregation());
      processMap.put("MustSearch", new MustSearch());
      processMap.put("ShouldSearch", new ShouldSearch());
      return processMap;
    }

    public static class ConditionalQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ConditionalQuery_args, java.util.Map<java.lang.String,java.lang.String>> {
      public ConditionalQuery() {
        super("ConditionalQuery");
      }

      public ConditionalQuery_args getEmptyArgsInstance() {
        return new ConditionalQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>>() { 
          public void onComplete(java.util.Map<java.lang.String,java.lang.String> o) {
            ConditionalQuery_result result = new ConditionalQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ConditionalQuery_result result = new ConditionalQuery_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ConditionalQuery_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.ConditionalQuery(args.hostIps, args.clusterName, args.indexName, args.typeName, args.port, args.start, args.size, args.sentence,resultHandler);
      }
    }

    public static class FuzzyQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, FuzzyQuery_args, java.util.Map<java.lang.String,java.lang.String>> {
      public FuzzyQuery() {
        super("FuzzyQuery");
      }

      public FuzzyQuery_args getEmptyArgsInstance() {
        return new FuzzyQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>>() { 
          public void onComplete(java.util.Map<java.lang.String,java.lang.String> o) {
            FuzzyQuery_result result = new FuzzyQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            FuzzyQuery_result result = new FuzzyQuery_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, FuzzyQuery_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.FuzzyQuery(args.hostIps, args.clusterName, args.indexName, args.typeName, args.port, args.start, args.size, args.sentence, args.field,resultHandler);
      }
    }

    public static class FileterQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, FileterQuery_args, java.util.Map<java.lang.String,java.lang.String>> {
      public FileterQuery() {
        super("FileterQuery");
      }

      public FileterQuery_args getEmptyArgsInstance() {
        return new FileterQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>>() { 
          public void onComplete(java.util.Map<java.lang.String,java.lang.String> o) {
            FileterQuery_result result = new FileterQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            FileterQuery_result result = new FileterQuery_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, FileterQuery_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.FileterQuery(args.hostIps, args.clusterName, args.indexName, args.typeName, args.port, args.start, args.size, args.field, args.gte, args.lte,resultHandler);
      }
    }

    public static class StatsAggregation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, StatsAggregation_args, java.util.Map<java.lang.String,java.lang.String>> {
      public StatsAggregation() {
        super("StatsAggregation");
      }

      public StatsAggregation_args getEmptyArgsInstance() {
        return new StatsAggregation_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>>() { 
          public void onComplete(java.util.Map<java.lang.String,java.lang.String> o) {
            StatsAggregation_result result = new StatsAggregation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            StatsAggregation_result result = new StatsAggregation_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, StatsAggregation_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.StatsAggregation(args.hostIp, args.port, args.clusterName, args.indexName, args.typeName, args.aggFdName, args.aggType,resultHandler);
      }
    }

    public static class PercentilesAggregation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, PercentilesAggregation_args, java.util.Map<java.lang.String,java.lang.String>> {
      public PercentilesAggregation() {
        super("PercentilesAggregation");
      }

      public PercentilesAggregation_args getEmptyArgsInstance() {
        return new PercentilesAggregation_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>>() { 
          public void onComplete(java.util.Map<java.lang.String,java.lang.String> o) {
            PercentilesAggregation_result result = new PercentilesAggregation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            PercentilesAggregation_result result = new PercentilesAggregation_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, PercentilesAggregation_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.PercentilesAggregation(args.hostIp, args.port, args.clusterName, args.indexName, args.typeName, args.aggFdName, args.aggType,resultHandler);
      }
    }

    public static class TermsAggregation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, TermsAggregation_args, java.util.Map<java.lang.String,java.lang.String>> {
      public TermsAggregation() {
        super("TermsAggregation");
      }

      public TermsAggregation_args getEmptyArgsInstance() {
        return new TermsAggregation_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>>() { 
          public void onComplete(java.util.Map<java.lang.String,java.lang.String> o) {
            TermsAggregation_result result = new TermsAggregation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            TermsAggregation_result result = new TermsAggregation_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, TermsAggregation_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.TermsAggregation(args.hostIp, args.port, args.clusterName, args.indexName, args.typeName, args.aggFdName,resultHandler);
      }
    }

    public static class MustSearch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MustSearch_args, java.util.Map<java.lang.String,java.lang.String>> {
      public MustSearch() {
        super("MustSearch");
      }

      public MustSearch_args getEmptyArgsInstance() {
        return new MustSearch_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>>() { 
          public void onComplete(java.util.Map<java.lang.String,java.lang.String> o) {
            MustSearch_result result = new MustSearch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            MustSearch_result result = new MustSearch_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, MustSearch_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.MustSearch(args.hostIp, args.port, args.clusterName, args.indexName, args.typeName, args.filed, args.filedName, args.start, args.size,resultHandler);
      }
    }

    public static class ShouldSearch<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ShouldSearch_args, java.util.Map<java.lang.String,java.lang.String>> {
      public ShouldSearch() {
        super("ShouldSearch");
      }

      public ShouldSearch_args getEmptyArgsInstance() {
        return new ShouldSearch_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>>() { 
          public void onComplete(java.util.Map<java.lang.String,java.lang.String> o) {
            ShouldSearch_result result = new ShouldSearch_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ShouldSearch_result result = new ShouldSearch_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ShouldSearch_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.ShouldSearch(args.hostIp, args.port, args.clusterName, args.indexName, args.typeName, args.filed, args.filedName, args.start, args.size,resultHandler);
      }
    }

  }

  public static class ConditionalQuery_args implements org.apache.thrift.TBase<ConditionalQuery_args, ConditionalQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<ConditionalQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConditionalQuery_args");

    private static final org.apache.thrift.protocol.TField HOST_IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIps", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("indexName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField SENTENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("sentence", org.apache.thrift.protocol.TType.STRING, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConditionalQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConditionalQuery_argsTupleSchemeFactory();

    public java.lang.String hostIps; // required
    public java.lang.String clusterName; // required
    public java.lang.String indexName; // required
    public java.lang.String typeName; // required
    public int port; // required
    public int start; // required
    public int size; // required
    public java.lang.String sentence; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_IPS((short)1, "hostIps"),
      CLUSTER_NAME((short)2, "clusterName"),
      INDEX_NAME((short)3, "indexName"),
      TYPE_NAME((short)4, "typeName"),
      PORT((short)5, "port"),
      START((short)6, "start"),
      SIZE((short)7, "size"),
      SENTENCE((short)8, "sentence");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_IPS
            return HOST_IPS;
          case 2: // CLUSTER_NAME
            return CLUSTER_NAME;
          case 3: // INDEX_NAME
            return INDEX_NAME;
          case 4: // TYPE_NAME
            return TYPE_NAME;
          case 5: // PORT
            return PORT;
          case 6: // START
            return START;
          case 7: // SIZE
            return SIZE;
          case 8: // SENTENCE
            return SENTENCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __SIZE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_IPS, new org.apache.thrift.meta_data.FieldMetaData("hostIps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("clusterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("indexName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.SENTENCE, new org.apache.thrift.meta_data.FieldMetaData("sentence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConditionalQuery_args.class, metaDataMap);
    }

    public ConditionalQuery_args() {
    }

    public ConditionalQuery_args(
      java.lang.String hostIps,
      java.lang.String clusterName,
      java.lang.String indexName,
      java.lang.String typeName,
      int port,
      int start,
      int size,
      java.lang.String sentence)
    {
      this();
      this.hostIps = hostIps;
      this.clusterName = clusterName;
      this.indexName = indexName;
      this.typeName = typeName;
      this.port = port;
      setPortIsSet(true);
      this.start = start;
      setStartIsSet(true);
      this.size = size;
      setSizeIsSet(true);
      this.sentence = sentence;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ConditionalQuery_args(ConditionalQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHostIps()) {
        this.hostIps = other.hostIps;
      }
      if (other.isSetClusterName()) {
        this.clusterName = other.clusterName;
      }
      if (other.isSetIndexName()) {
        this.indexName = other.indexName;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      this.port = other.port;
      this.start = other.start;
      this.size = other.size;
      if (other.isSetSentence()) {
        this.sentence = other.sentence;
      }
    }

    public ConditionalQuery_args deepCopy() {
      return new ConditionalQuery_args(this);
    }

    @Override
    public void clear() {
      this.hostIps = null;
      this.clusterName = null;
      this.indexName = null;
      this.typeName = null;
      setPortIsSet(false);
      this.port = 0;
      setStartIsSet(false);
      this.start = 0;
      setSizeIsSet(false);
      this.size = 0;
      this.sentence = null;
    }

    public java.lang.String getHostIps() {
      return this.hostIps;
    }

    public ConditionalQuery_args setHostIps(java.lang.String hostIps) {
      this.hostIps = hostIps;
      return this;
    }

    public void unsetHostIps() {
      this.hostIps = null;
    }

    /** Returns true if field hostIps is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIps() {
      return this.hostIps != null;
    }

    public void setHostIpsIsSet(boolean value) {
      if (!value) {
        this.hostIps = null;
      }
    }

    public java.lang.String getClusterName() {
      return this.clusterName;
    }

    public ConditionalQuery_args setClusterName(java.lang.String clusterName) {
      this.clusterName = clusterName;
      return this;
    }

    public void unsetClusterName() {
      this.clusterName = null;
    }

    /** Returns true if field clusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterName() {
      return this.clusterName != null;
    }

    public void setClusterNameIsSet(boolean value) {
      if (!value) {
        this.clusterName = null;
      }
    }

    public java.lang.String getIndexName() {
      return this.indexName;
    }

    public ConditionalQuery_args setIndexName(java.lang.String indexName) {
      this.indexName = indexName;
      return this;
    }

    public void unsetIndexName() {
      this.indexName = null;
    }

    /** Returns true if field indexName is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexName() {
      return this.indexName != null;
    }

    public void setIndexNameIsSet(boolean value) {
      if (!value) {
        this.indexName = null;
      }
    }

    public java.lang.String getTypeName() {
      return this.typeName;
    }

    public ConditionalQuery_args setTypeName(java.lang.String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public ConditionalQuery_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public int getStart() {
      return this.start;
    }

    public ConditionalQuery_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getSize() {
      return this.size;
    }

    public ConditionalQuery_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    public java.lang.String getSentence() {
      return this.sentence;
    }

    public ConditionalQuery_args setSentence(java.lang.String sentence) {
      this.sentence = sentence;
      return this;
    }

    public void unsetSentence() {
      this.sentence = null;
    }

    /** Returns true if field sentence is set (has been assigned a value) and false otherwise */
    public boolean isSetSentence() {
      return this.sentence != null;
    }

    public void setSentenceIsSet(boolean value) {
      if (!value) {
        this.sentence = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOST_IPS:
        if (value == null) {
          unsetHostIps();
        } else {
          setHostIps((java.lang.String)value);
        }
        break;

      case CLUSTER_NAME:
        if (value == null) {
          unsetClusterName();
        } else {
          setClusterName((java.lang.String)value);
        }
        break;

      case INDEX_NAME:
        if (value == null) {
          unsetIndexName();
        } else {
          setIndexName((java.lang.String)value);
        }
        break;

      case TYPE_NAME:
        if (value == null) {
          unsetTypeName();
        } else {
          setTypeName((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.Integer)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((java.lang.Integer)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((java.lang.Integer)value);
        }
        break;

      case SENTENCE:
        if (value == null) {
          unsetSentence();
        } else {
          setSentence((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_IPS:
        return getHostIps();

      case CLUSTER_NAME:
        return getClusterName();

      case INDEX_NAME:
        return getIndexName();

      case TYPE_NAME:
        return getTypeName();

      case PORT:
        return getPort();

      case START:
        return getStart();

      case SIZE:
        return getSize();

      case SENTENCE:
        return getSentence();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST_IPS:
        return isSetHostIps();
      case CLUSTER_NAME:
        return isSetClusterName();
      case INDEX_NAME:
        return isSetIndexName();
      case TYPE_NAME:
        return isSetTypeName();
      case PORT:
        return isSetPort();
      case START:
        return isSetStart();
      case SIZE:
        return isSetSize();
      case SENTENCE:
        return isSetSentence();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ConditionalQuery_args)
        return this.equals((ConditionalQuery_args)that);
      return false;
    }

    public boolean equals(ConditionalQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hostIps = true && this.isSetHostIps();
      boolean that_present_hostIps = true && that.isSetHostIps();
      if (this_present_hostIps || that_present_hostIps) {
        if (!(this_present_hostIps && that_present_hostIps))
          return false;
        if (!this.hostIps.equals(that.hostIps))
          return false;
      }

      boolean this_present_clusterName = true && this.isSetClusterName();
      boolean that_present_clusterName = true && that.isSetClusterName();
      if (this_present_clusterName || that_present_clusterName) {
        if (!(this_present_clusterName && that_present_clusterName))
          return false;
        if (!this.clusterName.equals(that.clusterName))
          return false;
      }

      boolean this_present_indexName = true && this.isSetIndexName();
      boolean that_present_indexName = true && that.isSetIndexName();
      if (this_present_indexName || that_present_indexName) {
        if (!(this_present_indexName && that_present_indexName))
          return false;
        if (!this.indexName.equals(that.indexName))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      boolean this_present_sentence = true && this.isSetSentence();
      boolean that_present_sentence = true && that.isSetSentence();
      if (this_present_sentence || that_present_sentence) {
        if (!(this_present_sentence && that_present_sentence))
          return false;
        if (!this.sentence.equals(that.sentence))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHostIps()) ? 131071 : 524287);
      if (isSetHostIps())
        hashCode = hashCode * 8191 + hostIps.hashCode();

      hashCode = hashCode * 8191 + ((isSetClusterName()) ? 131071 : 524287);
      if (isSetClusterName())
        hashCode = hashCode * 8191 + clusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIndexName()) ? 131071 : 524287);
      if (isSetIndexName())
        hashCode = hashCode * 8191 + indexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypeName()) ? 131071 : 524287);
      if (isSetTypeName())
        hashCode = hashCode * 8191 + typeName.hashCode();

      hashCode = hashCode * 8191 + port;

      hashCode = hashCode * 8191 + start;

      hashCode = hashCode * 8191 + size;

      hashCode = hashCode * 8191 + ((isSetSentence()) ? 131071 : 524287);
      if (isSetSentence())
        hashCode = hashCode * 8191 + sentence.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ConditionalQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHostIps()).compareTo(other.isSetHostIps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIps, other.hostIps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClusterName()).compareTo(other.isSetClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterName, other.clusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIndexName()).compareTo(other.isSetIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexName, other.indexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSentence()).compareTo(other.isSetSentence());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSentence()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentence, other.sentence);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ConditionalQuery_args(");
      boolean first = true;

      sb.append("hostIps:");
      if (this.hostIps == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIps);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clusterName:");
      if (this.clusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexName:");
      if (this.indexName == null) {
        sb.append("null");
      } else {
        sb.append(this.indexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sentence:");
      if (this.sentence == null) {
        sb.append("null");
      } else {
        sb.append(this.sentence);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ConditionalQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ConditionalQuery_argsStandardScheme getScheme() {
        return new ConditionalQuery_argsStandardScheme();
      }
    }

    private static class ConditionalQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConditionalQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ConditionalQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_IPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIps = iprot.readString();
                struct.setHostIpsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterName = iprot.readString();
                struct.setClusterNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.indexName = iprot.readString();
                struct.setIndexNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.size = iprot.readI32();
                struct.setSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // SENTENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sentence = iprot.readString();
                struct.setSentenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ConditionalQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostIps != null) {
          oprot.writeFieldBegin(HOST_IPS_FIELD_DESC);
          oprot.writeString(struct.hostIps);
          oprot.writeFieldEnd();
        }
        if (struct.clusterName != null) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.clusterName);
          oprot.writeFieldEnd();
        }
        if (struct.indexName != null) {
          oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.indexName);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeI32(struct.size);
        oprot.writeFieldEnd();
        if (struct.sentence != null) {
          oprot.writeFieldBegin(SENTENCE_FIELD_DESC);
          oprot.writeString(struct.sentence);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ConditionalQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ConditionalQuery_argsTupleScheme getScheme() {
        return new ConditionalQuery_argsTupleScheme();
      }
    }

    private static class ConditionalQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConditionalQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ConditionalQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHostIps()) {
          optionals.set(0);
        }
        if (struct.isSetClusterName()) {
          optionals.set(1);
        }
        if (struct.isSetIndexName()) {
          optionals.set(2);
        }
        if (struct.isSetTypeName()) {
          optionals.set(3);
        }
        if (struct.isSetPort()) {
          optionals.set(4);
        }
        if (struct.isSetStart()) {
          optionals.set(5);
        }
        if (struct.isSetSize()) {
          optionals.set(6);
        }
        if (struct.isSetSentence()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetHostIps()) {
          oprot.writeString(struct.hostIps);
        }
        if (struct.isSetClusterName()) {
          oprot.writeString(struct.clusterName);
        }
        if (struct.isSetIndexName()) {
          oprot.writeString(struct.indexName);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetSize()) {
          oprot.writeI32(struct.size);
        }
        if (struct.isSetSentence()) {
          oprot.writeString(struct.sentence);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ConditionalQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.hostIps = iprot.readString();
          struct.setHostIpsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clusterName = iprot.readString();
          struct.setClusterNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.indexName = iprot.readString();
          struct.setIndexNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(5)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(6)) {
          struct.size = iprot.readI32();
          struct.setSizeIsSet(true);
        }
        if (incoming.get(7)) {
          struct.sentence = iprot.readString();
          struct.setSentenceIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ConditionalQuery_result implements org.apache.thrift.TBase<ConditionalQuery_result, ConditionalQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<ConditionalQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ConditionalQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ConditionalQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ConditionalQuery_resultTupleSchemeFactory();

    public java.util.Map<java.lang.String,java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ConditionalQuery_result.class, metaDataMap);
    }

    public ConditionalQuery_result() {
    }

    public ConditionalQuery_result(
      java.util.Map<java.lang.String,java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ConditionalQuery_result(ConditionalQuery_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.String> __this__success = new java.util.HashMap<java.lang.String,java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public ConditionalQuery_result deepCopy() {
      return new ConditionalQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getSuccess() {
      return this.success;
    }

    public ConditionalQuery_result setSuccess(java.util.Map<java.lang.String,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ConditionalQuery_result)
        return this.equals((ConditionalQuery_result)that);
      return false;
    }

    public boolean equals(ConditionalQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ConditionalQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ConditionalQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ConditionalQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ConditionalQuery_resultStandardScheme getScheme() {
        return new ConditionalQuery_resultStandardScheme();
      }
    }

    private static class ConditionalQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ConditionalQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ConditionalQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map0.size);
                  java.lang.String _key1;
                  java.lang.String _val2;
                  for (int _i3 = 0; _i3 < _map0.size; ++_i3)
                  {
                    _key1 = iprot.readString();
                    _val2 = iprot.readString();
                    struct.success.put(_key1, _val2);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ConditionalQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter4 : struct.success.entrySet())
            {
              oprot.writeString(_iter4.getKey());
              oprot.writeString(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ConditionalQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ConditionalQuery_resultTupleScheme getScheme() {
        return new ConditionalQuery_resultTupleScheme();
      }
    }

    private static class ConditionalQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ConditionalQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ConditionalQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter5 : struct.success.entrySet())
            {
              oprot.writeString(_iter5.getKey());
              oprot.writeString(_iter5.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ConditionalQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map6.size);
            java.lang.String _key7;
            java.lang.String _val8;
            for (int _i9 = 0; _i9 < _map6.size; ++_i9)
            {
              _key7 = iprot.readString();
              _val8 = iprot.readString();
              struct.success.put(_key7, _val8);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class FuzzyQuery_args implements org.apache.thrift.TBase<FuzzyQuery_args, FuzzyQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<FuzzyQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FuzzyQuery_args");

    private static final org.apache.thrift.protocol.TField HOST_IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIps", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("indexName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField SENTENCE_FIELD_DESC = new org.apache.thrift.protocol.TField("sentence", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("field", org.apache.thrift.protocol.TType.STRING, (short)9);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FuzzyQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FuzzyQuery_argsTupleSchemeFactory();

    public java.lang.String hostIps; // required
    public java.lang.String clusterName; // required
    public java.lang.String indexName; // required
    public java.lang.String typeName; // required
    public int port; // required
    public int start; // required
    public int size; // required
    public java.lang.String sentence; // required
    public java.lang.String field; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_IPS((short)1, "hostIps"),
      CLUSTER_NAME((short)2, "clusterName"),
      INDEX_NAME((short)3, "indexName"),
      TYPE_NAME((short)4, "typeName"),
      PORT((short)5, "port"),
      START((short)6, "start"),
      SIZE((short)7, "size"),
      SENTENCE((short)8, "sentence"),
      FIELD((short)9, "field");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_IPS
            return HOST_IPS;
          case 2: // CLUSTER_NAME
            return CLUSTER_NAME;
          case 3: // INDEX_NAME
            return INDEX_NAME;
          case 4: // TYPE_NAME
            return TYPE_NAME;
          case 5: // PORT
            return PORT;
          case 6: // START
            return START;
          case 7: // SIZE
            return SIZE;
          case 8: // SENTENCE
            return SENTENCE;
          case 9: // FIELD
            return FIELD;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __SIZE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_IPS, new org.apache.thrift.meta_data.FieldMetaData("hostIps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("clusterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("indexName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.SENTENCE, new org.apache.thrift.meta_data.FieldMetaData("sentence", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FIELD, new org.apache.thrift.meta_data.FieldMetaData("field", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FuzzyQuery_args.class, metaDataMap);
    }

    public FuzzyQuery_args() {
    }

    public FuzzyQuery_args(
      java.lang.String hostIps,
      java.lang.String clusterName,
      java.lang.String indexName,
      java.lang.String typeName,
      int port,
      int start,
      int size,
      java.lang.String sentence,
      java.lang.String field)
    {
      this();
      this.hostIps = hostIps;
      this.clusterName = clusterName;
      this.indexName = indexName;
      this.typeName = typeName;
      this.port = port;
      setPortIsSet(true);
      this.start = start;
      setStartIsSet(true);
      this.size = size;
      setSizeIsSet(true);
      this.sentence = sentence;
      this.field = field;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FuzzyQuery_args(FuzzyQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHostIps()) {
        this.hostIps = other.hostIps;
      }
      if (other.isSetClusterName()) {
        this.clusterName = other.clusterName;
      }
      if (other.isSetIndexName()) {
        this.indexName = other.indexName;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      this.port = other.port;
      this.start = other.start;
      this.size = other.size;
      if (other.isSetSentence()) {
        this.sentence = other.sentence;
      }
      if (other.isSetField()) {
        this.field = other.field;
      }
    }

    public FuzzyQuery_args deepCopy() {
      return new FuzzyQuery_args(this);
    }

    @Override
    public void clear() {
      this.hostIps = null;
      this.clusterName = null;
      this.indexName = null;
      this.typeName = null;
      setPortIsSet(false);
      this.port = 0;
      setStartIsSet(false);
      this.start = 0;
      setSizeIsSet(false);
      this.size = 0;
      this.sentence = null;
      this.field = null;
    }

    public java.lang.String getHostIps() {
      return this.hostIps;
    }

    public FuzzyQuery_args setHostIps(java.lang.String hostIps) {
      this.hostIps = hostIps;
      return this;
    }

    public void unsetHostIps() {
      this.hostIps = null;
    }

    /** Returns true if field hostIps is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIps() {
      return this.hostIps != null;
    }

    public void setHostIpsIsSet(boolean value) {
      if (!value) {
        this.hostIps = null;
      }
    }

    public java.lang.String getClusterName() {
      return this.clusterName;
    }

    public FuzzyQuery_args setClusterName(java.lang.String clusterName) {
      this.clusterName = clusterName;
      return this;
    }

    public void unsetClusterName() {
      this.clusterName = null;
    }

    /** Returns true if field clusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterName() {
      return this.clusterName != null;
    }

    public void setClusterNameIsSet(boolean value) {
      if (!value) {
        this.clusterName = null;
      }
    }

    public java.lang.String getIndexName() {
      return this.indexName;
    }

    public FuzzyQuery_args setIndexName(java.lang.String indexName) {
      this.indexName = indexName;
      return this;
    }

    public void unsetIndexName() {
      this.indexName = null;
    }

    /** Returns true if field indexName is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexName() {
      return this.indexName != null;
    }

    public void setIndexNameIsSet(boolean value) {
      if (!value) {
        this.indexName = null;
      }
    }

    public java.lang.String getTypeName() {
      return this.typeName;
    }

    public FuzzyQuery_args setTypeName(java.lang.String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public FuzzyQuery_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public int getStart() {
      return this.start;
    }

    public FuzzyQuery_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getSize() {
      return this.size;
    }

    public FuzzyQuery_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    public java.lang.String getSentence() {
      return this.sentence;
    }

    public FuzzyQuery_args setSentence(java.lang.String sentence) {
      this.sentence = sentence;
      return this;
    }

    public void unsetSentence() {
      this.sentence = null;
    }

    /** Returns true if field sentence is set (has been assigned a value) and false otherwise */
    public boolean isSetSentence() {
      return this.sentence != null;
    }

    public void setSentenceIsSet(boolean value) {
      if (!value) {
        this.sentence = null;
      }
    }

    public java.lang.String getField() {
      return this.field;
    }

    public FuzzyQuery_args setField(java.lang.String field) {
      this.field = field;
      return this;
    }

    public void unsetField() {
      this.field = null;
    }

    /** Returns true if field field is set (has been assigned a value) and false otherwise */
    public boolean isSetField() {
      return this.field != null;
    }

    public void setFieldIsSet(boolean value) {
      if (!value) {
        this.field = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOST_IPS:
        if (value == null) {
          unsetHostIps();
        } else {
          setHostIps((java.lang.String)value);
        }
        break;

      case CLUSTER_NAME:
        if (value == null) {
          unsetClusterName();
        } else {
          setClusterName((java.lang.String)value);
        }
        break;

      case INDEX_NAME:
        if (value == null) {
          unsetIndexName();
        } else {
          setIndexName((java.lang.String)value);
        }
        break;

      case TYPE_NAME:
        if (value == null) {
          unsetTypeName();
        } else {
          setTypeName((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.Integer)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((java.lang.Integer)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((java.lang.Integer)value);
        }
        break;

      case SENTENCE:
        if (value == null) {
          unsetSentence();
        } else {
          setSentence((java.lang.String)value);
        }
        break;

      case FIELD:
        if (value == null) {
          unsetField();
        } else {
          setField((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_IPS:
        return getHostIps();

      case CLUSTER_NAME:
        return getClusterName();

      case INDEX_NAME:
        return getIndexName();

      case TYPE_NAME:
        return getTypeName();

      case PORT:
        return getPort();

      case START:
        return getStart();

      case SIZE:
        return getSize();

      case SENTENCE:
        return getSentence();

      case FIELD:
        return getField();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST_IPS:
        return isSetHostIps();
      case CLUSTER_NAME:
        return isSetClusterName();
      case INDEX_NAME:
        return isSetIndexName();
      case TYPE_NAME:
        return isSetTypeName();
      case PORT:
        return isSetPort();
      case START:
        return isSetStart();
      case SIZE:
        return isSetSize();
      case SENTENCE:
        return isSetSentence();
      case FIELD:
        return isSetField();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof FuzzyQuery_args)
        return this.equals((FuzzyQuery_args)that);
      return false;
    }

    public boolean equals(FuzzyQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hostIps = true && this.isSetHostIps();
      boolean that_present_hostIps = true && that.isSetHostIps();
      if (this_present_hostIps || that_present_hostIps) {
        if (!(this_present_hostIps && that_present_hostIps))
          return false;
        if (!this.hostIps.equals(that.hostIps))
          return false;
      }

      boolean this_present_clusterName = true && this.isSetClusterName();
      boolean that_present_clusterName = true && that.isSetClusterName();
      if (this_present_clusterName || that_present_clusterName) {
        if (!(this_present_clusterName && that_present_clusterName))
          return false;
        if (!this.clusterName.equals(that.clusterName))
          return false;
      }

      boolean this_present_indexName = true && this.isSetIndexName();
      boolean that_present_indexName = true && that.isSetIndexName();
      if (this_present_indexName || that_present_indexName) {
        if (!(this_present_indexName && that_present_indexName))
          return false;
        if (!this.indexName.equals(that.indexName))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      boolean this_present_sentence = true && this.isSetSentence();
      boolean that_present_sentence = true && that.isSetSentence();
      if (this_present_sentence || that_present_sentence) {
        if (!(this_present_sentence && that_present_sentence))
          return false;
        if (!this.sentence.equals(that.sentence))
          return false;
      }

      boolean this_present_field = true && this.isSetField();
      boolean that_present_field = true && that.isSetField();
      if (this_present_field || that_present_field) {
        if (!(this_present_field && that_present_field))
          return false;
        if (!this.field.equals(that.field))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHostIps()) ? 131071 : 524287);
      if (isSetHostIps())
        hashCode = hashCode * 8191 + hostIps.hashCode();

      hashCode = hashCode * 8191 + ((isSetClusterName()) ? 131071 : 524287);
      if (isSetClusterName())
        hashCode = hashCode * 8191 + clusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIndexName()) ? 131071 : 524287);
      if (isSetIndexName())
        hashCode = hashCode * 8191 + indexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypeName()) ? 131071 : 524287);
      if (isSetTypeName())
        hashCode = hashCode * 8191 + typeName.hashCode();

      hashCode = hashCode * 8191 + port;

      hashCode = hashCode * 8191 + start;

      hashCode = hashCode * 8191 + size;

      hashCode = hashCode * 8191 + ((isSetSentence()) ? 131071 : 524287);
      if (isSetSentence())
        hashCode = hashCode * 8191 + sentence.hashCode();

      hashCode = hashCode * 8191 + ((isSetField()) ? 131071 : 524287);
      if (isSetField())
        hashCode = hashCode * 8191 + field.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(FuzzyQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHostIps()).compareTo(other.isSetHostIps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIps, other.hostIps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClusterName()).compareTo(other.isSetClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterName, other.clusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIndexName()).compareTo(other.isSetIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexName, other.indexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSentence()).compareTo(other.isSetSentence());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSentence()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sentence, other.sentence);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetField()).compareTo(other.isSetField());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetField()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field, other.field);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("FuzzyQuery_args(");
      boolean first = true;

      sb.append("hostIps:");
      if (this.hostIps == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIps);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clusterName:");
      if (this.clusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexName:");
      if (this.indexName == null) {
        sb.append("null");
      } else {
        sb.append(this.indexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sentence:");
      if (this.sentence == null) {
        sb.append("null");
      } else {
        sb.append(this.sentence);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("field:");
      if (this.field == null) {
        sb.append("null");
      } else {
        sb.append(this.field);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FuzzyQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FuzzyQuery_argsStandardScheme getScheme() {
        return new FuzzyQuery_argsStandardScheme();
      }
    }

    private static class FuzzyQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<FuzzyQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FuzzyQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_IPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIps = iprot.readString();
                struct.setHostIpsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterName = iprot.readString();
                struct.setClusterNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.indexName = iprot.readString();
                struct.setIndexNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.size = iprot.readI32();
                struct.setSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // SENTENCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sentence = iprot.readString();
                struct.setSentenceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // FIELD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.field = iprot.readString();
                struct.setFieldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FuzzyQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostIps != null) {
          oprot.writeFieldBegin(HOST_IPS_FIELD_DESC);
          oprot.writeString(struct.hostIps);
          oprot.writeFieldEnd();
        }
        if (struct.clusterName != null) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.clusterName);
          oprot.writeFieldEnd();
        }
        if (struct.indexName != null) {
          oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.indexName);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeI32(struct.size);
        oprot.writeFieldEnd();
        if (struct.sentence != null) {
          oprot.writeFieldBegin(SENTENCE_FIELD_DESC);
          oprot.writeString(struct.sentence);
          oprot.writeFieldEnd();
        }
        if (struct.field != null) {
          oprot.writeFieldBegin(FIELD_FIELD_DESC);
          oprot.writeString(struct.field);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FuzzyQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FuzzyQuery_argsTupleScheme getScheme() {
        return new FuzzyQuery_argsTupleScheme();
      }
    }

    private static class FuzzyQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<FuzzyQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FuzzyQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHostIps()) {
          optionals.set(0);
        }
        if (struct.isSetClusterName()) {
          optionals.set(1);
        }
        if (struct.isSetIndexName()) {
          optionals.set(2);
        }
        if (struct.isSetTypeName()) {
          optionals.set(3);
        }
        if (struct.isSetPort()) {
          optionals.set(4);
        }
        if (struct.isSetStart()) {
          optionals.set(5);
        }
        if (struct.isSetSize()) {
          optionals.set(6);
        }
        if (struct.isSetSentence()) {
          optionals.set(7);
        }
        if (struct.isSetField()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetHostIps()) {
          oprot.writeString(struct.hostIps);
        }
        if (struct.isSetClusterName()) {
          oprot.writeString(struct.clusterName);
        }
        if (struct.isSetIndexName()) {
          oprot.writeString(struct.indexName);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetSize()) {
          oprot.writeI32(struct.size);
        }
        if (struct.isSetSentence()) {
          oprot.writeString(struct.sentence);
        }
        if (struct.isSetField()) {
          oprot.writeString(struct.field);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FuzzyQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.hostIps = iprot.readString();
          struct.setHostIpsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clusterName = iprot.readString();
          struct.setClusterNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.indexName = iprot.readString();
          struct.setIndexNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(5)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(6)) {
          struct.size = iprot.readI32();
          struct.setSizeIsSet(true);
        }
        if (incoming.get(7)) {
          struct.sentence = iprot.readString();
          struct.setSentenceIsSet(true);
        }
        if (incoming.get(8)) {
          struct.field = iprot.readString();
          struct.setFieldIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class FuzzyQuery_result implements org.apache.thrift.TBase<FuzzyQuery_result, FuzzyQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<FuzzyQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FuzzyQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FuzzyQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FuzzyQuery_resultTupleSchemeFactory();

    public java.util.Map<java.lang.String,java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FuzzyQuery_result.class, metaDataMap);
    }

    public FuzzyQuery_result() {
    }

    public FuzzyQuery_result(
      java.util.Map<java.lang.String,java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FuzzyQuery_result(FuzzyQuery_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.String> __this__success = new java.util.HashMap<java.lang.String,java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public FuzzyQuery_result deepCopy() {
      return new FuzzyQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getSuccess() {
      return this.success;
    }

    public FuzzyQuery_result setSuccess(java.util.Map<java.lang.String,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof FuzzyQuery_result)
        return this.equals((FuzzyQuery_result)that);
      return false;
    }

    public boolean equals(FuzzyQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(FuzzyQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("FuzzyQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FuzzyQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FuzzyQuery_resultStandardScheme getScheme() {
        return new FuzzyQuery_resultStandardScheme();
      }
    }

    private static class FuzzyQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<FuzzyQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FuzzyQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map10.size);
                  java.lang.String _key11;
                  java.lang.String _val12;
                  for (int _i13 = 0; _i13 < _map10.size; ++_i13)
                  {
                    _key11 = iprot.readString();
                    _val12 = iprot.readString();
                    struct.success.put(_key11, _val12);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FuzzyQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter14 : struct.success.entrySet())
            {
              oprot.writeString(_iter14.getKey());
              oprot.writeString(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FuzzyQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FuzzyQuery_resultTupleScheme getScheme() {
        return new FuzzyQuery_resultTupleScheme();
      }
    }

    private static class FuzzyQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<FuzzyQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FuzzyQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter15 : struct.success.entrySet())
            {
              oprot.writeString(_iter15.getKey());
              oprot.writeString(_iter15.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FuzzyQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map16.size);
            java.lang.String _key17;
            java.lang.String _val18;
            for (int _i19 = 0; _i19 < _map16.size; ++_i19)
            {
              _key17 = iprot.readString();
              _val18 = iprot.readString();
              struct.success.put(_key17, _val18);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class FileterQuery_args implements org.apache.thrift.TBase<FileterQuery_args, FileterQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<FileterQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileterQuery_args");

    private static final org.apache.thrift.protocol.TField HOST_IPS_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIps", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("indexName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)6);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)7);
    private static final org.apache.thrift.protocol.TField FIELD_FIELD_DESC = new org.apache.thrift.protocol.TField("field", org.apache.thrift.protocol.TType.STRING, (short)8);
    private static final org.apache.thrift.protocol.TField GTE_FIELD_DESC = new org.apache.thrift.protocol.TField("gte", org.apache.thrift.protocol.TType.STRING, (short)9);
    private static final org.apache.thrift.protocol.TField LTE_FIELD_DESC = new org.apache.thrift.protocol.TField("lte", org.apache.thrift.protocol.TType.STRING, (short)10);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FileterQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FileterQuery_argsTupleSchemeFactory();

    public java.lang.String hostIps; // required
    public java.lang.String clusterName; // required
    public java.lang.String indexName; // required
    public java.lang.String typeName; // required
    public int port; // required
    public int start; // required
    public int size; // required
    public java.lang.String field; // required
    public java.lang.String gte; // required
    public java.lang.String lte; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_IPS((short)1, "hostIps"),
      CLUSTER_NAME((short)2, "clusterName"),
      INDEX_NAME((short)3, "indexName"),
      TYPE_NAME((short)4, "typeName"),
      PORT((short)5, "port"),
      START((short)6, "start"),
      SIZE((short)7, "size"),
      FIELD((short)8, "field"),
      GTE((short)9, "gte"),
      LTE((short)10, "lte");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_IPS
            return HOST_IPS;
          case 2: // CLUSTER_NAME
            return CLUSTER_NAME;
          case 3: // INDEX_NAME
            return INDEX_NAME;
          case 4: // TYPE_NAME
            return TYPE_NAME;
          case 5: // PORT
            return PORT;
          case 6: // START
            return START;
          case 7: // SIZE
            return SIZE;
          case 8: // FIELD
            return FIELD;
          case 9: // GTE
            return GTE;
          case 10: // LTE
            return LTE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __SIZE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_IPS, new org.apache.thrift.meta_data.FieldMetaData("hostIps", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("clusterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("indexName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.FIELD, new org.apache.thrift.meta_data.FieldMetaData("field", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GTE, new org.apache.thrift.meta_data.FieldMetaData("gte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LTE, new org.apache.thrift.meta_data.FieldMetaData("lte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileterQuery_args.class, metaDataMap);
    }

    public FileterQuery_args() {
    }

    public FileterQuery_args(
      java.lang.String hostIps,
      java.lang.String clusterName,
      java.lang.String indexName,
      java.lang.String typeName,
      int port,
      int start,
      int size,
      java.lang.String field,
      java.lang.String gte,
      java.lang.String lte)
    {
      this();
      this.hostIps = hostIps;
      this.clusterName = clusterName;
      this.indexName = indexName;
      this.typeName = typeName;
      this.port = port;
      setPortIsSet(true);
      this.start = start;
      setStartIsSet(true);
      this.size = size;
      setSizeIsSet(true);
      this.field = field;
      this.gte = gte;
      this.lte = lte;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FileterQuery_args(FileterQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHostIps()) {
        this.hostIps = other.hostIps;
      }
      if (other.isSetClusterName()) {
        this.clusterName = other.clusterName;
      }
      if (other.isSetIndexName()) {
        this.indexName = other.indexName;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      this.port = other.port;
      this.start = other.start;
      this.size = other.size;
      if (other.isSetField()) {
        this.field = other.field;
      }
      if (other.isSetGte()) {
        this.gte = other.gte;
      }
      if (other.isSetLte()) {
        this.lte = other.lte;
      }
    }

    public FileterQuery_args deepCopy() {
      return new FileterQuery_args(this);
    }

    @Override
    public void clear() {
      this.hostIps = null;
      this.clusterName = null;
      this.indexName = null;
      this.typeName = null;
      setPortIsSet(false);
      this.port = 0;
      setStartIsSet(false);
      this.start = 0;
      setSizeIsSet(false);
      this.size = 0;
      this.field = null;
      this.gte = null;
      this.lte = null;
    }

    public java.lang.String getHostIps() {
      return this.hostIps;
    }

    public FileterQuery_args setHostIps(java.lang.String hostIps) {
      this.hostIps = hostIps;
      return this;
    }

    public void unsetHostIps() {
      this.hostIps = null;
    }

    /** Returns true if field hostIps is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIps() {
      return this.hostIps != null;
    }

    public void setHostIpsIsSet(boolean value) {
      if (!value) {
        this.hostIps = null;
      }
    }

    public java.lang.String getClusterName() {
      return this.clusterName;
    }

    public FileterQuery_args setClusterName(java.lang.String clusterName) {
      this.clusterName = clusterName;
      return this;
    }

    public void unsetClusterName() {
      this.clusterName = null;
    }

    /** Returns true if field clusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterName() {
      return this.clusterName != null;
    }

    public void setClusterNameIsSet(boolean value) {
      if (!value) {
        this.clusterName = null;
      }
    }

    public java.lang.String getIndexName() {
      return this.indexName;
    }

    public FileterQuery_args setIndexName(java.lang.String indexName) {
      this.indexName = indexName;
      return this;
    }

    public void unsetIndexName() {
      this.indexName = null;
    }

    /** Returns true if field indexName is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexName() {
      return this.indexName != null;
    }

    public void setIndexNameIsSet(boolean value) {
      if (!value) {
        this.indexName = null;
      }
    }

    public java.lang.String getTypeName() {
      return this.typeName;
    }

    public FileterQuery_args setTypeName(java.lang.String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public FileterQuery_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public int getStart() {
      return this.start;
    }

    public FileterQuery_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getSize() {
      return this.size;
    }

    public FileterQuery_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    public java.lang.String getField() {
      return this.field;
    }

    public FileterQuery_args setField(java.lang.String field) {
      this.field = field;
      return this;
    }

    public void unsetField() {
      this.field = null;
    }

    /** Returns true if field field is set (has been assigned a value) and false otherwise */
    public boolean isSetField() {
      return this.field != null;
    }

    public void setFieldIsSet(boolean value) {
      if (!value) {
        this.field = null;
      }
    }

    public java.lang.String getGte() {
      return this.gte;
    }

    public FileterQuery_args setGte(java.lang.String gte) {
      this.gte = gte;
      return this;
    }

    public void unsetGte() {
      this.gte = null;
    }

    /** Returns true if field gte is set (has been assigned a value) and false otherwise */
    public boolean isSetGte() {
      return this.gte != null;
    }

    public void setGteIsSet(boolean value) {
      if (!value) {
        this.gte = null;
      }
    }

    public java.lang.String getLte() {
      return this.lte;
    }

    public FileterQuery_args setLte(java.lang.String lte) {
      this.lte = lte;
      return this;
    }

    public void unsetLte() {
      this.lte = null;
    }

    /** Returns true if field lte is set (has been assigned a value) and false otherwise */
    public boolean isSetLte() {
      return this.lte != null;
    }

    public void setLteIsSet(boolean value) {
      if (!value) {
        this.lte = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOST_IPS:
        if (value == null) {
          unsetHostIps();
        } else {
          setHostIps((java.lang.String)value);
        }
        break;

      case CLUSTER_NAME:
        if (value == null) {
          unsetClusterName();
        } else {
          setClusterName((java.lang.String)value);
        }
        break;

      case INDEX_NAME:
        if (value == null) {
          unsetIndexName();
        } else {
          setIndexName((java.lang.String)value);
        }
        break;

      case TYPE_NAME:
        if (value == null) {
          unsetTypeName();
        } else {
          setTypeName((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.Integer)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((java.lang.Integer)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((java.lang.Integer)value);
        }
        break;

      case FIELD:
        if (value == null) {
          unsetField();
        } else {
          setField((java.lang.String)value);
        }
        break;

      case GTE:
        if (value == null) {
          unsetGte();
        } else {
          setGte((java.lang.String)value);
        }
        break;

      case LTE:
        if (value == null) {
          unsetLte();
        } else {
          setLte((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_IPS:
        return getHostIps();

      case CLUSTER_NAME:
        return getClusterName();

      case INDEX_NAME:
        return getIndexName();

      case TYPE_NAME:
        return getTypeName();

      case PORT:
        return getPort();

      case START:
        return getStart();

      case SIZE:
        return getSize();

      case FIELD:
        return getField();

      case GTE:
        return getGte();

      case LTE:
        return getLte();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST_IPS:
        return isSetHostIps();
      case CLUSTER_NAME:
        return isSetClusterName();
      case INDEX_NAME:
        return isSetIndexName();
      case TYPE_NAME:
        return isSetTypeName();
      case PORT:
        return isSetPort();
      case START:
        return isSetStart();
      case SIZE:
        return isSetSize();
      case FIELD:
        return isSetField();
      case GTE:
        return isSetGte();
      case LTE:
        return isSetLte();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof FileterQuery_args)
        return this.equals((FileterQuery_args)that);
      return false;
    }

    public boolean equals(FileterQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hostIps = true && this.isSetHostIps();
      boolean that_present_hostIps = true && that.isSetHostIps();
      if (this_present_hostIps || that_present_hostIps) {
        if (!(this_present_hostIps && that_present_hostIps))
          return false;
        if (!this.hostIps.equals(that.hostIps))
          return false;
      }

      boolean this_present_clusterName = true && this.isSetClusterName();
      boolean that_present_clusterName = true && that.isSetClusterName();
      if (this_present_clusterName || that_present_clusterName) {
        if (!(this_present_clusterName && that_present_clusterName))
          return false;
        if (!this.clusterName.equals(that.clusterName))
          return false;
      }

      boolean this_present_indexName = true && this.isSetIndexName();
      boolean that_present_indexName = true && that.isSetIndexName();
      if (this_present_indexName || that_present_indexName) {
        if (!(this_present_indexName && that_present_indexName))
          return false;
        if (!this.indexName.equals(that.indexName))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      boolean this_present_field = true && this.isSetField();
      boolean that_present_field = true && that.isSetField();
      if (this_present_field || that_present_field) {
        if (!(this_present_field && that_present_field))
          return false;
        if (!this.field.equals(that.field))
          return false;
      }

      boolean this_present_gte = true && this.isSetGte();
      boolean that_present_gte = true && that.isSetGte();
      if (this_present_gte || that_present_gte) {
        if (!(this_present_gte && that_present_gte))
          return false;
        if (!this.gte.equals(that.gte))
          return false;
      }

      boolean this_present_lte = true && this.isSetLte();
      boolean that_present_lte = true && that.isSetLte();
      if (this_present_lte || that_present_lte) {
        if (!(this_present_lte && that_present_lte))
          return false;
        if (!this.lte.equals(that.lte))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHostIps()) ? 131071 : 524287);
      if (isSetHostIps())
        hashCode = hashCode * 8191 + hostIps.hashCode();

      hashCode = hashCode * 8191 + ((isSetClusterName()) ? 131071 : 524287);
      if (isSetClusterName())
        hashCode = hashCode * 8191 + clusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIndexName()) ? 131071 : 524287);
      if (isSetIndexName())
        hashCode = hashCode * 8191 + indexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypeName()) ? 131071 : 524287);
      if (isSetTypeName())
        hashCode = hashCode * 8191 + typeName.hashCode();

      hashCode = hashCode * 8191 + port;

      hashCode = hashCode * 8191 + start;

      hashCode = hashCode * 8191 + size;

      hashCode = hashCode * 8191 + ((isSetField()) ? 131071 : 524287);
      if (isSetField())
        hashCode = hashCode * 8191 + field.hashCode();

      hashCode = hashCode * 8191 + ((isSetGte()) ? 131071 : 524287);
      if (isSetGte())
        hashCode = hashCode * 8191 + gte.hashCode();

      hashCode = hashCode * 8191 + ((isSetLte()) ? 131071 : 524287);
      if (isSetLte())
        hashCode = hashCode * 8191 + lte.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(FileterQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHostIps()).compareTo(other.isSetHostIps());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIps()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIps, other.hostIps);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClusterName()).compareTo(other.isSetClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterName, other.clusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIndexName()).compareTo(other.isSetIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexName, other.indexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetField()).compareTo(other.isSetField());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetField()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.field, other.field);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetGte()).compareTo(other.isSetGte());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGte()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gte, other.gte);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLte()).compareTo(other.isSetLte());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLte()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lte, other.lte);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("FileterQuery_args(");
      boolean first = true;

      sb.append("hostIps:");
      if (this.hostIps == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIps);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clusterName:");
      if (this.clusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexName:");
      if (this.indexName == null) {
        sb.append("null");
      } else {
        sb.append(this.indexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      if (!first) sb.append(", ");
      sb.append("field:");
      if (this.field == null) {
        sb.append("null");
      } else {
        sb.append(this.field);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gte:");
      if (this.gte == null) {
        sb.append("null");
      } else {
        sb.append(this.gte);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lte:");
      if (this.lte == null) {
        sb.append("null");
      } else {
        sb.append(this.lte);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FileterQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FileterQuery_argsStandardScheme getScheme() {
        return new FileterQuery_argsStandardScheme();
      }
    }

    private static class FileterQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<FileterQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FileterQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_IPS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIps = iprot.readString();
                struct.setHostIpsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterName = iprot.readString();
                struct.setClusterNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.indexName = iprot.readString();
                struct.setIndexNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.size = iprot.readI32();
                struct.setSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // FIELD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.field = iprot.readString();
                struct.setFieldIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // GTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gte = iprot.readString();
                struct.setGteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // LTE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.lte = iprot.readString();
                struct.setLteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FileterQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostIps != null) {
          oprot.writeFieldBegin(HOST_IPS_FIELD_DESC);
          oprot.writeString(struct.hostIps);
          oprot.writeFieldEnd();
        }
        if (struct.clusterName != null) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.clusterName);
          oprot.writeFieldEnd();
        }
        if (struct.indexName != null) {
          oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.indexName);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeI32(struct.size);
        oprot.writeFieldEnd();
        if (struct.field != null) {
          oprot.writeFieldBegin(FIELD_FIELD_DESC);
          oprot.writeString(struct.field);
          oprot.writeFieldEnd();
        }
        if (struct.gte != null) {
          oprot.writeFieldBegin(GTE_FIELD_DESC);
          oprot.writeString(struct.gte);
          oprot.writeFieldEnd();
        }
        if (struct.lte != null) {
          oprot.writeFieldBegin(LTE_FIELD_DESC);
          oprot.writeString(struct.lte);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FileterQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FileterQuery_argsTupleScheme getScheme() {
        return new FileterQuery_argsTupleScheme();
      }
    }

    private static class FileterQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<FileterQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FileterQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHostIps()) {
          optionals.set(0);
        }
        if (struct.isSetClusterName()) {
          optionals.set(1);
        }
        if (struct.isSetIndexName()) {
          optionals.set(2);
        }
        if (struct.isSetTypeName()) {
          optionals.set(3);
        }
        if (struct.isSetPort()) {
          optionals.set(4);
        }
        if (struct.isSetStart()) {
          optionals.set(5);
        }
        if (struct.isSetSize()) {
          optionals.set(6);
        }
        if (struct.isSetField()) {
          optionals.set(7);
        }
        if (struct.isSetGte()) {
          optionals.set(8);
        }
        if (struct.isSetLte()) {
          optionals.set(9);
        }
        oprot.writeBitSet(optionals, 10);
        if (struct.isSetHostIps()) {
          oprot.writeString(struct.hostIps);
        }
        if (struct.isSetClusterName()) {
          oprot.writeString(struct.clusterName);
        }
        if (struct.isSetIndexName()) {
          oprot.writeString(struct.indexName);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetSize()) {
          oprot.writeI32(struct.size);
        }
        if (struct.isSetField()) {
          oprot.writeString(struct.field);
        }
        if (struct.isSetGte()) {
          oprot.writeString(struct.gte);
        }
        if (struct.isSetLte()) {
          oprot.writeString(struct.lte);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FileterQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(10);
        if (incoming.get(0)) {
          struct.hostIps = iprot.readString();
          struct.setHostIpsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clusterName = iprot.readString();
          struct.setClusterNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.indexName = iprot.readString();
          struct.setIndexNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(5)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(6)) {
          struct.size = iprot.readI32();
          struct.setSizeIsSet(true);
        }
        if (incoming.get(7)) {
          struct.field = iprot.readString();
          struct.setFieldIsSet(true);
        }
        if (incoming.get(8)) {
          struct.gte = iprot.readString();
          struct.setGteIsSet(true);
        }
        if (incoming.get(9)) {
          struct.lte = iprot.readString();
          struct.setLteIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class FileterQuery_result implements org.apache.thrift.TBase<FileterQuery_result, FileterQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<FileterQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FileterQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new FileterQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new FileterQuery_resultTupleSchemeFactory();

    public java.util.Map<java.lang.String,java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FileterQuery_result.class, metaDataMap);
    }

    public FileterQuery_result() {
    }

    public FileterQuery_result(
      java.util.Map<java.lang.String,java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FileterQuery_result(FileterQuery_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.String> __this__success = new java.util.HashMap<java.lang.String,java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public FileterQuery_result deepCopy() {
      return new FileterQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getSuccess() {
      return this.success;
    }

    public FileterQuery_result setSuccess(java.util.Map<java.lang.String,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof FileterQuery_result)
        return this.equals((FileterQuery_result)that);
      return false;
    }

    public boolean equals(FileterQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(FileterQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("FileterQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FileterQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FileterQuery_resultStandardScheme getScheme() {
        return new FileterQuery_resultStandardScheme();
      }
    }

    private static class FileterQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<FileterQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FileterQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map20 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map20.size);
                  java.lang.String _key21;
                  java.lang.String _val22;
                  for (int _i23 = 0; _i23 < _map20.size; ++_i23)
                  {
                    _key21 = iprot.readString();
                    _val22 = iprot.readString();
                    struct.success.put(_key21, _val22);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FileterQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter24 : struct.success.entrySet())
            {
              oprot.writeString(_iter24.getKey());
              oprot.writeString(_iter24.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FileterQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public FileterQuery_resultTupleScheme getScheme() {
        return new FileterQuery_resultTupleScheme();
      }
    }

    private static class FileterQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<FileterQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FileterQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter25 : struct.success.entrySet())
            {
              oprot.writeString(_iter25.getKey());
              oprot.writeString(_iter25.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FileterQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map26 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map26.size);
            java.lang.String _key27;
            java.lang.String _val28;
            for (int _i29 = 0; _i29 < _map26.size; ++_i29)
            {
              _key27 = iprot.readString();
              _val28 = iprot.readString();
              struct.success.put(_key27, _val28);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class StatsAggregation_args implements org.apache.thrift.TBase<StatsAggregation_args, StatsAggregation_args._Fields>, java.io.Serializable, Cloneable, Comparable<StatsAggregation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatsAggregation_args");

    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("indexName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField AGG_FD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("aggFdName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField AGG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("aggType", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StatsAggregation_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StatsAggregation_argsTupleSchemeFactory();

    public java.lang.String hostIp; // required
    public int port; // required
    public java.lang.String clusterName; // required
    public java.lang.String indexName; // required
    public java.lang.String typeName; // required
    public java.lang.String aggFdName; // required
    public java.lang.String aggType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_IP((short)1, "hostIp"),
      PORT((short)2, "port"),
      CLUSTER_NAME((short)3, "clusterName"),
      INDEX_NAME((short)4, "indexName"),
      TYPE_NAME((short)5, "typeName"),
      AGG_FD_NAME((short)6, "aggFdName"),
      AGG_TYPE((short)7, "aggType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_IP
            return HOST_IP;
          case 2: // PORT
            return PORT;
          case 3: // CLUSTER_NAME
            return CLUSTER_NAME;
          case 4: // INDEX_NAME
            return INDEX_NAME;
          case 5: // TYPE_NAME
            return TYPE_NAME;
          case 6: // AGG_FD_NAME
            return AGG_FD_NAME;
          case 7: // AGG_TYPE
            return AGG_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("clusterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("indexName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AGG_FD_NAME, new org.apache.thrift.meta_data.FieldMetaData("aggFdName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AGG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("aggType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatsAggregation_args.class, metaDataMap);
    }

    public StatsAggregation_args() {
    }

    public StatsAggregation_args(
      java.lang.String hostIp,
      int port,
      java.lang.String clusterName,
      java.lang.String indexName,
      java.lang.String typeName,
      java.lang.String aggFdName,
      java.lang.String aggType)
    {
      this();
      this.hostIp = hostIp;
      this.port = port;
      setPortIsSet(true);
      this.clusterName = clusterName;
      this.indexName = indexName;
      this.typeName = typeName;
      this.aggFdName = aggFdName;
      this.aggType = aggType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public StatsAggregation_args(StatsAggregation_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      this.port = other.port;
      if (other.isSetClusterName()) {
        this.clusterName = other.clusterName;
      }
      if (other.isSetIndexName()) {
        this.indexName = other.indexName;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      if (other.isSetAggFdName()) {
        this.aggFdName = other.aggFdName;
      }
      if (other.isSetAggType()) {
        this.aggType = other.aggType;
      }
    }

    public StatsAggregation_args deepCopy() {
      return new StatsAggregation_args(this);
    }

    @Override
    public void clear() {
      this.hostIp = null;
      setPortIsSet(false);
      this.port = 0;
      this.clusterName = null;
      this.indexName = null;
      this.typeName = null;
      this.aggFdName = null;
      this.aggType = null;
    }

    public java.lang.String getHostIp() {
      return this.hostIp;
    }

    public StatsAggregation_args setHostIp(java.lang.String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public StatsAggregation_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public java.lang.String getClusterName() {
      return this.clusterName;
    }

    public StatsAggregation_args setClusterName(java.lang.String clusterName) {
      this.clusterName = clusterName;
      return this;
    }

    public void unsetClusterName() {
      this.clusterName = null;
    }

    /** Returns true if field clusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterName() {
      return this.clusterName != null;
    }

    public void setClusterNameIsSet(boolean value) {
      if (!value) {
        this.clusterName = null;
      }
    }

    public java.lang.String getIndexName() {
      return this.indexName;
    }

    public StatsAggregation_args setIndexName(java.lang.String indexName) {
      this.indexName = indexName;
      return this;
    }

    public void unsetIndexName() {
      this.indexName = null;
    }

    /** Returns true if field indexName is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexName() {
      return this.indexName != null;
    }

    public void setIndexNameIsSet(boolean value) {
      if (!value) {
        this.indexName = null;
      }
    }

    public java.lang.String getTypeName() {
      return this.typeName;
    }

    public StatsAggregation_args setTypeName(java.lang.String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public java.lang.String getAggFdName() {
      return this.aggFdName;
    }

    public StatsAggregation_args setAggFdName(java.lang.String aggFdName) {
      this.aggFdName = aggFdName;
      return this;
    }

    public void unsetAggFdName() {
      this.aggFdName = null;
    }

    /** Returns true if field aggFdName is set (has been assigned a value) and false otherwise */
    public boolean isSetAggFdName() {
      return this.aggFdName != null;
    }

    public void setAggFdNameIsSet(boolean value) {
      if (!value) {
        this.aggFdName = null;
      }
    }

    public java.lang.String getAggType() {
      return this.aggType;
    }

    public StatsAggregation_args setAggType(java.lang.String aggType) {
      this.aggType = aggType;
      return this;
    }

    public void unsetAggType() {
      this.aggType = null;
    }

    /** Returns true if field aggType is set (has been assigned a value) and false otherwise */
    public boolean isSetAggType() {
      return this.aggType != null;
    }

    public void setAggTypeIsSet(boolean value) {
      if (!value) {
        this.aggType = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.Integer)value);
        }
        break;

      case CLUSTER_NAME:
        if (value == null) {
          unsetClusterName();
        } else {
          setClusterName((java.lang.String)value);
        }
        break;

      case INDEX_NAME:
        if (value == null) {
          unsetIndexName();
        } else {
          setIndexName((java.lang.String)value);
        }
        break;

      case TYPE_NAME:
        if (value == null) {
          unsetTypeName();
        } else {
          setTypeName((java.lang.String)value);
        }
        break;

      case AGG_FD_NAME:
        if (value == null) {
          unsetAggFdName();
        } else {
          setAggFdName((java.lang.String)value);
        }
        break;

      case AGG_TYPE:
        if (value == null) {
          unsetAggType();
        } else {
          setAggType((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_IP:
        return getHostIp();

      case PORT:
        return getPort();

      case CLUSTER_NAME:
        return getClusterName();

      case INDEX_NAME:
        return getIndexName();

      case TYPE_NAME:
        return getTypeName();

      case AGG_FD_NAME:
        return getAggFdName();

      case AGG_TYPE:
        return getAggType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST_IP:
        return isSetHostIp();
      case PORT:
        return isSetPort();
      case CLUSTER_NAME:
        return isSetClusterName();
      case INDEX_NAME:
        return isSetIndexName();
      case TYPE_NAME:
        return isSetTypeName();
      case AGG_FD_NAME:
        return isSetAggFdName();
      case AGG_TYPE:
        return isSetAggType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof StatsAggregation_args)
        return this.equals((StatsAggregation_args)that);
      return false;
    }

    public boolean equals(StatsAggregation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_clusterName = true && this.isSetClusterName();
      boolean that_present_clusterName = true && that.isSetClusterName();
      if (this_present_clusterName || that_present_clusterName) {
        if (!(this_present_clusterName && that_present_clusterName))
          return false;
        if (!this.clusterName.equals(that.clusterName))
          return false;
      }

      boolean this_present_indexName = true && this.isSetIndexName();
      boolean that_present_indexName = true && that.isSetIndexName();
      if (this_present_indexName || that_present_indexName) {
        if (!(this_present_indexName && that_present_indexName))
          return false;
        if (!this.indexName.equals(that.indexName))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_aggFdName = true && this.isSetAggFdName();
      boolean that_present_aggFdName = true && that.isSetAggFdName();
      if (this_present_aggFdName || that_present_aggFdName) {
        if (!(this_present_aggFdName && that_present_aggFdName))
          return false;
        if (!this.aggFdName.equals(that.aggFdName))
          return false;
      }

      boolean this_present_aggType = true && this.isSetAggType();
      boolean that_present_aggType = true && that.isSetAggType();
      if (this_present_aggType || that_present_aggType) {
        if (!(this_present_aggType && that_present_aggType))
          return false;
        if (!this.aggType.equals(that.aggType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + port;

      hashCode = hashCode * 8191 + ((isSetClusterName()) ? 131071 : 524287);
      if (isSetClusterName())
        hashCode = hashCode * 8191 + clusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIndexName()) ? 131071 : 524287);
      if (isSetIndexName())
        hashCode = hashCode * 8191 + indexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypeName()) ? 131071 : 524287);
      if (isSetTypeName())
        hashCode = hashCode * 8191 + typeName.hashCode();

      hashCode = hashCode * 8191 + ((isSetAggFdName()) ? 131071 : 524287);
      if (isSetAggFdName())
        hashCode = hashCode * 8191 + aggFdName.hashCode();

      hashCode = hashCode * 8191 + ((isSetAggType()) ? 131071 : 524287);
      if (isSetAggType())
        hashCode = hashCode * 8191 + aggType.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(StatsAggregation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClusterName()).compareTo(other.isSetClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterName, other.clusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIndexName()).compareTo(other.isSetIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexName, other.indexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAggFdName()).compareTo(other.isSetAggFdName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAggFdName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggFdName, other.aggFdName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAggType()).compareTo(other.isSetAggType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAggType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggType, other.aggType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("StatsAggregation_args(");
      boolean first = true;

      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clusterName:");
      if (this.clusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexName:");
      if (this.indexName == null) {
        sb.append("null");
      } else {
        sb.append(this.indexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aggFdName:");
      if (this.aggFdName == null) {
        sb.append("null");
      } else {
        sb.append(this.aggFdName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aggType:");
      if (this.aggType == null) {
        sb.append("null");
      } else {
        sb.append(this.aggType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class StatsAggregation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public StatsAggregation_argsStandardScheme getScheme() {
        return new StatsAggregation_argsStandardScheme();
      }
    }

    private static class StatsAggregation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<StatsAggregation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, StatsAggregation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterName = iprot.readString();
                struct.setClusterNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.indexName = iprot.readString();
                struct.setIndexNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // AGG_FD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.aggFdName = iprot.readString();
                struct.setAggFdNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // AGG_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.aggType = iprot.readString();
                struct.setAggTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, StatsAggregation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        if (struct.clusterName != null) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.clusterName);
          oprot.writeFieldEnd();
        }
        if (struct.indexName != null) {
          oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.indexName);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        if (struct.aggFdName != null) {
          oprot.writeFieldBegin(AGG_FD_NAME_FIELD_DESC);
          oprot.writeString(struct.aggFdName);
          oprot.writeFieldEnd();
        }
        if (struct.aggType != null) {
          oprot.writeFieldBegin(AGG_TYPE_FIELD_DESC);
          oprot.writeString(struct.aggType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class StatsAggregation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public StatsAggregation_argsTupleScheme getScheme() {
        return new StatsAggregation_argsTupleScheme();
      }
    }

    private static class StatsAggregation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<StatsAggregation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, StatsAggregation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHostIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        if (struct.isSetClusterName()) {
          optionals.set(2);
        }
        if (struct.isSetIndexName()) {
          optionals.set(3);
        }
        if (struct.isSetTypeName()) {
          optionals.set(4);
        }
        if (struct.isSetAggFdName()) {
          optionals.set(5);
        }
        if (struct.isSetAggType()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetClusterName()) {
          oprot.writeString(struct.clusterName);
        }
        if (struct.isSetIndexName()) {
          oprot.writeString(struct.indexName);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetAggFdName()) {
          oprot.writeString(struct.aggFdName);
        }
        if (struct.isSetAggType()) {
          oprot.writeString(struct.aggType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, StatsAggregation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.clusterName = iprot.readString();
          struct.setClusterNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.indexName = iprot.readString();
          struct.setIndexNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.aggFdName = iprot.readString();
          struct.setAggFdNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.aggType = iprot.readString();
          struct.setAggTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class StatsAggregation_result implements org.apache.thrift.TBase<StatsAggregation_result, StatsAggregation_result._Fields>, java.io.Serializable, Cloneable, Comparable<StatsAggregation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("StatsAggregation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new StatsAggregation_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new StatsAggregation_resultTupleSchemeFactory();

    public java.util.Map<java.lang.String,java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(StatsAggregation_result.class, metaDataMap);
    }

    public StatsAggregation_result() {
    }

    public StatsAggregation_result(
      java.util.Map<java.lang.String,java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public StatsAggregation_result(StatsAggregation_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.String> __this__success = new java.util.HashMap<java.lang.String,java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public StatsAggregation_result deepCopy() {
      return new StatsAggregation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getSuccess() {
      return this.success;
    }

    public StatsAggregation_result setSuccess(java.util.Map<java.lang.String,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof StatsAggregation_result)
        return this.equals((StatsAggregation_result)that);
      return false;
    }

    public boolean equals(StatsAggregation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(StatsAggregation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("StatsAggregation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class StatsAggregation_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public StatsAggregation_resultStandardScheme getScheme() {
        return new StatsAggregation_resultStandardScheme();
      }
    }

    private static class StatsAggregation_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<StatsAggregation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, StatsAggregation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map30 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map30.size);
                  java.lang.String _key31;
                  java.lang.String _val32;
                  for (int _i33 = 0; _i33 < _map30.size; ++_i33)
                  {
                    _key31 = iprot.readString();
                    _val32 = iprot.readString();
                    struct.success.put(_key31, _val32);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, StatsAggregation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter34 : struct.success.entrySet())
            {
              oprot.writeString(_iter34.getKey());
              oprot.writeString(_iter34.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class StatsAggregation_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public StatsAggregation_resultTupleScheme getScheme() {
        return new StatsAggregation_resultTupleScheme();
      }
    }

    private static class StatsAggregation_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<StatsAggregation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, StatsAggregation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter35 : struct.success.entrySet())
            {
              oprot.writeString(_iter35.getKey());
              oprot.writeString(_iter35.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, StatsAggregation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map36 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map36.size);
            java.lang.String _key37;
            java.lang.String _val38;
            for (int _i39 = 0; _i39 < _map36.size; ++_i39)
            {
              _key37 = iprot.readString();
              _val38 = iprot.readString();
              struct.success.put(_key37, _val38);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class PercentilesAggregation_args implements org.apache.thrift.TBase<PercentilesAggregation_args, PercentilesAggregation_args._Fields>, java.io.Serializable, Cloneable, Comparable<PercentilesAggregation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PercentilesAggregation_args");

    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("indexName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField AGG_FD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("aggFdName", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField AGG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("aggType", org.apache.thrift.protocol.TType.STRING, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PercentilesAggregation_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PercentilesAggregation_argsTupleSchemeFactory();

    public java.lang.String hostIp; // required
    public int port; // required
    public java.lang.String clusterName; // required
    public java.lang.String indexName; // required
    public java.lang.String typeName; // required
    public java.lang.String aggFdName; // required
    public java.lang.String aggType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_IP((short)1, "hostIp"),
      PORT((short)2, "port"),
      CLUSTER_NAME((short)3, "clusterName"),
      INDEX_NAME((short)4, "indexName"),
      TYPE_NAME((short)5, "typeName"),
      AGG_FD_NAME((short)6, "aggFdName"),
      AGG_TYPE((short)7, "aggType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_IP
            return HOST_IP;
          case 2: // PORT
            return PORT;
          case 3: // CLUSTER_NAME
            return CLUSTER_NAME;
          case 4: // INDEX_NAME
            return INDEX_NAME;
          case 5: // TYPE_NAME
            return TYPE_NAME;
          case 6: // AGG_FD_NAME
            return AGG_FD_NAME;
          case 7: // AGG_TYPE
            return AGG_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("clusterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("indexName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AGG_FD_NAME, new org.apache.thrift.meta_data.FieldMetaData("aggFdName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AGG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("aggType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PercentilesAggregation_args.class, metaDataMap);
    }

    public PercentilesAggregation_args() {
    }

    public PercentilesAggregation_args(
      java.lang.String hostIp,
      int port,
      java.lang.String clusterName,
      java.lang.String indexName,
      java.lang.String typeName,
      java.lang.String aggFdName,
      java.lang.String aggType)
    {
      this();
      this.hostIp = hostIp;
      this.port = port;
      setPortIsSet(true);
      this.clusterName = clusterName;
      this.indexName = indexName;
      this.typeName = typeName;
      this.aggFdName = aggFdName;
      this.aggType = aggType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PercentilesAggregation_args(PercentilesAggregation_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      this.port = other.port;
      if (other.isSetClusterName()) {
        this.clusterName = other.clusterName;
      }
      if (other.isSetIndexName()) {
        this.indexName = other.indexName;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      if (other.isSetAggFdName()) {
        this.aggFdName = other.aggFdName;
      }
      if (other.isSetAggType()) {
        this.aggType = other.aggType;
      }
    }

    public PercentilesAggregation_args deepCopy() {
      return new PercentilesAggregation_args(this);
    }

    @Override
    public void clear() {
      this.hostIp = null;
      setPortIsSet(false);
      this.port = 0;
      this.clusterName = null;
      this.indexName = null;
      this.typeName = null;
      this.aggFdName = null;
      this.aggType = null;
    }

    public java.lang.String getHostIp() {
      return this.hostIp;
    }

    public PercentilesAggregation_args setHostIp(java.lang.String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public PercentilesAggregation_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public java.lang.String getClusterName() {
      return this.clusterName;
    }

    public PercentilesAggregation_args setClusterName(java.lang.String clusterName) {
      this.clusterName = clusterName;
      return this;
    }

    public void unsetClusterName() {
      this.clusterName = null;
    }

    /** Returns true if field clusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterName() {
      return this.clusterName != null;
    }

    public void setClusterNameIsSet(boolean value) {
      if (!value) {
        this.clusterName = null;
      }
    }

    public java.lang.String getIndexName() {
      return this.indexName;
    }

    public PercentilesAggregation_args setIndexName(java.lang.String indexName) {
      this.indexName = indexName;
      return this;
    }

    public void unsetIndexName() {
      this.indexName = null;
    }

    /** Returns true if field indexName is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexName() {
      return this.indexName != null;
    }

    public void setIndexNameIsSet(boolean value) {
      if (!value) {
        this.indexName = null;
      }
    }

    public java.lang.String getTypeName() {
      return this.typeName;
    }

    public PercentilesAggregation_args setTypeName(java.lang.String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public java.lang.String getAggFdName() {
      return this.aggFdName;
    }

    public PercentilesAggregation_args setAggFdName(java.lang.String aggFdName) {
      this.aggFdName = aggFdName;
      return this;
    }

    public void unsetAggFdName() {
      this.aggFdName = null;
    }

    /** Returns true if field aggFdName is set (has been assigned a value) and false otherwise */
    public boolean isSetAggFdName() {
      return this.aggFdName != null;
    }

    public void setAggFdNameIsSet(boolean value) {
      if (!value) {
        this.aggFdName = null;
      }
    }

    public java.lang.String getAggType() {
      return this.aggType;
    }

    public PercentilesAggregation_args setAggType(java.lang.String aggType) {
      this.aggType = aggType;
      return this;
    }

    public void unsetAggType() {
      this.aggType = null;
    }

    /** Returns true if field aggType is set (has been assigned a value) and false otherwise */
    public boolean isSetAggType() {
      return this.aggType != null;
    }

    public void setAggTypeIsSet(boolean value) {
      if (!value) {
        this.aggType = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.Integer)value);
        }
        break;

      case CLUSTER_NAME:
        if (value == null) {
          unsetClusterName();
        } else {
          setClusterName((java.lang.String)value);
        }
        break;

      case INDEX_NAME:
        if (value == null) {
          unsetIndexName();
        } else {
          setIndexName((java.lang.String)value);
        }
        break;

      case TYPE_NAME:
        if (value == null) {
          unsetTypeName();
        } else {
          setTypeName((java.lang.String)value);
        }
        break;

      case AGG_FD_NAME:
        if (value == null) {
          unsetAggFdName();
        } else {
          setAggFdName((java.lang.String)value);
        }
        break;

      case AGG_TYPE:
        if (value == null) {
          unsetAggType();
        } else {
          setAggType((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_IP:
        return getHostIp();

      case PORT:
        return getPort();

      case CLUSTER_NAME:
        return getClusterName();

      case INDEX_NAME:
        return getIndexName();

      case TYPE_NAME:
        return getTypeName();

      case AGG_FD_NAME:
        return getAggFdName();

      case AGG_TYPE:
        return getAggType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST_IP:
        return isSetHostIp();
      case PORT:
        return isSetPort();
      case CLUSTER_NAME:
        return isSetClusterName();
      case INDEX_NAME:
        return isSetIndexName();
      case TYPE_NAME:
        return isSetTypeName();
      case AGG_FD_NAME:
        return isSetAggFdName();
      case AGG_TYPE:
        return isSetAggType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof PercentilesAggregation_args)
        return this.equals((PercentilesAggregation_args)that);
      return false;
    }

    public boolean equals(PercentilesAggregation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_clusterName = true && this.isSetClusterName();
      boolean that_present_clusterName = true && that.isSetClusterName();
      if (this_present_clusterName || that_present_clusterName) {
        if (!(this_present_clusterName && that_present_clusterName))
          return false;
        if (!this.clusterName.equals(that.clusterName))
          return false;
      }

      boolean this_present_indexName = true && this.isSetIndexName();
      boolean that_present_indexName = true && that.isSetIndexName();
      if (this_present_indexName || that_present_indexName) {
        if (!(this_present_indexName && that_present_indexName))
          return false;
        if (!this.indexName.equals(that.indexName))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_aggFdName = true && this.isSetAggFdName();
      boolean that_present_aggFdName = true && that.isSetAggFdName();
      if (this_present_aggFdName || that_present_aggFdName) {
        if (!(this_present_aggFdName && that_present_aggFdName))
          return false;
        if (!this.aggFdName.equals(that.aggFdName))
          return false;
      }

      boolean this_present_aggType = true && this.isSetAggType();
      boolean that_present_aggType = true && that.isSetAggType();
      if (this_present_aggType || that_present_aggType) {
        if (!(this_present_aggType && that_present_aggType))
          return false;
        if (!this.aggType.equals(that.aggType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + port;

      hashCode = hashCode * 8191 + ((isSetClusterName()) ? 131071 : 524287);
      if (isSetClusterName())
        hashCode = hashCode * 8191 + clusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIndexName()) ? 131071 : 524287);
      if (isSetIndexName())
        hashCode = hashCode * 8191 + indexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypeName()) ? 131071 : 524287);
      if (isSetTypeName())
        hashCode = hashCode * 8191 + typeName.hashCode();

      hashCode = hashCode * 8191 + ((isSetAggFdName()) ? 131071 : 524287);
      if (isSetAggFdName())
        hashCode = hashCode * 8191 + aggFdName.hashCode();

      hashCode = hashCode * 8191 + ((isSetAggType()) ? 131071 : 524287);
      if (isSetAggType())
        hashCode = hashCode * 8191 + aggType.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(PercentilesAggregation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClusterName()).compareTo(other.isSetClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterName, other.clusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIndexName()).compareTo(other.isSetIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexName, other.indexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAggFdName()).compareTo(other.isSetAggFdName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAggFdName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggFdName, other.aggFdName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAggType()).compareTo(other.isSetAggType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAggType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggType, other.aggType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("PercentilesAggregation_args(");
      boolean first = true;

      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clusterName:");
      if (this.clusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexName:");
      if (this.indexName == null) {
        sb.append("null");
      } else {
        sb.append(this.indexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aggFdName:");
      if (this.aggFdName == null) {
        sb.append("null");
      } else {
        sb.append(this.aggFdName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aggType:");
      if (this.aggType == null) {
        sb.append("null");
      } else {
        sb.append(this.aggType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PercentilesAggregation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public PercentilesAggregation_argsStandardScheme getScheme() {
        return new PercentilesAggregation_argsStandardScheme();
      }
    }

    private static class PercentilesAggregation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<PercentilesAggregation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PercentilesAggregation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterName = iprot.readString();
                struct.setClusterNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.indexName = iprot.readString();
                struct.setIndexNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // AGG_FD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.aggFdName = iprot.readString();
                struct.setAggFdNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // AGG_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.aggType = iprot.readString();
                struct.setAggTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PercentilesAggregation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        if (struct.clusterName != null) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.clusterName);
          oprot.writeFieldEnd();
        }
        if (struct.indexName != null) {
          oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.indexName);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        if (struct.aggFdName != null) {
          oprot.writeFieldBegin(AGG_FD_NAME_FIELD_DESC);
          oprot.writeString(struct.aggFdName);
          oprot.writeFieldEnd();
        }
        if (struct.aggType != null) {
          oprot.writeFieldBegin(AGG_TYPE_FIELD_DESC);
          oprot.writeString(struct.aggType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class PercentilesAggregation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public PercentilesAggregation_argsTupleScheme getScheme() {
        return new PercentilesAggregation_argsTupleScheme();
      }
    }

    private static class PercentilesAggregation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<PercentilesAggregation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PercentilesAggregation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHostIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        if (struct.isSetClusterName()) {
          optionals.set(2);
        }
        if (struct.isSetIndexName()) {
          optionals.set(3);
        }
        if (struct.isSetTypeName()) {
          optionals.set(4);
        }
        if (struct.isSetAggFdName()) {
          optionals.set(5);
        }
        if (struct.isSetAggType()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetClusterName()) {
          oprot.writeString(struct.clusterName);
        }
        if (struct.isSetIndexName()) {
          oprot.writeString(struct.indexName);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetAggFdName()) {
          oprot.writeString(struct.aggFdName);
        }
        if (struct.isSetAggType()) {
          oprot.writeString(struct.aggType);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PercentilesAggregation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.clusterName = iprot.readString();
          struct.setClusterNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.indexName = iprot.readString();
          struct.setIndexNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.aggFdName = iprot.readString();
          struct.setAggFdNameIsSet(true);
        }
        if (incoming.get(6)) {
          struct.aggType = iprot.readString();
          struct.setAggTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class PercentilesAggregation_result implements org.apache.thrift.TBase<PercentilesAggregation_result, PercentilesAggregation_result._Fields>, java.io.Serializable, Cloneable, Comparable<PercentilesAggregation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PercentilesAggregation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PercentilesAggregation_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PercentilesAggregation_resultTupleSchemeFactory();

    public java.util.Map<java.lang.String,java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PercentilesAggregation_result.class, metaDataMap);
    }

    public PercentilesAggregation_result() {
    }

    public PercentilesAggregation_result(
      java.util.Map<java.lang.String,java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PercentilesAggregation_result(PercentilesAggregation_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.String> __this__success = new java.util.HashMap<java.lang.String,java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public PercentilesAggregation_result deepCopy() {
      return new PercentilesAggregation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getSuccess() {
      return this.success;
    }

    public PercentilesAggregation_result setSuccess(java.util.Map<java.lang.String,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof PercentilesAggregation_result)
        return this.equals((PercentilesAggregation_result)that);
      return false;
    }

    public boolean equals(PercentilesAggregation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(PercentilesAggregation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("PercentilesAggregation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PercentilesAggregation_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public PercentilesAggregation_resultStandardScheme getScheme() {
        return new PercentilesAggregation_resultStandardScheme();
      }
    }

    private static class PercentilesAggregation_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<PercentilesAggregation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PercentilesAggregation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map40 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map40.size);
                  java.lang.String _key41;
                  java.lang.String _val42;
                  for (int _i43 = 0; _i43 < _map40.size; ++_i43)
                  {
                    _key41 = iprot.readString();
                    _val42 = iprot.readString();
                    struct.success.put(_key41, _val42);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PercentilesAggregation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter44 : struct.success.entrySet())
            {
              oprot.writeString(_iter44.getKey());
              oprot.writeString(_iter44.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class PercentilesAggregation_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public PercentilesAggregation_resultTupleScheme getScheme() {
        return new PercentilesAggregation_resultTupleScheme();
      }
    }

    private static class PercentilesAggregation_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<PercentilesAggregation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PercentilesAggregation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter45 : struct.success.entrySet())
            {
              oprot.writeString(_iter45.getKey());
              oprot.writeString(_iter45.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PercentilesAggregation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map46 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map46.size);
            java.lang.String _key47;
            java.lang.String _val48;
            for (int _i49 = 0; _i49 < _map46.size; ++_i49)
            {
              _key47 = iprot.readString();
              _val48 = iprot.readString();
              struct.success.put(_key47, _val48);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class TermsAggregation_args implements org.apache.thrift.TBase<TermsAggregation_args, TermsAggregation_args._Fields>, java.io.Serializable, Cloneable, Comparable<TermsAggregation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TermsAggregation_args");

    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("indexName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField AGG_FD_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("aggFdName", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TermsAggregation_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TermsAggregation_argsTupleSchemeFactory();

    public java.lang.String hostIp; // required
    public int port; // required
    public java.lang.String clusterName; // required
    public java.lang.String indexName; // required
    public java.lang.String typeName; // required
    public java.lang.String aggFdName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_IP((short)1, "hostIp"),
      PORT((short)2, "port"),
      CLUSTER_NAME((short)3, "clusterName"),
      INDEX_NAME((short)4, "indexName"),
      TYPE_NAME((short)5, "typeName"),
      AGG_FD_NAME((short)6, "aggFdName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_IP
            return HOST_IP;
          case 2: // PORT
            return PORT;
          case 3: // CLUSTER_NAME
            return CLUSTER_NAME;
          case 4: // INDEX_NAME
            return INDEX_NAME;
          case 5: // TYPE_NAME
            return TYPE_NAME;
          case 6: // AGG_FD_NAME
            return AGG_FD_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("clusterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("indexName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AGG_FD_NAME, new org.apache.thrift.meta_data.FieldMetaData("aggFdName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TermsAggregation_args.class, metaDataMap);
    }

    public TermsAggregation_args() {
    }

    public TermsAggregation_args(
      java.lang.String hostIp,
      int port,
      java.lang.String clusterName,
      java.lang.String indexName,
      java.lang.String typeName,
      java.lang.String aggFdName)
    {
      this();
      this.hostIp = hostIp;
      this.port = port;
      setPortIsSet(true);
      this.clusterName = clusterName;
      this.indexName = indexName;
      this.typeName = typeName;
      this.aggFdName = aggFdName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TermsAggregation_args(TermsAggregation_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      this.port = other.port;
      if (other.isSetClusterName()) {
        this.clusterName = other.clusterName;
      }
      if (other.isSetIndexName()) {
        this.indexName = other.indexName;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      if (other.isSetAggFdName()) {
        this.aggFdName = other.aggFdName;
      }
    }

    public TermsAggregation_args deepCopy() {
      return new TermsAggregation_args(this);
    }

    @Override
    public void clear() {
      this.hostIp = null;
      setPortIsSet(false);
      this.port = 0;
      this.clusterName = null;
      this.indexName = null;
      this.typeName = null;
      this.aggFdName = null;
    }

    public java.lang.String getHostIp() {
      return this.hostIp;
    }

    public TermsAggregation_args setHostIp(java.lang.String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public TermsAggregation_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public java.lang.String getClusterName() {
      return this.clusterName;
    }

    public TermsAggregation_args setClusterName(java.lang.String clusterName) {
      this.clusterName = clusterName;
      return this;
    }

    public void unsetClusterName() {
      this.clusterName = null;
    }

    /** Returns true if field clusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterName() {
      return this.clusterName != null;
    }

    public void setClusterNameIsSet(boolean value) {
      if (!value) {
        this.clusterName = null;
      }
    }

    public java.lang.String getIndexName() {
      return this.indexName;
    }

    public TermsAggregation_args setIndexName(java.lang.String indexName) {
      this.indexName = indexName;
      return this;
    }

    public void unsetIndexName() {
      this.indexName = null;
    }

    /** Returns true if field indexName is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexName() {
      return this.indexName != null;
    }

    public void setIndexNameIsSet(boolean value) {
      if (!value) {
        this.indexName = null;
      }
    }

    public java.lang.String getTypeName() {
      return this.typeName;
    }

    public TermsAggregation_args setTypeName(java.lang.String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public java.lang.String getAggFdName() {
      return this.aggFdName;
    }

    public TermsAggregation_args setAggFdName(java.lang.String aggFdName) {
      this.aggFdName = aggFdName;
      return this;
    }

    public void unsetAggFdName() {
      this.aggFdName = null;
    }

    /** Returns true if field aggFdName is set (has been assigned a value) and false otherwise */
    public boolean isSetAggFdName() {
      return this.aggFdName != null;
    }

    public void setAggFdNameIsSet(boolean value) {
      if (!value) {
        this.aggFdName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.Integer)value);
        }
        break;

      case CLUSTER_NAME:
        if (value == null) {
          unsetClusterName();
        } else {
          setClusterName((java.lang.String)value);
        }
        break;

      case INDEX_NAME:
        if (value == null) {
          unsetIndexName();
        } else {
          setIndexName((java.lang.String)value);
        }
        break;

      case TYPE_NAME:
        if (value == null) {
          unsetTypeName();
        } else {
          setTypeName((java.lang.String)value);
        }
        break;

      case AGG_FD_NAME:
        if (value == null) {
          unsetAggFdName();
        } else {
          setAggFdName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_IP:
        return getHostIp();

      case PORT:
        return getPort();

      case CLUSTER_NAME:
        return getClusterName();

      case INDEX_NAME:
        return getIndexName();

      case TYPE_NAME:
        return getTypeName();

      case AGG_FD_NAME:
        return getAggFdName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST_IP:
        return isSetHostIp();
      case PORT:
        return isSetPort();
      case CLUSTER_NAME:
        return isSetClusterName();
      case INDEX_NAME:
        return isSetIndexName();
      case TYPE_NAME:
        return isSetTypeName();
      case AGG_FD_NAME:
        return isSetAggFdName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof TermsAggregation_args)
        return this.equals((TermsAggregation_args)that);
      return false;
    }

    public boolean equals(TermsAggregation_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_clusterName = true && this.isSetClusterName();
      boolean that_present_clusterName = true && that.isSetClusterName();
      if (this_present_clusterName || that_present_clusterName) {
        if (!(this_present_clusterName && that_present_clusterName))
          return false;
        if (!this.clusterName.equals(that.clusterName))
          return false;
      }

      boolean this_present_indexName = true && this.isSetIndexName();
      boolean that_present_indexName = true && that.isSetIndexName();
      if (this_present_indexName || that_present_indexName) {
        if (!(this_present_indexName && that_present_indexName))
          return false;
        if (!this.indexName.equals(that.indexName))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_aggFdName = true && this.isSetAggFdName();
      boolean that_present_aggFdName = true && that.isSetAggFdName();
      if (this_present_aggFdName || that_present_aggFdName) {
        if (!(this_present_aggFdName && that_present_aggFdName))
          return false;
        if (!this.aggFdName.equals(that.aggFdName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + port;

      hashCode = hashCode * 8191 + ((isSetClusterName()) ? 131071 : 524287);
      if (isSetClusterName())
        hashCode = hashCode * 8191 + clusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIndexName()) ? 131071 : 524287);
      if (isSetIndexName())
        hashCode = hashCode * 8191 + indexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypeName()) ? 131071 : 524287);
      if (isSetTypeName())
        hashCode = hashCode * 8191 + typeName.hashCode();

      hashCode = hashCode * 8191 + ((isSetAggFdName()) ? 131071 : 524287);
      if (isSetAggFdName())
        hashCode = hashCode * 8191 + aggFdName.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(TermsAggregation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClusterName()).compareTo(other.isSetClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterName, other.clusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIndexName()).compareTo(other.isSetIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexName, other.indexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAggFdName()).compareTo(other.isSetAggFdName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAggFdName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.aggFdName, other.aggFdName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("TermsAggregation_args(");
      boolean first = true;

      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clusterName:");
      if (this.clusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexName:");
      if (this.indexName == null) {
        sb.append("null");
      } else {
        sb.append(this.indexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("aggFdName:");
      if (this.aggFdName == null) {
        sb.append("null");
      } else {
        sb.append(this.aggFdName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TermsAggregation_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TermsAggregation_argsStandardScheme getScheme() {
        return new TermsAggregation_argsStandardScheme();
      }
    }

    private static class TermsAggregation_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<TermsAggregation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TermsAggregation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterName = iprot.readString();
                struct.setClusterNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.indexName = iprot.readString();
                struct.setIndexNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // AGG_FD_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.aggFdName = iprot.readString();
                struct.setAggFdNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TermsAggregation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        if (struct.clusterName != null) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.clusterName);
          oprot.writeFieldEnd();
        }
        if (struct.indexName != null) {
          oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.indexName);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        if (struct.aggFdName != null) {
          oprot.writeFieldBegin(AGG_FD_NAME_FIELD_DESC);
          oprot.writeString(struct.aggFdName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TermsAggregation_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TermsAggregation_argsTupleScheme getScheme() {
        return new TermsAggregation_argsTupleScheme();
      }
    }

    private static class TermsAggregation_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<TermsAggregation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TermsAggregation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHostIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        if (struct.isSetClusterName()) {
          optionals.set(2);
        }
        if (struct.isSetIndexName()) {
          optionals.set(3);
        }
        if (struct.isSetTypeName()) {
          optionals.set(4);
        }
        if (struct.isSetAggFdName()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetClusterName()) {
          oprot.writeString(struct.clusterName);
        }
        if (struct.isSetIndexName()) {
          oprot.writeString(struct.indexName);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetAggFdName()) {
          oprot.writeString(struct.aggFdName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TermsAggregation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.clusterName = iprot.readString();
          struct.setClusterNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.indexName = iprot.readString();
          struct.setIndexNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.aggFdName = iprot.readString();
          struct.setAggFdNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class TermsAggregation_result implements org.apache.thrift.TBase<TermsAggregation_result, TermsAggregation_result._Fields>, java.io.Serializable, Cloneable, Comparable<TermsAggregation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TermsAggregation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TermsAggregation_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TermsAggregation_resultTupleSchemeFactory();

    public java.util.Map<java.lang.String,java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TermsAggregation_result.class, metaDataMap);
    }

    public TermsAggregation_result() {
    }

    public TermsAggregation_result(
      java.util.Map<java.lang.String,java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public TermsAggregation_result(TermsAggregation_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.String> __this__success = new java.util.HashMap<java.lang.String,java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public TermsAggregation_result deepCopy() {
      return new TermsAggregation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getSuccess() {
      return this.success;
    }

    public TermsAggregation_result setSuccess(java.util.Map<java.lang.String,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof TermsAggregation_result)
        return this.equals((TermsAggregation_result)that);
      return false;
    }

    public boolean equals(TermsAggregation_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(TermsAggregation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("TermsAggregation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class TermsAggregation_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TermsAggregation_resultStandardScheme getScheme() {
        return new TermsAggregation_resultStandardScheme();
      }
    }

    private static class TermsAggregation_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TermsAggregation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, TermsAggregation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map50.size);
                  java.lang.String _key51;
                  java.lang.String _val52;
                  for (int _i53 = 0; _i53 < _map50.size; ++_i53)
                  {
                    _key51 = iprot.readString();
                    _val52 = iprot.readString();
                    struct.success.put(_key51, _val52);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, TermsAggregation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter54 : struct.success.entrySet())
            {
              oprot.writeString(_iter54.getKey());
              oprot.writeString(_iter54.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class TermsAggregation_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public TermsAggregation_resultTupleScheme getScheme() {
        return new TermsAggregation_resultTupleScheme();
      }
    }

    private static class TermsAggregation_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TermsAggregation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, TermsAggregation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter55 : struct.success.entrySet())
            {
              oprot.writeString(_iter55.getKey());
              oprot.writeString(_iter55.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, TermsAggregation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map56 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map56.size);
            java.lang.String _key57;
            java.lang.String _val58;
            for (int _i59 = 0; _i59 < _map56.size; ++_i59)
            {
              _key57 = iprot.readString();
              _val58 = iprot.readString();
              struct.success.put(_key57, _val58);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class MustSearch_args implements org.apache.thrift.TBase<MustSearch_args, MustSearch_args._Fields>, java.io.Serializable, Cloneable, Comparable<MustSearch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MustSearch_args");

    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("indexName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField FILED_FIELD_DESC = new org.apache.thrift.protocol.TField("filed", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField FILED_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filedName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)9);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MustSearch_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MustSearch_argsTupleSchemeFactory();

    public java.lang.String hostIp; // required
    public int port; // required
    public java.lang.String clusterName; // required
    public java.lang.String indexName; // required
    public java.lang.String typeName; // required
    public java.lang.String filed; // required
    public java.lang.String filedName; // required
    public int start; // required
    public int size; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_IP((short)1, "hostIp"),
      PORT((short)2, "port"),
      CLUSTER_NAME((short)3, "clusterName"),
      INDEX_NAME((short)4, "indexName"),
      TYPE_NAME((short)5, "typeName"),
      FILED((short)6, "filed"),
      FILED_NAME((short)7, "filedName"),
      START((short)8, "start"),
      SIZE((short)9, "size");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_IP
            return HOST_IP;
          case 2: // PORT
            return PORT;
          case 3: // CLUSTER_NAME
            return CLUSTER_NAME;
          case 4: // INDEX_NAME
            return INDEX_NAME;
          case 5: // TYPE_NAME
            return TYPE_NAME;
          case 6: // FILED
            return FILED;
          case 7: // FILED_NAME
            return FILED_NAME;
          case 8: // START
            return START;
          case 9: // SIZE
            return SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __SIZE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("clusterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("indexName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILED, new org.apache.thrift.meta_data.FieldMetaData("filed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILED_NAME, new org.apache.thrift.meta_data.FieldMetaData("filedName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MustSearch_args.class, metaDataMap);
    }

    public MustSearch_args() {
    }

    public MustSearch_args(
      java.lang.String hostIp,
      int port,
      java.lang.String clusterName,
      java.lang.String indexName,
      java.lang.String typeName,
      java.lang.String filed,
      java.lang.String filedName,
      int start,
      int size)
    {
      this();
      this.hostIp = hostIp;
      this.port = port;
      setPortIsSet(true);
      this.clusterName = clusterName;
      this.indexName = indexName;
      this.typeName = typeName;
      this.filed = filed;
      this.filedName = filedName;
      this.start = start;
      setStartIsSet(true);
      this.size = size;
      setSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MustSearch_args(MustSearch_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      this.port = other.port;
      if (other.isSetClusterName()) {
        this.clusterName = other.clusterName;
      }
      if (other.isSetIndexName()) {
        this.indexName = other.indexName;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      if (other.isSetFiled()) {
        this.filed = other.filed;
      }
      if (other.isSetFiledName()) {
        this.filedName = other.filedName;
      }
      this.start = other.start;
      this.size = other.size;
    }

    public MustSearch_args deepCopy() {
      return new MustSearch_args(this);
    }

    @Override
    public void clear() {
      this.hostIp = null;
      setPortIsSet(false);
      this.port = 0;
      this.clusterName = null;
      this.indexName = null;
      this.typeName = null;
      this.filed = null;
      this.filedName = null;
      setStartIsSet(false);
      this.start = 0;
      setSizeIsSet(false);
      this.size = 0;
    }

    public java.lang.String getHostIp() {
      return this.hostIp;
    }

    public MustSearch_args setHostIp(java.lang.String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public MustSearch_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public java.lang.String getClusterName() {
      return this.clusterName;
    }

    public MustSearch_args setClusterName(java.lang.String clusterName) {
      this.clusterName = clusterName;
      return this;
    }

    public void unsetClusterName() {
      this.clusterName = null;
    }

    /** Returns true if field clusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterName() {
      return this.clusterName != null;
    }

    public void setClusterNameIsSet(boolean value) {
      if (!value) {
        this.clusterName = null;
      }
    }

    public java.lang.String getIndexName() {
      return this.indexName;
    }

    public MustSearch_args setIndexName(java.lang.String indexName) {
      this.indexName = indexName;
      return this;
    }

    public void unsetIndexName() {
      this.indexName = null;
    }

    /** Returns true if field indexName is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexName() {
      return this.indexName != null;
    }

    public void setIndexNameIsSet(boolean value) {
      if (!value) {
        this.indexName = null;
      }
    }

    public java.lang.String getTypeName() {
      return this.typeName;
    }

    public MustSearch_args setTypeName(java.lang.String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public java.lang.String getFiled() {
      return this.filed;
    }

    public MustSearch_args setFiled(java.lang.String filed) {
      this.filed = filed;
      return this;
    }

    public void unsetFiled() {
      this.filed = null;
    }

    /** Returns true if field filed is set (has been assigned a value) and false otherwise */
    public boolean isSetFiled() {
      return this.filed != null;
    }

    public void setFiledIsSet(boolean value) {
      if (!value) {
        this.filed = null;
      }
    }

    public java.lang.String getFiledName() {
      return this.filedName;
    }

    public MustSearch_args setFiledName(java.lang.String filedName) {
      this.filedName = filedName;
      return this;
    }

    public void unsetFiledName() {
      this.filedName = null;
    }

    /** Returns true if field filedName is set (has been assigned a value) and false otherwise */
    public boolean isSetFiledName() {
      return this.filedName != null;
    }

    public void setFiledNameIsSet(boolean value) {
      if (!value) {
        this.filedName = null;
      }
    }

    public int getStart() {
      return this.start;
    }

    public MustSearch_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getSize() {
      return this.size;
    }

    public MustSearch_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.Integer)value);
        }
        break;

      case CLUSTER_NAME:
        if (value == null) {
          unsetClusterName();
        } else {
          setClusterName((java.lang.String)value);
        }
        break;

      case INDEX_NAME:
        if (value == null) {
          unsetIndexName();
        } else {
          setIndexName((java.lang.String)value);
        }
        break;

      case TYPE_NAME:
        if (value == null) {
          unsetTypeName();
        } else {
          setTypeName((java.lang.String)value);
        }
        break;

      case FILED:
        if (value == null) {
          unsetFiled();
        } else {
          setFiled((java.lang.String)value);
        }
        break;

      case FILED_NAME:
        if (value == null) {
          unsetFiledName();
        } else {
          setFiledName((java.lang.String)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((java.lang.Integer)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_IP:
        return getHostIp();

      case PORT:
        return getPort();

      case CLUSTER_NAME:
        return getClusterName();

      case INDEX_NAME:
        return getIndexName();

      case TYPE_NAME:
        return getTypeName();

      case FILED:
        return getFiled();

      case FILED_NAME:
        return getFiledName();

      case START:
        return getStart();

      case SIZE:
        return getSize();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST_IP:
        return isSetHostIp();
      case PORT:
        return isSetPort();
      case CLUSTER_NAME:
        return isSetClusterName();
      case INDEX_NAME:
        return isSetIndexName();
      case TYPE_NAME:
        return isSetTypeName();
      case FILED:
        return isSetFiled();
      case FILED_NAME:
        return isSetFiledName();
      case START:
        return isSetStart();
      case SIZE:
        return isSetSize();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof MustSearch_args)
        return this.equals((MustSearch_args)that);
      return false;
    }

    public boolean equals(MustSearch_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_clusterName = true && this.isSetClusterName();
      boolean that_present_clusterName = true && that.isSetClusterName();
      if (this_present_clusterName || that_present_clusterName) {
        if (!(this_present_clusterName && that_present_clusterName))
          return false;
        if (!this.clusterName.equals(that.clusterName))
          return false;
      }

      boolean this_present_indexName = true && this.isSetIndexName();
      boolean that_present_indexName = true && that.isSetIndexName();
      if (this_present_indexName || that_present_indexName) {
        if (!(this_present_indexName && that_present_indexName))
          return false;
        if (!this.indexName.equals(that.indexName))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_filed = true && this.isSetFiled();
      boolean that_present_filed = true && that.isSetFiled();
      if (this_present_filed || that_present_filed) {
        if (!(this_present_filed && that_present_filed))
          return false;
        if (!this.filed.equals(that.filed))
          return false;
      }

      boolean this_present_filedName = true && this.isSetFiledName();
      boolean that_present_filedName = true && that.isSetFiledName();
      if (this_present_filedName || that_present_filedName) {
        if (!(this_present_filedName && that_present_filedName))
          return false;
        if (!this.filedName.equals(that.filedName))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + port;

      hashCode = hashCode * 8191 + ((isSetClusterName()) ? 131071 : 524287);
      if (isSetClusterName())
        hashCode = hashCode * 8191 + clusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIndexName()) ? 131071 : 524287);
      if (isSetIndexName())
        hashCode = hashCode * 8191 + indexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypeName()) ? 131071 : 524287);
      if (isSetTypeName())
        hashCode = hashCode * 8191 + typeName.hashCode();

      hashCode = hashCode * 8191 + ((isSetFiled()) ? 131071 : 524287);
      if (isSetFiled())
        hashCode = hashCode * 8191 + filed.hashCode();

      hashCode = hashCode * 8191 + ((isSetFiledName()) ? 131071 : 524287);
      if (isSetFiledName())
        hashCode = hashCode * 8191 + filedName.hashCode();

      hashCode = hashCode * 8191 + start;

      hashCode = hashCode * 8191 + size;

      return hashCode;
    }

    @Override
    public int compareTo(MustSearch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClusterName()).compareTo(other.isSetClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterName, other.clusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIndexName()).compareTo(other.isSetIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexName, other.indexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFiled()).compareTo(other.isSetFiled());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFiled()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filed, other.filed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFiledName()).compareTo(other.isSetFiledName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFiledName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filedName, other.filedName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MustSearch_args(");
      boolean first = true;

      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clusterName:");
      if (this.clusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexName:");
      if (this.indexName == null) {
        sb.append("null");
      } else {
        sb.append(this.indexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filed:");
      if (this.filed == null) {
        sb.append("null");
      } else {
        sb.append(this.filed);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filedName:");
      if (this.filedName == null) {
        sb.append("null");
      } else {
        sb.append(this.filedName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MustSearch_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public MustSearch_argsStandardScheme getScheme() {
        return new MustSearch_argsStandardScheme();
      }
    }

    private static class MustSearch_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<MustSearch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, MustSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterName = iprot.readString();
                struct.setClusterNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.indexName = iprot.readString();
                struct.setIndexNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // FILED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filed = iprot.readString();
                struct.setFiledIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // FILED_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filedName = iprot.readString();
                struct.setFiledNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.size = iprot.readI32();
                struct.setSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, MustSearch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        if (struct.clusterName != null) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.clusterName);
          oprot.writeFieldEnd();
        }
        if (struct.indexName != null) {
          oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.indexName);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        if (struct.filed != null) {
          oprot.writeFieldBegin(FILED_FIELD_DESC);
          oprot.writeString(struct.filed);
          oprot.writeFieldEnd();
        }
        if (struct.filedName != null) {
          oprot.writeFieldBegin(FILED_NAME_FIELD_DESC);
          oprot.writeString(struct.filedName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeI32(struct.size);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MustSearch_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public MustSearch_argsTupleScheme getScheme() {
        return new MustSearch_argsTupleScheme();
      }
    }

    private static class MustSearch_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<MustSearch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MustSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHostIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        if (struct.isSetClusterName()) {
          optionals.set(2);
        }
        if (struct.isSetIndexName()) {
          optionals.set(3);
        }
        if (struct.isSetTypeName()) {
          optionals.set(4);
        }
        if (struct.isSetFiled()) {
          optionals.set(5);
        }
        if (struct.isSetFiledName()) {
          optionals.set(6);
        }
        if (struct.isSetStart()) {
          optionals.set(7);
        }
        if (struct.isSetSize()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetClusterName()) {
          oprot.writeString(struct.clusterName);
        }
        if (struct.isSetIndexName()) {
          oprot.writeString(struct.indexName);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetFiled()) {
          oprot.writeString(struct.filed);
        }
        if (struct.isSetFiledName()) {
          oprot.writeString(struct.filedName);
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetSize()) {
          oprot.writeI32(struct.size);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MustSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.clusterName = iprot.readString();
          struct.setClusterNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.indexName = iprot.readString();
          struct.setIndexNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.filed = iprot.readString();
          struct.setFiledIsSet(true);
        }
        if (incoming.get(6)) {
          struct.filedName = iprot.readString();
          struct.setFiledNameIsSet(true);
        }
        if (incoming.get(7)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(8)) {
          struct.size = iprot.readI32();
          struct.setSizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class MustSearch_result implements org.apache.thrift.TBase<MustSearch_result, MustSearch_result._Fields>, java.io.Serializable, Cloneable, Comparable<MustSearch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MustSearch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new MustSearch_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new MustSearch_resultTupleSchemeFactory();

    public java.util.Map<java.lang.String,java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MustSearch_result.class, metaDataMap);
    }

    public MustSearch_result() {
    }

    public MustSearch_result(
      java.util.Map<java.lang.String,java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MustSearch_result(MustSearch_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.String> __this__success = new java.util.HashMap<java.lang.String,java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public MustSearch_result deepCopy() {
      return new MustSearch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getSuccess() {
      return this.success;
    }

    public MustSearch_result setSuccess(java.util.Map<java.lang.String,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof MustSearch_result)
        return this.equals((MustSearch_result)that);
      return false;
    }

    public boolean equals(MustSearch_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(MustSearch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("MustSearch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MustSearch_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public MustSearch_resultStandardScheme getScheme() {
        return new MustSearch_resultStandardScheme();
      }
    }

    private static class MustSearch_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<MustSearch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, MustSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map60 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map60.size);
                  java.lang.String _key61;
                  java.lang.String _val62;
                  for (int _i63 = 0; _i63 < _map60.size; ++_i63)
                  {
                    _key61 = iprot.readString();
                    _val62 = iprot.readString();
                    struct.success.put(_key61, _val62);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, MustSearch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter64 : struct.success.entrySet())
            {
              oprot.writeString(_iter64.getKey());
              oprot.writeString(_iter64.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MustSearch_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public MustSearch_resultTupleScheme getScheme() {
        return new MustSearch_resultTupleScheme();
      }
    }

    private static class MustSearch_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<MustSearch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MustSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter65 : struct.success.entrySet())
            {
              oprot.writeString(_iter65.getKey());
              oprot.writeString(_iter65.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MustSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map66 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map66.size);
            java.lang.String _key67;
            java.lang.String _val68;
            for (int _i69 = 0; _i69 < _map66.size; ++_i69)
            {
              _key67 = iprot.readString();
              _val68 = iprot.readString();
              struct.success.put(_key67, _val68);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ShouldSearch_args implements org.apache.thrift.TBase<ShouldSearch_args, ShouldSearch_args._Fields>, java.io.Serializable, Cloneable, Comparable<ShouldSearch_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShouldSearch_args");

    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CLUSTER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField INDEX_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("indexName", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("typeName", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField FILED_FIELD_DESC = new org.apache.thrift.protocol.TField("filed", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField FILED_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filedName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("size", org.apache.thrift.protocol.TType.I32, (short)9);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ShouldSearch_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ShouldSearch_argsTupleSchemeFactory();

    public java.lang.String hostIp; // required
    public int port; // required
    public java.lang.String clusterName; // required
    public java.lang.String indexName; // required
    public java.lang.String typeName; // required
    public java.lang.String filed; // required
    public java.lang.String filedName; // required
    public int start; // required
    public int size; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_IP((short)1, "hostIp"),
      PORT((short)2, "port"),
      CLUSTER_NAME((short)3, "clusterName"),
      INDEX_NAME((short)4, "indexName"),
      TYPE_NAME((short)5, "typeName"),
      FILED((short)6, "filed"),
      FILED_NAME((short)7, "filedName"),
      START((short)8, "start"),
      SIZE((short)9, "size");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_IP
            return HOST_IP;
          case 2: // PORT
            return PORT;
          case 3: // CLUSTER_NAME
            return CLUSTER_NAME;
          case 4: // INDEX_NAME
            return INDEX_NAME;
          case 5: // TYPE_NAME
            return TYPE_NAME;
          case 6: // FILED
            return FILED;
          case 7: // FILED_NAME
            return FILED_NAME;
          case 8: // START
            return START;
          case 9: // SIZE
            return SIZE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private static final int __START_ISSET_ID = 1;
    private static final int __SIZE_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.CLUSTER_NAME, new org.apache.thrift.meta_data.FieldMetaData("clusterName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.INDEX_NAME, new org.apache.thrift.meta_data.FieldMetaData("indexName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("typeName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILED, new org.apache.thrift.meta_data.FieldMetaData("filed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILED_NAME, new org.apache.thrift.meta_data.FieldMetaData("filedName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      tmpMap.put(_Fields.SIZE, new org.apache.thrift.meta_data.FieldMetaData("size", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32          , "int")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShouldSearch_args.class, metaDataMap);
    }

    public ShouldSearch_args() {
    }

    public ShouldSearch_args(
      java.lang.String hostIp,
      int port,
      java.lang.String clusterName,
      java.lang.String indexName,
      java.lang.String typeName,
      java.lang.String filed,
      java.lang.String filedName,
      int start,
      int size)
    {
      this();
      this.hostIp = hostIp;
      this.port = port;
      setPortIsSet(true);
      this.clusterName = clusterName;
      this.indexName = indexName;
      this.typeName = typeName;
      this.filed = filed;
      this.filedName = filedName;
      this.start = start;
      setStartIsSet(true);
      this.size = size;
      setSizeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ShouldSearch_args(ShouldSearch_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      this.port = other.port;
      if (other.isSetClusterName()) {
        this.clusterName = other.clusterName;
      }
      if (other.isSetIndexName()) {
        this.indexName = other.indexName;
      }
      if (other.isSetTypeName()) {
        this.typeName = other.typeName;
      }
      if (other.isSetFiled()) {
        this.filed = other.filed;
      }
      if (other.isSetFiledName()) {
        this.filedName = other.filedName;
      }
      this.start = other.start;
      this.size = other.size;
    }

    public ShouldSearch_args deepCopy() {
      return new ShouldSearch_args(this);
    }

    @Override
    public void clear() {
      this.hostIp = null;
      setPortIsSet(false);
      this.port = 0;
      this.clusterName = null;
      this.indexName = null;
      this.typeName = null;
      this.filed = null;
      this.filedName = null;
      setStartIsSet(false);
      this.start = 0;
      setSizeIsSet(false);
      this.size = 0;
    }

    public java.lang.String getHostIp() {
      return this.hostIp;
    }

    public ShouldSearch_args setHostIp(java.lang.String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public ShouldSearch_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public java.lang.String getClusterName() {
      return this.clusterName;
    }

    public ShouldSearch_args setClusterName(java.lang.String clusterName) {
      this.clusterName = clusterName;
      return this;
    }

    public void unsetClusterName() {
      this.clusterName = null;
    }

    /** Returns true if field clusterName is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterName() {
      return this.clusterName != null;
    }

    public void setClusterNameIsSet(boolean value) {
      if (!value) {
        this.clusterName = null;
      }
    }

    public java.lang.String getIndexName() {
      return this.indexName;
    }

    public ShouldSearch_args setIndexName(java.lang.String indexName) {
      this.indexName = indexName;
      return this;
    }

    public void unsetIndexName() {
      this.indexName = null;
    }

    /** Returns true if field indexName is set (has been assigned a value) and false otherwise */
    public boolean isSetIndexName() {
      return this.indexName != null;
    }

    public void setIndexNameIsSet(boolean value) {
      if (!value) {
        this.indexName = null;
      }
    }

    public java.lang.String getTypeName() {
      return this.typeName;
    }

    public ShouldSearch_args setTypeName(java.lang.String typeName) {
      this.typeName = typeName;
      return this;
    }

    public void unsetTypeName() {
      this.typeName = null;
    }

    /** Returns true if field typeName is set (has been assigned a value) and false otherwise */
    public boolean isSetTypeName() {
      return this.typeName != null;
    }

    public void setTypeNameIsSet(boolean value) {
      if (!value) {
        this.typeName = null;
      }
    }

    public java.lang.String getFiled() {
      return this.filed;
    }

    public ShouldSearch_args setFiled(java.lang.String filed) {
      this.filed = filed;
      return this;
    }

    public void unsetFiled() {
      this.filed = null;
    }

    /** Returns true if field filed is set (has been assigned a value) and false otherwise */
    public boolean isSetFiled() {
      return this.filed != null;
    }

    public void setFiledIsSet(boolean value) {
      if (!value) {
        this.filed = null;
      }
    }

    public java.lang.String getFiledName() {
      return this.filedName;
    }

    public ShouldSearch_args setFiledName(java.lang.String filedName) {
      this.filedName = filedName;
      return this;
    }

    public void unsetFiledName() {
      this.filedName = null;
    }

    /** Returns true if field filedName is set (has been assigned a value) and false otherwise */
    public boolean isSetFiledName() {
      return this.filedName != null;
    }

    public void setFiledNameIsSet(boolean value) {
      if (!value) {
        this.filedName = null;
      }
    }

    public int getStart() {
      return this.start;
    }

    public ShouldSearch_args setStart(int start) {
      this.start = start;
      setStartIsSet(true);
      return this;
    }

    public void unsetStart() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __START_ISSET_ID);
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __START_ISSET_ID);
    }

    public void setStartIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __START_ISSET_ID, value);
    }

    public int getSize() {
      return this.size;
    }

    public ShouldSearch_args setSize(int size) {
      this.size = size;
      setSizeIsSet(true);
      return this;
    }

    public void unsetSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    /** Returns true if field size is set (has been assigned a value) and false otherwise */
    public boolean isSetSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZE_ISSET_ID);
    }

    public void setSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.Integer)value);
        }
        break;

      case CLUSTER_NAME:
        if (value == null) {
          unsetClusterName();
        } else {
          setClusterName((java.lang.String)value);
        }
        break;

      case INDEX_NAME:
        if (value == null) {
          unsetIndexName();
        } else {
          setIndexName((java.lang.String)value);
        }
        break;

      case TYPE_NAME:
        if (value == null) {
          unsetTypeName();
        } else {
          setTypeName((java.lang.String)value);
        }
        break;

      case FILED:
        if (value == null) {
          unsetFiled();
        } else {
          setFiled((java.lang.String)value);
        }
        break;

      case FILED_NAME:
        if (value == null) {
          unsetFiledName();
        } else {
          setFiledName((java.lang.String)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((java.lang.Integer)value);
        }
        break;

      case SIZE:
        if (value == null) {
          unsetSize();
        } else {
          setSize((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_IP:
        return getHostIp();

      case PORT:
        return getPort();

      case CLUSTER_NAME:
        return getClusterName();

      case INDEX_NAME:
        return getIndexName();

      case TYPE_NAME:
        return getTypeName();

      case FILED:
        return getFiled();

      case FILED_NAME:
        return getFiledName();

      case START:
        return getStart();

      case SIZE:
        return getSize();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST_IP:
        return isSetHostIp();
      case PORT:
        return isSetPort();
      case CLUSTER_NAME:
        return isSetClusterName();
      case INDEX_NAME:
        return isSetIndexName();
      case TYPE_NAME:
        return isSetTypeName();
      case FILED:
        return isSetFiled();
      case FILED_NAME:
        return isSetFiledName();
      case START:
        return isSetStart();
      case SIZE:
        return isSetSize();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ShouldSearch_args)
        return this.equals((ShouldSearch_args)that);
      return false;
    }

    public boolean equals(ShouldSearch_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      boolean this_present_clusterName = true && this.isSetClusterName();
      boolean that_present_clusterName = true && that.isSetClusterName();
      if (this_present_clusterName || that_present_clusterName) {
        if (!(this_present_clusterName && that_present_clusterName))
          return false;
        if (!this.clusterName.equals(that.clusterName))
          return false;
      }

      boolean this_present_indexName = true && this.isSetIndexName();
      boolean that_present_indexName = true && that.isSetIndexName();
      if (this_present_indexName || that_present_indexName) {
        if (!(this_present_indexName && that_present_indexName))
          return false;
        if (!this.indexName.equals(that.indexName))
          return false;
      }

      boolean this_present_typeName = true && this.isSetTypeName();
      boolean that_present_typeName = true && that.isSetTypeName();
      if (this_present_typeName || that_present_typeName) {
        if (!(this_present_typeName && that_present_typeName))
          return false;
        if (!this.typeName.equals(that.typeName))
          return false;
      }

      boolean this_present_filed = true && this.isSetFiled();
      boolean that_present_filed = true && that.isSetFiled();
      if (this_present_filed || that_present_filed) {
        if (!(this_present_filed && that_present_filed))
          return false;
        if (!this.filed.equals(that.filed))
          return false;
      }

      boolean this_present_filedName = true && this.isSetFiledName();
      boolean that_present_filedName = true && that.isSetFiledName();
      if (this_present_filedName || that_present_filedName) {
        if (!(this_present_filedName && that_present_filedName))
          return false;
        if (!this.filedName.equals(that.filedName))
          return false;
      }

      boolean this_present_start = true;
      boolean that_present_start = true;
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (this.start != that.start)
          return false;
      }

      boolean this_present_size = true;
      boolean that_present_size = true;
      if (this_present_size || that_present_size) {
        if (!(this_present_size && that_present_size))
          return false;
        if (this.size != that.size)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + port;

      hashCode = hashCode * 8191 + ((isSetClusterName()) ? 131071 : 524287);
      if (isSetClusterName())
        hashCode = hashCode * 8191 + clusterName.hashCode();

      hashCode = hashCode * 8191 + ((isSetIndexName()) ? 131071 : 524287);
      if (isSetIndexName())
        hashCode = hashCode * 8191 + indexName.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypeName()) ? 131071 : 524287);
      if (isSetTypeName())
        hashCode = hashCode * 8191 + typeName.hashCode();

      hashCode = hashCode * 8191 + ((isSetFiled()) ? 131071 : 524287);
      if (isSetFiled())
        hashCode = hashCode * 8191 + filed.hashCode();

      hashCode = hashCode * 8191 + ((isSetFiledName()) ? 131071 : 524287);
      if (isSetFiledName())
        hashCode = hashCode * 8191 + filedName.hashCode();

      hashCode = hashCode * 8191 + start;

      hashCode = hashCode * 8191 + size;

      return hashCode;
    }

    @Override
    public int compareTo(ShouldSearch_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClusterName()).compareTo(other.isSetClusterName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterName, other.clusterName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIndexName()).compareTo(other.isSetIndexName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndexName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.indexName, other.indexName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypeName()).compareTo(other.isSetTypeName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypeName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.typeName, other.typeName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFiled()).compareTo(other.isSetFiled());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFiled()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filed, other.filed);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFiledName()).compareTo(other.isSetFiledName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFiledName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filedName, other.filedName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSize()).compareTo(other.isSetSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.size, other.size);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ShouldSearch_args(");
      boolean first = true;

      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      if (!first) sb.append(", ");
      sb.append("clusterName:");
      if (this.clusterName == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("indexName:");
      if (this.indexName == null) {
        sb.append("null");
      } else {
        sb.append(this.indexName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("typeName:");
      if (this.typeName == null) {
        sb.append("null");
      } else {
        sb.append(this.typeName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filed:");
      if (this.filed == null) {
        sb.append("null");
      } else {
        sb.append(this.filed);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("filedName:");
      if (this.filedName == null) {
        sb.append("null");
      } else {
        sb.append(this.filedName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      sb.append(this.start);
      first = false;
      if (!first) sb.append(", ");
      sb.append("size:");
      sb.append(this.size);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ShouldSearch_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ShouldSearch_argsStandardScheme getScheme() {
        return new ShouldSearch_argsStandardScheme();
      }
    }

    private static class ShouldSearch_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ShouldSearch_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ShouldSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLUSTER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterName = iprot.readString();
                struct.setClusterNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // INDEX_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.indexName = iprot.readString();
                struct.setIndexNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TYPE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.typeName = iprot.readString();
                struct.setTypeNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // FILED
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filed = iprot.readString();
                struct.setFiledIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // FILED_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filedName = iprot.readString();
                struct.setFiledNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.start = iprot.readI32();
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.size = iprot.readI32();
                struct.setSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ShouldSearch_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        if (struct.clusterName != null) {
          oprot.writeFieldBegin(CLUSTER_NAME_FIELD_DESC);
          oprot.writeString(struct.clusterName);
          oprot.writeFieldEnd();
        }
        if (struct.indexName != null) {
          oprot.writeFieldBegin(INDEX_NAME_FIELD_DESC);
          oprot.writeString(struct.indexName);
          oprot.writeFieldEnd();
        }
        if (struct.typeName != null) {
          oprot.writeFieldBegin(TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.typeName);
          oprot.writeFieldEnd();
        }
        if (struct.filed != null) {
          oprot.writeFieldBegin(FILED_FIELD_DESC);
          oprot.writeString(struct.filed);
          oprot.writeFieldEnd();
        }
        if (struct.filedName != null) {
          oprot.writeFieldBegin(FILED_NAME_FIELD_DESC);
          oprot.writeString(struct.filedName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_FIELD_DESC);
        oprot.writeI32(struct.start);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SIZE_FIELD_DESC);
        oprot.writeI32(struct.size);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ShouldSearch_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ShouldSearch_argsTupleScheme getScheme() {
        return new ShouldSearch_argsTupleScheme();
      }
    }

    private static class ShouldSearch_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ShouldSearch_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ShouldSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHostIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        if (struct.isSetClusterName()) {
          optionals.set(2);
        }
        if (struct.isSetIndexName()) {
          optionals.set(3);
        }
        if (struct.isSetTypeName()) {
          optionals.set(4);
        }
        if (struct.isSetFiled()) {
          optionals.set(5);
        }
        if (struct.isSetFiledName()) {
          optionals.set(6);
        }
        if (struct.isSetStart()) {
          optionals.set(7);
        }
        if (struct.isSetSize()) {
          optionals.set(8);
        }
        oprot.writeBitSet(optionals, 9);
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
        if (struct.isSetClusterName()) {
          oprot.writeString(struct.clusterName);
        }
        if (struct.isSetIndexName()) {
          oprot.writeString(struct.indexName);
        }
        if (struct.isSetTypeName()) {
          oprot.writeString(struct.typeName);
        }
        if (struct.isSetFiled()) {
          oprot.writeString(struct.filed);
        }
        if (struct.isSetFiledName()) {
          oprot.writeString(struct.filedName);
        }
        if (struct.isSetStart()) {
          oprot.writeI32(struct.start);
        }
        if (struct.isSetSize()) {
          oprot.writeI32(struct.size);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ShouldSearch_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(9);
        if (incoming.get(0)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.clusterName = iprot.readString();
          struct.setClusterNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.indexName = iprot.readString();
          struct.setIndexNameIsSet(true);
        }
        if (incoming.get(4)) {
          struct.typeName = iprot.readString();
          struct.setTypeNameIsSet(true);
        }
        if (incoming.get(5)) {
          struct.filed = iprot.readString();
          struct.setFiledIsSet(true);
        }
        if (incoming.get(6)) {
          struct.filedName = iprot.readString();
          struct.setFiledNameIsSet(true);
        }
        if (incoming.get(7)) {
          struct.start = iprot.readI32();
          struct.setStartIsSet(true);
        }
        if (incoming.get(8)) {
          struct.size = iprot.readI32();
          struct.setSizeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ShouldSearch_result implements org.apache.thrift.TBase<ShouldSearch_result, ShouldSearch_result._Fields>, java.io.Serializable, Cloneable, Comparable<ShouldSearch_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ShouldSearch_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ShouldSearch_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ShouldSearch_resultTupleSchemeFactory();

    public java.util.Map<java.lang.String,java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ShouldSearch_result.class, metaDataMap);
    }

    public ShouldSearch_result() {
    }

    public ShouldSearch_result(
      java.util.Map<java.lang.String,java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ShouldSearch_result(ShouldSearch_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.String> __this__success = new java.util.HashMap<java.lang.String,java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public ShouldSearch_result deepCopy() {
      return new ShouldSearch_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getSuccess() {
      return this.success;
    }

    public ShouldSearch_result setSuccess(java.util.Map<java.lang.String,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ShouldSearch_result)
        return this.equals((ShouldSearch_result)that);
      return false;
    }

    public boolean equals(ShouldSearch_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ShouldSearch_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ShouldSearch_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ShouldSearch_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ShouldSearch_resultStandardScheme getScheme() {
        return new ShouldSearch_resultStandardScheme();
      }
    }

    private static class ShouldSearch_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ShouldSearch_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ShouldSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map70 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map70.size);
                  java.lang.String _key71;
                  java.lang.String _val72;
                  for (int _i73 = 0; _i73 < _map70.size; ++_i73)
                  {
                    _key71 = iprot.readString();
                    _val72 = iprot.readString();
                    struct.success.put(_key71, _val72);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ShouldSearch_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter74 : struct.success.entrySet())
            {
              oprot.writeString(_iter74.getKey());
              oprot.writeString(_iter74.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ShouldSearch_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ShouldSearch_resultTupleScheme getScheme() {
        return new ShouldSearch_resultTupleScheme();
      }
    }

    private static class ShouldSearch_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ShouldSearch_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ShouldSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter75 : struct.success.entrySet())
            {
              oprot.writeString(_iter75.getKey());
              oprot.writeString(_iter75.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ShouldSearch_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map76 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map76.size);
            java.lang.String _key77;
            java.lang.String _val78;
            for (int _i79 = 0; _i79 < _map76.size; ++_i79)
            {
              _key77 = iprot.readString();
              _val78 = iprot.readString();
              struct.success.put(_key77, _val78);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
