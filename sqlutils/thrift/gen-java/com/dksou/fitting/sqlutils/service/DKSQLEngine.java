/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dksou.fitting.sqlutils.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-06-20")
public class DKSQLEngine {

  public interface Iface {

    /**
     * @param hostIp    Hive连接ip地址
     * @param port      Hive连接端口
     * @param username  用户名
     * @param password  密码
     * @param database  数据库
     * @param sql       要执行的sql语句
     * @param queueName 指定MapReduce作业提交到的队列（为mapreduce.job.queuename此参数设置）
     * @param dkSqlConf DKSQL配置项，包括：kerberos的krb5.conf文件路径配置，principal主体名配置，keytab文件路径配置
     * @return
     * 
     * @param hostIp
     * @param port
     * @param username
     * @param password
     * @param database
     * @param sql
     * @param queueName
     * @param dkSqlConf
     */
    public ResultEntity executeHQL(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String queueName, DKSQLConf dkSqlConf) throws org.apache.thrift.TException;

    /**
     * @param hostIp    Impala连接ip地址
     * @param port      Impala连接端口
     * @param database  要连接的数据库
     * @param sql       需要执行的sql
     * @param dkSqlConf DKSQL配置项，包括：kerberos的krb5.conf文件路径配置，principal主体名配置，keytab文件路径配置
     * @return String
     * 
     * @param hostIp
     * @param port
     * @param database
     * @param sql
     * @param dkSqlConf
     */
    public ResultEntity excuteISQL(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf) throws org.apache.thrift.TException;

    /**
     * @param hostIp    hive 的连接IP地址
     * @param port      hive的连接端口
     * @param username  用户名
     * @param password  密码
     * @param database  要连接的数据库
     * @param sql       要执行的sql
     * @param orderBy   排序字段
     * @param startRow  开始行
     * @param endRow    结束行
     * @param queueName 指定MapReduce作业提交到的队列（为mapreduce.job.queuename此参数设置）
     * @param dkSqlConf DKSQL配置项，包括：kerberos的krb5.conf文件路径配置，principal主体名配置，keytab文件路径配置
     * @return String
     * 
     * @param hostIp
     * @param port
     * @param username
     * @param password
     * @param database
     * @param sql
     * @param orderBy
     * @param startRow
     * @param endRow
     * @param queueName
     * @param dkSqlConf
     */
    public ResultEntity excuteQueryHQL(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String orderBy, int startRow, int endRow, java.lang.String queueName, DKSQLConf dkSqlConf) throws org.apache.thrift.TException;

    /**
     * @param hostIp    Impala的连接IP地址
     * @param port      Impala连接端口
     * @param database  要连接的数据库
     * @param sql       要执行的sql
     * @param dkSqlConf DKSQL配置项，包括：kerberos的krb5.conf文件路径配置，principal主体名配置，keytab文件路径配置
     * @return String
     * 
     * @param hostIp
     * @param port
     * @param database
     * @param sql
     * @param dkSqlConf
     */
    public ResultEntity excuteQueryISQL(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf) throws org.apache.thrift.TException;

    /**
     * @param hostIp    hive的连接IP地址
     * @param port      hive的连接端口
     * @param username  用户名
     * @param password  密码
     * @param database  要连接的数据库
     * @param sql       要执行的sql
     * @param queueName 指定MapReduce作业提交到的队列（为mapreduce.job.queuename此参数设置）
     * @param dkSqlConf DKSQL配置项，包括：kerberos的krb5.conf文件路径配置，principal主体名配置，keytab文件路径配置
     * @return String
     * 
     * @param hostIp
     * @param port
     * @param username
     * @param password
     * @param database
     * @param sql
     * @param queueName
     * @param dkSqlConf
     */
    public ResultEntity countHQL(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String queueName, DKSQLConf dkSqlConf) throws org.apache.thrift.TException;

    /**
     * @param hostIp    Impala的连接IP地址
     * @param port      Impala的连接端口
     * @param database  要连接的数据库
     * @param sql       要执行的sql
     * @param dkSqlConf DKSQL配置项，包括：kerberos的krb5.conf文件路径配置，principal主体名配置，keytab文件路径配置
     * @return String
     * 
     * @param hostIp
     * @param port
     * @param database
     * @param sql
     * @param dkSqlConf
     */
    public ResultEntity countIQL(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void executeHQL(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String queueName, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException;

    public void excuteISQL(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException;

    public void excuteQueryHQL(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String orderBy, int startRow, int endRow, java.lang.String queueName, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException;

    public void excuteQueryISQL(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException;

    public void countHQL(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String queueName, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException;

    public void countIQL(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ResultEntity executeHQL(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String queueName, DKSQLConf dkSqlConf) throws org.apache.thrift.TException
    {
      send_executeHQL(hostIp, port, username, password, database, sql, queueName, dkSqlConf);
      return recv_executeHQL();
    }

    public void send_executeHQL(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String queueName, DKSQLConf dkSqlConf) throws org.apache.thrift.TException
    {
      executeHQL_args args = new executeHQL_args();
      args.setHostIp(hostIp);
      args.setPort(port);
      args.setUsername(username);
      args.setPassword(password);
      args.setDatabase(database);
      args.setSql(sql);
      args.setQueueName(queueName);
      args.setDkSqlConf(dkSqlConf);
      sendBase("executeHQL", args);
    }

    public ResultEntity recv_executeHQL() throws org.apache.thrift.TException
    {
      executeHQL_result result = new executeHQL_result();
      receiveBase(result, "executeHQL");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "executeHQL failed: unknown result");
    }

    public ResultEntity excuteISQL(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf) throws org.apache.thrift.TException
    {
      send_excuteISQL(hostIp, port, database, sql, dkSqlConf);
      return recv_excuteISQL();
    }

    public void send_excuteISQL(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf) throws org.apache.thrift.TException
    {
      excuteISQL_args args = new excuteISQL_args();
      args.setHostIp(hostIp);
      args.setPort(port);
      args.setDatabase(database);
      args.setSql(sql);
      args.setDkSqlConf(dkSqlConf);
      sendBase("excuteISQL", args);
    }

    public ResultEntity recv_excuteISQL() throws org.apache.thrift.TException
    {
      excuteISQL_result result = new excuteISQL_result();
      receiveBase(result, "excuteISQL");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "excuteISQL failed: unknown result");
    }

    public ResultEntity excuteQueryHQL(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String orderBy, int startRow, int endRow, java.lang.String queueName, DKSQLConf dkSqlConf) throws org.apache.thrift.TException
    {
      send_excuteQueryHQL(hostIp, port, username, password, database, sql, orderBy, startRow, endRow, queueName, dkSqlConf);
      return recv_excuteQueryHQL();
    }

    public void send_excuteQueryHQL(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String orderBy, int startRow, int endRow, java.lang.String queueName, DKSQLConf dkSqlConf) throws org.apache.thrift.TException
    {
      excuteQueryHQL_args args = new excuteQueryHQL_args();
      args.setHostIp(hostIp);
      args.setPort(port);
      args.setUsername(username);
      args.setPassword(password);
      args.setDatabase(database);
      args.setSql(sql);
      args.setOrderBy(orderBy);
      args.setStartRow(startRow);
      args.setEndRow(endRow);
      args.setQueueName(queueName);
      args.setDkSqlConf(dkSqlConf);
      sendBase("excuteQueryHQL", args);
    }

    public ResultEntity recv_excuteQueryHQL() throws org.apache.thrift.TException
    {
      excuteQueryHQL_result result = new excuteQueryHQL_result();
      receiveBase(result, "excuteQueryHQL");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "excuteQueryHQL failed: unknown result");
    }

    public ResultEntity excuteQueryISQL(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf) throws org.apache.thrift.TException
    {
      send_excuteQueryISQL(hostIp, port, database, sql, dkSqlConf);
      return recv_excuteQueryISQL();
    }

    public void send_excuteQueryISQL(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf) throws org.apache.thrift.TException
    {
      excuteQueryISQL_args args = new excuteQueryISQL_args();
      args.setHostIp(hostIp);
      args.setPort(port);
      args.setDatabase(database);
      args.setSql(sql);
      args.setDkSqlConf(dkSqlConf);
      sendBase("excuteQueryISQL", args);
    }

    public ResultEntity recv_excuteQueryISQL() throws org.apache.thrift.TException
    {
      excuteQueryISQL_result result = new excuteQueryISQL_result();
      receiveBase(result, "excuteQueryISQL");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "excuteQueryISQL failed: unknown result");
    }

    public ResultEntity countHQL(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String queueName, DKSQLConf dkSqlConf) throws org.apache.thrift.TException
    {
      send_countHQL(hostIp, port, username, password, database, sql, queueName, dkSqlConf);
      return recv_countHQL();
    }

    public void send_countHQL(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String queueName, DKSQLConf dkSqlConf) throws org.apache.thrift.TException
    {
      countHQL_args args = new countHQL_args();
      args.setHostIp(hostIp);
      args.setPort(port);
      args.setUsername(username);
      args.setPassword(password);
      args.setDatabase(database);
      args.setSql(sql);
      args.setQueueName(queueName);
      args.setDkSqlConf(dkSqlConf);
      sendBase("countHQL", args);
    }

    public ResultEntity recv_countHQL() throws org.apache.thrift.TException
    {
      countHQL_result result = new countHQL_result();
      receiveBase(result, "countHQL");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countHQL failed: unknown result");
    }

    public ResultEntity countIQL(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf) throws org.apache.thrift.TException
    {
      send_countIQL(hostIp, port, database, sql, dkSqlConf);
      return recv_countIQL();
    }

    public void send_countIQL(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf) throws org.apache.thrift.TException
    {
      countIQL_args args = new countIQL_args();
      args.setHostIp(hostIp);
      args.setPort(port);
      args.setDatabase(database);
      args.setSql(sql);
      args.setDkSqlConf(dkSqlConf);
      sendBase("countIQL", args);
    }

    public ResultEntity recv_countIQL() throws org.apache.thrift.TException
    {
      countIQL_result result = new countIQL_result();
      receiveBase(result, "countIQL");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "countIQL failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void executeHQL(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String queueName, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      executeHQL_call method_call = new executeHQL_call(hostIp, port, username, password, database, sql, queueName, dkSqlConf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class executeHQL_call extends org.apache.thrift.async.TAsyncMethodCall<ResultEntity> {
      private java.lang.String hostIp;
      private java.lang.String port;
      private java.lang.String username;
      private java.lang.String password;
      private java.lang.String database;
      private java.lang.String sql;
      private java.lang.String queueName;
      private DKSQLConf dkSqlConf;
      public executeHQL_call(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String queueName, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostIp = hostIp;
        this.port = port;
        this.username = username;
        this.password = password;
        this.database = database;
        this.sql = sql;
        this.queueName = queueName;
        this.dkSqlConf = dkSqlConf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("executeHQL", org.apache.thrift.protocol.TMessageType.CALL, 0));
        executeHQL_args args = new executeHQL_args();
        args.setHostIp(hostIp);
        args.setPort(port);
        args.setUsername(username);
        args.setPassword(password);
        args.setDatabase(database);
        args.setSql(sql);
        args.setQueueName(queueName);
        args.setDkSqlConf(dkSqlConf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultEntity getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_executeHQL();
      }
    }

    public void excuteISQL(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      excuteISQL_call method_call = new excuteISQL_call(hostIp, port, database, sql, dkSqlConf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class excuteISQL_call extends org.apache.thrift.async.TAsyncMethodCall<ResultEntity> {
      private java.lang.String hostIp;
      private java.lang.String port;
      private java.lang.String database;
      private java.lang.String sql;
      private DKSQLConf dkSqlConf;
      public excuteISQL_call(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostIp = hostIp;
        this.port = port;
        this.database = database;
        this.sql = sql;
        this.dkSqlConf = dkSqlConf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("excuteISQL", org.apache.thrift.protocol.TMessageType.CALL, 0));
        excuteISQL_args args = new excuteISQL_args();
        args.setHostIp(hostIp);
        args.setPort(port);
        args.setDatabase(database);
        args.setSql(sql);
        args.setDkSqlConf(dkSqlConf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultEntity getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_excuteISQL();
      }
    }

    public void excuteQueryHQL(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String orderBy, int startRow, int endRow, java.lang.String queueName, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      excuteQueryHQL_call method_call = new excuteQueryHQL_call(hostIp, port, username, password, database, sql, orderBy, startRow, endRow, queueName, dkSqlConf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class excuteQueryHQL_call extends org.apache.thrift.async.TAsyncMethodCall<ResultEntity> {
      private java.lang.String hostIp;
      private java.lang.String port;
      private java.lang.String username;
      private java.lang.String password;
      private java.lang.String database;
      private java.lang.String sql;
      private java.lang.String orderBy;
      private int startRow;
      private int endRow;
      private java.lang.String queueName;
      private DKSQLConf dkSqlConf;
      public excuteQueryHQL_call(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String orderBy, int startRow, int endRow, java.lang.String queueName, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostIp = hostIp;
        this.port = port;
        this.username = username;
        this.password = password;
        this.database = database;
        this.sql = sql;
        this.orderBy = orderBy;
        this.startRow = startRow;
        this.endRow = endRow;
        this.queueName = queueName;
        this.dkSqlConf = dkSqlConf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("excuteQueryHQL", org.apache.thrift.protocol.TMessageType.CALL, 0));
        excuteQueryHQL_args args = new excuteQueryHQL_args();
        args.setHostIp(hostIp);
        args.setPort(port);
        args.setUsername(username);
        args.setPassword(password);
        args.setDatabase(database);
        args.setSql(sql);
        args.setOrderBy(orderBy);
        args.setStartRow(startRow);
        args.setEndRow(endRow);
        args.setQueueName(queueName);
        args.setDkSqlConf(dkSqlConf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultEntity getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_excuteQueryHQL();
      }
    }

    public void excuteQueryISQL(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      excuteQueryISQL_call method_call = new excuteQueryISQL_call(hostIp, port, database, sql, dkSqlConf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class excuteQueryISQL_call extends org.apache.thrift.async.TAsyncMethodCall<ResultEntity> {
      private java.lang.String hostIp;
      private java.lang.String port;
      private java.lang.String database;
      private java.lang.String sql;
      private DKSQLConf dkSqlConf;
      public excuteQueryISQL_call(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostIp = hostIp;
        this.port = port;
        this.database = database;
        this.sql = sql;
        this.dkSqlConf = dkSqlConf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("excuteQueryISQL", org.apache.thrift.protocol.TMessageType.CALL, 0));
        excuteQueryISQL_args args = new excuteQueryISQL_args();
        args.setHostIp(hostIp);
        args.setPort(port);
        args.setDatabase(database);
        args.setSql(sql);
        args.setDkSqlConf(dkSqlConf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultEntity getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_excuteQueryISQL();
      }
    }

    public void countHQL(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String queueName, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countHQL_call method_call = new countHQL_call(hostIp, port, username, password, database, sql, queueName, dkSqlConf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countHQL_call extends org.apache.thrift.async.TAsyncMethodCall<ResultEntity> {
      private java.lang.String hostIp;
      private java.lang.String port;
      private java.lang.String username;
      private java.lang.String password;
      private java.lang.String database;
      private java.lang.String sql;
      private java.lang.String queueName;
      private DKSQLConf dkSqlConf;
      public countHQL_call(java.lang.String hostIp, java.lang.String port, java.lang.String username, java.lang.String password, java.lang.String database, java.lang.String sql, java.lang.String queueName, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostIp = hostIp;
        this.port = port;
        this.username = username;
        this.password = password;
        this.database = database;
        this.sql = sql;
        this.queueName = queueName;
        this.dkSqlConf = dkSqlConf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countHQL", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countHQL_args args = new countHQL_args();
        args.setHostIp(hostIp);
        args.setPort(port);
        args.setUsername(username);
        args.setPassword(password);
        args.setDatabase(database);
        args.setSql(sql);
        args.setQueueName(queueName);
        args.setDkSqlConf(dkSqlConf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultEntity getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countHQL();
      }
    }

    public void countIQL(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      countIQL_call method_call = new countIQL_call(hostIp, port, database, sql, dkSqlConf, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class countIQL_call extends org.apache.thrift.async.TAsyncMethodCall<ResultEntity> {
      private java.lang.String hostIp;
      private java.lang.String port;
      private java.lang.String database;
      private java.lang.String sql;
      private DKSQLConf dkSqlConf;
      public countIQL_call(java.lang.String hostIp, java.lang.String port, java.lang.String database, java.lang.String sql, DKSQLConf dkSqlConf, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hostIp = hostIp;
        this.port = port;
        this.database = database;
        this.sql = sql;
        this.dkSqlConf = dkSqlConf;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("countIQL", org.apache.thrift.protocol.TMessageType.CALL, 0));
        countIQL_args args = new countIQL_args();
        args.setHostIp(hostIp);
        args.setPort(port);
        args.setDatabase(database);
        args.setSql(sql);
        args.setDkSqlConf(dkSqlConf);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ResultEntity getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_countIQL();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("executeHQL", new executeHQL());
      processMap.put("excuteISQL", new excuteISQL());
      processMap.put("excuteQueryHQL", new excuteQueryHQL());
      processMap.put("excuteQueryISQL", new excuteQueryISQL());
      processMap.put("countHQL", new countHQL());
      processMap.put("countIQL", new countIQL());
      return processMap;
    }

    public static class executeHQL<I extends Iface> extends org.apache.thrift.ProcessFunction<I, executeHQL_args> {
      public executeHQL() {
        super("executeHQL");
      }

      public executeHQL_args getEmptyArgsInstance() {
        return new executeHQL_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public executeHQL_result getResult(I iface, executeHQL_args args) throws org.apache.thrift.TException {
        executeHQL_result result = new executeHQL_result();
        result.success = iface.executeHQL(args.hostIp, args.port, args.username, args.password, args.database, args.sql, args.queueName, args.dkSqlConf);
        return result;
      }
    }

    public static class excuteISQL<I extends Iface> extends org.apache.thrift.ProcessFunction<I, excuteISQL_args> {
      public excuteISQL() {
        super("excuteISQL");
      }

      public excuteISQL_args getEmptyArgsInstance() {
        return new excuteISQL_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public excuteISQL_result getResult(I iface, excuteISQL_args args) throws org.apache.thrift.TException {
        excuteISQL_result result = new excuteISQL_result();
        result.success = iface.excuteISQL(args.hostIp, args.port, args.database, args.sql, args.dkSqlConf);
        return result;
      }
    }

    public static class excuteQueryHQL<I extends Iface> extends org.apache.thrift.ProcessFunction<I, excuteQueryHQL_args> {
      public excuteQueryHQL() {
        super("excuteQueryHQL");
      }

      public excuteQueryHQL_args getEmptyArgsInstance() {
        return new excuteQueryHQL_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public excuteQueryHQL_result getResult(I iface, excuteQueryHQL_args args) throws org.apache.thrift.TException {
        excuteQueryHQL_result result = new excuteQueryHQL_result();
        result.success = iface.excuteQueryHQL(args.hostIp, args.port, args.username, args.password, args.database, args.sql, args.orderBy, args.startRow, args.endRow, args.queueName, args.dkSqlConf);
        return result;
      }
    }

    public static class excuteQueryISQL<I extends Iface> extends org.apache.thrift.ProcessFunction<I, excuteQueryISQL_args> {
      public excuteQueryISQL() {
        super("excuteQueryISQL");
      }

      public excuteQueryISQL_args getEmptyArgsInstance() {
        return new excuteQueryISQL_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public excuteQueryISQL_result getResult(I iface, excuteQueryISQL_args args) throws org.apache.thrift.TException {
        excuteQueryISQL_result result = new excuteQueryISQL_result();
        result.success = iface.excuteQueryISQL(args.hostIp, args.port, args.database, args.sql, args.dkSqlConf);
        return result;
      }
    }

    public static class countHQL<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countHQL_args> {
      public countHQL() {
        super("countHQL");
      }

      public countHQL_args getEmptyArgsInstance() {
        return new countHQL_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public countHQL_result getResult(I iface, countHQL_args args) throws org.apache.thrift.TException {
        countHQL_result result = new countHQL_result();
        result.success = iface.countHQL(args.hostIp, args.port, args.username, args.password, args.database, args.sql, args.queueName, args.dkSqlConf);
        return result;
      }
    }

    public static class countIQL<I extends Iface> extends org.apache.thrift.ProcessFunction<I, countIQL_args> {
      public countIQL() {
        super("countIQL");
      }

      public countIQL_args getEmptyArgsInstance() {
        return new countIQL_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public countIQL_result getResult(I iface, countIQL_args args) throws org.apache.thrift.TException {
        countIQL_result result = new countIQL_result();
        result.success = iface.countIQL(args.hostIp, args.port, args.database, args.sql, args.dkSqlConf);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("executeHQL", new executeHQL());
      processMap.put("excuteISQL", new excuteISQL());
      processMap.put("excuteQueryHQL", new excuteQueryHQL());
      processMap.put("excuteQueryISQL", new excuteQueryISQL());
      processMap.put("countHQL", new countHQL());
      processMap.put("countIQL", new countIQL());
      return processMap;
    }

    public static class executeHQL<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, executeHQL_args, ResultEntity> {
      public executeHQL() {
        super("executeHQL");
      }

      public executeHQL_args getEmptyArgsInstance() {
        return new executeHQL_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ResultEntity> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ResultEntity>() { 
          public void onComplete(ResultEntity o) {
            executeHQL_result result = new executeHQL_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            executeHQL_result result = new executeHQL_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, executeHQL_args args, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
        iface.executeHQL(args.hostIp, args.port, args.username, args.password, args.database, args.sql, args.queueName, args.dkSqlConf,resultHandler);
      }
    }

    public static class excuteISQL<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, excuteISQL_args, ResultEntity> {
      public excuteISQL() {
        super("excuteISQL");
      }

      public excuteISQL_args getEmptyArgsInstance() {
        return new excuteISQL_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ResultEntity> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ResultEntity>() { 
          public void onComplete(ResultEntity o) {
            excuteISQL_result result = new excuteISQL_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            excuteISQL_result result = new excuteISQL_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, excuteISQL_args args, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
        iface.excuteISQL(args.hostIp, args.port, args.database, args.sql, args.dkSqlConf,resultHandler);
      }
    }

    public static class excuteQueryHQL<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, excuteQueryHQL_args, ResultEntity> {
      public excuteQueryHQL() {
        super("excuteQueryHQL");
      }

      public excuteQueryHQL_args getEmptyArgsInstance() {
        return new excuteQueryHQL_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ResultEntity> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ResultEntity>() { 
          public void onComplete(ResultEntity o) {
            excuteQueryHQL_result result = new excuteQueryHQL_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            excuteQueryHQL_result result = new excuteQueryHQL_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, excuteQueryHQL_args args, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
        iface.excuteQueryHQL(args.hostIp, args.port, args.username, args.password, args.database, args.sql, args.orderBy, args.startRow, args.endRow, args.queueName, args.dkSqlConf,resultHandler);
      }
    }

    public static class excuteQueryISQL<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, excuteQueryISQL_args, ResultEntity> {
      public excuteQueryISQL() {
        super("excuteQueryISQL");
      }

      public excuteQueryISQL_args getEmptyArgsInstance() {
        return new excuteQueryISQL_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ResultEntity> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ResultEntity>() { 
          public void onComplete(ResultEntity o) {
            excuteQueryISQL_result result = new excuteQueryISQL_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            excuteQueryISQL_result result = new excuteQueryISQL_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, excuteQueryISQL_args args, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
        iface.excuteQueryISQL(args.hostIp, args.port, args.database, args.sql, args.dkSqlConf,resultHandler);
      }
    }

    public static class countHQL<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countHQL_args, ResultEntity> {
      public countHQL() {
        super("countHQL");
      }

      public countHQL_args getEmptyArgsInstance() {
        return new countHQL_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ResultEntity> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ResultEntity>() { 
          public void onComplete(ResultEntity o) {
            countHQL_result result = new countHQL_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            countHQL_result result = new countHQL_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countHQL_args args, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
        iface.countHQL(args.hostIp, args.port, args.username, args.password, args.database, args.sql, args.queueName, args.dkSqlConf,resultHandler);
      }
    }

    public static class countIQL<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, countIQL_args, ResultEntity> {
      public countIQL() {
        super("countIQL");
      }

      public countIQL_args getEmptyArgsInstance() {
        return new countIQL_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<ResultEntity> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<ResultEntity>() { 
          public void onComplete(ResultEntity o) {
            countIQL_result result = new countIQL_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            countIQL_result result = new countIQL_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, countIQL_args args, org.apache.thrift.async.AsyncMethodCallback<ResultEntity> resultHandler) throws org.apache.thrift.TException {
        iface.countIQL(args.hostIp, args.port, args.database, args.sql, args.dkSqlConf,resultHandler);
      }
    }

  }

  public static class executeHQL_args implements org.apache.thrift.TBase<executeHQL_args, executeHQL_args._Fields>, java.io.Serializable, Cloneable, Comparable<executeHQL_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeHQL_args");

    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField DK_SQL_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkSqlConf", org.apache.thrift.protocol.TType.STRUCT, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new executeHQL_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new executeHQL_argsTupleSchemeFactory();

    public java.lang.String hostIp; // required
    public java.lang.String port; // required
    public java.lang.String username; // required
    public java.lang.String password; // required
    public java.lang.String database; // required
    public java.lang.String sql; // required
    public java.lang.String queueName; // required
    public DKSQLConf dkSqlConf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_IP((short)1, "hostIp"),
      PORT((short)2, "port"),
      USERNAME((short)3, "username"),
      PASSWORD((short)4, "password"),
      DATABASE((short)5, "database"),
      SQL((short)6, "sql"),
      QUEUE_NAME((short)7, "queueName"),
      DK_SQL_CONF((short)8, "dkSqlConf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_IP
            return HOST_IP;
          case 2: // PORT
            return PORT;
          case 3: // USERNAME
            return USERNAME;
          case 4: // PASSWORD
            return PASSWORD;
          case 5: // DATABASE
            return DATABASE;
          case 6: // SQL
            return SQL;
          case 7: // QUEUE_NAME
            return QUEUE_NAME;
          case 8: // DK_SQL_CONF
            return DK_SQL_CONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DK_SQL_CONF, new org.apache.thrift.meta_data.FieldMetaData("dkSqlConf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKSQLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeHQL_args.class, metaDataMap);
    }

    public executeHQL_args() {
    }

    public executeHQL_args(
      java.lang.String hostIp,
      java.lang.String port,
      java.lang.String username,
      java.lang.String password,
      java.lang.String database,
      java.lang.String sql,
      java.lang.String queueName,
      DKSQLConf dkSqlConf)
    {
      this();
      this.hostIp = hostIp;
      this.port = port;
      this.username = username;
      this.password = password;
      this.database = database;
      this.sql = sql;
      this.queueName = queueName;
      this.dkSqlConf = dkSqlConf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeHQL_args(executeHQL_args other) {
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetPort()) {
        this.port = other.port;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetDatabase()) {
        this.database = other.database;
      }
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
      if (other.isSetDkSqlConf()) {
        this.dkSqlConf = new DKSQLConf(other.dkSqlConf);
      }
    }

    public executeHQL_args deepCopy() {
      return new executeHQL_args(this);
    }

    @Override
    public void clear() {
      this.hostIp = null;
      this.port = null;
      this.username = null;
      this.password = null;
      this.database = null;
      this.sql = null;
      this.queueName = null;
      this.dkSqlConf = null;
    }

    public java.lang.String getHostIp() {
      return this.hostIp;
    }

    public executeHQL_args setHostIp(java.lang.String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public java.lang.String getPort() {
      return this.port;
    }

    public executeHQL_args setPort(java.lang.String port) {
      this.port = port;
      return this;
    }

    public void unsetPort() {
      this.port = null;
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return this.port != null;
    }

    public void setPortIsSet(boolean value) {
      if (!value) {
        this.port = null;
      }
    }

    public java.lang.String getUsername() {
      return this.username;
    }

    public executeHQL_args setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public executeHQL_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public java.lang.String getDatabase() {
      return this.database;
    }

    public executeHQL_args setDatabase(java.lang.String database) {
      this.database = database;
      return this;
    }

    public void unsetDatabase() {
      this.database = null;
    }

    /** Returns true if field database is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabase() {
      return this.database != null;
    }

    public void setDatabaseIsSet(boolean value) {
      if (!value) {
        this.database = null;
      }
    }

    public java.lang.String getSql() {
      return this.sql;
    }

    public executeHQL_args setSql(java.lang.String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public java.lang.String getQueueName() {
      return this.queueName;
    }

    public executeHQL_args setQueueName(java.lang.String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public DKSQLConf getDkSqlConf() {
      return this.dkSqlConf;
    }

    public executeHQL_args setDkSqlConf(DKSQLConf dkSqlConf) {
      this.dkSqlConf = dkSqlConf;
      return this;
    }

    public void unsetDkSqlConf() {
      this.dkSqlConf = null;
    }

    /** Returns true if field dkSqlConf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkSqlConf() {
      return this.dkSqlConf != null;
    }

    public void setDkSqlConfIsSet(boolean value) {
      if (!value) {
        this.dkSqlConf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case DATABASE:
        if (value == null) {
          unsetDatabase();
        } else {
          setDatabase((java.lang.String)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((java.lang.String)value);
        }
        break;

      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((java.lang.String)value);
        }
        break;

      case DK_SQL_CONF:
        if (value == null) {
          unsetDkSqlConf();
        } else {
          setDkSqlConf((DKSQLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_IP:
        return getHostIp();

      case PORT:
        return getPort();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case DATABASE:
        return getDatabase();

      case SQL:
        return getSql();

      case QUEUE_NAME:
        return getQueueName();

      case DK_SQL_CONF:
        return getDkSqlConf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST_IP:
        return isSetHostIp();
      case PORT:
        return isSetPort();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case DATABASE:
        return isSetDatabase();
      case SQL:
        return isSetSql();
      case QUEUE_NAME:
        return isSetQueueName();
      case DK_SQL_CONF:
        return isSetDkSqlConf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof executeHQL_args)
        return this.equals((executeHQL_args)that);
      return false;
    }

    public boolean equals(executeHQL_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_port = true && this.isSetPort();
      boolean that_present_port = true && that.isSetPort();
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (!this.port.equals(that.port))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_database = true && this.isSetDatabase();
      boolean that_present_database = true && that.isSetDatabase();
      if (this_present_database || that_present_database) {
        if (!(this_present_database && that_present_database))
          return false;
        if (!this.database.equals(that.database))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      boolean this_present_dkSqlConf = true && this.isSetDkSqlConf();
      boolean that_present_dkSqlConf = true && that.isSetDkSqlConf();
      if (this_present_dkSqlConf || that_present_dkSqlConf) {
        if (!(this_present_dkSqlConf && that_present_dkSqlConf))
          return false;
        if (!this.dkSqlConf.equals(that.dkSqlConf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetPort()) ? 131071 : 524287);
      if (isSetPort())
        hashCode = hashCode * 8191 + port.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + ((isSetDatabase()) ? 131071 : 524287);
      if (isSetDatabase())
        hashCode = hashCode * 8191 + database.hashCode();

      hashCode = hashCode * 8191 + ((isSetSql()) ? 131071 : 524287);
      if (isSetSql())
        hashCode = hashCode * 8191 + sql.hashCode();

      hashCode = hashCode * 8191 + ((isSetQueueName()) ? 131071 : 524287);
      if (isSetQueueName())
        hashCode = hashCode * 8191 + queueName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkSqlConf()) ? 131071 : 524287);
      if (isSetDkSqlConf())
        hashCode = hashCode * 8191 + dkSqlConf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(executeHQL_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDatabase()).compareTo(other.isSetDatabase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabase()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, other.database);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQueueName()).compareTo(other.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, other.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkSqlConf()).compareTo(other.isSetDkSqlConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkSqlConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkSqlConf, other.dkSqlConf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("executeHQL_args(");
      boolean first = true;

      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      if (this.port == null) {
        sb.append("null");
      } else {
        sb.append(this.port);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("database:");
      if (this.database == null) {
        sb.append("null");
      } else {
        sb.append(this.database);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkSqlConf:");
      if (this.dkSqlConf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkSqlConf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkSqlConf != null) {
        dkSqlConf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeHQL_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeHQL_argsStandardScheme getScheme() {
        return new executeHQL_argsStandardScheme();
      }
    }

    private static class executeHQL_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<executeHQL_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeHQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.port = iprot.readString();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DATABASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.database = iprot.readString();
                struct.setDatabaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // DK_SQL_CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkSqlConf = new DKSQLConf();
                struct.dkSqlConf.read(iprot);
                struct.setDkSqlConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeHQL_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.port != null) {
          oprot.writeFieldBegin(PORT_FIELD_DESC);
          oprot.writeString(struct.port);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.database != null) {
          oprot.writeFieldBegin(DATABASE_FIELD_DESC);
          oprot.writeString(struct.database);
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        if (struct.dkSqlConf != null) {
          oprot.writeFieldBegin(DK_SQL_CONF_FIELD_DESC);
          struct.dkSqlConf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeHQL_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeHQL_argsTupleScheme getScheme() {
        return new executeHQL_argsTupleScheme();
      }
    }

    private static class executeHQL_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<executeHQL_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeHQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHostIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        if (struct.isSetUsername()) {
          optionals.set(2);
        }
        if (struct.isSetPassword()) {
          optionals.set(3);
        }
        if (struct.isSetDatabase()) {
          optionals.set(4);
        }
        if (struct.isSetSql()) {
          optionals.set(5);
        }
        if (struct.isSetQueueName()) {
          optionals.set(6);
        }
        if (struct.isSetDkSqlConf()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetPort()) {
          oprot.writeString(struct.port);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetDatabase()) {
          oprot.writeString(struct.database);
        }
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
        if (struct.isSetDkSqlConf()) {
          struct.dkSqlConf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeHQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readString();
          struct.setPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(4)) {
          struct.database = iprot.readString();
          struct.setDatabaseIsSet(true);
        }
        if (incoming.get(5)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
        if (incoming.get(6)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
        if (incoming.get(7)) {
          struct.dkSqlConf = new DKSQLConf();
          struct.dkSqlConf.read(iprot);
          struct.setDkSqlConfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class executeHQL_result implements org.apache.thrift.TBase<executeHQL_result, executeHQL_result._Fields>, java.io.Serializable, Cloneable, Comparable<executeHQL_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeHQL_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new executeHQL_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new executeHQL_resultTupleSchemeFactory();

    public ResultEntity success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeHQL_result.class, metaDataMap);
    }

    public executeHQL_result() {
    }

    public executeHQL_result(
      ResultEntity success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeHQL_result(executeHQL_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultEntity(other.success);
      }
    }

    public executeHQL_result deepCopy() {
      return new executeHQL_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultEntity getSuccess() {
      return this.success;
    }

    public executeHQL_result setSuccess(ResultEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultEntity)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof executeHQL_result)
        return this.equals((executeHQL_result)that);
      return false;
    }

    public boolean equals(executeHQL_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(executeHQL_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("executeHQL_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeHQL_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeHQL_resultStandardScheme getScheme() {
        return new executeHQL_resultStandardScheme();
      }
    }

    private static class executeHQL_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<executeHQL_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeHQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeHQL_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeHQL_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeHQL_resultTupleScheme getScheme() {
        return new executeHQL_resultTupleScheme();
      }
    }

    private static class executeHQL_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<executeHQL_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeHQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeHQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class excuteISQL_args implements org.apache.thrift.TBase<excuteISQL_args, excuteISQL_args._Fields>, java.io.Serializable, Cloneable, Comparable<excuteISQL_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("excuteISQL_args");

    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DK_SQL_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkSqlConf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new excuteISQL_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new excuteISQL_argsTupleSchemeFactory();

    public java.lang.String hostIp; // required
    public java.lang.String port; // required
    public java.lang.String database; // required
    public java.lang.String sql; // required
    public DKSQLConf dkSqlConf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_IP((short)1, "hostIp"),
      PORT((short)2, "port"),
      DATABASE((short)3, "database"),
      SQL((short)4, "sql"),
      DK_SQL_CONF((short)5, "dkSqlConf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_IP
            return HOST_IP;
          case 2: // PORT
            return PORT;
          case 3: // DATABASE
            return DATABASE;
          case 4: // SQL
            return SQL;
          case 5: // DK_SQL_CONF
            return DK_SQL_CONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DK_SQL_CONF, new org.apache.thrift.meta_data.FieldMetaData("dkSqlConf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKSQLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(excuteISQL_args.class, metaDataMap);
    }

    public excuteISQL_args() {
    }

    public excuteISQL_args(
      java.lang.String hostIp,
      java.lang.String port,
      java.lang.String database,
      java.lang.String sql,
      DKSQLConf dkSqlConf)
    {
      this();
      this.hostIp = hostIp;
      this.port = port;
      this.database = database;
      this.sql = sql;
      this.dkSqlConf = dkSqlConf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public excuteISQL_args(excuteISQL_args other) {
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetPort()) {
        this.port = other.port;
      }
      if (other.isSetDatabase()) {
        this.database = other.database;
      }
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      if (other.isSetDkSqlConf()) {
        this.dkSqlConf = new DKSQLConf(other.dkSqlConf);
      }
    }

    public excuteISQL_args deepCopy() {
      return new excuteISQL_args(this);
    }

    @Override
    public void clear() {
      this.hostIp = null;
      this.port = null;
      this.database = null;
      this.sql = null;
      this.dkSqlConf = null;
    }

    public java.lang.String getHostIp() {
      return this.hostIp;
    }

    public excuteISQL_args setHostIp(java.lang.String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public java.lang.String getPort() {
      return this.port;
    }

    public excuteISQL_args setPort(java.lang.String port) {
      this.port = port;
      return this;
    }

    public void unsetPort() {
      this.port = null;
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return this.port != null;
    }

    public void setPortIsSet(boolean value) {
      if (!value) {
        this.port = null;
      }
    }

    public java.lang.String getDatabase() {
      return this.database;
    }

    public excuteISQL_args setDatabase(java.lang.String database) {
      this.database = database;
      return this;
    }

    public void unsetDatabase() {
      this.database = null;
    }

    /** Returns true if field database is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabase() {
      return this.database != null;
    }

    public void setDatabaseIsSet(boolean value) {
      if (!value) {
        this.database = null;
      }
    }

    public java.lang.String getSql() {
      return this.sql;
    }

    public excuteISQL_args setSql(java.lang.String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public DKSQLConf getDkSqlConf() {
      return this.dkSqlConf;
    }

    public excuteISQL_args setDkSqlConf(DKSQLConf dkSqlConf) {
      this.dkSqlConf = dkSqlConf;
      return this;
    }

    public void unsetDkSqlConf() {
      this.dkSqlConf = null;
    }

    /** Returns true if field dkSqlConf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkSqlConf() {
      return this.dkSqlConf != null;
    }

    public void setDkSqlConfIsSet(boolean value) {
      if (!value) {
        this.dkSqlConf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.String)value);
        }
        break;

      case DATABASE:
        if (value == null) {
          unsetDatabase();
        } else {
          setDatabase((java.lang.String)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((java.lang.String)value);
        }
        break;

      case DK_SQL_CONF:
        if (value == null) {
          unsetDkSqlConf();
        } else {
          setDkSqlConf((DKSQLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_IP:
        return getHostIp();

      case PORT:
        return getPort();

      case DATABASE:
        return getDatabase();

      case SQL:
        return getSql();

      case DK_SQL_CONF:
        return getDkSqlConf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST_IP:
        return isSetHostIp();
      case PORT:
        return isSetPort();
      case DATABASE:
        return isSetDatabase();
      case SQL:
        return isSetSql();
      case DK_SQL_CONF:
        return isSetDkSqlConf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof excuteISQL_args)
        return this.equals((excuteISQL_args)that);
      return false;
    }

    public boolean equals(excuteISQL_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_port = true && this.isSetPort();
      boolean that_present_port = true && that.isSetPort();
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (!this.port.equals(that.port))
          return false;
      }

      boolean this_present_database = true && this.isSetDatabase();
      boolean that_present_database = true && that.isSetDatabase();
      if (this_present_database || that_present_database) {
        if (!(this_present_database && that_present_database))
          return false;
        if (!this.database.equals(that.database))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_dkSqlConf = true && this.isSetDkSqlConf();
      boolean that_present_dkSqlConf = true && that.isSetDkSqlConf();
      if (this_present_dkSqlConf || that_present_dkSqlConf) {
        if (!(this_present_dkSqlConf && that_present_dkSqlConf))
          return false;
        if (!this.dkSqlConf.equals(that.dkSqlConf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetPort()) ? 131071 : 524287);
      if (isSetPort())
        hashCode = hashCode * 8191 + port.hashCode();

      hashCode = hashCode * 8191 + ((isSetDatabase()) ? 131071 : 524287);
      if (isSetDatabase())
        hashCode = hashCode * 8191 + database.hashCode();

      hashCode = hashCode * 8191 + ((isSetSql()) ? 131071 : 524287);
      if (isSetSql())
        hashCode = hashCode * 8191 + sql.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkSqlConf()) ? 131071 : 524287);
      if (isSetDkSqlConf())
        hashCode = hashCode * 8191 + dkSqlConf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(excuteISQL_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDatabase()).compareTo(other.isSetDatabase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabase()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, other.database);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkSqlConf()).compareTo(other.isSetDkSqlConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkSqlConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkSqlConf, other.dkSqlConf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("excuteISQL_args(");
      boolean first = true;

      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      if (this.port == null) {
        sb.append("null");
      } else {
        sb.append(this.port);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("database:");
      if (this.database == null) {
        sb.append("null");
      } else {
        sb.append(this.database);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkSqlConf:");
      if (this.dkSqlConf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkSqlConf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkSqlConf != null) {
        dkSqlConf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class excuteISQL_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public excuteISQL_argsStandardScheme getScheme() {
        return new excuteISQL_argsStandardScheme();
      }
    }

    private static class excuteISQL_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<excuteISQL_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, excuteISQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.port = iprot.readString();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATABASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.database = iprot.readString();
                struct.setDatabaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DK_SQL_CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkSqlConf = new DKSQLConf();
                struct.dkSqlConf.read(iprot);
                struct.setDkSqlConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, excuteISQL_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.port != null) {
          oprot.writeFieldBegin(PORT_FIELD_DESC);
          oprot.writeString(struct.port);
          oprot.writeFieldEnd();
        }
        if (struct.database != null) {
          oprot.writeFieldBegin(DATABASE_FIELD_DESC);
          oprot.writeString(struct.database);
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        if (struct.dkSqlConf != null) {
          oprot.writeFieldBegin(DK_SQL_CONF_FIELD_DESC);
          struct.dkSqlConf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class excuteISQL_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public excuteISQL_argsTupleScheme getScheme() {
        return new excuteISQL_argsTupleScheme();
      }
    }

    private static class excuteISQL_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<excuteISQL_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, excuteISQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHostIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        if (struct.isSetDatabase()) {
          optionals.set(2);
        }
        if (struct.isSetSql()) {
          optionals.set(3);
        }
        if (struct.isSetDkSqlConf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetPort()) {
          oprot.writeString(struct.port);
        }
        if (struct.isSetDatabase()) {
          oprot.writeString(struct.database);
        }
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
        if (struct.isSetDkSqlConf()) {
          struct.dkSqlConf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, excuteISQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readString();
          struct.setPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.database = iprot.readString();
          struct.setDatabaseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkSqlConf = new DKSQLConf();
          struct.dkSqlConf.read(iprot);
          struct.setDkSqlConfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class excuteISQL_result implements org.apache.thrift.TBase<excuteISQL_result, excuteISQL_result._Fields>, java.io.Serializable, Cloneable, Comparable<excuteISQL_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("excuteISQL_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new excuteISQL_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new excuteISQL_resultTupleSchemeFactory();

    public ResultEntity success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(excuteISQL_result.class, metaDataMap);
    }

    public excuteISQL_result() {
    }

    public excuteISQL_result(
      ResultEntity success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public excuteISQL_result(excuteISQL_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultEntity(other.success);
      }
    }

    public excuteISQL_result deepCopy() {
      return new excuteISQL_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultEntity getSuccess() {
      return this.success;
    }

    public excuteISQL_result setSuccess(ResultEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultEntity)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof excuteISQL_result)
        return this.equals((excuteISQL_result)that);
      return false;
    }

    public boolean equals(excuteISQL_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(excuteISQL_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("excuteISQL_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class excuteISQL_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public excuteISQL_resultStandardScheme getScheme() {
        return new excuteISQL_resultStandardScheme();
      }
    }

    private static class excuteISQL_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<excuteISQL_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, excuteISQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, excuteISQL_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class excuteISQL_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public excuteISQL_resultTupleScheme getScheme() {
        return new excuteISQL_resultTupleScheme();
      }
    }

    private static class excuteISQL_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<excuteISQL_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, excuteISQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, excuteISQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class excuteQueryHQL_args implements org.apache.thrift.TBase<excuteQueryHQL_args, excuteQueryHQL_args._Fields>, java.io.Serializable, Cloneable, Comparable<excuteQueryHQL_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("excuteQueryHQL_args");

    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField ORDER_BY_FIELD_DESC = new org.apache.thrift.protocol.TField("orderBy", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField START_ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("startRow", org.apache.thrift.protocol.TType.I32, (short)8);
    private static final org.apache.thrift.protocol.TField END_ROW_FIELD_DESC = new org.apache.thrift.protocol.TField("endRow", org.apache.thrift.protocol.TType.I32, (short)9);
    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)10);
    private static final org.apache.thrift.protocol.TField DK_SQL_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkSqlConf", org.apache.thrift.protocol.TType.STRUCT, (short)11);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new excuteQueryHQL_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new excuteQueryHQL_argsTupleSchemeFactory();

    public java.lang.String hostIp; // required
    public java.lang.String port; // required
    public java.lang.String username; // required
    public java.lang.String password; // required
    public java.lang.String database; // required
    public java.lang.String sql; // required
    public java.lang.String orderBy; // required
    public int startRow; // required
    public int endRow; // required
    public java.lang.String queueName; // required
    public DKSQLConf dkSqlConf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_IP((short)1, "hostIp"),
      PORT((short)2, "port"),
      USERNAME((short)3, "username"),
      PASSWORD((short)4, "password"),
      DATABASE((short)5, "database"),
      SQL((short)6, "sql"),
      ORDER_BY((short)7, "orderBy"),
      START_ROW((short)8, "startRow"),
      END_ROW((short)9, "endRow"),
      QUEUE_NAME((short)10, "queueName"),
      DK_SQL_CONF((short)11, "dkSqlConf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_IP
            return HOST_IP;
          case 2: // PORT
            return PORT;
          case 3: // USERNAME
            return USERNAME;
          case 4: // PASSWORD
            return PASSWORD;
          case 5: // DATABASE
            return DATABASE;
          case 6: // SQL
            return SQL;
          case 7: // ORDER_BY
            return ORDER_BY;
          case 8: // START_ROW
            return START_ROW;
          case 9: // END_ROW
            return END_ROW;
          case 10: // QUEUE_NAME
            return QUEUE_NAME;
          case 11: // DK_SQL_CONF
            return DK_SQL_CONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STARTROW_ISSET_ID = 0;
    private static final int __ENDROW_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ORDER_BY, new org.apache.thrift.meta_data.FieldMetaData("orderBy", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START_ROW, new org.apache.thrift.meta_data.FieldMetaData("startRow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.END_ROW, new org.apache.thrift.meta_data.FieldMetaData("endRow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DK_SQL_CONF, new org.apache.thrift.meta_data.FieldMetaData("dkSqlConf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKSQLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(excuteQueryHQL_args.class, metaDataMap);
    }

    public excuteQueryHQL_args() {
    }

    public excuteQueryHQL_args(
      java.lang.String hostIp,
      java.lang.String port,
      java.lang.String username,
      java.lang.String password,
      java.lang.String database,
      java.lang.String sql,
      java.lang.String orderBy,
      int startRow,
      int endRow,
      java.lang.String queueName,
      DKSQLConf dkSqlConf)
    {
      this();
      this.hostIp = hostIp;
      this.port = port;
      this.username = username;
      this.password = password;
      this.database = database;
      this.sql = sql;
      this.orderBy = orderBy;
      this.startRow = startRow;
      setStartRowIsSet(true);
      this.endRow = endRow;
      setEndRowIsSet(true);
      this.queueName = queueName;
      this.dkSqlConf = dkSqlConf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public excuteQueryHQL_args(excuteQueryHQL_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetPort()) {
        this.port = other.port;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetDatabase()) {
        this.database = other.database;
      }
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      if (other.isSetOrderBy()) {
        this.orderBy = other.orderBy;
      }
      this.startRow = other.startRow;
      this.endRow = other.endRow;
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
      if (other.isSetDkSqlConf()) {
        this.dkSqlConf = new DKSQLConf(other.dkSqlConf);
      }
    }

    public excuteQueryHQL_args deepCopy() {
      return new excuteQueryHQL_args(this);
    }

    @Override
    public void clear() {
      this.hostIp = null;
      this.port = null;
      this.username = null;
      this.password = null;
      this.database = null;
      this.sql = null;
      this.orderBy = null;
      setStartRowIsSet(false);
      this.startRow = 0;
      setEndRowIsSet(false);
      this.endRow = 0;
      this.queueName = null;
      this.dkSqlConf = null;
    }

    public java.lang.String getHostIp() {
      return this.hostIp;
    }

    public excuteQueryHQL_args setHostIp(java.lang.String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public java.lang.String getPort() {
      return this.port;
    }

    public excuteQueryHQL_args setPort(java.lang.String port) {
      this.port = port;
      return this;
    }

    public void unsetPort() {
      this.port = null;
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return this.port != null;
    }

    public void setPortIsSet(boolean value) {
      if (!value) {
        this.port = null;
      }
    }

    public java.lang.String getUsername() {
      return this.username;
    }

    public excuteQueryHQL_args setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public excuteQueryHQL_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public java.lang.String getDatabase() {
      return this.database;
    }

    public excuteQueryHQL_args setDatabase(java.lang.String database) {
      this.database = database;
      return this;
    }

    public void unsetDatabase() {
      this.database = null;
    }

    /** Returns true if field database is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabase() {
      return this.database != null;
    }

    public void setDatabaseIsSet(boolean value) {
      if (!value) {
        this.database = null;
      }
    }

    public java.lang.String getSql() {
      return this.sql;
    }

    public excuteQueryHQL_args setSql(java.lang.String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public java.lang.String getOrderBy() {
      return this.orderBy;
    }

    public excuteQueryHQL_args setOrderBy(java.lang.String orderBy) {
      this.orderBy = orderBy;
      return this;
    }

    public void unsetOrderBy() {
      this.orderBy = null;
    }

    /** Returns true if field orderBy is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderBy() {
      return this.orderBy != null;
    }

    public void setOrderByIsSet(boolean value) {
      if (!value) {
        this.orderBy = null;
      }
    }

    public int getStartRow() {
      return this.startRow;
    }

    public excuteQueryHQL_args setStartRow(int startRow) {
      this.startRow = startRow;
      setStartRowIsSet(true);
      return this;
    }

    public void unsetStartRow() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTROW_ISSET_ID);
    }

    /** Returns true if field startRow is set (has been assigned a value) and false otherwise */
    public boolean isSetStartRow() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTROW_ISSET_ID);
    }

    public void setStartRowIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTROW_ISSET_ID, value);
    }

    public int getEndRow() {
      return this.endRow;
    }

    public excuteQueryHQL_args setEndRow(int endRow) {
      this.endRow = endRow;
      setEndRowIsSet(true);
      return this;
    }

    public void unsetEndRow() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDROW_ISSET_ID);
    }

    /** Returns true if field endRow is set (has been assigned a value) and false otherwise */
    public boolean isSetEndRow() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDROW_ISSET_ID);
    }

    public void setEndRowIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDROW_ISSET_ID, value);
    }

    public java.lang.String getQueueName() {
      return this.queueName;
    }

    public excuteQueryHQL_args setQueueName(java.lang.String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public DKSQLConf getDkSqlConf() {
      return this.dkSqlConf;
    }

    public excuteQueryHQL_args setDkSqlConf(DKSQLConf dkSqlConf) {
      this.dkSqlConf = dkSqlConf;
      return this;
    }

    public void unsetDkSqlConf() {
      this.dkSqlConf = null;
    }

    /** Returns true if field dkSqlConf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkSqlConf() {
      return this.dkSqlConf != null;
    }

    public void setDkSqlConfIsSet(boolean value) {
      if (!value) {
        this.dkSqlConf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case DATABASE:
        if (value == null) {
          unsetDatabase();
        } else {
          setDatabase((java.lang.String)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((java.lang.String)value);
        }
        break;

      case ORDER_BY:
        if (value == null) {
          unsetOrderBy();
        } else {
          setOrderBy((java.lang.String)value);
        }
        break;

      case START_ROW:
        if (value == null) {
          unsetStartRow();
        } else {
          setStartRow((java.lang.Integer)value);
        }
        break;

      case END_ROW:
        if (value == null) {
          unsetEndRow();
        } else {
          setEndRow((java.lang.Integer)value);
        }
        break;

      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((java.lang.String)value);
        }
        break;

      case DK_SQL_CONF:
        if (value == null) {
          unsetDkSqlConf();
        } else {
          setDkSqlConf((DKSQLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_IP:
        return getHostIp();

      case PORT:
        return getPort();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case DATABASE:
        return getDatabase();

      case SQL:
        return getSql();

      case ORDER_BY:
        return getOrderBy();

      case START_ROW:
        return getStartRow();

      case END_ROW:
        return getEndRow();

      case QUEUE_NAME:
        return getQueueName();

      case DK_SQL_CONF:
        return getDkSqlConf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST_IP:
        return isSetHostIp();
      case PORT:
        return isSetPort();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case DATABASE:
        return isSetDatabase();
      case SQL:
        return isSetSql();
      case ORDER_BY:
        return isSetOrderBy();
      case START_ROW:
        return isSetStartRow();
      case END_ROW:
        return isSetEndRow();
      case QUEUE_NAME:
        return isSetQueueName();
      case DK_SQL_CONF:
        return isSetDkSqlConf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof excuteQueryHQL_args)
        return this.equals((excuteQueryHQL_args)that);
      return false;
    }

    public boolean equals(excuteQueryHQL_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_port = true && this.isSetPort();
      boolean that_present_port = true && that.isSetPort();
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (!this.port.equals(that.port))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_database = true && this.isSetDatabase();
      boolean that_present_database = true && that.isSetDatabase();
      if (this_present_database || that_present_database) {
        if (!(this_present_database && that_present_database))
          return false;
        if (!this.database.equals(that.database))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_orderBy = true && this.isSetOrderBy();
      boolean that_present_orderBy = true && that.isSetOrderBy();
      if (this_present_orderBy || that_present_orderBy) {
        if (!(this_present_orderBy && that_present_orderBy))
          return false;
        if (!this.orderBy.equals(that.orderBy))
          return false;
      }

      boolean this_present_startRow = true;
      boolean that_present_startRow = true;
      if (this_present_startRow || that_present_startRow) {
        if (!(this_present_startRow && that_present_startRow))
          return false;
        if (this.startRow != that.startRow)
          return false;
      }

      boolean this_present_endRow = true;
      boolean that_present_endRow = true;
      if (this_present_endRow || that_present_endRow) {
        if (!(this_present_endRow && that_present_endRow))
          return false;
        if (this.endRow != that.endRow)
          return false;
      }

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      boolean this_present_dkSqlConf = true && this.isSetDkSqlConf();
      boolean that_present_dkSqlConf = true && that.isSetDkSqlConf();
      if (this_present_dkSqlConf || that_present_dkSqlConf) {
        if (!(this_present_dkSqlConf && that_present_dkSqlConf))
          return false;
        if (!this.dkSqlConf.equals(that.dkSqlConf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetPort()) ? 131071 : 524287);
      if (isSetPort())
        hashCode = hashCode * 8191 + port.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + ((isSetDatabase()) ? 131071 : 524287);
      if (isSetDatabase())
        hashCode = hashCode * 8191 + database.hashCode();

      hashCode = hashCode * 8191 + ((isSetSql()) ? 131071 : 524287);
      if (isSetSql())
        hashCode = hashCode * 8191 + sql.hashCode();

      hashCode = hashCode * 8191 + ((isSetOrderBy()) ? 131071 : 524287);
      if (isSetOrderBy())
        hashCode = hashCode * 8191 + orderBy.hashCode();

      hashCode = hashCode * 8191 + startRow;

      hashCode = hashCode * 8191 + endRow;

      hashCode = hashCode * 8191 + ((isSetQueueName()) ? 131071 : 524287);
      if (isSetQueueName())
        hashCode = hashCode * 8191 + queueName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkSqlConf()) ? 131071 : 524287);
      if (isSetDkSqlConf())
        hashCode = hashCode * 8191 + dkSqlConf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(excuteQueryHQL_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDatabase()).compareTo(other.isSetDatabase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabase()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, other.database);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOrderBy()).compareTo(other.isSetOrderBy());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderBy()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderBy, other.orderBy);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStartRow()).compareTo(other.isSetStartRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStartRow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startRow, other.startRow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEndRow()).compareTo(other.isSetEndRow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndRow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endRow, other.endRow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQueueName()).compareTo(other.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, other.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkSqlConf()).compareTo(other.isSetDkSqlConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkSqlConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkSqlConf, other.dkSqlConf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("excuteQueryHQL_args(");
      boolean first = true;

      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      if (this.port == null) {
        sb.append("null");
      } else {
        sb.append(this.port);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("database:");
      if (this.database == null) {
        sb.append("null");
      } else {
        sb.append(this.database);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orderBy:");
      if (this.orderBy == null) {
        sb.append("null");
      } else {
        sb.append(this.orderBy);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("startRow:");
      sb.append(this.startRow);
      first = false;
      if (!first) sb.append(", ");
      sb.append("endRow:");
      sb.append(this.endRow);
      first = false;
      if (!first) sb.append(", ");
      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkSqlConf:");
      if (this.dkSqlConf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkSqlConf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkSqlConf != null) {
        dkSqlConf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class excuteQueryHQL_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public excuteQueryHQL_argsStandardScheme getScheme() {
        return new excuteQueryHQL_argsStandardScheme();
      }
    }

    private static class excuteQueryHQL_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<excuteQueryHQL_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, excuteQueryHQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.port = iprot.readString();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DATABASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.database = iprot.readString();
                struct.setDatabaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ORDER_BY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orderBy = iprot.readString();
                struct.setOrderByIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // START_ROW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.startRow = iprot.readI32();
                struct.setStartRowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 9: // END_ROW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.endRow = iprot.readI32();
                struct.setEndRowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 10: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 11: // DK_SQL_CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkSqlConf = new DKSQLConf();
                struct.dkSqlConf.read(iprot);
                struct.setDkSqlConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, excuteQueryHQL_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.port != null) {
          oprot.writeFieldBegin(PORT_FIELD_DESC);
          oprot.writeString(struct.port);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.database != null) {
          oprot.writeFieldBegin(DATABASE_FIELD_DESC);
          oprot.writeString(struct.database);
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        if (struct.orderBy != null) {
          oprot.writeFieldBegin(ORDER_BY_FIELD_DESC);
          oprot.writeString(struct.orderBy);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(START_ROW_FIELD_DESC);
        oprot.writeI32(struct.startRow);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_ROW_FIELD_DESC);
        oprot.writeI32(struct.endRow);
        oprot.writeFieldEnd();
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        if (struct.dkSqlConf != null) {
          oprot.writeFieldBegin(DK_SQL_CONF_FIELD_DESC);
          struct.dkSqlConf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class excuteQueryHQL_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public excuteQueryHQL_argsTupleScheme getScheme() {
        return new excuteQueryHQL_argsTupleScheme();
      }
    }

    private static class excuteQueryHQL_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<excuteQueryHQL_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, excuteQueryHQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHostIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        if (struct.isSetUsername()) {
          optionals.set(2);
        }
        if (struct.isSetPassword()) {
          optionals.set(3);
        }
        if (struct.isSetDatabase()) {
          optionals.set(4);
        }
        if (struct.isSetSql()) {
          optionals.set(5);
        }
        if (struct.isSetOrderBy()) {
          optionals.set(6);
        }
        if (struct.isSetStartRow()) {
          optionals.set(7);
        }
        if (struct.isSetEndRow()) {
          optionals.set(8);
        }
        if (struct.isSetQueueName()) {
          optionals.set(9);
        }
        if (struct.isSetDkSqlConf()) {
          optionals.set(10);
        }
        oprot.writeBitSet(optionals, 11);
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetPort()) {
          oprot.writeString(struct.port);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetDatabase()) {
          oprot.writeString(struct.database);
        }
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
        if (struct.isSetOrderBy()) {
          oprot.writeString(struct.orderBy);
        }
        if (struct.isSetStartRow()) {
          oprot.writeI32(struct.startRow);
        }
        if (struct.isSetEndRow()) {
          oprot.writeI32(struct.endRow);
        }
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
        if (struct.isSetDkSqlConf()) {
          struct.dkSqlConf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, excuteQueryHQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(11);
        if (incoming.get(0)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readString();
          struct.setPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(4)) {
          struct.database = iprot.readString();
          struct.setDatabaseIsSet(true);
        }
        if (incoming.get(5)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
        if (incoming.get(6)) {
          struct.orderBy = iprot.readString();
          struct.setOrderByIsSet(true);
        }
        if (incoming.get(7)) {
          struct.startRow = iprot.readI32();
          struct.setStartRowIsSet(true);
        }
        if (incoming.get(8)) {
          struct.endRow = iprot.readI32();
          struct.setEndRowIsSet(true);
        }
        if (incoming.get(9)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
        if (incoming.get(10)) {
          struct.dkSqlConf = new DKSQLConf();
          struct.dkSqlConf.read(iprot);
          struct.setDkSqlConfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class excuteQueryHQL_result implements org.apache.thrift.TBase<excuteQueryHQL_result, excuteQueryHQL_result._Fields>, java.io.Serializable, Cloneable, Comparable<excuteQueryHQL_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("excuteQueryHQL_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new excuteQueryHQL_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new excuteQueryHQL_resultTupleSchemeFactory();

    public ResultEntity success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(excuteQueryHQL_result.class, metaDataMap);
    }

    public excuteQueryHQL_result() {
    }

    public excuteQueryHQL_result(
      ResultEntity success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public excuteQueryHQL_result(excuteQueryHQL_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultEntity(other.success);
      }
    }

    public excuteQueryHQL_result deepCopy() {
      return new excuteQueryHQL_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultEntity getSuccess() {
      return this.success;
    }

    public excuteQueryHQL_result setSuccess(ResultEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultEntity)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof excuteQueryHQL_result)
        return this.equals((excuteQueryHQL_result)that);
      return false;
    }

    public boolean equals(excuteQueryHQL_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(excuteQueryHQL_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("excuteQueryHQL_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class excuteQueryHQL_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public excuteQueryHQL_resultStandardScheme getScheme() {
        return new excuteQueryHQL_resultStandardScheme();
      }
    }

    private static class excuteQueryHQL_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<excuteQueryHQL_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, excuteQueryHQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, excuteQueryHQL_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class excuteQueryHQL_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public excuteQueryHQL_resultTupleScheme getScheme() {
        return new excuteQueryHQL_resultTupleScheme();
      }
    }

    private static class excuteQueryHQL_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<excuteQueryHQL_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, excuteQueryHQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, excuteQueryHQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class excuteQueryISQL_args implements org.apache.thrift.TBase<excuteQueryISQL_args, excuteQueryISQL_args._Fields>, java.io.Serializable, Cloneable, Comparable<excuteQueryISQL_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("excuteQueryISQL_args");

    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DK_SQL_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkSqlConf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new excuteQueryISQL_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new excuteQueryISQL_argsTupleSchemeFactory();

    public java.lang.String hostIp; // required
    public java.lang.String port; // required
    public java.lang.String database; // required
    public java.lang.String sql; // required
    public DKSQLConf dkSqlConf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_IP((short)1, "hostIp"),
      PORT((short)2, "port"),
      DATABASE((short)3, "database"),
      SQL((short)4, "sql"),
      DK_SQL_CONF((short)5, "dkSqlConf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_IP
            return HOST_IP;
          case 2: // PORT
            return PORT;
          case 3: // DATABASE
            return DATABASE;
          case 4: // SQL
            return SQL;
          case 5: // DK_SQL_CONF
            return DK_SQL_CONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DK_SQL_CONF, new org.apache.thrift.meta_data.FieldMetaData("dkSqlConf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKSQLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(excuteQueryISQL_args.class, metaDataMap);
    }

    public excuteQueryISQL_args() {
    }

    public excuteQueryISQL_args(
      java.lang.String hostIp,
      java.lang.String port,
      java.lang.String database,
      java.lang.String sql,
      DKSQLConf dkSqlConf)
    {
      this();
      this.hostIp = hostIp;
      this.port = port;
      this.database = database;
      this.sql = sql;
      this.dkSqlConf = dkSqlConf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public excuteQueryISQL_args(excuteQueryISQL_args other) {
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetPort()) {
        this.port = other.port;
      }
      if (other.isSetDatabase()) {
        this.database = other.database;
      }
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      if (other.isSetDkSqlConf()) {
        this.dkSqlConf = new DKSQLConf(other.dkSqlConf);
      }
    }

    public excuteQueryISQL_args deepCopy() {
      return new excuteQueryISQL_args(this);
    }

    @Override
    public void clear() {
      this.hostIp = null;
      this.port = null;
      this.database = null;
      this.sql = null;
      this.dkSqlConf = null;
    }

    public java.lang.String getHostIp() {
      return this.hostIp;
    }

    public excuteQueryISQL_args setHostIp(java.lang.String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public java.lang.String getPort() {
      return this.port;
    }

    public excuteQueryISQL_args setPort(java.lang.String port) {
      this.port = port;
      return this;
    }

    public void unsetPort() {
      this.port = null;
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return this.port != null;
    }

    public void setPortIsSet(boolean value) {
      if (!value) {
        this.port = null;
      }
    }

    public java.lang.String getDatabase() {
      return this.database;
    }

    public excuteQueryISQL_args setDatabase(java.lang.String database) {
      this.database = database;
      return this;
    }

    public void unsetDatabase() {
      this.database = null;
    }

    /** Returns true if field database is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabase() {
      return this.database != null;
    }

    public void setDatabaseIsSet(boolean value) {
      if (!value) {
        this.database = null;
      }
    }

    public java.lang.String getSql() {
      return this.sql;
    }

    public excuteQueryISQL_args setSql(java.lang.String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public DKSQLConf getDkSqlConf() {
      return this.dkSqlConf;
    }

    public excuteQueryISQL_args setDkSqlConf(DKSQLConf dkSqlConf) {
      this.dkSqlConf = dkSqlConf;
      return this;
    }

    public void unsetDkSqlConf() {
      this.dkSqlConf = null;
    }

    /** Returns true if field dkSqlConf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkSqlConf() {
      return this.dkSqlConf != null;
    }

    public void setDkSqlConfIsSet(boolean value) {
      if (!value) {
        this.dkSqlConf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.String)value);
        }
        break;

      case DATABASE:
        if (value == null) {
          unsetDatabase();
        } else {
          setDatabase((java.lang.String)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((java.lang.String)value);
        }
        break;

      case DK_SQL_CONF:
        if (value == null) {
          unsetDkSqlConf();
        } else {
          setDkSqlConf((DKSQLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_IP:
        return getHostIp();

      case PORT:
        return getPort();

      case DATABASE:
        return getDatabase();

      case SQL:
        return getSql();

      case DK_SQL_CONF:
        return getDkSqlConf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST_IP:
        return isSetHostIp();
      case PORT:
        return isSetPort();
      case DATABASE:
        return isSetDatabase();
      case SQL:
        return isSetSql();
      case DK_SQL_CONF:
        return isSetDkSqlConf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof excuteQueryISQL_args)
        return this.equals((excuteQueryISQL_args)that);
      return false;
    }

    public boolean equals(excuteQueryISQL_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_port = true && this.isSetPort();
      boolean that_present_port = true && that.isSetPort();
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (!this.port.equals(that.port))
          return false;
      }

      boolean this_present_database = true && this.isSetDatabase();
      boolean that_present_database = true && that.isSetDatabase();
      if (this_present_database || that_present_database) {
        if (!(this_present_database && that_present_database))
          return false;
        if (!this.database.equals(that.database))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_dkSqlConf = true && this.isSetDkSqlConf();
      boolean that_present_dkSqlConf = true && that.isSetDkSqlConf();
      if (this_present_dkSqlConf || that_present_dkSqlConf) {
        if (!(this_present_dkSqlConf && that_present_dkSqlConf))
          return false;
        if (!this.dkSqlConf.equals(that.dkSqlConf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetPort()) ? 131071 : 524287);
      if (isSetPort())
        hashCode = hashCode * 8191 + port.hashCode();

      hashCode = hashCode * 8191 + ((isSetDatabase()) ? 131071 : 524287);
      if (isSetDatabase())
        hashCode = hashCode * 8191 + database.hashCode();

      hashCode = hashCode * 8191 + ((isSetSql()) ? 131071 : 524287);
      if (isSetSql())
        hashCode = hashCode * 8191 + sql.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkSqlConf()) ? 131071 : 524287);
      if (isSetDkSqlConf())
        hashCode = hashCode * 8191 + dkSqlConf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(excuteQueryISQL_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDatabase()).compareTo(other.isSetDatabase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabase()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, other.database);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkSqlConf()).compareTo(other.isSetDkSqlConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkSqlConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkSqlConf, other.dkSqlConf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("excuteQueryISQL_args(");
      boolean first = true;

      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      if (this.port == null) {
        sb.append("null");
      } else {
        sb.append(this.port);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("database:");
      if (this.database == null) {
        sb.append("null");
      } else {
        sb.append(this.database);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkSqlConf:");
      if (this.dkSqlConf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkSqlConf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkSqlConf != null) {
        dkSqlConf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class excuteQueryISQL_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public excuteQueryISQL_argsStandardScheme getScheme() {
        return new excuteQueryISQL_argsStandardScheme();
      }
    }

    private static class excuteQueryISQL_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<excuteQueryISQL_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, excuteQueryISQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.port = iprot.readString();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATABASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.database = iprot.readString();
                struct.setDatabaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DK_SQL_CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkSqlConf = new DKSQLConf();
                struct.dkSqlConf.read(iprot);
                struct.setDkSqlConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, excuteQueryISQL_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.port != null) {
          oprot.writeFieldBegin(PORT_FIELD_DESC);
          oprot.writeString(struct.port);
          oprot.writeFieldEnd();
        }
        if (struct.database != null) {
          oprot.writeFieldBegin(DATABASE_FIELD_DESC);
          oprot.writeString(struct.database);
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        if (struct.dkSqlConf != null) {
          oprot.writeFieldBegin(DK_SQL_CONF_FIELD_DESC);
          struct.dkSqlConf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class excuteQueryISQL_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public excuteQueryISQL_argsTupleScheme getScheme() {
        return new excuteQueryISQL_argsTupleScheme();
      }
    }

    private static class excuteQueryISQL_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<excuteQueryISQL_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, excuteQueryISQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHostIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        if (struct.isSetDatabase()) {
          optionals.set(2);
        }
        if (struct.isSetSql()) {
          optionals.set(3);
        }
        if (struct.isSetDkSqlConf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetPort()) {
          oprot.writeString(struct.port);
        }
        if (struct.isSetDatabase()) {
          oprot.writeString(struct.database);
        }
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
        if (struct.isSetDkSqlConf()) {
          struct.dkSqlConf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, excuteQueryISQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readString();
          struct.setPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.database = iprot.readString();
          struct.setDatabaseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkSqlConf = new DKSQLConf();
          struct.dkSqlConf.read(iprot);
          struct.setDkSqlConfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class excuteQueryISQL_result implements org.apache.thrift.TBase<excuteQueryISQL_result, excuteQueryISQL_result._Fields>, java.io.Serializable, Cloneable, Comparable<excuteQueryISQL_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("excuteQueryISQL_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new excuteQueryISQL_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new excuteQueryISQL_resultTupleSchemeFactory();

    public ResultEntity success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(excuteQueryISQL_result.class, metaDataMap);
    }

    public excuteQueryISQL_result() {
    }

    public excuteQueryISQL_result(
      ResultEntity success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public excuteQueryISQL_result(excuteQueryISQL_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultEntity(other.success);
      }
    }

    public excuteQueryISQL_result deepCopy() {
      return new excuteQueryISQL_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultEntity getSuccess() {
      return this.success;
    }

    public excuteQueryISQL_result setSuccess(ResultEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultEntity)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof excuteQueryISQL_result)
        return this.equals((excuteQueryISQL_result)that);
      return false;
    }

    public boolean equals(excuteQueryISQL_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(excuteQueryISQL_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("excuteQueryISQL_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class excuteQueryISQL_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public excuteQueryISQL_resultStandardScheme getScheme() {
        return new excuteQueryISQL_resultStandardScheme();
      }
    }

    private static class excuteQueryISQL_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<excuteQueryISQL_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, excuteQueryISQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, excuteQueryISQL_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class excuteQueryISQL_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public excuteQueryISQL_resultTupleScheme getScheme() {
        return new excuteQueryISQL_resultTupleScheme();
      }
    }

    private static class excuteQueryISQL_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<excuteQueryISQL_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, excuteQueryISQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, excuteQueryISQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countHQL_args implements org.apache.thrift.TBase<countHQL_args, countHQL_args._Fields>, java.io.Serializable, Cloneable, Comparable<countHQL_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countHQL_args");

    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField QUEUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("queueName", org.apache.thrift.protocol.TType.STRING, (short)7);
    private static final org.apache.thrift.protocol.TField DK_SQL_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkSqlConf", org.apache.thrift.protocol.TType.STRUCT, (short)8);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countHQL_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countHQL_argsTupleSchemeFactory();

    public java.lang.String hostIp; // required
    public java.lang.String port; // required
    public java.lang.String username; // required
    public java.lang.String password; // required
    public java.lang.String database; // required
    public java.lang.String sql; // required
    public java.lang.String queueName; // required
    public DKSQLConf dkSqlConf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_IP((short)1, "hostIp"),
      PORT((short)2, "port"),
      USERNAME((short)3, "username"),
      PASSWORD((short)4, "password"),
      DATABASE((short)5, "database"),
      SQL((short)6, "sql"),
      QUEUE_NAME((short)7, "queueName"),
      DK_SQL_CONF((short)8, "dkSqlConf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_IP
            return HOST_IP;
          case 2: // PORT
            return PORT;
          case 3: // USERNAME
            return USERNAME;
          case 4: // PASSWORD
            return PASSWORD;
          case 5: // DATABASE
            return DATABASE;
          case 6: // SQL
            return SQL;
          case 7: // QUEUE_NAME
            return QUEUE_NAME;
          case 8: // DK_SQL_CONF
            return DK_SQL_CONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUEUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("queueName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DK_SQL_CONF, new org.apache.thrift.meta_data.FieldMetaData("dkSqlConf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKSQLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countHQL_args.class, metaDataMap);
    }

    public countHQL_args() {
    }

    public countHQL_args(
      java.lang.String hostIp,
      java.lang.String port,
      java.lang.String username,
      java.lang.String password,
      java.lang.String database,
      java.lang.String sql,
      java.lang.String queueName,
      DKSQLConf dkSqlConf)
    {
      this();
      this.hostIp = hostIp;
      this.port = port;
      this.username = username;
      this.password = password;
      this.database = database;
      this.sql = sql;
      this.queueName = queueName;
      this.dkSqlConf = dkSqlConf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countHQL_args(countHQL_args other) {
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetPort()) {
        this.port = other.port;
      }
      if (other.isSetUsername()) {
        this.username = other.username;
      }
      if (other.isSetPassword()) {
        this.password = other.password;
      }
      if (other.isSetDatabase()) {
        this.database = other.database;
      }
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      if (other.isSetQueueName()) {
        this.queueName = other.queueName;
      }
      if (other.isSetDkSqlConf()) {
        this.dkSqlConf = new DKSQLConf(other.dkSqlConf);
      }
    }

    public countHQL_args deepCopy() {
      return new countHQL_args(this);
    }

    @Override
    public void clear() {
      this.hostIp = null;
      this.port = null;
      this.username = null;
      this.password = null;
      this.database = null;
      this.sql = null;
      this.queueName = null;
      this.dkSqlConf = null;
    }

    public java.lang.String getHostIp() {
      return this.hostIp;
    }

    public countHQL_args setHostIp(java.lang.String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public java.lang.String getPort() {
      return this.port;
    }

    public countHQL_args setPort(java.lang.String port) {
      this.port = port;
      return this;
    }

    public void unsetPort() {
      this.port = null;
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return this.port != null;
    }

    public void setPortIsSet(boolean value) {
      if (!value) {
        this.port = null;
      }
    }

    public java.lang.String getUsername() {
      return this.username;
    }

    public countHQL_args setUsername(java.lang.String username) {
      this.username = username;
      return this;
    }

    public void unsetUsername() {
      this.username = null;
    }

    /** Returns true if field username is set (has been assigned a value) and false otherwise */
    public boolean isSetUsername() {
      return this.username != null;
    }

    public void setUsernameIsSet(boolean value) {
      if (!value) {
        this.username = null;
      }
    }

    public java.lang.String getPassword() {
      return this.password;
    }

    public countHQL_args setPassword(java.lang.String password) {
      this.password = password;
      return this;
    }

    public void unsetPassword() {
      this.password = null;
    }

    /** Returns true if field password is set (has been assigned a value) and false otherwise */
    public boolean isSetPassword() {
      return this.password != null;
    }

    public void setPasswordIsSet(boolean value) {
      if (!value) {
        this.password = null;
      }
    }

    public java.lang.String getDatabase() {
      return this.database;
    }

    public countHQL_args setDatabase(java.lang.String database) {
      this.database = database;
      return this;
    }

    public void unsetDatabase() {
      this.database = null;
    }

    /** Returns true if field database is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabase() {
      return this.database != null;
    }

    public void setDatabaseIsSet(boolean value) {
      if (!value) {
        this.database = null;
      }
    }

    public java.lang.String getSql() {
      return this.sql;
    }

    public countHQL_args setSql(java.lang.String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public java.lang.String getQueueName() {
      return this.queueName;
    }

    public countHQL_args setQueueName(java.lang.String queueName) {
      this.queueName = queueName;
      return this;
    }

    public void unsetQueueName() {
      this.queueName = null;
    }

    /** Returns true if field queueName is set (has been assigned a value) and false otherwise */
    public boolean isSetQueueName() {
      return this.queueName != null;
    }

    public void setQueueNameIsSet(boolean value) {
      if (!value) {
        this.queueName = null;
      }
    }

    public DKSQLConf getDkSqlConf() {
      return this.dkSqlConf;
    }

    public countHQL_args setDkSqlConf(DKSQLConf dkSqlConf) {
      this.dkSqlConf = dkSqlConf;
      return this;
    }

    public void unsetDkSqlConf() {
      this.dkSqlConf = null;
    }

    /** Returns true if field dkSqlConf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkSqlConf() {
      return this.dkSqlConf != null;
    }

    public void setDkSqlConfIsSet(boolean value) {
      if (!value) {
        this.dkSqlConf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.String)value);
        }
        break;

      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          setUsername((java.lang.String)value);
        }
        break;

      case PASSWORD:
        if (value == null) {
          unsetPassword();
        } else {
          setPassword((java.lang.String)value);
        }
        break;

      case DATABASE:
        if (value == null) {
          unsetDatabase();
        } else {
          setDatabase((java.lang.String)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((java.lang.String)value);
        }
        break;

      case QUEUE_NAME:
        if (value == null) {
          unsetQueueName();
        } else {
          setQueueName((java.lang.String)value);
        }
        break;

      case DK_SQL_CONF:
        if (value == null) {
          unsetDkSqlConf();
        } else {
          setDkSqlConf((DKSQLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_IP:
        return getHostIp();

      case PORT:
        return getPort();

      case USERNAME:
        return getUsername();

      case PASSWORD:
        return getPassword();

      case DATABASE:
        return getDatabase();

      case SQL:
        return getSql();

      case QUEUE_NAME:
        return getQueueName();

      case DK_SQL_CONF:
        return getDkSqlConf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST_IP:
        return isSetHostIp();
      case PORT:
        return isSetPort();
      case USERNAME:
        return isSetUsername();
      case PASSWORD:
        return isSetPassword();
      case DATABASE:
        return isSetDatabase();
      case SQL:
        return isSetSql();
      case QUEUE_NAME:
        return isSetQueueName();
      case DK_SQL_CONF:
        return isSetDkSqlConf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countHQL_args)
        return this.equals((countHQL_args)that);
      return false;
    }

    public boolean equals(countHQL_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_port = true && this.isSetPort();
      boolean that_present_port = true && that.isSetPort();
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (!this.port.equals(that.port))
          return false;
      }

      boolean this_present_username = true && this.isSetUsername();
      boolean that_present_username = true && that.isSetUsername();
      if (this_present_username || that_present_username) {
        if (!(this_present_username && that_present_username))
          return false;
        if (!this.username.equals(that.username))
          return false;
      }

      boolean this_present_password = true && this.isSetPassword();
      boolean that_present_password = true && that.isSetPassword();
      if (this_present_password || that_present_password) {
        if (!(this_present_password && that_present_password))
          return false;
        if (!this.password.equals(that.password))
          return false;
      }

      boolean this_present_database = true && this.isSetDatabase();
      boolean that_present_database = true && that.isSetDatabase();
      if (this_present_database || that_present_database) {
        if (!(this_present_database && that_present_database))
          return false;
        if (!this.database.equals(that.database))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_queueName = true && this.isSetQueueName();
      boolean that_present_queueName = true && that.isSetQueueName();
      if (this_present_queueName || that_present_queueName) {
        if (!(this_present_queueName && that_present_queueName))
          return false;
        if (!this.queueName.equals(that.queueName))
          return false;
      }

      boolean this_present_dkSqlConf = true && this.isSetDkSqlConf();
      boolean that_present_dkSqlConf = true && that.isSetDkSqlConf();
      if (this_present_dkSqlConf || that_present_dkSqlConf) {
        if (!(this_present_dkSqlConf && that_present_dkSqlConf))
          return false;
        if (!this.dkSqlConf.equals(that.dkSqlConf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetPort()) ? 131071 : 524287);
      if (isSetPort())
        hashCode = hashCode * 8191 + port.hashCode();

      hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
      if (isSetUsername())
        hashCode = hashCode * 8191 + username.hashCode();

      hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
      if (isSetPassword())
        hashCode = hashCode * 8191 + password.hashCode();

      hashCode = hashCode * 8191 + ((isSetDatabase()) ? 131071 : 524287);
      if (isSetDatabase())
        hashCode = hashCode * 8191 + database.hashCode();

      hashCode = hashCode * 8191 + ((isSetSql()) ? 131071 : 524287);
      if (isSetSql())
        hashCode = hashCode * 8191 + sql.hashCode();

      hashCode = hashCode * 8191 + ((isSetQueueName()) ? 131071 : 524287);
      if (isSetQueueName())
        hashCode = hashCode * 8191 + queueName.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkSqlConf()) ? 131071 : 524287);
      if (isSetDkSqlConf())
        hashCode = hashCode * 8191 + dkSqlConf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(countHQL_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUsername()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPassword()).compareTo(other.isSetPassword());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPassword()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDatabase()).compareTo(other.isSetDatabase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabase()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, other.database);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQueueName()).compareTo(other.isSetQueueName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQueueName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.queueName, other.queueName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkSqlConf()).compareTo(other.isSetDkSqlConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkSqlConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkSqlConf, other.dkSqlConf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countHQL_args(");
      boolean first = true;

      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      if (this.port == null) {
        sb.append("null");
      } else {
        sb.append(this.port);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("database:");
      if (this.database == null) {
        sb.append("null");
      } else {
        sb.append(this.database);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("queueName:");
      if (this.queueName == null) {
        sb.append("null");
      } else {
        sb.append(this.queueName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkSqlConf:");
      if (this.dkSqlConf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkSqlConf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkSqlConf != null) {
        dkSqlConf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countHQL_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countHQL_argsStandardScheme getScheme() {
        return new countHQL_argsStandardScheme();
      }
    }

    private static class countHQL_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<countHQL_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countHQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.port = iprot.readString();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USERNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.username = iprot.readString();
                struct.setUsernameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PASSWORD
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.password = iprot.readString();
                struct.setPasswordIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DATABASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.database = iprot.readString();
                struct.setDatabaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // QUEUE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.queueName = iprot.readString();
                struct.setQueueNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // DK_SQL_CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkSqlConf = new DKSQLConf();
                struct.dkSqlConf.read(iprot);
                struct.setDkSqlConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countHQL_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.port != null) {
          oprot.writeFieldBegin(PORT_FIELD_DESC);
          oprot.writeString(struct.port);
          oprot.writeFieldEnd();
        }
        if (struct.username != null) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
        if (struct.password != null) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
        if (struct.database != null) {
          oprot.writeFieldBegin(DATABASE_FIELD_DESC);
          oprot.writeString(struct.database);
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        if (struct.queueName != null) {
          oprot.writeFieldBegin(QUEUE_NAME_FIELD_DESC);
          oprot.writeString(struct.queueName);
          oprot.writeFieldEnd();
        }
        if (struct.dkSqlConf != null) {
          oprot.writeFieldBegin(DK_SQL_CONF_FIELD_DESC);
          struct.dkSqlConf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countHQL_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countHQL_argsTupleScheme getScheme() {
        return new countHQL_argsTupleScheme();
      }
    }

    private static class countHQL_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<countHQL_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countHQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHostIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        if (struct.isSetUsername()) {
          optionals.set(2);
        }
        if (struct.isSetPassword()) {
          optionals.set(3);
        }
        if (struct.isSetDatabase()) {
          optionals.set(4);
        }
        if (struct.isSetSql()) {
          optionals.set(5);
        }
        if (struct.isSetQueueName()) {
          optionals.set(6);
        }
        if (struct.isSetDkSqlConf()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetPort()) {
          oprot.writeString(struct.port);
        }
        if (struct.isSetUsername()) {
          oprot.writeString(struct.username);
        }
        if (struct.isSetPassword()) {
          oprot.writeString(struct.password);
        }
        if (struct.isSetDatabase()) {
          oprot.writeString(struct.database);
        }
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
        if (struct.isSetQueueName()) {
          oprot.writeString(struct.queueName);
        }
        if (struct.isSetDkSqlConf()) {
          struct.dkSqlConf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countHQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readString();
          struct.setPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.username = iprot.readString();
          struct.setUsernameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.password = iprot.readString();
          struct.setPasswordIsSet(true);
        }
        if (incoming.get(4)) {
          struct.database = iprot.readString();
          struct.setDatabaseIsSet(true);
        }
        if (incoming.get(5)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
        if (incoming.get(6)) {
          struct.queueName = iprot.readString();
          struct.setQueueNameIsSet(true);
        }
        if (incoming.get(7)) {
          struct.dkSqlConf = new DKSQLConf();
          struct.dkSqlConf.read(iprot);
          struct.setDkSqlConfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countHQL_result implements org.apache.thrift.TBase<countHQL_result, countHQL_result._Fields>, java.io.Serializable, Cloneable, Comparable<countHQL_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countHQL_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countHQL_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countHQL_resultTupleSchemeFactory();

    public ResultEntity success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countHQL_result.class, metaDataMap);
    }

    public countHQL_result() {
    }

    public countHQL_result(
      ResultEntity success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countHQL_result(countHQL_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultEntity(other.success);
      }
    }

    public countHQL_result deepCopy() {
      return new countHQL_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultEntity getSuccess() {
      return this.success;
    }

    public countHQL_result setSuccess(ResultEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultEntity)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countHQL_result)
        return this.equals((countHQL_result)that);
      return false;
    }

    public boolean equals(countHQL_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(countHQL_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countHQL_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countHQL_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countHQL_resultStandardScheme getScheme() {
        return new countHQL_resultStandardScheme();
      }
    }

    private static class countHQL_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<countHQL_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countHQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countHQL_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countHQL_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countHQL_resultTupleScheme getScheme() {
        return new countHQL_resultTupleScheme();
      }
    }

    private static class countHQL_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<countHQL_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countHQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countHQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countIQL_args implements org.apache.thrift.TBase<countIQL_args, countIQL_args._Fields>, java.io.Serializable, Cloneable, Comparable<countIQL_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countIQL_args");

    private static final org.apache.thrift.protocol.TField HOST_IP_FIELD_DESC = new org.apache.thrift.protocol.TField("hostIp", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATABASE_FIELD_DESC = new org.apache.thrift.protocol.TField("database", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("sql", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DK_SQL_CONF_FIELD_DESC = new org.apache.thrift.protocol.TField("dkSqlConf", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countIQL_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countIQL_argsTupleSchemeFactory();

    public java.lang.String hostIp; // required
    public java.lang.String port; // required
    public java.lang.String database; // required
    public java.lang.String sql; // required
    public DKSQLConf dkSqlConf; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HOST_IP((short)1, "hostIp"),
      PORT((short)2, "port"),
      DATABASE((short)3, "database"),
      SQL((short)4, "sql"),
      DK_SQL_CONF((short)5, "dkSqlConf");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOST_IP
            return HOST_IP;
          case 2: // PORT
            return PORT;
          case 3: // DATABASE
            return DATABASE;
          case 4: // SQL
            return SQL;
          case 5: // DK_SQL_CONF
            return DK_SQL_CONF;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOST_IP, new org.apache.thrift.meta_data.FieldMetaData("hostIp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATABASE, new org.apache.thrift.meta_data.FieldMetaData("database", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SQL, new org.apache.thrift.meta_data.FieldMetaData("sql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DK_SQL_CONF, new org.apache.thrift.meta_data.FieldMetaData("dkSqlConf", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DKSQLConf.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countIQL_args.class, metaDataMap);
    }

    public countIQL_args() {
    }

    public countIQL_args(
      java.lang.String hostIp,
      java.lang.String port,
      java.lang.String database,
      java.lang.String sql,
      DKSQLConf dkSqlConf)
    {
      this();
      this.hostIp = hostIp;
      this.port = port;
      this.database = database;
      this.sql = sql;
      this.dkSqlConf = dkSqlConf;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countIQL_args(countIQL_args other) {
      if (other.isSetHostIp()) {
        this.hostIp = other.hostIp;
      }
      if (other.isSetPort()) {
        this.port = other.port;
      }
      if (other.isSetDatabase()) {
        this.database = other.database;
      }
      if (other.isSetSql()) {
        this.sql = other.sql;
      }
      if (other.isSetDkSqlConf()) {
        this.dkSqlConf = new DKSQLConf(other.dkSqlConf);
      }
    }

    public countIQL_args deepCopy() {
      return new countIQL_args(this);
    }

    @Override
    public void clear() {
      this.hostIp = null;
      this.port = null;
      this.database = null;
      this.sql = null;
      this.dkSqlConf = null;
    }

    public java.lang.String getHostIp() {
      return this.hostIp;
    }

    public countIQL_args setHostIp(java.lang.String hostIp) {
      this.hostIp = hostIp;
      return this;
    }

    public void unsetHostIp() {
      this.hostIp = null;
    }

    /** Returns true if field hostIp is set (has been assigned a value) and false otherwise */
    public boolean isSetHostIp() {
      return this.hostIp != null;
    }

    public void setHostIpIsSet(boolean value) {
      if (!value) {
        this.hostIp = null;
      }
    }

    public java.lang.String getPort() {
      return this.port;
    }

    public countIQL_args setPort(java.lang.String port) {
      this.port = port;
      return this;
    }

    public void unsetPort() {
      this.port = null;
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return this.port != null;
    }

    public void setPortIsSet(boolean value) {
      if (!value) {
        this.port = null;
      }
    }

    public java.lang.String getDatabase() {
      return this.database;
    }

    public countIQL_args setDatabase(java.lang.String database) {
      this.database = database;
      return this;
    }

    public void unsetDatabase() {
      this.database = null;
    }

    /** Returns true if field database is set (has been assigned a value) and false otherwise */
    public boolean isSetDatabase() {
      return this.database != null;
    }

    public void setDatabaseIsSet(boolean value) {
      if (!value) {
        this.database = null;
      }
    }

    public java.lang.String getSql() {
      return this.sql;
    }

    public countIQL_args setSql(java.lang.String sql) {
      this.sql = sql;
      return this;
    }

    public void unsetSql() {
      this.sql = null;
    }

    /** Returns true if field sql is set (has been assigned a value) and false otherwise */
    public boolean isSetSql() {
      return this.sql != null;
    }

    public void setSqlIsSet(boolean value) {
      if (!value) {
        this.sql = null;
      }
    }

    public DKSQLConf getDkSqlConf() {
      return this.dkSqlConf;
    }

    public countIQL_args setDkSqlConf(DKSQLConf dkSqlConf) {
      this.dkSqlConf = dkSqlConf;
      return this;
    }

    public void unsetDkSqlConf() {
      this.dkSqlConf = null;
    }

    /** Returns true if field dkSqlConf is set (has been assigned a value) and false otherwise */
    public boolean isSetDkSqlConf() {
      return this.dkSqlConf != null;
    }

    public void setDkSqlConfIsSet(boolean value) {
      if (!value) {
        this.dkSqlConf = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case HOST_IP:
        if (value == null) {
          unsetHostIp();
        } else {
          setHostIp((java.lang.String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((java.lang.String)value);
        }
        break;

      case DATABASE:
        if (value == null) {
          unsetDatabase();
        } else {
          setDatabase((java.lang.String)value);
        }
        break;

      case SQL:
        if (value == null) {
          unsetSql();
        } else {
          setSql((java.lang.String)value);
        }
        break;

      case DK_SQL_CONF:
        if (value == null) {
          unsetDkSqlConf();
        } else {
          setDkSqlConf((DKSQLConf)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HOST_IP:
        return getHostIp();

      case PORT:
        return getPort();

      case DATABASE:
        return getDatabase();

      case SQL:
        return getSql();

      case DK_SQL_CONF:
        return getDkSqlConf();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HOST_IP:
        return isSetHostIp();
      case PORT:
        return isSetPort();
      case DATABASE:
        return isSetDatabase();
      case SQL:
        return isSetSql();
      case DK_SQL_CONF:
        return isSetDkSqlConf();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countIQL_args)
        return this.equals((countIQL_args)that);
      return false;
    }

    public boolean equals(countIQL_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hostIp = true && this.isSetHostIp();
      boolean that_present_hostIp = true && that.isSetHostIp();
      if (this_present_hostIp || that_present_hostIp) {
        if (!(this_present_hostIp && that_present_hostIp))
          return false;
        if (!this.hostIp.equals(that.hostIp))
          return false;
      }

      boolean this_present_port = true && this.isSetPort();
      boolean that_present_port = true && that.isSetPort();
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (!this.port.equals(that.port))
          return false;
      }

      boolean this_present_database = true && this.isSetDatabase();
      boolean that_present_database = true && that.isSetDatabase();
      if (this_present_database || that_present_database) {
        if (!(this_present_database && that_present_database))
          return false;
        if (!this.database.equals(that.database))
          return false;
      }

      boolean this_present_sql = true && this.isSetSql();
      boolean that_present_sql = true && that.isSetSql();
      if (this_present_sql || that_present_sql) {
        if (!(this_present_sql && that_present_sql))
          return false;
        if (!this.sql.equals(that.sql))
          return false;
      }

      boolean this_present_dkSqlConf = true && this.isSetDkSqlConf();
      boolean that_present_dkSqlConf = true && that.isSetDkSqlConf();
      if (this_present_dkSqlConf || that_present_dkSqlConf) {
        if (!(this_present_dkSqlConf && that_present_dkSqlConf))
          return false;
        if (!this.dkSqlConf.equals(that.dkSqlConf))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHostIp()) ? 131071 : 524287);
      if (isSetHostIp())
        hashCode = hashCode * 8191 + hostIp.hashCode();

      hashCode = hashCode * 8191 + ((isSetPort()) ? 131071 : 524287);
      if (isSetPort())
        hashCode = hashCode * 8191 + port.hashCode();

      hashCode = hashCode * 8191 + ((isSetDatabase()) ? 131071 : 524287);
      if (isSetDatabase())
        hashCode = hashCode * 8191 + database.hashCode();

      hashCode = hashCode * 8191 + ((isSetSql()) ? 131071 : 524287);
      if (isSetSql())
        hashCode = hashCode * 8191 + sql.hashCode();

      hashCode = hashCode * 8191 + ((isSetDkSqlConf()) ? 131071 : 524287);
      if (isSetDkSqlConf())
        hashCode = hashCode * 8191 + dkSqlConf.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(countIQL_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetHostIp()).compareTo(other.isSetHostIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostIp, other.hostIp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDatabase()).compareTo(other.isSetDatabase());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDatabase()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.database, other.database);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSql()).compareTo(other.isSetSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sql, other.sql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDkSqlConf()).compareTo(other.isSetDkSqlConf());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDkSqlConf()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dkSqlConf, other.dkSqlConf);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countIQL_args(");
      boolean first = true;

      sb.append("hostIp:");
      if (this.hostIp == null) {
        sb.append("null");
      } else {
        sb.append(this.hostIp);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      if (this.port == null) {
        sb.append("null");
      } else {
        sb.append(this.port);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("database:");
      if (this.database == null) {
        sb.append("null");
      } else {
        sb.append(this.database);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sql:");
      if (this.sql == null) {
        sb.append("null");
      } else {
        sb.append(this.sql);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dkSqlConf:");
      if (this.dkSqlConf == null) {
        sb.append("null");
      } else {
        sb.append(this.dkSqlConf);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (dkSqlConf != null) {
        dkSqlConf.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countIQL_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countIQL_argsStandardScheme getScheme() {
        return new countIQL_argsStandardScheme();
      }
    }

    private static class countIQL_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<countIQL_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countIQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOST_IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostIp = iprot.readString();
                struct.setHostIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.port = iprot.readString();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATABASE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.database = iprot.readString();
                struct.setDatabaseIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sql = iprot.readString();
                struct.setSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DK_SQL_CONF
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.dkSqlConf = new DKSQLConf();
                struct.dkSqlConf.read(iprot);
                struct.setDkSqlConfIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countIQL_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hostIp != null) {
          oprot.writeFieldBegin(HOST_IP_FIELD_DESC);
          oprot.writeString(struct.hostIp);
          oprot.writeFieldEnd();
        }
        if (struct.port != null) {
          oprot.writeFieldBegin(PORT_FIELD_DESC);
          oprot.writeString(struct.port);
          oprot.writeFieldEnd();
        }
        if (struct.database != null) {
          oprot.writeFieldBegin(DATABASE_FIELD_DESC);
          oprot.writeString(struct.database);
          oprot.writeFieldEnd();
        }
        if (struct.sql != null) {
          oprot.writeFieldBegin(SQL_FIELD_DESC);
          oprot.writeString(struct.sql);
          oprot.writeFieldEnd();
        }
        if (struct.dkSqlConf != null) {
          oprot.writeFieldBegin(DK_SQL_CONF_FIELD_DESC);
          struct.dkSqlConf.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countIQL_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countIQL_argsTupleScheme getScheme() {
        return new countIQL_argsTupleScheme();
      }
    }

    private static class countIQL_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<countIQL_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countIQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHostIp()) {
          optionals.set(0);
        }
        if (struct.isSetPort()) {
          optionals.set(1);
        }
        if (struct.isSetDatabase()) {
          optionals.set(2);
        }
        if (struct.isSetSql()) {
          optionals.set(3);
        }
        if (struct.isSetDkSqlConf()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetHostIp()) {
          oprot.writeString(struct.hostIp);
        }
        if (struct.isSetPort()) {
          oprot.writeString(struct.port);
        }
        if (struct.isSetDatabase()) {
          oprot.writeString(struct.database);
        }
        if (struct.isSetSql()) {
          oprot.writeString(struct.sql);
        }
        if (struct.isSetDkSqlConf()) {
          struct.dkSqlConf.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countIQL_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.hostIp = iprot.readString();
          struct.setHostIpIsSet(true);
        }
        if (incoming.get(1)) {
          struct.port = iprot.readString();
          struct.setPortIsSet(true);
        }
        if (incoming.get(2)) {
          struct.database = iprot.readString();
          struct.setDatabaseIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sql = iprot.readString();
          struct.setSqlIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dkSqlConf = new DKSQLConf();
          struct.dkSqlConf.read(iprot);
          struct.setDkSqlConfIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class countIQL_result implements org.apache.thrift.TBase<countIQL_result, countIQL_result._Fields>, java.io.Serializable, Cloneable, Comparable<countIQL_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("countIQL_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new countIQL_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new countIQL_resultTupleSchemeFactory();

    public ResultEntity success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResultEntity.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(countIQL_result.class, metaDataMap);
    }

    public countIQL_result() {
    }

    public countIQL_result(
      ResultEntity success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public countIQL_result(countIQL_result other) {
      if (other.isSetSuccess()) {
        this.success = new ResultEntity(other.success);
      }
    }

    public countIQL_result deepCopy() {
      return new countIQL_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ResultEntity getSuccess() {
      return this.success;
    }

    public countIQL_result setSuccess(ResultEntity success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ResultEntity)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof countIQL_result)
        return this.equals((countIQL_result)that);
      return false;
    }

    public boolean equals(countIQL_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(countIQL_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("countIQL_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class countIQL_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countIQL_resultStandardScheme getScheme() {
        return new countIQL_resultStandardScheme();
      }
    }

    private static class countIQL_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<countIQL_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, countIQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ResultEntity();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, countIQL_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class countIQL_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public countIQL_resultTupleScheme getScheme() {
        return new countIQL_resultTupleScheme();
      }
    }

    private static class countIQL_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<countIQL_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, countIQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, countIQL_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ResultEntity();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
