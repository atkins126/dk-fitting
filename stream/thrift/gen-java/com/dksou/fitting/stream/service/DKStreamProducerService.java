/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.dksou.kafka.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-08")
public class DKStreamProducerService {

  public interface Iface {

    /**
     * 创建kafka队列
     * @param topicName 队列名称
     * @param partitions 分区数量
     * @param replicationFactor topic中数据的副本数量
     * 
     * 
     * @param topicName
     * @param partitions
     * @param replicationFactor
     */
    public void createTopic(java.lang.String topicName, int partitions, int replicationFactor) throws org.apache.thrift.TException;

    /**
     * 删除一个topic，这个删除只是告知系统标记该topic要被删除。而不是立即删除。
     * @param topicName topic的名字
     * 
     * @param topicName
     */
    public void deleteTopic(java.lang.String topicName) throws org.apache.thrift.TException;

    /**
     * 判断一个topic是否已经存在。 包括已经被标记删除，还没有删除的topic。
     * @param topicName topic的名字
     * @return
     * 
     * @param topicName
     */
    public boolean topicIsExists(java.lang.String topicName) throws org.apache.thrift.TException;

    /**
     * 查询所有topic，包括已经被标记删除，还没有删除的topic。
     * @return topic的list
     */
    public java.util.List<java.lang.String> queryAllTopic() throws org.apache.thrift.TException;

    /**
     * 发送一条数据到指定topic中。
     * @param topicName topic的名称
     * @param key  键值 。 没有则填null
     * @param message 要发送的消息
     * 
     * @param topicName
     * @param key
     * @param message
     */
    public void streamDataToTopic(java.lang.String topicName, java.lang.String key, java.lang.String message) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createTopic(java.lang.String topicName, int partitions, int replicationFactor, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void deleteTopic(java.lang.String topicName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void topicIsExists(java.lang.String topicName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void queryAllTopic(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void streamDataToTopic(java.lang.String topicName, java.lang.String key, java.lang.String message, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void createTopic(java.lang.String topicName, int partitions, int replicationFactor) throws org.apache.thrift.TException
    {
      send_createTopic(topicName, partitions, replicationFactor);
      recv_createTopic();
    }

    public void send_createTopic(java.lang.String topicName, int partitions, int replicationFactor) throws org.apache.thrift.TException
    {
      createTopic_args args = new createTopic_args();
      args.setTopicName(topicName);
      args.setPartitions(partitions);
      args.setReplicationFactor(replicationFactor);
      sendBase("createTopic", args);
    }

    public void recv_createTopic() throws org.apache.thrift.TException
    {
      createTopic_result result = new createTopic_result();
      receiveBase(result, "createTopic");
      return;
    }

    public void deleteTopic(java.lang.String topicName) throws org.apache.thrift.TException
    {
      send_deleteTopic(topicName);
      recv_deleteTopic();
    }

    public void send_deleteTopic(java.lang.String topicName) throws org.apache.thrift.TException
    {
      deleteTopic_args args = new deleteTopic_args();
      args.setTopicName(topicName);
      sendBase("deleteTopic", args);
    }

    public void recv_deleteTopic() throws org.apache.thrift.TException
    {
      deleteTopic_result result = new deleteTopic_result();
      receiveBase(result, "deleteTopic");
      return;
    }

    public boolean topicIsExists(java.lang.String topicName) throws org.apache.thrift.TException
    {
      send_topicIsExists(topicName);
      return recv_topicIsExists();
    }

    public void send_topicIsExists(java.lang.String topicName) throws org.apache.thrift.TException
    {
      topicIsExists_args args = new topicIsExists_args();
      args.setTopicName(topicName);
      sendBase("topicIsExists", args);
    }

    public boolean recv_topicIsExists() throws org.apache.thrift.TException
    {
      topicIsExists_result result = new topicIsExists_result();
      receiveBase(result, "topicIsExists");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicIsExists failed: unknown result");
    }

    public java.util.List<java.lang.String> queryAllTopic() throws org.apache.thrift.TException
    {
      send_queryAllTopic();
      return recv_queryAllTopic();
    }

    public void send_queryAllTopic() throws org.apache.thrift.TException
    {
      queryAllTopic_args args = new queryAllTopic_args();
      sendBase("queryAllTopic", args);
    }

    public java.util.List<java.lang.String> recv_queryAllTopic() throws org.apache.thrift.TException
    {
      queryAllTopic_result result = new queryAllTopic_result();
      receiveBase(result, "queryAllTopic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryAllTopic failed: unknown result");
    }

    public void streamDataToTopic(java.lang.String topicName, java.lang.String key, java.lang.String message) throws org.apache.thrift.TException
    {
      send_streamDataToTopic(topicName, key, message);
      recv_streamDataToTopic();
    }

    public void send_streamDataToTopic(java.lang.String topicName, java.lang.String key, java.lang.String message) throws org.apache.thrift.TException
    {
      streamDataToTopic_args args = new streamDataToTopic_args();
      args.setTopicName(topicName);
      args.setKey(key);
      args.setMessage(message);
      sendBase("streamDataToTopic", args);
    }

    public void recv_streamDataToTopic() throws org.apache.thrift.TException
    {
      streamDataToTopic_result result = new streamDataToTopic_result();
      receiveBase(result, "streamDataToTopic");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createTopic(java.lang.String topicName, int partitions, int replicationFactor, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createTopic_call method_call = new createTopic_call(topicName, partitions, replicationFactor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createTopic_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String topicName;
      private int partitions;
      private int replicationFactor;
      public createTopic_call(java.lang.String topicName, int partitions, int replicationFactor, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicName = topicName;
        this.partitions = partitions;
        this.replicationFactor = replicationFactor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createTopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createTopic_args args = new createTopic_args();
        args.setTopicName(topicName);
        args.setPartitions(partitions);
        args.setReplicationFactor(replicationFactor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void deleteTopic(java.lang.String topicName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteTopic_call method_call = new deleteTopic_call(topicName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteTopic_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String topicName;
      public deleteTopic_call(java.lang.String topicName, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicName = topicName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteTopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteTopic_args args = new deleteTopic_args();
        args.setTopicName(topicName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void topicIsExists(java.lang.String topicName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicIsExists_call method_call = new topicIsExists_call(topicName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicIsExists_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String topicName;
      public topicIsExists_call(java.lang.String topicName, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicName = topicName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicIsExists", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicIsExists_args args = new topicIsExists_args();
        args.setTopicName(topicName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicIsExists();
      }
    }

    public void queryAllTopic(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryAllTopic_call method_call = new queryAllTopic_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryAllTopic_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      public queryAllTopic_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAllTopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryAllTopic_args args = new queryAllTopic_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryAllTopic();
      }
    }

    public void streamDataToTopic(java.lang.String topicName, java.lang.String key, java.lang.String message, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      streamDataToTopic_call method_call = new streamDataToTopic_call(topicName, key, message, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class streamDataToTopic_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String topicName;
      private java.lang.String key;
      private java.lang.String message;
      public streamDataToTopic_call(java.lang.String topicName, java.lang.String key, java.lang.String message, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicName = topicName;
        this.key = key;
        this.message = message;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("streamDataToTopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        streamDataToTopic_args args = new streamDataToTopic_args();
        args.setTopicName(topicName);
        args.setKey(key);
        args.setMessage(message);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createTopic", new createTopic());
      processMap.put("deleteTopic", new deleteTopic());
      processMap.put("topicIsExists", new topicIsExists());
      processMap.put("queryAllTopic", new queryAllTopic());
      processMap.put("streamDataToTopic", new streamDataToTopic());
      return processMap;
    }

    public static class createTopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createTopic_args> {
      public createTopic() {
        super("createTopic");
      }

      public createTopic_args getEmptyArgsInstance() {
        return new createTopic_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public createTopic_result getResult(I iface, createTopic_args args) throws org.apache.thrift.TException {
        createTopic_result result = new createTopic_result();
        iface.createTopic(args.topicName, args.partitions, args.replicationFactor);
        return result;
      }
    }

    public static class deleteTopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteTopic_args> {
      public deleteTopic() {
        super("deleteTopic");
      }

      public deleteTopic_args getEmptyArgsInstance() {
        return new deleteTopic_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public deleteTopic_result getResult(I iface, deleteTopic_args args) throws org.apache.thrift.TException {
        deleteTopic_result result = new deleteTopic_result();
        iface.deleteTopic(args.topicName);
        return result;
      }
    }

    public static class topicIsExists<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicIsExists_args> {
      public topicIsExists() {
        super("topicIsExists");
      }

      public topicIsExists_args getEmptyArgsInstance() {
        return new topicIsExists_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public topicIsExists_result getResult(I iface, topicIsExists_args args) throws org.apache.thrift.TException {
        topicIsExists_result result = new topicIsExists_result();
        result.success = iface.topicIsExists(args.topicName);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class queryAllTopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryAllTopic_args> {
      public queryAllTopic() {
        super("queryAllTopic");
      }

      public queryAllTopic_args getEmptyArgsInstance() {
        return new queryAllTopic_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public queryAllTopic_result getResult(I iface, queryAllTopic_args args) throws org.apache.thrift.TException {
        queryAllTopic_result result = new queryAllTopic_result();
        result.success = iface.queryAllTopic();
        return result;
      }
    }

    public static class streamDataToTopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, streamDataToTopic_args> {
      public streamDataToTopic() {
        super("streamDataToTopic");
      }

      public streamDataToTopic_args getEmptyArgsInstance() {
        return new streamDataToTopic_args();
      }

      protected boolean isOneway() {
        return false;
      }


      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public streamDataToTopic_result getResult(I iface, streamDataToTopic_args args) throws org.apache.thrift.TException {
        streamDataToTopic_result result = new streamDataToTopic_result();
        iface.streamDataToTopic(args.topicName, args.key, args.message);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createTopic", new createTopic());
      processMap.put("deleteTopic", new deleteTopic());
      processMap.put("topicIsExists", new topicIsExists());
      processMap.put("queryAllTopic", new queryAllTopic());
      processMap.put("streamDataToTopic", new streamDataToTopic());
      return processMap;
    }

    public static class createTopic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createTopic_args, Void> {
      public createTopic() {
        super("createTopic");
      }

      public createTopic_args getEmptyArgsInstance() {
        return new createTopic_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            createTopic_result result = new createTopic_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createTopic_result result = new createTopic_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createTopic_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.createTopic(args.topicName, args.partitions, args.replicationFactor,resultHandler);
      }
    }

    public static class deleteTopic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteTopic_args, Void> {
      public deleteTopic() {
        super("deleteTopic");
      }

      public deleteTopic_args getEmptyArgsInstance() {
        return new deleteTopic_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteTopic_result result = new deleteTopic_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteTopic_result result = new deleteTopic_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteTopic_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteTopic(args.topicName,resultHandler);
      }
    }

    public static class topicIsExists<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicIsExists_args, java.lang.Boolean> {
      public topicIsExists() {
        super("topicIsExists");
      }

      public topicIsExists_args getEmptyArgsInstance() {
        return new topicIsExists_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            topicIsExists_result result = new topicIsExists_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicIsExists_result result = new topicIsExists_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicIsExists_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.topicIsExists(args.topicName,resultHandler);
      }
    }

    public static class queryAllTopic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryAllTopic_args, java.util.List<java.lang.String>> {
      public queryAllTopic() {
        super("queryAllTopic");
      }

      public queryAllTopic_args getEmptyArgsInstance() {
        return new queryAllTopic_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            queryAllTopic_result result = new queryAllTopic_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryAllTopic_result result = new queryAllTopic_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryAllTopic_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.queryAllTopic(resultHandler);
      }
    }

    public static class streamDataToTopic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, streamDataToTopic_args, Void> {
      public streamDataToTopic() {
        super("streamDataToTopic");
      }

      public streamDataToTopic_args getEmptyArgsInstance() {
        return new streamDataToTopic_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            streamDataToTopic_result result = new streamDataToTopic_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            streamDataToTopic_result result = new streamDataToTopic_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, streamDataToTopic_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.streamDataToTopic(args.topicName, args.key, args.message,resultHandler);
      }
    }

  }

  public static class createTopic_args implements org.apache.thrift.TBase<createTopic_args, createTopic_args._Fields>, java.io.Serializable, Cloneable, Comparable<createTopic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createTopic_args");

    private static final org.apache.thrift.protocol.TField TOPIC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("topicName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARTITIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("partitions", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField REPLICATION_FACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("replicationFactor", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createTopic_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createTopic_argsTupleSchemeFactory();

    public java.lang.String topicName; // required
    public int partitions; // required
    public int replicationFactor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_NAME((short)1, "topicName"),
      PARTITIONS((short)2, "partitions"),
      REPLICATION_FACTOR((short)3, "replicationFactor");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_NAME
            return TOPIC_NAME;
          case 2: // PARTITIONS
            return PARTITIONS;
          case 3: // REPLICATION_FACTOR
            return REPLICATION_FACTOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PARTITIONS_ISSET_ID = 0;
    private static final int __REPLICATIONFACTOR_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_NAME, new org.apache.thrift.meta_data.FieldMetaData("topicName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PARTITIONS, new org.apache.thrift.meta_data.FieldMetaData("partitions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REPLICATION_FACTOR, new org.apache.thrift.meta_data.FieldMetaData("replicationFactor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createTopic_args.class, metaDataMap);
    }

    public createTopic_args() {
    }

    public createTopic_args(
      java.lang.String topicName,
      int partitions,
      int replicationFactor)
    {
      this();
      this.topicName = topicName;
      this.partitions = partitions;
      setPartitionsIsSet(true);
      this.replicationFactor = replicationFactor;
      setReplicationFactorIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTopic_args(createTopic_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTopicName()) {
        this.topicName = other.topicName;
      }
      this.partitions = other.partitions;
      this.replicationFactor = other.replicationFactor;
    }

    public createTopic_args deepCopy() {
      return new createTopic_args(this);
    }


    public void clear() {
      this.topicName = null;
      setPartitionsIsSet(false);
      this.partitions = 0;
      setReplicationFactorIsSet(false);
      this.replicationFactor = 0;
    }

    public java.lang.String getTopicName() {
      return this.topicName;
    }

    public createTopic_args setTopicName(java.lang.String topicName) {
      this.topicName = topicName;
      return this;
    }

    public void unsetTopicName() {
      this.topicName = null;
    }

    /** Returns true if field topicName is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicName() {
      return this.topicName != null;
    }

    public void setTopicNameIsSet(boolean value) {
      if (!value) {
        this.topicName = null;
      }
    }

    public int getPartitions() {
      return this.partitions;
    }

    public createTopic_args setPartitions(int partitions) {
      this.partitions = partitions;
      setPartitionsIsSet(true);
      return this;
    }

    public void unsetPartitions() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARTITIONS_ISSET_ID);
    }

    /** Returns true if field partitions is set (has been assigned a value) and false otherwise */
    public boolean isSetPartitions() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARTITIONS_ISSET_ID);
    }

    public void setPartitionsIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARTITIONS_ISSET_ID, value);
    }

    public int getReplicationFactor() {
      return this.replicationFactor;
    }

    public createTopic_args setReplicationFactor(int replicationFactor) {
      this.replicationFactor = replicationFactor;
      setReplicationFactorIsSet(true);
      return this;
    }

    public void unsetReplicationFactor() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPLICATIONFACTOR_ISSET_ID);
    }

    /** Returns true if field replicationFactor is set (has been assigned a value) and false otherwise */
    public boolean isSetReplicationFactor() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPLICATIONFACTOR_ISSET_ID);
    }

    public void setReplicationFactorIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPLICATIONFACTOR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_NAME:
        if (value == null) {
          unsetTopicName();
        } else {
          setTopicName((java.lang.String)value);
        }
        break;

      case PARTITIONS:
        if (value == null) {
          unsetPartitions();
        } else {
          setPartitions((java.lang.Integer)value);
        }
        break;

      case REPLICATION_FACTOR:
        if (value == null) {
          unsetReplicationFactor();
        } else {
          setReplicationFactor((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_NAME:
        return getTopicName();

      case PARTITIONS:
        return getPartitions();

      case REPLICATION_FACTOR:
        return getReplicationFactor();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_NAME:
        return isSetTopicName();
      case PARTITIONS:
        return isSetPartitions();
      case REPLICATION_FACTOR:
        return isSetReplicationFactor();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createTopic_args)
        return this.equals((createTopic_args)that);
      return false;
    }

    public boolean equals(createTopic_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicName = true && this.isSetTopicName();
      boolean that_present_topicName = true && that.isSetTopicName();
      if (this_present_topicName || that_present_topicName) {
        if (!(this_present_topicName && that_present_topicName))
          return false;
        if (!this.topicName.equals(that.topicName))
          return false;
      }

      boolean this_present_partitions = true;
      boolean that_present_partitions = true;
      if (this_present_partitions || that_present_partitions) {
        if (!(this_present_partitions && that_present_partitions))
          return false;
        if (this.partitions != that.partitions)
          return false;
      }

      boolean this_present_replicationFactor = true;
      boolean that_present_replicationFactor = true;
      if (this_present_replicationFactor || that_present_replicationFactor) {
        if (!(this_present_replicationFactor && that_present_replicationFactor))
          return false;
        if (this.replicationFactor != that.replicationFactor)
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicName()) ? 131071 : 524287);
      if (isSetTopicName())
        hashCode = hashCode * 8191 + topicName.hashCode();

      hashCode = hashCode * 8191 + partitions;

      hashCode = hashCode * 8191 + replicationFactor;

      return hashCode;
    }


    public int compareTo(createTopic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicName()).compareTo(other.isSetTopicName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicName, other.topicName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPartitions()).compareTo(other.isSetPartitions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPartitions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partitions, other.partitions);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReplicationFactor()).compareTo(other.isSetReplicationFactor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReplicationFactor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replicationFactor, other.replicationFactor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createTopic_args(");
      boolean first = true;

      sb.append("topicName:");
      if (this.topicName == null) {
        sb.append("null");
      } else {
        sb.append(this.topicName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("partitions:");
      sb.append(this.partitions);
      first = false;
      if (!first) sb.append(", ");
      sb.append("replicationFactor:");
      sb.append(this.replicationFactor);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createTopic_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createTopic_argsStandardScheme getScheme() {
        return new createTopic_argsStandardScheme();
      }
    }

    private static class createTopic_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createTopic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topicName = iprot.readString();
                struct.setTopicNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARTITIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.partitions = iprot.readI32();
                struct.setPartitionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REPLICATION_FACTOR
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.replicationFactor = iprot.readI32();
                struct.setReplicationFactorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createTopic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicName != null) {
          oprot.writeFieldBegin(TOPIC_NAME_FIELD_DESC);
          oprot.writeString(struct.topicName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PARTITIONS_FIELD_DESC);
        oprot.writeI32(struct.partitions);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REPLICATION_FACTOR_FIELD_DESC);
        oprot.writeI32(struct.replicationFactor);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createTopic_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createTopic_argsTupleScheme getScheme() {
        return new createTopic_argsTupleScheme();
      }
    }

    private static class createTopic_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createTopic_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, createTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicName()) {
          optionals.set(0);
        }
        if (struct.isSetPartitions()) {
          optionals.set(1);
        }
        if (struct.isSetReplicationFactor()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTopicName()) {
          oprot.writeString(struct.topicName);
        }
        if (struct.isSetPartitions()) {
          oprot.writeI32(struct.partitions);
        }
        if (struct.isSetReplicationFactor()) {
          oprot.writeI32(struct.replicationFactor);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, createTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.topicName = iprot.readString();
          struct.setTopicNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.partitions = iprot.readI32();
          struct.setPartitionsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.replicationFactor = iprot.readI32();
          struct.setReplicationFactorIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createTopic_result implements org.apache.thrift.TBase<createTopic_result, createTopic_result._Fields>, java.io.Serializable, Cloneable, Comparable<createTopic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createTopic_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createTopic_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createTopic_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createTopic_result.class, metaDataMap);
    }

    public createTopic_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTopic_result(createTopic_result other) {
    }

    public createTopic_result deepCopy() {
      return new createTopic_result(this);
    }


    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createTopic_result)
        return this.equals((createTopic_result)that);
      return false;
    }

    public boolean equals(createTopic_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }


    public int compareTo(createTopic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createTopic_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createTopic_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createTopic_resultStandardScheme getScheme() {
        return new createTopic_resultStandardScheme();
      }
    }

    private static class createTopic_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createTopic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createTopic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createTopic_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createTopic_resultTupleScheme getScheme() {
        return new createTopic_resultTupleScheme();
      }
    }

    private static class createTopic_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createTopic_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, createTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, createTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteTopic_args implements org.apache.thrift.TBase<deleteTopic_args, deleteTopic_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTopic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTopic_args");

    private static final org.apache.thrift.protocol.TField TOPIC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("topicName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteTopic_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteTopic_argsTupleSchemeFactory();

    public java.lang.String topicName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_NAME((short)1, "topicName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_NAME
            return TOPIC_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_NAME, new org.apache.thrift.meta_data.FieldMetaData("topicName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTopic_args.class, metaDataMap);
    }

    public deleteTopic_args() {
    }

    public deleteTopic_args(
      java.lang.String topicName)
    {
      this();
      this.topicName = topicName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTopic_args(deleteTopic_args other) {
      if (other.isSetTopicName()) {
        this.topicName = other.topicName;
      }
    }

    public deleteTopic_args deepCopy() {
      return new deleteTopic_args(this);
    }


    public void clear() {
      this.topicName = null;
    }

    public java.lang.String getTopicName() {
      return this.topicName;
    }

    public deleteTopic_args setTopicName(java.lang.String topicName) {
      this.topicName = topicName;
      return this;
    }

    public void unsetTopicName() {
      this.topicName = null;
    }

    /** Returns true if field topicName is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicName() {
      return this.topicName != null;
    }

    public void setTopicNameIsSet(boolean value) {
      if (!value) {
        this.topicName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_NAME:
        if (value == null) {
          unsetTopicName();
        } else {
          setTopicName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_NAME:
        return getTopicName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_NAME:
        return isSetTopicName();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTopic_args)
        return this.equals((deleteTopic_args)that);
      return false;
    }

    public boolean equals(deleteTopic_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicName = true && this.isSetTopicName();
      boolean that_present_topicName = true && that.isSetTopicName();
      if (this_present_topicName || that_present_topicName) {
        if (!(this_present_topicName && that_present_topicName))
          return false;
        if (!this.topicName.equals(that.topicName))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicName()) ? 131071 : 524287);
      if (isSetTopicName())
        hashCode = hashCode * 8191 + topicName.hashCode();

      return hashCode;
    }


    public int compareTo(deleteTopic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicName()).compareTo(other.isSetTopicName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicName, other.topicName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteTopic_args(");
      boolean first = true;

      sb.append("topicName:");
      if (this.topicName == null) {
        sb.append("null");
      } else {
        sb.append(this.topicName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTopic_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteTopic_argsStandardScheme getScheme() {
        return new deleteTopic_argsStandardScheme();
      }
    }

    private static class deleteTopic_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteTopic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topicName = iprot.readString();
                struct.setTopicNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTopic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicName != null) {
          oprot.writeFieldBegin(TOPIC_NAME_FIELD_DESC);
          oprot.writeString(struct.topicName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTopic_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteTopic_argsTupleScheme getScheme() {
        return new deleteTopic_argsTupleScheme();
      }
    }

    private static class deleteTopic_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteTopic_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicName()) {
          oprot.writeString(struct.topicName);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicName = iprot.readString();
          struct.setTopicNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteTopic_result implements org.apache.thrift.TBase<deleteTopic_result, deleteTopic_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteTopic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteTopic_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteTopic_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteTopic_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteTopic_result.class, metaDataMap);
    }

    public deleteTopic_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteTopic_result(deleteTopic_result other) {
    }

    public deleteTopic_result deepCopy() {
      return new deleteTopic_result(this);
    }


    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteTopic_result)
        return this.equals((deleteTopic_result)that);
      return false;
    }

    public boolean equals(deleteTopic_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }


    public int compareTo(deleteTopic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteTopic_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteTopic_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteTopic_resultStandardScheme getScheme() {
        return new deleteTopic_resultStandardScheme();
      }
    }

    private static class deleteTopic_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteTopic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteTopic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteTopic_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteTopic_resultTupleScheme getScheme() {
        return new deleteTopic_resultTupleScheme();
      }
    }

    private static class deleteTopic_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteTopic_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, deleteTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, deleteTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicIsExists_args implements org.apache.thrift.TBase<topicIsExists_args, topicIsExists_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicIsExists_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicIsExists_args");

    private static final org.apache.thrift.protocol.TField TOPIC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("topicName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicIsExists_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicIsExists_argsTupleSchemeFactory();

    public java.lang.String topicName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_NAME((short)1, "topicName");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_NAME
            return TOPIC_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_NAME, new org.apache.thrift.meta_data.FieldMetaData("topicName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicIsExists_args.class, metaDataMap);
    }

    public topicIsExists_args() {
    }

    public topicIsExists_args(
      java.lang.String topicName)
    {
      this();
      this.topicName = topicName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicIsExists_args(topicIsExists_args other) {
      if (other.isSetTopicName()) {
        this.topicName = other.topicName;
      }
    }

    public topicIsExists_args deepCopy() {
      return new topicIsExists_args(this);
    }


    public void clear() {
      this.topicName = null;
    }

    public java.lang.String getTopicName() {
      return this.topicName;
    }

    public topicIsExists_args setTopicName(java.lang.String topicName) {
      this.topicName = topicName;
      return this;
    }

    public void unsetTopicName() {
      this.topicName = null;
    }

    /** Returns true if field topicName is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicName() {
      return this.topicName != null;
    }

    public void setTopicNameIsSet(boolean value) {
      if (!value) {
        this.topicName = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_NAME:
        if (value == null) {
          unsetTopicName();
        } else {
          setTopicName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_NAME:
        return getTopicName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_NAME:
        return isSetTopicName();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicIsExists_args)
        return this.equals((topicIsExists_args)that);
      return false;
    }

    public boolean equals(topicIsExists_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicName = true && this.isSetTopicName();
      boolean that_present_topicName = true && that.isSetTopicName();
      if (this_present_topicName || that_present_topicName) {
        if (!(this_present_topicName && that_present_topicName))
          return false;
        if (!this.topicName.equals(that.topicName))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicName()) ? 131071 : 524287);
      if (isSetTopicName())
        hashCode = hashCode * 8191 + topicName.hashCode();

      return hashCode;
    }


    public int compareTo(topicIsExists_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicName()).compareTo(other.isSetTopicName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicName, other.topicName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicIsExists_args(");
      boolean first = true;

      sb.append("topicName:");
      if (this.topicName == null) {
        sb.append("null");
      } else {
        sb.append(this.topicName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicIsExists_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicIsExists_argsStandardScheme getScheme() {
        return new topicIsExists_argsStandardScheme();
      }
    }

    private static class topicIsExists_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicIsExists_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicIsExists_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topicName = iprot.readString();
                struct.setTopicNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicIsExists_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicName != null) {
          oprot.writeFieldBegin(TOPIC_NAME_FIELD_DESC);
          oprot.writeString(struct.topicName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicIsExists_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicIsExists_argsTupleScheme getScheme() {
        return new topicIsExists_argsTupleScheme();
      }
    }

    private static class topicIsExists_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicIsExists_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, topicIsExists_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicName()) {
          oprot.writeString(struct.topicName);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, topicIsExists_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicName = iprot.readString();
          struct.setTopicNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicIsExists_result implements org.apache.thrift.TBase<topicIsExists_result, topicIsExists_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicIsExists_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicIsExists_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicIsExists_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicIsExists_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicIsExists_result.class, metaDataMap);
    }

    public topicIsExists_result() {
    }

    public topicIsExists_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicIsExists_result(topicIsExists_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicIsExists_result deepCopy() {
      return new topicIsExists_result(this);
    }


    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public topicIsExists_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicIsExists_result)
        return this.equals((topicIsExists_result)that);
      return false;
    }

    public boolean equals(topicIsExists_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }


    public int compareTo(topicIsExists_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicIsExists_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicIsExists_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicIsExists_resultStandardScheme getScheme() {
        return new topicIsExists_resultStandardScheme();
      }
    }

    private static class topicIsExists_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicIsExists_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicIsExists_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicIsExists_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicIsExists_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicIsExists_resultTupleScheme getScheme() {
        return new topicIsExists_resultTupleScheme();
      }
    }

    private static class topicIsExists_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicIsExists_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, topicIsExists_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, topicIsExists_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryAllTopic_args implements org.apache.thrift.TBase<queryAllTopic_args, queryAllTopic_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllTopic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllTopic_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAllTopic_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAllTopic_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllTopic_args.class, metaDataMap);
    }

    public queryAllTopic_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAllTopic_args(queryAllTopic_args other) {
    }

    public queryAllTopic_args deepCopy() {
      return new queryAllTopic_args(this);
    }


    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAllTopic_args)
        return this.equals((queryAllTopic_args)that);
      return false;
    }

    public boolean equals(queryAllTopic_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }


    public int compareTo(queryAllTopic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryAllTopic_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAllTopic_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryAllTopic_argsStandardScheme getScheme() {
        return new queryAllTopic_argsStandardScheme();
      }
    }

    private static class queryAllTopic_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAllTopic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllTopic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAllTopic_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryAllTopic_argsTupleScheme getScheme() {
        return new queryAllTopic_argsTupleScheme();
      }
    }

    private static class queryAllTopic_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAllTopic_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, queryAllTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, queryAllTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryAllTopic_result implements org.apache.thrift.TBase<queryAllTopic_result, queryAllTopic_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryAllTopic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAllTopic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAllTopic_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAllTopic_resultTupleSchemeFactory();

    public java.util.List<java.lang.String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAllTopic_result.class, metaDataMap);
    }

    public queryAllTopic_result() {
    }

    public queryAllTopic_result(
      java.util.List<java.lang.String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAllTopic_result(queryAllTopic_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
    }

    public queryAllTopic_result deepCopy() {
      return new queryAllTopic_result(this);
    }


    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public queryAllTopic_result setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAllTopic_result)
        return this.equals((queryAllTopic_result)that);
      return false;
    }

    public boolean equals(queryAllTopic_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }


    public int compareTo(queryAllTopic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryAllTopic_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAllTopic_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryAllTopic_resultStandardScheme getScheme() {
        return new queryAllTopic_resultStandardScheme();
      }
    }

    private static class queryAllTopic_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAllTopic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAllTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list0.size);
                  java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAllTopic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter3 : struct.success)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAllTopic_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryAllTopic_resultTupleScheme getScheme() {
        return new queryAllTopic_resultTupleScheme();
      }
    }

    private static class queryAllTopic_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAllTopic_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, queryAllTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter4 : struct.success)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, queryAllTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list5.size);
            java.lang.String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class streamDataToTopic_args implements org.apache.thrift.TBase<streamDataToTopic_args, streamDataToTopic_args._Fields>, java.io.Serializable, Cloneable, Comparable<streamDataToTopic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("streamDataToTopic_args");

    private static final org.apache.thrift.protocol.TField TOPIC_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("topicName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new streamDataToTopic_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new streamDataToTopic_argsTupleSchemeFactory();

    public java.lang.String topicName; // required
    public java.lang.String key; // required
    public java.lang.String message; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_NAME((short)1, "topicName"),
      KEY((short)2, "key"),
      MESSAGE((short)3, "message");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_NAME
            return TOPIC_NAME;
          case 2: // KEY
            return KEY;
          case 3: // MESSAGE
            return MESSAGE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_NAME, new org.apache.thrift.meta_data.FieldMetaData("topicName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(streamDataToTopic_args.class, metaDataMap);
    }

    public streamDataToTopic_args() {
    }

    public streamDataToTopic_args(
      java.lang.String topicName,
      java.lang.String key,
      java.lang.String message)
    {
      this();
      this.topicName = topicName;
      this.key = key;
      this.message = message;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public streamDataToTopic_args(streamDataToTopic_args other) {
      if (other.isSetTopicName()) {
        this.topicName = other.topicName;
      }
      if (other.isSetKey()) {
        this.key = other.key;
      }
      if (other.isSetMessage()) {
        this.message = other.message;
      }
    }

    public streamDataToTopic_args deepCopy() {
      return new streamDataToTopic_args(this);
    }


    public void clear() {
      this.topicName = null;
      this.key = null;
      this.message = null;
    }

    public java.lang.String getTopicName() {
      return this.topicName;
    }

    public streamDataToTopic_args setTopicName(java.lang.String topicName) {
      this.topicName = topicName;
      return this;
    }

    public void unsetTopicName() {
      this.topicName = null;
    }

    /** Returns true if field topicName is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicName() {
      return this.topicName != null;
    }

    public void setTopicNameIsSet(boolean value) {
      if (!value) {
        this.topicName = null;
      }
    }

    public java.lang.String getKey() {
      return this.key;
    }

    public streamDataToTopic_args setKey(java.lang.String key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public java.lang.String getMessage() {
      return this.message;
    }

    public streamDataToTopic_args setMessage(java.lang.String message) {
      this.message = message;
      return this;
    }

    public void unsetMessage() {
      this.message = null;
    }

    /** Returns true if field message is set (has been assigned a value) and false otherwise */
    public boolean isSetMessage() {
      return this.message != null;
    }

    public void setMessageIsSet(boolean value) {
      if (!value) {
        this.message = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_NAME:
        if (value == null) {
          unsetTopicName();
        } else {
          setTopicName((java.lang.String)value);
        }
        break;

      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((java.lang.String)value);
        }
        break;

      case MESSAGE:
        if (value == null) {
          unsetMessage();
        } else {
          setMessage((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_NAME:
        return getTopicName();

      case KEY:
        return getKey();

      case MESSAGE:
        return getMessage();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_NAME:
        return isSetTopicName();
      case KEY:
        return isSetKey();
      case MESSAGE:
        return isSetMessage();
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof streamDataToTopic_args)
        return this.equals((streamDataToTopic_args)that);
      return false;
    }

    public boolean equals(streamDataToTopic_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicName = true && this.isSetTopicName();
      boolean that_present_topicName = true && that.isSetTopicName();
      if (this_present_topicName || that_present_topicName) {
        if (!(this_present_topicName && that_present_topicName))
          return false;
        if (!this.topicName.equals(that.topicName))
          return false;
      }

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_message = true && this.isSetMessage();
      boolean that_present_message = true && that.isSetMessage();
      if (this_present_message || that_present_message) {
        if (!(this_present_message && that_present_message))
          return false;
        if (!this.message.equals(that.message))
          return false;
      }

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicName()) ? 131071 : 524287);
      if (isSetTopicName())
        hashCode = hashCode * 8191 + topicName.hashCode();

      hashCode = hashCode * 8191 + ((isSetKey()) ? 131071 : 524287);
      if (isSetKey())
        hashCode = hashCode * 8191 + key.hashCode();

      hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
      if (isSetMessage())
        hashCode = hashCode * 8191 + message.hashCode();

      return hashCode;
    }


    public int compareTo(streamDataToTopic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicName()).compareTo(other.isSetTopicName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicName, other.topicName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessage()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("streamDataToTopic_args(");
      boolean first = true;

      sb.append("topicName:");
      if (this.topicName == null) {
        sb.append("null");
      } else {
        sb.append(this.topicName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class streamDataToTopic_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public streamDataToTopic_argsStandardScheme getScheme() {
        return new streamDataToTopic_argsStandardScheme();
      }
    }

    private static class streamDataToTopic_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<streamDataToTopic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, streamDataToTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.topicName = iprot.readString();
                struct.setTopicNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.key = iprot.readString();
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MESSAGE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.message = iprot.readString();
                struct.setMessageIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, streamDataToTopic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicName != null) {
          oprot.writeFieldBegin(TOPIC_NAME_FIELD_DESC);
          oprot.writeString(struct.topicName);
          oprot.writeFieldEnd();
        }
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          oprot.writeString(struct.key);
          oprot.writeFieldEnd();
        }
        if (struct.message != null) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class streamDataToTopic_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public streamDataToTopic_argsTupleScheme getScheme() {
        return new streamDataToTopic_argsTupleScheme();
      }
    }

    private static class streamDataToTopic_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<streamDataToTopic_args> {


      public void write(org.apache.thrift.protocol.TProtocol prot, streamDataToTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicName()) {
          optionals.set(0);
        }
        if (struct.isSetKey()) {
          optionals.set(1);
        }
        if (struct.isSetMessage()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTopicName()) {
          oprot.writeString(struct.topicName);
        }
        if (struct.isSetKey()) {
          oprot.writeString(struct.key);
        }
        if (struct.isSetMessage()) {
          oprot.writeString(struct.message);
        }
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, streamDataToTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.topicName = iprot.readString();
          struct.setTopicNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.key = iprot.readString();
          struct.setKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.message = iprot.readString();
          struct.setMessageIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class streamDataToTopic_result implements org.apache.thrift.TBase<streamDataToTopic_result, streamDataToTopic_result._Fields>, java.io.Serializable, Cloneable, Comparable<streamDataToTopic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("streamDataToTopic_result");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new streamDataToTopic_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new streamDataToTopic_resultTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(streamDataToTopic_result.class, metaDataMap);
    }

    public streamDataToTopic_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public streamDataToTopic_result(streamDataToTopic_result other) {
    }

    public streamDataToTopic_result deepCopy() {
      return new streamDataToTopic_result(this);
    }


    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }


    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof streamDataToTopic_result)
        return this.equals((streamDataToTopic_result)that);
      return false;
    }

    public boolean equals(streamDataToTopic_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }


    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }


    public int compareTo(streamDataToTopic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }


    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("streamDataToTopic_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class streamDataToTopic_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public streamDataToTopic_resultStandardScheme getScheme() {
        return new streamDataToTopic_resultStandardScheme();
      }
    }

    private static class streamDataToTopic_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<streamDataToTopic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, streamDataToTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, streamDataToTopic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class streamDataToTopic_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public streamDataToTopic_resultTupleScheme getScheme() {
        return new streamDataToTopic_resultTupleScheme();
      }
    }

    private static class streamDataToTopic_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<streamDataToTopic_result> {


      public void write(org.apache.thrift.protocol.TProtocol prot, streamDataToTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }


      public void read(org.apache.thrift.protocol.TProtocol prot, streamDataToTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
